import {
  add_locations,
  check_target,
  hmr,
  legacy_api,
  legacy_rest_props,
  set_attributes,
  slot,
  toggle_class
} from "./chunk-NPQ6WN3W.js";
import "./chunk-SY6NINGQ.js";
import "./chunk-FVIZKTCK.js";
import {
  append,
  ns_template
} from "./chunk-JDRPLQSI.js";
import {
  FILENAME,
  HMR,
  child,
  mark_module_end,
  mark_module_start,
  next,
  pop,
  push,
  reset,
  set,
  template_effect
} from "./chunk-7Y42YMAV.js";
import "./chunk-IP2U24VQ.js";
import "./chunk-EXIRPMAV.js";
import "./chunk-5AQFBOJN.js";

// node_modules/svelte-bootstrap-icons/lib/_0CircleFill.svelte
mark_module_start();
_0CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_0CircleFill.svelte";
var root = add_locations(ns_template(`<svg><!><path d="M8 4.951c-1.008 0-1.629 1.09-1.629 2.895v.31c0 1.81.627 2.895 1.629 2.895s1.623-1.09 1.623-2.895v-.31c0-1.8-.621-2.895-1.623-2.895Z"></path><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-8.012 4.158c1.858 0 2.96-1.582 2.96-3.99V7.84c0-2.426-1.079-3.996-2.936-3.996-1.864 0-2.965 1.588-2.965 3.996v.328c0 2.42 1.09 3.99 2.941 3.99Z"></path></svg>`), _0CircleFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function _0CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _0CircleFill);
  var svg = root();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-0-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _0CircleFill = hmr(_0CircleFill, () => _0CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _0CircleFill[HMR].source;
    set(_0CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default = _0CircleFill;
mark_module_end(_0CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_0Circle.svelte
mark_module_start();
_0Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_0Circle.svelte";
var root2 = add_locations(ns_template(`<svg><!><path d="M7.988 12.158c-1.851 0-2.941-1.57-2.941-3.99V7.84c0-2.408 1.101-3.996 2.965-3.996 1.857 0 2.935 1.57 2.935 3.996v.328c0 2.408-1.101 3.99-2.959 3.99ZM8 4.951c-1.008 0-1.629 1.09-1.629 2.895v.31c0 1.81.627 2.895 1.629 2.895s1.623-1.09 1.623-2.895v-.31c0-1.8-.621-2.895-1.623-2.895Z"></path><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Z"></path></svg>`), _0Circle[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _0Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _0Circle);
  var svg = root2();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-0-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _0Circle = hmr(_0Circle, () => _0Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _0Circle[HMR].source;
    set(_0Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default = _0Circle;
mark_module_end(_0Circle);

// node_modules/svelte-bootstrap-icons/lib/_0SquareFill.svelte
mark_module_start();
_0SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_0SquareFill.svelte";
var root3 = add_locations(ns_template(`<svg><!><path d="M8 4.951c-1.008 0-1.629 1.09-1.629 2.895v.31c0 1.81.627 2.895 1.629 2.895s1.623-1.09 1.623-2.895v-.31c0-1.8-.621-2.895-1.623-2.895Z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm5.988 12.158c-1.851 0-2.941-1.57-2.941-3.99V7.84c0-2.408 1.101-3.996 2.965-3.996 1.857 0 2.935 1.57 2.935 3.996v.328c0 2.408-1.101 3.99-2.959 3.99Z"></path></svg>`), _0SquareFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function _0SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _0SquareFill);
  var svg = root3();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-0-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _0SquareFill = hmr(_0SquareFill, () => _0SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _0SquareFill[HMR].source;
    set(_0SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default = _0SquareFill;
mark_module_end(_0SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_0Square.svelte
mark_module_start();
_0Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_0Square.svelte";
var root4 = add_locations(ns_template(`<svg><!><path d="M7.988 12.158c-1.851 0-2.941-1.57-2.941-3.99V7.84c0-2.408 1.101-3.996 2.965-3.996 1.857 0 2.935 1.57 2.935 3.996v.328c0 2.408-1.101 3.99-2.959 3.99ZM8 4.951c-1.008 0-1.629 1.09-1.629 2.895v.31c0 1.81.627 2.895 1.629 2.895s1.623-1.09 1.623-2.895v-.31c0-1.8-.621-2.895-1.623-2.895Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _0Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _0Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _0Square);
  var svg = root4();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-0-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _0Square = hmr(_0Square, () => _0Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _0Square[HMR].source;
    set(_0Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default = _0Square;
mark_module_end(_0Square);

// node_modules/svelte-bootstrap-icons/lib/_1CircleFill.svelte
mark_module_start();
_1CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_1CircleFill.svelte";
var root5 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM9.283 4.002H7.971L6.072 5.385v1.271l1.834-1.318h.065V12h1.312V4.002Z"></path></svg>`), _1CircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _1CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _1CircleFill);
  var svg = root5();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-1-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _1CircleFill = hmr(_1CircleFill, () => _1CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _1CircleFill[HMR].source;
    set(_1CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default2 = _1CircleFill;
mark_module_end(_1CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_1Circle.svelte
mark_module_start();
_1Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_1Circle.svelte";
var root6 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM9.283 4.002V12H7.971V5.338h-.065L6.072 6.656V5.385l1.899-1.383h1.312Z"></path></svg>`), _1Circle[FILENAME], [[1, 0, [[1, 169]]]]);
function _1Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _1Circle);
  var svg = root6();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-1-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _1Circle = hmr(_1Circle, () => _1Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _1Circle[HMR].source;
    set(_1Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default2 = _1Circle;
mark_module_end(_1Circle);

// node_modules/svelte-bootstrap-icons/lib/_1SquareFill.svelte
mark_module_start();
_1SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_1SquareFill.svelte";
var root7 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm7.283 4.002V12H7.971V5.338h-.065L6.072 6.656V5.385l1.899-1.383h1.312Z"></path></svg>`), _1SquareFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _1SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _1SquareFill);
  var svg = root7();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-1-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _1SquareFill = hmr(_1SquareFill, () => _1SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _1SquareFill[HMR].source;
    set(_1SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default2 = _1SquareFill;
mark_module_end(_1SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_1Square.svelte
mark_module_start();
_1Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_1Square.svelte";
var root8 = add_locations(ns_template(`<svg><!><path d="M9.283 4.002V12H7.971V5.338h-.065L6.072 6.656V5.385l1.899-1.383h1.312Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _1Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _1Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _1Square);
  var svg = root8();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-1-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _1Square = hmr(_1Square, () => _1Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _1Square[HMR].source;
    set(_1Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default2 = _1Square;
mark_module_end(_1Square);

// node_modules/svelte-bootstrap-icons/lib/_123.svelte
mark_module_start();
_123[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_123.svelte";
var root9 = add_locations(ns_template(`<svg><!><path d="M2.873 11.297V4.142H1.699L0 5.379v1.137l1.64-1.18h.06v5.961h1.174Zm3.213-5.09v-.063c0-.618.44-1.169 1.196-1.169.676 0 1.174.44 1.174 1.106 0 .624-.42 1.101-.807 1.526L4.99 10.553v.744h4.78v-.99H6.643v-.069L8.41 8.252c.65-.724 1.237-1.332 1.237-2.27C9.646 4.849 8.723 4 7.308 4c-1.573 0-2.36 1.064-2.36 2.15v.057h1.138Zm6.559 1.883h.786c.823 0 1.374.481 1.379 1.179.01.707-.55 1.216-1.421 1.21-.77-.005-1.326-.419-1.379-.953h-1.095c.042 1.053.938 1.918 2.464 1.918 1.478 0 2.642-.839 2.62-2.144-.02-1.143-.922-1.651-1.551-1.714v-.063c.535-.09 1.347-.66 1.326-1.678-.026-1.053-.933-1.855-2.359-1.845-1.5.005-2.317.88-2.348 1.898h1.116c.032-.498.498-.944 1.206-.944.703 0 1.206.435 1.206 1.07.005.64-.504 1.106-1.2 1.106h-.75v.96Z"></path></svg>`), _123[FILENAME], [[1, 0, [[1, 164]]]]);
function _123($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _123);
  var svg = root9();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-123", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _123 = hmr(_123, () => _123[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _123[HMR].source;
    set(_123[HMR].source, module.default[HMR].original);
  });
}
var __default = _123;
mark_module_end(_123);

// node_modules/svelte-bootstrap-icons/lib/_2CircleFill.svelte
mark_module_start();
_2CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_2CircleFill.svelte";
var root10 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM6.646 6.24c0-.691.493-1.306 1.336-1.306.756 0 1.313.492 1.313 1.236 0 .697-.469 1.23-.902 1.705l-2.971 3.293V12h5.344v-1.107H7.268v-.077l1.974-2.22.096-.107c.688-.763 1.287-1.428 1.287-2.43 0-1.266-1.031-2.215-2.613-2.215-1.758 0-2.637 1.19-2.637 2.402v.065h1.271v-.07Z"></path></svg>`), _2CircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _2CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _2CircleFill);
  var svg = root10();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-2-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _2CircleFill = hmr(_2CircleFill, () => _2CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _2CircleFill[HMR].source;
    set(_2CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default3 = _2CircleFill;
mark_module_end(_2CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_2Circle.svelte
mark_module_start();
_2Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_2Circle.svelte";
var root11 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM6.646 6.24v.07H5.375v-.064c0-1.213.879-2.402 2.637-2.402 1.582 0 2.613.949 2.613 2.215 0 1.002-.6 1.667-1.287 2.43l-.096.107-1.974 2.22v.077h3.498V12H5.422v-.832l2.97-3.293c.434-.475.903-1.008.903-1.705 0-.744-.557-1.236-1.313-1.236-.843 0-1.336.615-1.336 1.306Z"></path></svg>`), _2Circle[FILENAME], [[1, 0, [[1, 169]]]]);
function _2Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _2Circle);
  var svg = root11();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-2-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _2Circle = hmr(_2Circle, () => _2Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _2Circle[HMR].source;
    set(_2Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default3 = _2Circle;
mark_module_end(_2Circle);

// node_modules/svelte-bootstrap-icons/lib/_2SquareFill.svelte
mark_module_start();
_2SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_2SquareFill.svelte";
var root12 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm4.646 6.24v.07H5.375v-.064c0-1.213.879-2.402 2.637-2.402 1.582 0 2.613.949 2.613 2.215 0 1.002-.6 1.667-1.287 2.43l-.096.107-1.974 2.22v.077h3.498V12H5.422v-.832l2.97-3.293c.434-.475.903-1.008.903-1.705 0-.744-.557-1.236-1.313-1.236-.843 0-1.336.615-1.336 1.306Z"></path></svg>`), _2SquareFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _2SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _2SquareFill);
  var svg = root12();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-2-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _2SquareFill = hmr(_2SquareFill, () => _2SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _2SquareFill[HMR].source;
    set(_2SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default3 = _2SquareFill;
mark_module_end(_2SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_2Square.svelte
mark_module_start();
_2Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_2Square.svelte";
var root13 = add_locations(ns_template(`<svg><!><path d="M6.646 6.24v.07H5.375v-.064c0-1.213.879-2.402 2.637-2.402 1.582 0 2.613.949 2.613 2.215 0 1.002-.6 1.667-1.287 2.43l-.096.107-1.974 2.22v.077h3.498V12H5.422v-.832l2.97-3.293c.434-.475.903-1.008.903-1.705 0-.744-.557-1.236-1.313-1.236-.843 0-1.336.615-1.336 1.306Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _2Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _2Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _2Square);
  var svg = root13();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-2-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _2Square = hmr(_2Square, () => _2Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _2Square[HMR].source;
    set(_2Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default3 = _2Square;
mark_module_end(_2Square);

// node_modules/svelte-bootstrap-icons/lib/_3CircleFill.svelte
mark_module_start();
_3CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_3CircleFill.svelte";
var root14 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-8.082.414c.92 0 1.535.54 1.541 1.318.012.791-.615 1.36-1.588 1.354-.861-.006-1.482-.469-1.54-1.066H5.104c.047 1.177 1.05 2.144 2.754 2.144 1.653 0 2.954-.937 2.93-2.396-.023-1.278-1.031-1.846-1.734-1.916v-.07c.597-.1 1.505-.739 1.482-1.876-.03-1.177-1.043-2.074-2.637-2.062-1.675.006-2.59.984-2.625 2.12h1.248c.036-.556.557-1.054 1.348-1.054.785 0 1.348.486 1.348 1.195.006.715-.563 1.237-1.342 1.237h-.838v1.072h.879Z"></path></svg>`), _3CircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _3CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _3CircleFill);
  var svg = root14();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-3-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _3CircleFill = hmr(_3CircleFill, () => _3CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _3CircleFill[HMR].source;
    set(_3CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default4 = _3CircleFill;
mark_module_end(_3CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_3Circle.svelte
mark_module_start();
_3Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_3Circle.svelte";
var root15 = add_locations(ns_template(`<svg><!><path d="M7.918 8.414h-.879V7.342h.838c.78 0 1.348-.522 1.342-1.237 0-.709-.563-1.195-1.348-1.195-.79 0-1.312.498-1.348 1.055H5.275c.036-1.137.95-2.115 2.625-2.121 1.594-.012 2.608.885 2.637 2.062.023 1.137-.885 1.776-1.482 1.875v.07c.703.07 1.71.64 1.734 1.917.024 1.459-1.277 2.396-2.93 2.396-1.705 0-2.707-.967-2.754-2.144H6.33c.059.597.68 1.06 1.541 1.066.973.006 1.6-.563 1.588-1.354-.006-.779-.621-1.318-1.541-1.318Z"></path><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Z"></path></svg>`), _3Circle[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _3Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _3Circle);
  var svg = root15();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-3-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _3Circle = hmr(_3Circle, () => _3Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _3Circle[HMR].source;
    set(_3Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default4 = _3Circle;
mark_module_end(_3Circle);

// node_modules/svelte-bootstrap-icons/lib/_3SquareFill.svelte
mark_module_start();
_3SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_3SquareFill.svelte";
var root16 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm5.918 8.414h-.879V7.342h.838c.78 0 1.348-.522 1.342-1.237 0-.709-.563-1.195-1.348-1.195-.79 0-1.312.498-1.348 1.055H5.275c.036-1.137.95-2.115 2.625-2.121 1.594-.012 2.608.885 2.637 2.062.023 1.137-.885 1.776-1.482 1.875v.07c.703.07 1.71.64 1.734 1.917.024 1.459-1.277 2.396-2.93 2.396-1.705 0-2.707-.967-2.754-2.144H6.33c.059.597.68 1.06 1.541 1.066.973.006 1.6-.563 1.588-1.354-.006-.779-.621-1.318-1.541-1.318Z"></path></svg>`), _3SquareFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _3SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _3SquareFill);
  var svg = root16();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-3-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _3SquareFill = hmr(_3SquareFill, () => _3SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _3SquareFill[HMR].source;
    set(_3SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default4 = _3SquareFill;
mark_module_end(_3SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_3Square.svelte
mark_module_start();
_3Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_3Square.svelte";
var root17 = add_locations(ns_template(`<svg><!><path d="M7.918 8.414h-.879V7.342h.838c.78 0 1.348-.522 1.342-1.237 0-.709-.563-1.195-1.348-1.195-.79 0-1.312.498-1.348 1.055H5.275c.036-1.137.95-2.115 2.625-2.121 1.594-.012 2.608.885 2.637 2.062.023 1.137-.885 1.776-1.482 1.875v.07c.703.07 1.71.64 1.734 1.917.024 1.459-1.277 2.396-2.93 2.396-1.705 0-2.707-.967-2.754-2.144H6.33c.059.597.68 1.06 1.541 1.066.973.006 1.6-.563 1.588-1.354-.006-.779-.621-1.318-1.541-1.318Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _3Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _3Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _3Square);
  var svg = root17();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-3-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _3Square = hmr(_3Square, () => _3Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _3Square[HMR].source;
    set(_3Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default4 = _3Square;
mark_module_end(_3Square);

// node_modules/svelte-bootstrap-icons/lib/_4CircleFill.svelte
mark_module_start();
_4CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_4CircleFill.svelte";
var root18 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM7.519 5.057c-.886 1.418-1.772 2.838-2.542 4.265v1.12H8.85V12h1.26v-1.559h1.007V9.334H10.11V4.002H8.176c-.218.352-.438.703-.657 1.055ZM6.225 9.281v.053H8.85V5.063h-.065c-.867 1.33-1.787 2.806-2.56 4.218Z"></path></svg>`), _4CircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _4CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _4CircleFill);
  var svg = root18();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-4-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _4CircleFill = hmr(_4CircleFill, () => _4CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _4CircleFill[HMR].source;
    set(_4CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default5 = _4CircleFill;
mark_module_end(_4CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_4Circle.svelte
mark_module_start();
_4Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_4Circle.svelte";
var root19 = add_locations(ns_template(`<svg><!><path d="M7.519 5.057c.22-.352.439-.703.657-1.055h1.933v5.332h1.008v1.107H10.11V12H8.85v-1.559H4.978V9.322c.77-1.427 1.656-2.847 2.542-4.265ZM6.225 9.281v.053H8.85V5.063h-.065c-.867 1.33-1.787 2.806-2.56 4.218Z"></path><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Z"></path></svg>`), _4Circle[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _4Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _4Circle);
  var svg = root19();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-4-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _4Circle = hmr(_4Circle, () => _4Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _4Circle[HMR].source;
    set(_4Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default5 = _4Circle;
mark_module_end(_4Circle);

// node_modules/svelte-bootstrap-icons/lib/_4SquareFill.svelte
mark_module_start();
_4SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_4SquareFill.svelte";
var root20 = add_locations(ns_template(`<svg><!><path d="M6.225 9.281v.053H8.85V5.063h-.065c-.867 1.33-1.787 2.806-2.56 4.218Z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm5.519 5.057c.22-.352.439-.703.657-1.055h1.933v5.332h1.008v1.107H10.11V12H8.85v-1.559H4.978V9.322c.77-1.427 1.656-2.847 2.542-4.265Z"></path></svg>`), _4SquareFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function _4SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _4SquareFill);
  var svg = root20();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-4-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _4SquareFill = hmr(_4SquareFill, () => _4SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _4SquareFill[HMR].source;
    set(_4SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default5 = _4SquareFill;
mark_module_end(_4SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_4Square.svelte
mark_module_start();
_4Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_4Square.svelte";
var root21 = add_locations(ns_template(`<svg><!><path d="M7.519 5.057c.22-.352.439-.703.657-1.055h1.933v5.332h1.008v1.107H10.11V12H8.85v-1.559H4.978V9.322c.77-1.427 1.656-2.847 2.542-4.265ZM6.225 9.281v.053H8.85V5.063h-.065c-.867 1.33-1.787 2.806-2.56 4.218Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _4Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _4Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _4Square);
  var svg = root21();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-4-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _4Square = hmr(_4Square, () => _4Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _4Square[HMR].source;
    set(_4Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default5 = _4Square;
mark_module_end(_4Square);

// node_modules/svelte-bootstrap-icons/lib/_5CircleFill.svelte
mark_module_start();
_5CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_5CircleFill.svelte";
var root22 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-8.006 4.158c1.74 0 2.924-1.119 2.924-2.806 0-1.641-1.178-2.584-2.56-2.584-.897 0-1.442.421-1.612.68h-.064l.193-2.344h3.621V4.002H5.791L5.445 8.63h1.149c.193-.358.668-.809 1.435-.809.85 0 1.582.604 1.582 1.57 0 1.085-.779 1.682-1.57 1.682-.697 0-1.389-.31-1.53-1.031H5.276c.065 1.213 1.149 2.115 2.72 2.115Z"></path></svg>`), _5CircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _5CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _5CircleFill);
  var svg = root22();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-5-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _5CircleFill = hmr(_5CircleFill, () => _5CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _5CircleFill[HMR].source;
    set(_5CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default6 = _5CircleFill;
mark_module_end(_5CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_5Circle.svelte
mark_module_start();
_5Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_5Circle.svelte";
var root23 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 1 14 0A7 7 0 0 1 1 8Zm15 0A8 8 0 1 0 0 8a8 8 0 0 0 16 0Zm-8.006 4.158c-1.57 0-2.654-.902-2.719-2.115h1.237c.14.72.832 1.031 1.529 1.031.791 0 1.57-.597 1.57-1.681 0-.967-.732-1.57-1.582-1.57-.767 0-1.242.45-1.435.808H5.445L5.791 4h4.705v1.103H6.875l-.193 2.343h.064c.17-.258.715-.68 1.611-.68 1.383 0 2.561.944 2.561 2.585 0 1.687-1.184 2.806-2.924 2.806Z"></path></svg>`), _5Circle[FILENAME], [[1, 0, [[1, 169]]]]);
function _5Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _5Circle);
  var svg = root23();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-5-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _5Circle = hmr(_5Circle, () => _5Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _5Circle[HMR].source;
    set(_5Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default6 = _5Circle;
mark_module_end(_5Circle);

// node_modules/svelte-bootstrap-icons/lib/_5SquareFill.svelte
mark_module_start();
_5SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_5SquareFill.svelte";
var root24 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm5.994 12.158c-1.57 0-2.654-.902-2.719-2.115h1.237c.14.72.832 1.031 1.529 1.031.791 0 1.57-.597 1.57-1.681 0-.967-.732-1.57-1.582-1.57-.767 0-1.242.45-1.435.808H5.445L5.791 4h4.705v1.103H6.875l-.193 2.343h.064c.17-.258.715-.68 1.611-.68 1.383 0 2.561.944 2.561 2.585 0 1.687-1.184 2.806-2.924 2.806Z"></path></svg>`), _5SquareFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _5SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _5SquareFill);
  var svg = root24();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-5-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _5SquareFill = hmr(_5SquareFill, () => _5SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _5SquareFill[HMR].source;
    set(_5SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default6 = _5SquareFill;
mark_module_end(_5SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_5Square.svelte
mark_module_start();
_5Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_5Square.svelte";
var root25 = add_locations(ns_template(`<svg><!><path d="M7.994 12.158c-1.57 0-2.654-.902-2.719-2.115h1.237c.14.72.832 1.031 1.529 1.031.791 0 1.57-.597 1.57-1.681 0-.967-.732-1.57-1.582-1.57-.767 0-1.242.45-1.435.808H5.445L5.791 4h4.705v1.103H6.875l-.193 2.343h.064c.17-.258.715-.68 1.611-.68 1.383 0 2.561.944 2.561 2.585 0 1.687-1.184 2.806-2.924 2.806Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _5Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _5Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _5Square);
  var svg = root25();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-5-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _5Square = hmr(_5Square, () => _5Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _5Square[HMR].source;
    set(_5Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default6 = _5Square;
mark_module_end(_5Square);

// node_modules/svelte-bootstrap-icons/lib/_6CircleFill.svelte
mark_module_start();
_6CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_6CircleFill.svelte";
var root26 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM8.21 3.855c-1.868 0-3.116 1.395-3.116 4.407 0 1.183.228 2.039.597 2.642.569.926 1.477 1.254 2.409 1.254 1.629 0 2.847-1.013 2.847-2.783 0-1.676-1.254-2.555-2.508-2.555-1.125 0-1.752.61-1.98 1.155h-.082c-.012-1.946.727-3.036 1.805-3.036.802 0 1.213.457 1.312.815h1.29c-.06-.908-.962-1.899-2.573-1.899Zm-.099 4.008c-.92 0-1.564.65-1.564 1.576 0 1.032.703 1.635 1.558 1.635.868 0 1.553-.533 1.553-1.629 0-1.06-.744-1.582-1.547-1.582Z"></path></svg>`), _6CircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _6CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _6CircleFill);
  var svg = root26();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-6-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _6CircleFill = hmr(_6CircleFill, () => _6CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _6CircleFill[HMR].source;
    set(_6CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default7 = _6CircleFill;
mark_module_end(_6CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_6Circle.svelte
mark_module_start();
_6Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_6Circle.svelte";
var root27 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM8.21 3.855c1.612 0 2.515.99 2.573 1.899H9.494c-.1-.358-.51-.815-1.312-.815-1.078 0-1.817 1.09-1.805 3.036h.082c.229-.545.855-1.155 1.98-1.155 1.254 0 2.508.88 2.508 2.555 0 1.77-1.218 2.783-2.847 2.783-.932 0-1.84-.328-2.409-1.254-.369-.603-.597-1.459-.597-2.642 0-3.012 1.248-4.407 3.117-4.407Zm-.099 4.008c-.92 0-1.564.65-1.564 1.576 0 1.032.703 1.635 1.558 1.635.868 0 1.553-.533 1.553-1.629 0-1.06-.744-1.582-1.547-1.582Z"></path></svg>`), _6Circle[FILENAME], [[1, 0, [[1, 169]]]]);
function _6Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _6Circle);
  var svg = root27();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-6-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _6Circle = hmr(_6Circle, () => _6Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _6Circle[HMR].source;
    set(_6Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default7 = _6Circle;
mark_module_end(_6Circle);

// node_modules/svelte-bootstrap-icons/lib/_6SquareFill.svelte
mark_module_start();
_6SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_6SquareFill.svelte";
var root28 = add_locations(ns_template(`<svg><!><path d="M8.111 7.863c-.92 0-1.564.65-1.564 1.576 0 1.032.703 1.635 1.558 1.635.868 0 1.553-.533 1.553-1.629 0-1.06-.744-1.582-1.547-1.582Z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm6.21 3.855c1.612 0 2.515.99 2.573 1.899H9.494c-.1-.358-.51-.815-1.312-.815-1.078 0-1.817 1.09-1.805 3.036h.082c.229-.545.855-1.155 1.98-1.155 1.254 0 2.508.88 2.508 2.555 0 1.77-1.218 2.783-2.847 2.783-.932 0-1.84-.328-2.409-1.254-.369-.603-.597-1.459-.597-2.642 0-3.012 1.248-4.407 3.117-4.407Z"></path></svg>`), _6SquareFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function _6SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _6SquareFill);
  var svg = root28();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-6-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _6SquareFill = hmr(_6SquareFill, () => _6SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _6SquareFill[HMR].source;
    set(_6SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default7 = _6SquareFill;
mark_module_end(_6SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_6Square.svelte
mark_module_start();
_6Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_6Square.svelte";
var root29 = add_locations(ns_template(`<svg><!><path d="M8.21 3.855c1.612 0 2.515.99 2.573 1.899H9.494c-.1-.358-.51-.815-1.312-.815-1.078 0-1.817 1.09-1.805 3.036h.082c.229-.545.855-1.155 1.98-1.155 1.254 0 2.508.88 2.508 2.555 0 1.77-1.218 2.783-2.847 2.783-.932 0-1.84-.328-2.409-1.254-.369-.603-.597-1.459-.597-2.642 0-3.012 1.248-4.407 3.117-4.407Zm-.099 4.008c-.92 0-1.564.65-1.564 1.576 0 1.032.703 1.635 1.558 1.635.868 0 1.553-.533 1.553-1.629 0-1.06-.744-1.582-1.547-1.582Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _6Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _6Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _6Square);
  var svg = root29();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-6-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _6Square = hmr(_6Square, () => _6Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _6Square[HMR].source;
    set(_6Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default7 = _6Square;
mark_module_end(_6Square);

// node_modules/svelte-bootstrap-icons/lib/_7CircleFill.svelte
mark_module_start();
_7CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_7CircleFill.svelte";
var root30 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM5.37 5.11h3.972v.07L6.025 12H7.42l3.258-6.85V4.002H5.369v1.107Z"></path></svg>`), _7CircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _7CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _7CircleFill);
  var svg = root30();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-7-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _7CircleFill = hmr(_7CircleFill, () => _7CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _7CircleFill[HMR].source;
    set(_7CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default8 = _7CircleFill;
mark_module_end(_7CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_7Circle.svelte
mark_module_start();
_7Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_7Circle.svelte";
var root31 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM5.37 5.11V4.001h5.308V5.15L7.42 12H6.025l3.317-6.82v-.07H5.369Z"></path></svg>`), _7Circle[FILENAME], [[1, 0, [[1, 169]]]]);
function _7Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _7Circle);
  var svg = root31();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-7-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _7Circle = hmr(_7Circle, () => _7Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _7Circle[HMR].source;
    set(_7Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default8 = _7Circle;
mark_module_end(_7Circle);

// node_modules/svelte-bootstrap-icons/lib/_7SquareFill.svelte
mark_module_start();
_7SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_7SquareFill.svelte";
var root32 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm3.37 5.11V4.001h5.308V5.15L7.42 12H6.025l3.317-6.82v-.07H5.369Z"></path></svg>`), _7SquareFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _7SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _7SquareFill);
  var svg = root32();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-7-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _7SquareFill = hmr(_7SquareFill, () => _7SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _7SquareFill[HMR].source;
    set(_7SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default8 = _7SquareFill;
mark_module_end(_7SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_7Square.svelte
mark_module_start();
_7Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_7Square.svelte";
var root33 = add_locations(ns_template(`<svg><!><path d="M5.37 5.11V4.001h5.308V5.15L7.42 12H6.025l3.317-6.82v-.07H5.369Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _7Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _7Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _7Square);
  var svg = root33();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-7-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _7Square = hmr(_7Square, () => _7Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _7Square[HMR].source;
    set(_7Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default8 = _7Square;
mark_module_end(_7Square);

// node_modules/svelte-bootstrap-icons/lib/_8CircleFill.svelte
mark_module_start();
_8CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_8CircleFill.svelte";
var root34 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-5.03 1.803c0-1.248-.943-1.84-1.646-1.992v-.065c.598-.187 1.336-.72 1.336-1.781 0-1.225-1.084-2.121-2.654-2.121-1.57 0-2.66.896-2.66 2.12 0 1.044.709 1.589 1.33 1.782v.065c-.697.152-1.647.732-1.647 2.003 0 1.39 1.19 2.344 2.953 2.344 1.77 0 2.989-.96 2.989-2.355Zm-4.347-3.71c0 .739.586 1.255 1.383 1.255s1.377-.516 1.377-1.254c0-.733-.58-1.23-1.377-1.23s-1.383.497-1.383 1.23Zm-.281 3.645c0 .838.72 1.412 1.664 1.412.943 0 1.658-.574 1.658-1.412 0-.843-.715-1.424-1.658-1.424-.944 0-1.664.58-1.664 1.424Z"></path></svg>`), _8CircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _8CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _8CircleFill);
  var svg = root34();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-8-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _8CircleFill = hmr(_8CircleFill, () => _8CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _8CircleFill[HMR].source;
    set(_8CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default9 = _8CircleFill;
mark_module_end(_8CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_8Circle.svelte
mark_module_start();
_8Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_8Circle.svelte";
var root35 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-5.03 1.803c0 1.394-1.218 2.355-2.988 2.355-1.763 0-2.953-.955-2.953-2.344 0-1.271.95-1.851 1.647-2.003v-.065c-.621-.193-1.33-.738-1.33-1.781 0-1.225 1.09-2.121 2.66-2.121s2.654.896 2.654 2.12c0 1.061-.738 1.595-1.336 1.782v.065c.703.152 1.647.744 1.647 1.992Zm-4.347-3.71c0 .739.586 1.255 1.383 1.255s1.377-.516 1.377-1.254c0-.733-.58-1.23-1.377-1.23s-1.383.497-1.383 1.23Zm-.281 3.645c0 .838.72 1.412 1.664 1.412.943 0 1.658-.574 1.658-1.412 0-.843-.715-1.424-1.658-1.424-.944 0-1.664.58-1.664 1.424Z"></path></svg>`), _8Circle[FILENAME], [[1, 0, [[1, 169]]]]);
function _8Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _8Circle);
  var svg = root35();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-8-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _8Circle = hmr(_8Circle, () => _8Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _8Circle[HMR].source;
    set(_8Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default9 = _8Circle;
mark_module_end(_8Circle);

// node_modules/svelte-bootstrap-icons/lib/_8SquareFill.svelte
mark_module_start();
_8SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_8SquareFill.svelte";
var root36 = add_locations(ns_template(`<svg><!><path d="M6.623 6.094c0 .738.586 1.254 1.383 1.254s1.377-.516 1.377-1.254c0-.733-.58-1.23-1.377-1.23s-1.383.497-1.383 1.23Zm-.281 3.644c0 .838.72 1.412 1.664 1.412.943 0 1.658-.574 1.658-1.412 0-.843-.715-1.424-1.658-1.424-.944 0-1.664.58-1.664 1.424Z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm8.97 9.803c0 1.394-1.218 2.355-2.988 2.355-1.763 0-2.953-.955-2.953-2.344 0-1.271.95-1.851 1.647-2.003v-.065c-.621-.193-1.33-.738-1.33-1.781 0-1.225 1.09-2.121 2.66-2.121s2.654.896 2.654 2.12c0 1.061-.738 1.595-1.336 1.782v.065c.703.152 1.647.744 1.647 1.992Z"></path></svg>`), _8SquareFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function _8SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _8SquareFill);
  var svg = root36();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-8-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _8SquareFill = hmr(_8SquareFill, () => _8SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _8SquareFill[HMR].source;
    set(_8SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default9 = _8SquareFill;
mark_module_end(_8SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_8Square.svelte
mark_module_start();
_8Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_8Square.svelte";
var root37 = add_locations(ns_template(`<svg><!><path d="M10.97 9.803c0 1.394-1.218 2.355-2.988 2.355-1.763 0-2.953-.955-2.953-2.344 0-1.271.95-1.851 1.647-2.003v-.065c-.621-.193-1.33-.738-1.33-1.781 0-1.225 1.09-2.121 2.66-2.121s2.654.896 2.654 2.12c0 1.061-.738 1.595-1.336 1.782v.065c.703.152 1.647.744 1.647 1.992Zm-4.347-3.71c0 .739.586 1.255 1.383 1.255s1.377-.516 1.377-1.254c0-.733-.58-1.23-1.377-1.23s-1.383.497-1.383 1.23Zm-.281 3.645c0 .838.72 1.412 1.664 1.412.943 0 1.658-.574 1.658-1.412 0-.843-.715-1.424-1.658-1.424-.944 0-1.664.58-1.664 1.424Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _8Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _8Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _8Square);
  var svg = root37();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-8-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _8Square = hmr(_8Square, () => _8Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _8Square[HMR].source;
    set(_8Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default9 = _8Square;
mark_module_end(_8Square);

// node_modules/svelte-bootstrap-icons/lib/_9CircleFill.svelte
mark_module_start();
_9CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_9CircleFill.svelte";
var root38 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-8.223 4.146c2.104 0 3.123-1.464 3.123-4.3 0-3.147-1.459-4.014-2.97-4.014-1.63 0-2.871 1.02-2.871 2.73 0 1.706 1.171 2.667 2.566 2.667 1.06 0 1.7-.557 1.934-1.184h.076c.047 1.67-.475 3.023-1.834 3.023-.71 0-1.149-.363-1.248-.72H5.258c.094.908.926 1.798 2.52 1.798Zm.118-3.972c.808 0 1.535-.528 1.535-1.594s-.668-1.676-1.56-1.676c-.838 0-1.517.616-1.517 1.659 0 1.072.708 1.61 1.54 1.61Z"></path></svg>`), _9CircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function _9CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _9CircleFill);
  var svg = root38();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-9-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _9CircleFill = hmr(_9CircleFill, () => _9CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _9CircleFill[HMR].source;
    set(_9CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default10 = _9CircleFill;
mark_module_end(_9CircleFill);

// node_modules/svelte-bootstrap-icons/lib/_9Circle.svelte
mark_module_start();
_9Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_9Circle.svelte";
var root39 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-8.223 4.146c-1.593 0-2.425-.89-2.52-1.798h1.296c.1.357.539.72 1.248.72 1.36 0 1.88-1.353 1.834-3.023h-.076c-.235.627-.873 1.184-1.934 1.184-1.395 0-2.566-.961-2.566-2.666 0-1.711 1.242-2.731 2.87-2.731 1.512 0 2.971.867 2.971 4.014 0 2.836-1.02 4.3-3.123 4.3Zm.118-3.972c.808 0 1.535-.528 1.535-1.594s-.668-1.676-1.56-1.676c-.838 0-1.517.616-1.517 1.659 0 1.072.708 1.61 1.54 1.61Z"></path></svg>`), _9Circle[FILENAME], [[1, 0, [[1, 169]]]]);
function _9Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _9Circle);
  var svg = root39();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-9-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _9Circle = hmr(_9Circle, () => _9Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _9Circle[HMR].source;
    set(_9Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default10 = _9Circle;
mark_module_end(_9Circle);

// node_modules/svelte-bootstrap-icons/lib/_9SquareFill.svelte
mark_module_start();
_9SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_9SquareFill.svelte";
var root40 = add_locations(ns_template(`<svg><!><path d="M7.895 8.174c.808 0 1.535-.528 1.535-1.594s-.668-1.676-1.56-1.676c-.838 0-1.517.616-1.517 1.659 0 1.072.708 1.61 1.54 1.61Z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm5.777 12.146c-1.593 0-2.425-.89-2.52-1.798h1.296c.1.357.539.72 1.248.72 1.36 0 1.88-1.353 1.834-3.023h-.076c-.235.627-.873 1.184-1.934 1.184-1.395 0-2.566-.961-2.566-2.666 0-1.711 1.242-2.731 2.87-2.731 1.512 0 2.971.867 2.971 4.014 0 2.836-1.02 4.3-3.123 4.3Z"></path></svg>`), _9SquareFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function _9SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _9SquareFill);
  var svg = root40();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-9-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _9SquareFill = hmr(_9SquareFill, () => _9SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _9SquareFill[HMR].source;
    set(_9SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default10 = _9SquareFill;
mark_module_end(_9SquareFill);

// node_modules/svelte-bootstrap-icons/lib/_9Square.svelte
mark_module_start();
_9Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/_9Square.svelte";
var root41 = add_locations(ns_template(`<svg><!><path d="M7.777 12.146c-1.593 0-2.425-.89-2.52-1.798h1.296c.1.357.539.72 1.248.72 1.36 0 1.88-1.353 1.834-3.023h-.076c-.235.627-.873 1.184-1.934 1.184-1.395 0-2.566-.961-2.566-2.666 0-1.711 1.242-2.731 2.87-2.731 1.512 0 2.971.867 2.971 4.014 0 2.836-1.02 4.3-3.123 4.3Zm.118-3.972c.808 0 1.535-.528 1.535-1.594s-.668-1.676-1.56-1.676c-.838 0-1.517.616-1.517 1.659 0 1.072.708 1.61 1.54 1.61Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), _9Square[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function _9Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, _9Square);
  var svg = root41();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-9-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  _9Square = hmr(_9Square, () => _9Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = _9Square[HMR].source;
    set(_9Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default10 = _9Square;
mark_module_end(_9Square);

// node_modules/svelte-bootstrap-icons/lib/Activity.svelte
mark_module_start();
Activity[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Activity.svelte";
var root42 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 2a.5.5 0 0 1 .47.33L10 12.036l1.53-4.208A.5.5 0 0 1 12 7.5h3.5a.5.5 0 0 1 0 1h-3.15l-1.88 5.17a.5.5 0 0 1-.94 0L6 3.964 4.47 8.171A.5.5 0 0 1 4 8.5H.5a.5.5 0 0 1 0-1h3.15l1.88-5.17A.5.5 0 0 1 6 2Z"></path></svg>`), Activity[FILENAME], [[1, 0, [[1, 169]]]]);
function Activity($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Activity);
  var svg = root42();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-activity", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Activity = hmr(Activity, () => Activity[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Activity[HMR].source;
    set(Activity[HMR].source, module.default[HMR].original);
  });
}
var Activity_default = Activity;
mark_module_end(Activity);

// node_modules/svelte-bootstrap-icons/lib/AirplaneEnginesFill.svelte
mark_module_start();
AirplaneEnginesFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AirplaneEnginesFill.svelte";
var root43 = add_locations(ns_template(`<svg><!><path d="M8 0c-.787 0-1.292.592-1.572 1.151A4.347 4.347 0 0 0 6 3v3.691l-2 1V7.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.191l-1.17.585A1.5 1.5 0 0 0 0 10.618V12a.5.5 0 0 0 .582.493l1.631-.272.313.937a.5.5 0 0 0 .948 0l.405-1.214 2.21-.369.375 2.253-1.318 1.318A.5.5 0 0 0 5.5 16h5a.5.5 0 0 0 .354-.854l-1.318-1.318.375-2.253 2.21.369.405 1.214a.5.5 0 0 0 .948 0l.313-.937 1.63.272A.5.5 0 0 0 16 12v-1.382a1.5 1.5 0 0 0-.83-1.342L14 8.691V7.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v.191l-2-1V3c0-.568-.14-1.271-.428-1.849C9.292.591 8.787 0 8 0Z"></path></svg>`), AirplaneEnginesFill[FILENAME], [[1, 0, [[1, 182]]]]);
function AirplaneEnginesFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AirplaneEnginesFill);
  var svg = root43();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-airplane-engines-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AirplaneEnginesFill = hmr(AirplaneEnginesFill, () => AirplaneEnginesFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AirplaneEnginesFill[HMR].source;
    set(AirplaneEnginesFill[HMR].source, module.default[HMR].original);
  });
}
var AirplaneEnginesFill_default = AirplaneEnginesFill;
mark_module_end(AirplaneEnginesFill);

// node_modules/svelte-bootstrap-icons/lib/AirplaneEngines.svelte
mark_module_start();
AirplaneEngines[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AirplaneEngines.svelte";
var root44 = add_locations(ns_template(`<svg><!><path d="M8 0c-.787 0-1.292.592-1.572 1.151A4.347 4.347 0 0 0 6 3v3.691l-2 1V7.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.191l-1.17.585A1.5 1.5 0 0 0 0 10.618V12a.5.5 0 0 0 .582.493l1.631-.272.313.937a.5.5 0 0 0 .948 0l.405-1.214 2.21-.369.375 2.253-1.318 1.318A.5.5 0 0 0 5.5 16h5a.5.5 0 0 0 .354-.854l-1.318-1.318.375-2.253 2.21.369.405 1.214a.5.5 0 0 0 .948 0l.313-.937 1.63.272A.5.5 0 0 0 16 12v-1.382a1.5 1.5 0 0 0-.83-1.342L14 8.691V7.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v.191l-2-1V3c0-.568-.14-1.271-.428-1.849C9.292.591 8.787 0 8 0ZM7 3c0-.432.11-.979.322-1.401C7.542 1.159 7.787 1 8 1c.213 0 .458.158.678.599C8.889 2.02 9 2.569 9 3v4a.5.5 0 0 0 .276.447l5.448 2.724a.5.5 0 0 1 .276.447v.792l-5.418-.903a.5.5 0 0 0-.575.41l-.5 3a.5.5 0 0 0 .14.437l.646.646H6.707l.647-.646a.5.5 0 0 0 .14-.436l-.5-3a.5.5 0 0 0-.576-.411L1 11.41v-.792a.5.5 0 0 1 .276-.447l5.448-2.724A.5.5 0 0 0 7 7V3Z"></path></svg>`), AirplaneEngines[FILENAME], [[1, 0, [[1, 177]]]]);
function AirplaneEngines($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AirplaneEngines);
  var svg = root44();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-airplane-engines", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AirplaneEngines = hmr(AirplaneEngines, () => AirplaneEngines[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AirplaneEngines[HMR].source;
    set(AirplaneEngines[HMR].source, module.default[HMR].original);
  });
}
var AirplaneEngines_default = AirplaneEngines;
mark_module_end(AirplaneEngines);

// node_modules/svelte-bootstrap-icons/lib/AirplaneFill.svelte
mark_module_start();
AirplaneFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AirplaneFill.svelte";
var root45 = add_locations(ns_template(`<svg><!><path d="M6.428 1.151C6.708.591 7.213 0 8 0s1.292.592 1.572 1.151C9.861 1.73 10 2.431 10 3v3.691l5.17 2.585a1.5 1.5 0 0 1 .83 1.342V12a.5.5 0 0 1-.582.493l-5.507-.918-.375 2.253 1.318 1.318A.5.5 0 0 1 10.5 16h-5a.5.5 0 0 1-.354-.854l1.319-1.318-.376-2.253-5.507.918A.5.5 0 0 1 0 12v-1.382a1.5 1.5 0 0 1 .83-1.342L6 6.691V3c0-.568.14-1.271.428-1.849Z"></path></svg>`), AirplaneFill[FILENAME], [[1, 0, [[1, 174]]]]);
function AirplaneFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AirplaneFill);
  var svg = root45();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-airplane-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AirplaneFill = hmr(AirplaneFill, () => AirplaneFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AirplaneFill[HMR].source;
    set(AirplaneFill[HMR].source, module.default[HMR].original);
  });
}
var AirplaneFill_default = AirplaneFill;
mark_module_end(AirplaneFill);

// node_modules/svelte-bootstrap-icons/lib/Airplane.svelte
mark_module_start();
Airplane[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Airplane.svelte";
var root46 = add_locations(ns_template(`<svg><!><path d="M6.428 1.151C6.708.591 7.213 0 8 0s1.292.592 1.572 1.151C9.861 1.73 10 2.431 10 3v3.691l5.17 2.585a1.5 1.5 0 0 1 .83 1.342V12a.5.5 0 0 1-.582.493l-5.507-.918-.375 2.253 1.318 1.318A.5.5 0 0 1 10.5 16h-5a.5.5 0 0 1-.354-.854l1.319-1.318-.376-2.253-5.507.918A.5.5 0 0 1 0 12v-1.382a1.5 1.5 0 0 1 .83-1.342L6 6.691V3c0-.568.14-1.271.428-1.849Zm.894.448C7.111 2.02 7 2.569 7 3v4a.5.5 0 0 1-.276.447l-5.448 2.724a.5.5 0 0 0-.276.447v.792l5.418-.903a.5.5 0 0 1 .575.41l.5 3a.5.5 0 0 1-.14.437L6.708 15h2.586l-.647-.646a.5.5 0 0 1-.14-.436l.5-3a.5.5 0 0 1 .576-.411L15 11.41v-.792a.5.5 0 0 0-.276-.447L9.276 7.447A.5.5 0 0 1 9 7V3c0-.432-.11-.979-.322-1.401C8.458 1.159 8.213 1 8 1c-.213 0-.458.158-.678.599Z"></path></svg>`), Airplane[FILENAME], [[1, 0, [[1, 169]]]]);
function Airplane($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Airplane);
  var svg = root46();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-airplane", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Airplane = hmr(Airplane, () => Airplane[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Airplane[HMR].source;
    set(Airplane[HMR].source, module.default[HMR].original);
  });
}
var Airplane_default = Airplane;
mark_module_end(Airplane);

// node_modules/svelte-bootstrap-icons/lib/AlarmFill.svelte
mark_module_start();
AlarmFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AlarmFill.svelte";
var root47 = add_locations(ns_template(`<svg><!><path d="M6 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1H9v1.07a7.001 7.001 0 0 1 3.274 12.474l.601.602a.5.5 0 0 1-.707.708l-.746-.746A6.97 6.97 0 0 1 8 16a6.97 6.97 0 0 1-3.422-.892l-.746.746a.5.5 0 0 1-.707-.708l.602-.602A7.001 7.001 0 0 1 7 2.07V1h-.5A.5.5 0 0 1 6 .5zm2.5 5a.5.5 0 0 0-1 0v3.362l-1.429 2.38a.5.5 0 1 0 .858.515l1.5-2.5A.5.5 0 0 0 8.5 9V5.5zM.86 5.387A2.5 2.5 0 1 1 4.387 1.86 8.035 8.035 0 0 0 .86 5.387zM11.613 1.86a2.5 2.5 0 1 1 3.527 3.527 8.035 8.035 0 0 0-3.527-3.527z"></path></svg>`), AlarmFill[FILENAME], [[1, 0, [[1, 171]]]]);
function AlarmFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AlarmFill);
  var svg = root47();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-alarm-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlarmFill = hmr(AlarmFill, () => AlarmFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlarmFill[HMR].source;
    set(AlarmFill[HMR].source, module.default[HMR].original);
  });
}
var AlarmFill_default = AlarmFill;
mark_module_end(AlarmFill);

// node_modules/svelte-bootstrap-icons/lib/Alarm.svelte
mark_module_start();
Alarm[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Alarm.svelte";
var root48 = add_locations(ns_template(`<svg><!><path d="M8.5 5.5a.5.5 0 0 0-1 0v3.362l-1.429 2.38a.5.5 0 1 0 .858.515l1.5-2.5A.5.5 0 0 0 8.5 9V5.5z"></path><path d="M6.5 0a.5.5 0 0 0 0 1H7v1.07a7.001 7.001 0 0 0-3.273 12.474l-.602.602a.5.5 0 0 0 .707.708l.746-.746A6.97 6.97 0 0 0 8 16a6.97 6.97 0 0 0 3.422-.892l.746.746a.5.5 0 0 0 .707-.708l-.601-.602A7.001 7.001 0 0 0 9 2.07V1h.5a.5.5 0 0 0 0-1h-3zm1.038 3.018a6.093 6.093 0 0 1 .924 0 6 6 0 1 1-.924 0zM0 3.5c0 .753.333 1.429.86 1.887A8.035 8.035 0 0 1 4.387 1.86 2.5 2.5 0 0 0 0 3.5zM13.5 1c-.753 0-1.429.333-1.887.86a8.035 8.035 0 0 1 3.527 3.527A2.5 2.5 0 0 0 13.5 1z"></path></svg>`), Alarm[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Alarm($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Alarm);
  var svg = root48();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-alarm", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alarm = hmr(Alarm, () => Alarm[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alarm[HMR].source;
    set(Alarm[HMR].source, module.default[HMR].original);
  });
}
var Alarm_default = Alarm;
mark_module_end(Alarm);

// node_modules/svelte-bootstrap-icons/lib/Alexa.svelte
mark_module_start();
Alexa[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Alexa.svelte";
var root49 = add_locations(ns_template(`<svg><!><path d="M7.996 0A7.998 7.998 0 0 0 0 8a8 8 0 0 0 6.93 7.93v-1.613a1.06 1.06 0 0 0-.717-1.008A5.602 5.602 0 0 1 2.4 7.865 5.579 5.579 0 0 1 8.054 2.4a5.599 5.599 0 0 1 5.535 5.81l-.002.046a6.116 6.116 0 0 1-.012.192l-.005.061a4.85 4.85 0 0 1-.033.284l-.01.068c-.685 4.516-6.564 7.054-6.596 7.068A7.998 7.998 0 0 0 15.992 8 7.998 7.998 0 0 0 7.996.001Z"></path></svg>`), Alexa[FILENAME], [[1, 0, [[1, 166]]]]);
function Alexa($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Alexa);
  var svg = root49();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-alexa", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alexa = hmr(Alexa, () => Alexa[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alexa[HMR].source;
    set(Alexa[HMR].source, module.default[HMR].original);
  });
}
var Alexa_default = Alexa;
mark_module_end(Alexa);

// node_modules/svelte-bootstrap-icons/lib/AlignBottom.svelte
mark_module_start();
AlignBottom[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AlignBottom.svelte";
var root50 = add_locations(ns_template(`<svg><!><rect width="4" height="12" x="6" y="1" rx="1"></rect><path d="M1.5 14a.5.5 0 0 0 0 1v-1zm13 1a.5.5 0 0 0 0-1v1zm-13 0h13v-1h-13v1z"></path></svg>`), AlignBottom[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function AlignBottom($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AlignBottom);
  var svg = root50();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-align-bottom", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignBottom = hmr(AlignBottom, () => AlignBottom[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignBottom[HMR].source;
    set(AlignBottom[HMR].source, module.default[HMR].original);
  });
}
var AlignBottom_default = AlignBottom;
mark_module_end(AlignBottom);

// node_modules/svelte-bootstrap-icons/lib/AlignCenter.svelte
mark_module_start();
AlignCenter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AlignCenter.svelte";
var root51 = add_locations(ns_template(`<svg><!><path d="M8 1a.5.5 0 0 1 .5.5V6h-1V1.5A.5.5 0 0 1 8 1zm0 14a.5.5 0 0 1-.5-.5V10h1v4.5a.5.5 0 0 1-.5.5zM2 7a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7z"></path></svg>`), AlignCenter[FILENAME], [[1, 0, [[1, 173]]]]);
function AlignCenter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AlignCenter);
  var svg = root51();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-align-center", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignCenter = hmr(AlignCenter, () => AlignCenter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignCenter[HMR].source;
    set(AlignCenter[HMR].source, module.default[HMR].original);
  });
}
var AlignCenter_default = AlignCenter;
mark_module_end(AlignCenter);

// node_modules/svelte-bootstrap-icons/lib/AlignEnd.svelte
mark_module_start();
AlignEnd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AlignEnd.svelte";
var root52 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 1 0v-13a.5.5 0 0 0-.5-.5z"></path><path d="M13 7a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V7z"></path></svg>`), AlignEnd[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function AlignEnd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AlignEnd);
  var svg = root52();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-align-end", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignEnd = hmr(AlignEnd, () => AlignEnd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignEnd[HMR].source;
    set(AlignEnd[HMR].source, module.default[HMR].original);
  });
}
var AlignEnd_default = AlignEnd;
mark_module_end(AlignEnd);

// node_modules/svelte-bootstrap-icons/lib/AlignMiddle.svelte
mark_module_start();
AlignMiddle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AlignMiddle.svelte";
var root53 = add_locations(ns_template(`<svg><!><path d="M6 13a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v10zM1 8a.5.5 0 0 0 .5.5H6v-1H1.5A.5.5 0 0 0 1 8zm14 0a.5.5 0 0 1-.5.5H10v-1h4.5a.5.5 0 0 1 .5.5z"></path></svg>`), AlignMiddle[FILENAME], [[1, 0, [[1, 173]]]]);
function AlignMiddle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AlignMiddle);
  var svg = root53();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-align-middle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignMiddle = hmr(AlignMiddle, () => AlignMiddle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignMiddle[HMR].source;
    set(AlignMiddle[HMR].source, module.default[HMR].original);
  });
}
var AlignMiddle_default = AlignMiddle;
mark_module_end(AlignMiddle);

// node_modules/svelte-bootstrap-icons/lib/AlignStart.svelte
mark_module_start();
AlignStart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AlignStart.svelte";
var root54 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.5 1a.5.5 0 0 1 .5.5v13a.5.5 0 0 1-1 0v-13a.5.5 0 0 1 .5-.5z"></path><path d="M3 7a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V7z"></path></svg>`), AlignStart[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function AlignStart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AlignStart);
  var svg = root54();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-align-start", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignStart = hmr(AlignStart, () => AlignStart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignStart[HMR].source;
    set(AlignStart[HMR].source, module.default[HMR].original);
  });
}
var AlignStart_default = AlignStart;
mark_module_end(AlignStart);

// node_modules/svelte-bootstrap-icons/lib/AlignTop.svelte
mark_module_start();
AlignTop[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AlignTop.svelte";
var root55 = add_locations(ns_template(`<svg><!><rect width="4" height="12" rx="1" transform="matrix(1 0 0 -1 6 15)"></rect><path d="M1.5 2a.5.5 0 0 1 0-1v1zm13-1a.5.5 0 0 1 0 1V1zm-13 0h13v1h-13V1z"></path></svg>`), AlignTop[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function AlignTop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AlignTop);
  var svg = root55();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-align-top", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignTop = hmr(AlignTop, () => AlignTop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignTop[HMR].source;
    set(AlignTop[HMR].source, module.default[HMR].original);
  });
}
var AlignTop_default = AlignTop;
mark_module_end(AlignTop);

// node_modules/svelte-bootstrap-icons/lib/Alipay.svelte
mark_module_start();
Alipay[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Alipay.svelte";
var root56 = add_locations(ns_template(`<svg><!><path d="M2.541 0H13.5a2.551 2.551 0 0 1 2.54 2.563v8.297c-.006 0-.531-.046-2.978-.813-.412-.14-.916-.327-1.479-.536-.303-.113-.624-.232-.957-.353a12.98 12.98 0 0 0 1.325-3.373H8.822V4.649h3.831v-.634h-3.83V2.121H7.26c-.274 0-.274.273-.274.273v1.621H3.11v.634h3.875v1.136h-3.2v.634H9.99c-.227.789-.532 1.53-.894 2.202-2.013-.67-4.161-1.212-5.51-.878-.864.214-1.42.597-1.746.998-1.499 1.84-.424 4.633 2.741 4.633 1.872 0 3.675-1.053 5.072-2.787 2.08 1.008 6.37 2.738 6.387 2.745v.105A2.551 2.551 0 0 1 13.5 16H2.541A2.552 2.552 0 0 1 0 13.437V2.563A2.552 2.552 0 0 1 2.541 0Z"></path><path d="M2.309 9.27c-1.22 1.073-.49 3.034 1.978 3.034 1.434 0 2.868-.925 3.994-2.406-1.602-.789-2.959-1.353-4.425-1.207-.397.04-1.14.217-1.547.58Z"></path></svg>`), Alipay[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Alipay($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Alipay);
  var svg = root56();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-alipay", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alipay = hmr(Alipay, () => Alipay[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alipay[HMR].source;
    set(Alipay[HMR].source, module.default[HMR].original);
  });
}
var Alipay_default = Alipay;
mark_module_end(Alipay);

// node_modules/svelte-bootstrap-icons/lib/AlphabetUppercase.svelte
mark_module_start();
AlphabetUppercase[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AlphabetUppercase.svelte";
var root57 = add_locations(ns_template(`<svg><!><path d="M1.226 10.88H0l2.056-6.26h1.42l2.047 6.26h-1.29l-.48-1.61H1.707l-.48 1.61ZM2.76 5.818h-.054l-.75 2.532H3.51l-.75-2.532Zm3.217 5.062V4.62h2.56c1.09 0 1.808.582 1.808 1.54 0 .762-.444 1.22-1.05 1.372v.055c.736.074 1.365.587 1.365 1.528 0 1.119-.89 1.766-2.133 1.766h-2.55ZM7.18 5.55v1.675h.8c.812 0 1.171-.308 1.171-.853 0-.51-.328-.822-.898-.822H7.18Zm0 2.537V9.95h.903c.951 0 1.342-.312 1.342-.909 0-.591-.382-.954-1.095-.954H7.18Zm5.089-.711v.775c0 1.156.49 1.803 1.347 1.803.705 0 1.163-.454 1.212-1.096H16v.12C15.942 10.173 14.95 11 13.607 11c-1.648 0-2.573-1.073-2.573-2.849v-.78c0-1.775.934-2.871 2.573-2.871 1.347 0 2.34.849 2.393 2.087v.115h-1.172c-.05-.665-.516-1.156-1.212-1.156-.849 0-1.347.67-1.347 1.83Z"></path></svg>`), AlphabetUppercase[FILENAME], [[1, 0, [[1, 179]]]]);
function AlphabetUppercase($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AlphabetUppercase);
  var svg = root57();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-alphabet-uppercase", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlphabetUppercase = hmr(AlphabetUppercase, () => AlphabetUppercase[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlphabetUppercase[HMR].source;
    set(AlphabetUppercase[HMR].source, module.default[HMR].original);
  });
}
var AlphabetUppercase_default = AlphabetUppercase;
mark_module_end(AlphabetUppercase);

// node_modules/svelte-bootstrap-icons/lib/Alphabet.svelte
mark_module_start();
Alphabet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Alphabet.svelte";
var root58 = add_locations(ns_template(`<svg><!><path d="M2.204 11.078c.767 0 1.201-.356 1.406-.737h.059V11h1.216V7.519c0-1.314-.947-1.783-2.11-1.783C1.355 5.736.75 6.42.69 7.27h1.216c.064-.323.313-.552.84-.552.527 0 .864.249.864.771v.464H2.346C1.145 7.953.5 8.568.5 9.496c0 .977.693 1.582 1.704 1.582Zm.42-.947c-.44 0-.845-.235-.845-.718 0-.395.269-.684.84-.684h.991v.538c0 .503-.444.864-.986.864Zm5.593.937c1.216 0 1.948-.869 1.948-2.31v-.702c0-1.44-.727-2.305-1.929-2.305-.742 0-1.328.347-1.499.889h-.063V3.983h-1.29V11h1.27v-.791h.064c.21.532.776.86 1.499.86Zm-.43-1.025c-.66 0-1.113-.518-1.113-1.28V8.12c0-.825.42-1.343 1.098-1.343.684 0 1.075.518 1.075 1.416v.45c0 .888-.386 1.401-1.06 1.401Zm2.834-1.328c0 1.47.87 2.378 2.305 2.378 1.416 0 2.139-.777 2.158-1.763h-1.186c-.06.425-.313.732-.933.732-.66 0-1.05-.512-1.05-1.352v-.625c0-.81.371-1.328 1.045-1.328.635 0 .879.425.918.776h1.187c-.02-.986-.787-1.806-2.14-1.806-1.41 0-2.304.918-2.304 2.338v.65Z"></path></svg>`), Alphabet[FILENAME], [[1, 0, [[1, 169]]]]);
function Alphabet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Alphabet);
  var svg = root58();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-alphabet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alphabet = hmr(Alphabet, () => Alphabet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alphabet[HMR].source;
    set(Alphabet[HMR].source, module.default[HMR].original);
  });
}
var Alphabet_default = Alphabet;
mark_module_end(Alphabet);

// node_modules/svelte-bootstrap-icons/lib/Alt.svelte
mark_module_start();
Alt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Alt.svelte";
var root59 = add_locations(ns_template(`<svg><!><path d="M1 13.5a.5.5 0 0 0 .5.5h3.797a.5.5 0 0 0 .439-.26L11 3h3.5a.5.5 0 0 0 0-1h-3.797a.5.5 0 0 0-.439.26L5 13H1.5a.5.5 0 0 0-.5.5zm10 0a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 0-1h-3a.5.5 0 0 0-.5.5z"></path></svg>`), Alt[FILENAME], [[1, 0, [[1, 164]]]]);
function Alt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Alt);
  var svg = root59();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alt = hmr(Alt, () => Alt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alt[HMR].source;
    set(Alt[HMR].source, module.default[HMR].original);
  });
}
var Alt_default = Alt;
mark_module_end(Alt);

// node_modules/svelte-bootstrap-icons/lib/Amazon.svelte
mark_module_start();
Amazon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Amazon.svelte";
var root60 = add_locations(ns_template(`<svg><!><path d="M10.813 11.968c.157.083.36.074.5-.05l.005.005a89.521 89.521 0 0 1 1.623-1.405c.173-.143.143-.372.006-.563l-.125-.17c-.345-.465-.673-.906-.673-1.791v-3.3l.001-.335c.008-1.265.014-2.421-.933-3.305C10.404.274 9.06 0 8.03 0 6.017 0 3.77.75 3.296 3.24c-.047.264.143.404.316.443l2.054.22c.19-.009.33-.196.366-.387.176-.857.896-1.271 1.703-1.271.435 0 .929.16 1.188.55.264.39.26.91.257 1.376v.432c-.199.022-.407.044-.621.065-1.113.114-2.397.246-3.36.67C3.873 5.91 2.94 7.08 2.94 8.798c0 2.2 1.387 3.298 3.168 3.298 1.506 0 2.328-.354 3.489-1.54l.167.246c.274.405.456.675 1.047 1.166ZM6.03 8.431C6.03 6.627 7.647 6.3 9.177 6.3v.57c.001.776.002 1.434-.396 2.133-.336.595-.87.961-1.465.961-.812 0-1.286-.619-1.286-1.533ZM.435 12.174c2.629 1.603 6.698 4.084 13.183.997.28-.116.475.078.199.431C13.538 13.96 11.312 16 7.57 16 3.832 16 .968 13.446.094 12.386c-.24-.275.036-.4.199-.299l.142.087Z"></path><path d="M13.828 11.943c.567-.07 1.468-.027 1.645.204.135.176-.004.966-.233 1.533-.23.563-.572.961-.762 1.115-.191.154-.333.094-.23-.137.105-.23.684-1.663.455-1.963-.213-.278-1.177-.177-1.625-.13l-.09.009c-.095.008-.172.017-.233.024-.193.021-.245.027-.274-.032-.074-.209.779-.556 1.347-.623Z"></path></svg>`), Amazon[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Amazon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Amazon);
  var svg = root60();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-amazon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Amazon = hmr(Amazon, () => Amazon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Amazon[HMR].source;
    set(Amazon[HMR].source, module.default[HMR].original);
  });
}
var Amazon_default = Amazon;
mark_module_end(Amazon);

// node_modules/svelte-bootstrap-icons/lib/Amd.svelte
mark_module_start();
Amd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Amd.svelte";
var root61 = add_locations(ns_template(`<svg><!><path d="m.334 0 4.358 4.359h7.15v7.15l4.358 4.358V0H.334ZM.2 9.72l4.487-4.488v6.281h6.28L6.48 16H.2V9.72Z"></path></svg>`), Amd[FILENAME], [[1, 0, [[1, 164]]]]);
function Amd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Amd);
  var svg = root61();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-amd", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Amd = hmr(Amd, () => Amd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Amd[HMR].source;
    set(Amd[HMR].source, module.default[HMR].original);
  });
}
var Amd_default = Amd;
mark_module_end(Amd);

// node_modules/svelte-bootstrap-icons/lib/Android.svelte
mark_module_start();
Android[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Android.svelte";
var root62 = add_locations(ns_template(`<svg><!><path d="M2.76 3.061a.5.5 0 0 1 .679.2l1.283 2.352A8.94 8.94 0 0 1 8 5a8.94 8.94 0 0 1 3.278.613l1.283-2.352a.5.5 0 1 1 .878.478l-1.252 2.295C14.475 7.266 16 9.477 16 12H0c0-2.523 1.525-4.734 3.813-5.966L2.56 3.74a.5.5 0 0 1 .2-.678ZM5 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm6 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"></path></svg>`), Android[FILENAME], [[1, 0, [[1, 168]]]]);
function Android($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Android);
  var svg = root62();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-android", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Android = hmr(Android, () => Android[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Android[HMR].source;
    set(Android[HMR].source, module.default[HMR].original);
  });
}
var Android_default = Android;
mark_module_end(Android);

// node_modules/svelte-bootstrap-icons/lib/Android2.svelte
mark_module_start();
Android2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Android2.svelte";
var root63 = add_locations(ns_template(`<svg><!><path d="m10.213 1.471.691-1.26c.046-.083.03-.147-.048-.192-.085-.038-.15-.019-.195.058l-.7 1.27A4.832 4.832 0 0 0 8.005.941c-.688 0-1.34.135-1.956.404l-.7-1.27C5.303 0 5.239-.018 5.154.02c-.078.046-.094.11-.049.193l.691 1.259a4.25 4.25 0 0 0-1.673 1.476A3.697 3.697 0 0 0 3.5 5.02h9c0-.75-.208-1.44-.623-2.072a4.266 4.266 0 0 0-1.664-1.476ZM6.22 3.303a.367.367 0 0 1-.267.11.35.35 0 0 1-.263-.11.366.366 0 0 1-.107-.264.37.37 0 0 1 .107-.265.351.351 0 0 1 .263-.11c.103 0 .193.037.267.11a.36.36 0 0 1 .112.265.36.36 0 0 1-.112.264Zm4.101 0a.351.351 0 0 1-.262.11.366.366 0 0 1-.268-.11.358.358 0 0 1-.112-.264c0-.103.037-.191.112-.265a.367.367 0 0 1 .268-.11c.104 0 .19.037.262.11a.367.367 0 0 1 .107.265c0 .102-.035.19-.107.264ZM3.5 11.77c0 .294.104.544.311.75.208.204.46.307.76.307h.758l.01 2.182c0 .276.097.51.292.703a.961.961 0 0 0 .7.288.973.973 0 0 0 .71-.288.95.95 0 0 0 .292-.703v-2.182h1.343v2.182c0 .276.097.51.292.703a.972.972 0 0 0 .71.288.973.973 0 0 0 .71-.288.95.95 0 0 0 .292-.703v-2.182h.76c.291 0 .54-.103.749-.308.207-.205.311-.455.311-.75V5.365h-9v6.404Zm10.495-6.587a.983.983 0 0 0-.702.278.91.91 0 0 0-.293.685v4.063c0 .271.098.501.293.69a.97.97 0 0 0 .702.284c.28 0 .517-.095.712-.284a.924.924 0 0 0 .293-.69V6.146a.91.91 0 0 0-.293-.685.995.995 0 0 0-.712-.278Zm-12.702.283a.985.985 0 0 1 .712-.283c.273 0 .507.094.702.283a.913.913 0 0 1 .293.68v4.063a.932.932 0 0 1-.288.69.97.97 0 0 1-.707.284.986.986 0 0 1-.712-.284.924.924 0 0 1-.293-.69V6.146c0-.264.098-.491.293-.68Z"></path></svg>`), Android2[FILENAME], [[1, 0, [[1, 169]]]]);
function Android2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Android2);
  var svg = root63();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-android2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Android2 = hmr(Android2, () => Android2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Android2[HMR].source;
    set(Android2[HMR].source, module.default[HMR].original);
  });
}
var Android2_default = Android2;
mark_module_end(Android2);

// node_modules/svelte-bootstrap-icons/lib/AppIndicator.svelte
mark_module_start();
AppIndicator[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AppIndicator.svelte";
var root64 = add_locations(ns_template(`<svg><!><path d="M5.5 2A3.5 3.5 0 0 0 2 5.5v5A3.5 3.5 0 0 0 5.5 14h5a3.5 3.5 0 0 0 3.5-3.5V8a.5.5 0 0 1 1 0v2.5a4.5 4.5 0 0 1-4.5 4.5h-5A4.5 4.5 0 0 1 1 10.5v-5A4.5 4.5 0 0 1 5.5 1H8a.5.5 0 0 1 0 1H5.5z"></path><path d="M16 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"></path></svg>`), AppIndicator[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function AppIndicator($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AppIndicator);
  var svg = root64();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-app-indicator", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AppIndicator = hmr(AppIndicator, () => AppIndicator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AppIndicator[HMR].source;
    set(AppIndicator[HMR].source, module.default[HMR].original);
  });
}
var AppIndicator_default = AppIndicator;
mark_module_end(AppIndicator);

// node_modules/svelte-bootstrap-icons/lib/App.svelte
mark_module_start();
App[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/App.svelte";
var root65 = add_locations(ns_template(`<svg><!><path d="M11 2a3 3 0 0 1 3 3v6a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V5a3 3 0 0 1 3-3h6zM5 1a4 4 0 0 0-4 4v6a4 4 0 0 0 4 4h6a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4H5z"></path></svg>`), App[FILENAME], [[1, 0, [[1, 164]]]]);
function App($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, App);
  var svg = root65();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-app", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  App = hmr(App, () => App[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = App[HMR].source;
    set(App[HMR].source, module.default[HMR].original);
  });
}
var App_default = App;
mark_module_end(App);

// node_modules/svelte-bootstrap-icons/lib/Apple.svelte
mark_module_start();
Apple[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Apple.svelte";
var root66 = add_locations(ns_template(`<svg><!><path d="M11.182.008C11.148-.03 9.923.023 8.857 1.18c-1.066 1.156-.902 2.482-.878 2.516.024.034 1.52.087 2.475-1.258.955-1.345.762-2.391.728-2.43Zm3.314 11.733c-.048-.096-2.325-1.234-2.113-3.422.212-2.189 1.675-2.789 1.698-2.854.023-.065-.597-.79-1.254-1.157a3.692 3.692 0 0 0-1.563-.434c-.108-.003-.483-.095-1.254.116-.508.139-1.653.589-1.968.607-.316.018-1.256-.522-2.267-.665-.647-.125-1.333.131-1.824.328-.49.196-1.422.754-2.074 2.237-.652 1.482-.311 3.83-.067 4.56.244.729.625 1.924 1.273 2.796.576.984 1.34 1.667 1.659 1.899.319.232 1.219.386 1.843.067.502-.308 1.408-.485 1.766-.472.357.013 1.061.154 1.782.539.571.197 1.111.115 1.652-.105.541-.221 1.324-1.059 2.238-2.758.347-.79.505-1.217.473-1.282Z"></path><path d="M11.182.008C11.148-.03 9.923.023 8.857 1.18c-1.066 1.156-.902 2.482-.878 2.516.024.034 1.52.087 2.475-1.258.955-1.345.762-2.391.728-2.43Zm3.314 11.733c-.048-.096-2.325-1.234-2.113-3.422.212-2.189 1.675-2.789 1.698-2.854.023-.065-.597-.79-1.254-1.157a3.692 3.692 0 0 0-1.563-.434c-.108-.003-.483-.095-1.254.116-.508.139-1.653.589-1.968.607-.316.018-1.256-.522-2.267-.665-.647-.125-1.333.131-1.824.328-.49.196-1.422.754-2.074 2.237-.652 1.482-.311 3.83-.067 4.56.244.729.625 1.924 1.273 2.796.576.984 1.34 1.667 1.659 1.899.319.232 1.219.386 1.843.067.502-.308 1.408-.485 1.766-.472.357.013 1.061.154 1.782.539.571.197 1.111.115 1.652-.105.541-.221 1.324-1.059 2.238-2.758.347-.79.505-1.217.473-1.282Z"></path></svg>`), Apple[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Apple($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Apple);
  var svg = root66();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-apple", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Apple = hmr(Apple, () => Apple[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Apple[HMR].source;
    set(Apple[HMR].source, module.default[HMR].original);
  });
}
var Apple_default = Apple;
mark_module_end(Apple);

// node_modules/svelte-bootstrap-icons/lib/ArchiveFill.svelte
mark_module_start();
ArchiveFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArchiveFill.svelte";
var root67 = add_locations(ns_template(`<svg><!><path d="M12.643 15C13.979 15 15 13.845 15 12.5V5H1v7.5C1 13.845 2.021 15 3.357 15h9.286zM5.5 7h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1zM.8 1a.8.8 0 0 0-.8.8V3a.8.8 0 0 0 .8.8h14.4A.8.8 0 0 0 16 3V1.8a.8.8 0 0 0-.8-.8H.8z"></path></svg>`), ArchiveFill[FILENAME], [[1, 0, [[1, 173]]]]);
function ArchiveFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArchiveFill);
  var svg = root67();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-archive-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArchiveFill = hmr(ArchiveFill, () => ArchiveFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArchiveFill[HMR].source;
    set(ArchiveFill[HMR].source, module.default[HMR].original);
  });
}
var ArchiveFill_default = ArchiveFill;
mark_module_end(ArchiveFill);

// node_modules/svelte-bootstrap-icons/lib/Archive.svelte
mark_module_start();
Archive[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Archive.svelte";
var root68 = add_locations(ns_template(`<svg><!><path d="M0 2a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1v7.5a2.5 2.5 0 0 1-2.5 2.5h-9A2.5 2.5 0 0 1 1 12.5V5a1 1 0 0 1-1-1V2zm2 3v7.5A1.5 1.5 0 0 0 3.5 14h9a1.5 1.5 0 0 0 1.5-1.5V5H2zm13-3H1v2h14V2zM5 7.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"></path></svg>`), Archive[FILENAME], [[1, 0, [[1, 168]]]]);
function Archive($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Archive);
  var svg = root68();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-archive", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Archive = hmr(Archive, () => Archive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Archive[HMR].source;
    set(Archive[HMR].source, module.default[HMR].original);
  });
}
var Archive_default = Archive;
mark_module_end(Archive);

// node_modules/svelte-bootstrap-icons/lib/Arrow90degDown.svelte
mark_module_start();
Arrow90degDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Arrow90degDown.svelte";
var root69 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4.854 14.854a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V3.5A2.5 2.5 0 0 1 6.5 1h8a.5.5 0 0 1 0 1h-8A1.5 1.5 0 0 0 5 3.5v9.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4z"></path></svg>`), Arrow90degDown[FILENAME], [[1, 0, [[1, 177]]]]);
function Arrow90degDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Arrow90degDown);
  var svg = root69();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-90deg-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow90degDown = hmr(Arrow90degDown, () => Arrow90degDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow90degDown[HMR].source;
    set(Arrow90degDown[HMR].source, module.default[HMR].original);
  });
}
var Arrow90degDown_default = Arrow90degDown;
mark_module_end(Arrow90degDown);

// node_modules/svelte-bootstrap-icons/lib/Arrow90degLeft.svelte
mark_module_start();
Arrow90degLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Arrow90degLeft.svelte";
var root70 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.146 4.854a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 4H12.5A2.5 2.5 0 0 1 15 6.5v8a.5.5 0 0 1-1 0v-8A1.5 1.5 0 0 0 12.5 5H2.707l3.147 3.146a.5.5 0 1 1-.708.708l-4-4z"></path></svg>`), Arrow90degLeft[FILENAME], [[1, 0, [[1, 177]]]]);
function Arrow90degLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Arrow90degLeft);
  var svg = root70();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-90deg-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow90degLeft = hmr(Arrow90degLeft, () => Arrow90degLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow90degLeft[HMR].source;
    set(Arrow90degLeft[HMR].source, module.default[HMR].original);
  });
}
var Arrow90degLeft_default = Arrow90degLeft;
mark_module_end(Arrow90degLeft);

// node_modules/svelte-bootstrap-icons/lib/Arrow90degRight.svelte
mark_module_start();
Arrow90degRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Arrow90degRight.svelte";
var root71 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14.854 4.854a.5.5 0 0 0 0-.708l-4-4a.5.5 0 0 0-.708.708L13.293 4H3.5A2.5 2.5 0 0 0 1 6.5v8a.5.5 0 0 0 1 0v-8A1.5 1.5 0 0 1 3.5 5h9.793l-3.147 3.146a.5.5 0 0 0 .708.708l4-4z"></path></svg>`), Arrow90degRight[FILENAME], [[1, 0, [[1, 178]]]]);
function Arrow90degRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Arrow90degRight);
  var svg = root71();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-90deg-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow90degRight = hmr(Arrow90degRight, () => Arrow90degRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow90degRight[HMR].source;
    set(Arrow90degRight[HMR].source, module.default[HMR].original);
  });
}
var Arrow90degRight_default = Arrow90degRight;
mark_module_end(Arrow90degRight);

// node_modules/svelte-bootstrap-icons/lib/Arrow90degUp.svelte
mark_module_start();
Arrow90degUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Arrow90degUp.svelte";
var root72 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"></path></svg>`), Arrow90degUp[FILENAME], [[1, 0, [[1, 175]]]]);
function Arrow90degUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Arrow90degUp);
  var svg = root72();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-90deg-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow90degUp = hmr(Arrow90degUp, () => Arrow90degUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow90degUp[HMR].source;
    set(Arrow90degUp[HMR].source, module.default[HMR].original);
  });
}
var Arrow90degUp_default = Arrow90degUp;
mark_module_end(Arrow90degUp);

// node_modules/svelte-bootstrap-icons/lib/ArrowBarDown.svelte
mark_module_start();
ArrowBarDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowBarDown.svelte";
var root73 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5zM8 6a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 .708-.708L7.5 12.293V6.5A.5.5 0 0 1 8 6z"></path></svg>`), ArrowBarDown[FILENAME], [[1, 0, [[1, 175]]]]);
function ArrowBarDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowBarDown);
  var svg = root73();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-bar-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowBarDown = hmr(ArrowBarDown, () => ArrowBarDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowBarDown[HMR].source;
    set(ArrowBarDown[HMR].source, module.default[HMR].original);
  });
}
var ArrowBarDown_default = ArrowBarDown;
mark_module_end(ArrowBarDown);

// node_modules/svelte-bootstrap-icons/lib/ArrowBarLeft.svelte
mark_module_start();
ArrowBarLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowBarLeft.svelte";
var root74 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M12.5 15a.5.5 0 0 1-.5-.5v-13a.5.5 0 0 1 1 0v13a.5.5 0 0 1-.5.5ZM10 8a.5.5 0 0 1-.5.5H3.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L3.707 7.5H9.5a.5.5 0 0 1 .5.5Z"></path></svg>`), ArrowBarLeft[FILENAME], [[1, 0, [[1, 175]]]]);
function ArrowBarLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowBarLeft);
  var svg = root74();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-bar-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowBarLeft = hmr(ArrowBarLeft, () => ArrowBarLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowBarLeft[HMR].source;
    set(ArrowBarLeft[HMR].source, module.default[HMR].original);
  });
}
var ArrowBarLeft_default = ArrowBarLeft;
mark_module_end(ArrowBarLeft);

// node_modules/svelte-bootstrap-icons/lib/ArrowBarRight.svelte
mark_module_start();
ArrowBarRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowBarRight.svelte";
var root75 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 8a.5.5 0 0 0 .5.5h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L12.293 7.5H6.5A.5.5 0 0 0 6 8Zm-2.5 7a.5.5 0 0 1-.5-.5v-13a.5.5 0 0 1 1 0v13a.5.5 0 0 1-.5.5Z"></path></svg>`), ArrowBarRight[FILENAME], [[1, 0, [[1, 176]]]]);
function ArrowBarRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowBarRight);
  var svg = root75();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-bar-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowBarRight = hmr(ArrowBarRight, () => ArrowBarRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowBarRight[HMR].source;
    set(ArrowBarRight[HMR].source, module.default[HMR].original);
  });
}
var ArrowBarRight_default = ArrowBarRight;
mark_module_end(ArrowBarRight);

// node_modules/svelte-bootstrap-icons/lib/ArrowBarUp.svelte
mark_module_start();
ArrowBarUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowBarUp.svelte";
var root76 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 10a.5.5 0 0 0 .5-.5V3.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 3.707V9.5a.5.5 0 0 0 .5.5zm-7 2.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5z"></path></svg>`), ArrowBarUp[FILENAME], [[1, 0, [[1, 173]]]]);
function ArrowBarUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowBarUp);
  var svg = root76();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-bar-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowBarUp = hmr(ArrowBarUp, () => ArrowBarUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowBarUp[HMR].source;
    set(ArrowBarUp[HMR].source, module.default[HMR].original);
  });
}
var ArrowBarUp_default = ArrowBarUp;
mark_module_end(ArrowBarUp);

// node_modules/svelte-bootstrap-icons/lib/ArrowClockwise.svelte
mark_module_start();
ArrowClockwise[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowClockwise.svelte";
var root77 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"></path><path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"></path></svg>`), ArrowClockwise[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function ArrowClockwise($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowClockwise);
  var svg = root77();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-clockwise", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowClockwise = hmr(ArrowClockwise, () => ArrowClockwise[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowClockwise[HMR].source;
    set(ArrowClockwise[HMR].source, module.default[HMR].original);
  });
}
var ArrowClockwise_default = ArrowClockwise;
mark_module_end(ArrowClockwise);

// node_modules/svelte-bootstrap-icons/lib/ArrowCounterclockwise.svelte
mark_module_start();
ArrowCounterclockwise[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowCounterclockwise.svelte";
var root78 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z"></path><path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z"></path></svg>`), ArrowCounterclockwise[FILENAME], [
  [1, 0, [[1, 183], [2, 2]]]
]);
function ArrowCounterclockwise($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowCounterclockwise);
  var svg = root78();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-counterclockwise", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowCounterclockwise = hmr(ArrowCounterclockwise, () => ArrowCounterclockwise[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowCounterclockwise[HMR].source;
    set(ArrowCounterclockwise[HMR].source, module.default[HMR].original);
  });
}
var ArrowCounterclockwise_default = ArrowCounterclockwise;
mark_module_end(ArrowCounterclockwise);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownCircleFill.svelte
mark_module_start();
ArrowDownCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownCircleFill.svelte";
var root79 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z"></path></svg>`), ArrowDownCircleFill[FILENAME], [[1, 0, [[1, 183]]]]);
function ArrowDownCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownCircleFill);
  var svg = root79();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownCircleFill = hmr(ArrowDownCircleFill, () => ArrowDownCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownCircleFill[HMR].source;
    set(ArrowDownCircleFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownCircleFill_default = ArrowDownCircleFill;
mark_module_end(ArrowDownCircleFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownCircle.svelte
mark_module_start();
ArrowDownCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownCircle.svelte";
var root80 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z"></path></svg>`), ArrowDownCircle[FILENAME], [[1, 0, [[1, 178]]]]);
function ArrowDownCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownCircle);
  var svg = root80();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownCircle = hmr(ArrowDownCircle, () => ArrowDownCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownCircle[HMR].source;
    set(ArrowDownCircle[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownCircle_default = ArrowDownCircle;
mark_module_end(ArrowDownCircle);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownLeftCircleFill.svelte
mark_module_start();
ArrowDownLeftCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownLeftCircleFill.svelte";
var root81 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 0 0 8a8 8 0 0 0 16 0zm-5.904-2.803a.5.5 0 1 1 .707.707L6.707 10h2.768a.5.5 0 0 1 0 1H5.5a.5.5 0 0 1-.5-.5V6.525a.5.5 0 0 1 1 0v2.768l4.096-4.096z"></path></svg>`), ArrowDownLeftCircleFill[FILENAME], [[1, 0, [[1, 188]]]]);
function ArrowDownLeftCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownLeftCircleFill);
  var svg = root81();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-left-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownLeftCircleFill = hmr(ArrowDownLeftCircleFill, () => ArrowDownLeftCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownLeftCircleFill[HMR].source;
    set(ArrowDownLeftCircleFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownLeftCircleFill_default = ArrowDownLeftCircleFill;
mark_module_end(ArrowDownLeftCircleFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownLeftCircle.svelte
mark_module_start();
ArrowDownLeftCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownLeftCircle.svelte";
var root82 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-5.904-2.854a.5.5 0 1 1 .707.708L6.707 9.95h2.768a.5.5 0 1 1 0 1H5.5a.5.5 0 0 1-.5-.5V6.475a.5.5 0 1 1 1 0v2.768l4.096-4.097z"></path></svg>`), ArrowDownLeftCircle[FILENAME], [[1, 0, [[1, 183]]]]);
function ArrowDownLeftCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownLeftCircle);
  var svg = root82();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-left-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownLeftCircle = hmr(ArrowDownLeftCircle, () => ArrowDownLeftCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownLeftCircle[HMR].source;
    set(ArrowDownLeftCircle[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownLeftCircle_default = ArrowDownLeftCircle;
mark_module_end(ArrowDownLeftCircle);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownLeftSquareFill.svelte
mark_module_start();
ArrowDownLeftSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownLeftSquareFill.svelte";
var root83 = add_locations(ns_template(`<svg><!><path d="M2 16a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2zm8.096-10.803L6 9.293V6.525a.5.5 0 0 0-1 0V10.5a.5.5 0 0 0 .5.5h3.975a.5.5 0 0 0 0-1H6.707l4.096-4.096a.5.5 0 1 0-.707-.707z"></path></svg>`), ArrowDownLeftSquareFill[FILENAME], [[1, 0, [[1, 188]]]]);
function ArrowDownLeftSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownLeftSquareFill);
  var svg = root83();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-left-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownLeftSquareFill = hmr(ArrowDownLeftSquareFill, () => ArrowDownLeftSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownLeftSquareFill[HMR].source;
    set(ArrowDownLeftSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownLeftSquareFill_default = ArrowDownLeftSquareFill;
mark_module_end(ArrowDownLeftSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownLeftSquare.svelte
mark_module_start();
ArrowDownLeftSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownLeftSquare.svelte";
var root84 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm10.096 3.146a.5.5 0 1 1 .707.708L6.707 9.95h2.768a.5.5 0 1 1 0 1H5.5a.5.5 0 0 1-.5-.5V6.475a.5.5 0 1 1 1 0v2.768l4.096-4.097z"></path></svg>`), ArrowDownLeftSquare[FILENAME], [[1, 0, [[1, 183]]]]);
function ArrowDownLeftSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownLeftSquare);
  var svg = root84();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-left-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownLeftSquare = hmr(ArrowDownLeftSquare, () => ArrowDownLeftSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownLeftSquare[HMR].source;
    set(ArrowDownLeftSquare[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownLeftSquare_default = ArrowDownLeftSquare;
mark_module_end(ArrowDownLeftSquare);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownLeft.svelte
mark_module_start();
ArrowDownLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownLeft.svelte";
var root85 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 13.5a.5.5 0 0 0 .5.5h6a.5.5 0 0 0 0-1H3.707L13.854 2.854a.5.5 0 0 0-.708-.708L3 12.293V7.5a.5.5 0 0 0-1 0v6z"></path></svg>`), ArrowDownLeft[FILENAME], [[1, 0, [[1, 176]]]]);
function ArrowDownLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownLeft);
  var svg = root85();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownLeft = hmr(ArrowDownLeft, () => ArrowDownLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownLeft[HMR].source;
    set(ArrowDownLeft[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownLeft_default = ArrowDownLeft;
mark_module_end(ArrowDownLeft);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownRightCircleFill.svelte
mark_module_start();
ArrowDownRightCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownRightCircleFill.svelte";
var root86 = add_locations(ns_template(`<svg><!><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm5.904-2.803a.5.5 0 1 0-.707.707L9.293 10H6.525a.5.5 0 0 0 0 1H10.5a.5.5 0 0 0 .5-.5V6.525a.5.5 0 0 0-1 0v2.768L5.904 5.197z"></path></svg>`), ArrowDownRightCircleFill[FILENAME], [[1, 0, [[1, 189]]]]);
function ArrowDownRightCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownRightCircleFill);
  var svg = root86();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-right-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownRightCircleFill = hmr(ArrowDownRightCircleFill, () => ArrowDownRightCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownRightCircleFill[HMR].source;
    set(ArrowDownRightCircleFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownRightCircleFill_default = ArrowDownRightCircleFill;
mark_module_end(ArrowDownRightCircleFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownRightCircle.svelte
mark_module_start();
ArrowDownRightCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownRightCircle.svelte";
var root87 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.854 5.146a.5.5 0 1 0-.708.708L9.243 9.95H6.475a.5.5 0 1 0 0 1h3.975a.5.5 0 0 0 .5-.5V6.475a.5.5 0 1 0-1 0v2.768L5.854 5.146z"></path></svg>`), ArrowDownRightCircle[FILENAME], [[1, 0, [[1, 184]]]]);
function ArrowDownRightCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownRightCircle);
  var svg = root87();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-right-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownRightCircle = hmr(ArrowDownRightCircle, () => ArrowDownRightCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownRightCircle[HMR].source;
    set(ArrowDownRightCircle[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownRightCircle_default = ArrowDownRightCircle;
mark_module_end(ArrowDownRightCircle);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownRightSquareFill.svelte
mark_module_start();
ArrowDownRightSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownRightSquareFill.svelte";
var root88 = add_locations(ns_template(`<svg><!><path d="M14 16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12zM5.904 5.197 10 9.293V6.525a.5.5 0 0 1 1 0V10.5a.5.5 0 0 1-.5.5H6.525a.5.5 0 0 1 0-1h2.768L5.197 5.904a.5.5 0 0 1 .707-.707z"></path></svg>`), ArrowDownRightSquareFill[FILENAME], [[1, 0, [[1, 189]]]]);
function ArrowDownRightSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownRightSquareFill);
  var svg = root88();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-right-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownRightSquareFill = hmr(ArrowDownRightSquareFill, () => ArrowDownRightSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownRightSquareFill[HMR].source;
    set(ArrowDownRightSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownRightSquareFill_default = ArrowDownRightSquareFill;
mark_module_end(ArrowDownRightSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownRightSquare.svelte
mark_module_start();
ArrowDownRightSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownRightSquare.svelte";
var root89 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm5.854 3.146a.5.5 0 1 0-.708.708L9.243 9.95H6.475a.5.5 0 1 0 0 1h3.975a.5.5 0 0 0 .5-.5V6.475a.5.5 0 1 0-1 0v2.768L5.854 5.146z"></path></svg>`), ArrowDownRightSquare[FILENAME], [[1, 0, [[1, 184]]]]);
function ArrowDownRightSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownRightSquare);
  var svg = root89();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-right-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownRightSquare = hmr(ArrowDownRightSquare, () => ArrowDownRightSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownRightSquare[HMR].source;
    set(ArrowDownRightSquare[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownRightSquare_default = ArrowDownRightSquare;
mark_module_end(ArrowDownRightSquare);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownRight.svelte
mark_module_start();
ArrowDownRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownRight.svelte";
var root90 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 13.5a.5.5 0 0 1-.5.5h-6a.5.5 0 0 1 0-1h4.793L2.146 2.854a.5.5 0 1 1 .708-.708L13 12.293V7.5a.5.5 0 0 1 1 0v6z"></path></svg>`), ArrowDownRight[FILENAME], [[1, 0, [[1, 177]]]]);
function ArrowDownRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownRight);
  var svg = root90();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownRight = hmr(ArrowDownRight, () => ArrowDownRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownRight[HMR].source;
    set(ArrowDownRight[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownRight_default = ArrowDownRight;
mark_module_end(ArrowDownRight);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownShort.svelte
mark_module_start();
ArrowDownShort[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownShort.svelte";
var root91 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"></path></svg>`), ArrowDownShort[FILENAME], [[1, 0, [[1, 177]]]]);
function ArrowDownShort($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownShort);
  var svg = root91();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-short", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownShort = hmr(ArrowDownShort, () => ArrowDownShort[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownShort[HMR].source;
    set(ArrowDownShort[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownShort_default = ArrowDownShort;
mark_module_end(ArrowDownShort);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownSquareFill.svelte
mark_module_start();
ArrowDownSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownSquareFill.svelte";
var root92 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6.5 4.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5a.5.5 0 0 1 1 0z"></path></svg>`), ArrowDownSquareFill[FILENAME], [[1, 0, [[1, 183]]]]);
function ArrowDownSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownSquareFill);
  var svg = root92();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownSquareFill = hmr(ArrowDownSquareFill, () => ArrowDownSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownSquareFill[HMR].source;
    set(ArrowDownSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownSquareFill_default = ArrowDownSquareFill;
mark_module_end(ArrowDownSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownSquare.svelte
mark_module_start();
ArrowDownSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownSquare.svelte";
var root93 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.5 2.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z"></path></svg>`), ArrowDownSquare[FILENAME], [[1, 0, [[1, 178]]]]);
function ArrowDownSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownSquare);
  var svg = root93();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownSquare = hmr(ArrowDownSquare, () => ArrowDownSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownSquare[HMR].source;
    set(ArrowDownSquare[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownSquare_default = ArrowDownSquare;
mark_module_end(ArrowDownSquare);

// node_modules/svelte-bootstrap-icons/lib/ArrowDownUp.svelte
mark_module_start();
ArrowDownUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDownUp.svelte";
var root94 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11.5 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L11 2.707V14.5a.5.5 0 0 0 .5.5zm-7-14a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V1.5a.5.5 0 0 1 .5-.5z"></path></svg>`), ArrowDownUp[FILENAME], [[1, 0, [[1, 174]]]]);
function ArrowDownUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDownUp);
  var svg = root94();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownUp = hmr(ArrowDownUp, () => ArrowDownUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownUp[HMR].source;
    set(ArrowDownUp[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownUp_default = ArrowDownUp;
mark_module_end(ArrowDownUp);

// node_modules/svelte-bootstrap-icons/lib/ArrowDown.svelte
mark_module_start();
ArrowDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowDown.svelte";
var root95 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1z"></path></svg>`), ArrowDown[FILENAME], [[1, 0, [[1, 171]]]]);
function ArrowDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowDown);
  var svg = root95();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDown = hmr(ArrowDown, () => ArrowDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDown[HMR].source;
    set(ArrowDown[HMR].source, module.default[HMR].original);
  });
}
var ArrowDown_default = ArrowDown;
mark_module_end(ArrowDown);

// node_modules/svelte-bootstrap-icons/lib/ArrowLeftCircleFill.svelte
mark_module_start();
ArrowLeftCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowLeftCircleFill.svelte";
var root96 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zm3.5 7.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z"></path></svg>`), ArrowLeftCircleFill[FILENAME], [[1, 0, [[1, 183]]]]);
function ArrowLeftCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowLeftCircleFill);
  var svg = root96();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-left-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowLeftCircleFill = hmr(ArrowLeftCircleFill, () => ArrowLeftCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowLeftCircleFill[HMR].source;
    set(ArrowLeftCircleFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowLeftCircleFill_default = ArrowLeftCircleFill;
mark_module_end(ArrowLeftCircleFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowLeftCircle.svelte
mark_module_start();
ArrowLeftCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowLeftCircle.svelte";
var root97 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.5-.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z"></path></svg>`), ArrowLeftCircle[FILENAME], [[1, 0, [[1, 178]]]]);
function ArrowLeftCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowLeftCircle);
  var svg = root97();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-left-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowLeftCircle = hmr(ArrowLeftCircle, () => ArrowLeftCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowLeftCircle[HMR].source;
    set(ArrowLeftCircle[HMR].source, module.default[HMR].original);
  });
}
var ArrowLeftCircle_default = ArrowLeftCircle;
mark_module_end(ArrowLeftCircle);

// node_modules/svelte-bootstrap-icons/lib/ArrowLeftRight.svelte
mark_module_start();
ArrowLeftRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowLeftRight.svelte";
var root98 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 11.5a.5.5 0 0 0 .5.5h11.793l-3.147 3.146a.5.5 0 0 0 .708.708l4-4a.5.5 0 0 0 0-.708l-4-4a.5.5 0 0 0-.708.708L13.293 11H1.5a.5.5 0 0 0-.5.5zm14-7a.5.5 0 0 1-.5.5H2.707l3.147 3.146a.5.5 0 1 1-.708.708l-4-4a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 4H14.5a.5.5 0 0 1 .5.5z"></path></svg>`), ArrowLeftRight[FILENAME], [[1, 0, [[1, 177]]]]);
function ArrowLeftRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowLeftRight);
  var svg = root98();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-left-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowLeftRight = hmr(ArrowLeftRight, () => ArrowLeftRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowLeftRight[HMR].source;
    set(ArrowLeftRight[HMR].source, module.default[HMR].original);
  });
}
var ArrowLeftRight_default = ArrowLeftRight;
mark_module_end(ArrowLeftRight);

// node_modules/svelte-bootstrap-icons/lib/ArrowLeftShort.svelte
mark_module_start();
ArrowLeftShort[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowLeftShort.svelte";
var root99 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M12 8a.5.5 0 0 1-.5.5H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5a.5.5 0 0 1 .5.5z"></path></svg>`), ArrowLeftShort[FILENAME], [[1, 0, [[1, 177]]]]);
function ArrowLeftShort($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowLeftShort);
  var svg = root99();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-left-short", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowLeftShort = hmr(ArrowLeftShort, () => ArrowLeftShort[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowLeftShort[HMR].source;
    set(ArrowLeftShort[HMR].source, module.default[HMR].original);
  });
}
var ArrowLeftShort_default = ArrowLeftShort;
mark_module_end(ArrowLeftShort);

// node_modules/svelte-bootstrap-icons/lib/ArrowLeftSquareFill.svelte
mark_module_start();
ArrowLeftSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowLeftSquareFill.svelte";
var root100 = add_locations(ns_template(`<svg><!><path d="M16 14a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12zm-4.5-6.5H5.707l2.147-2.146a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708-.708L5.707 8.5H11.5a.5.5 0 0 0 0-1z"></path></svg>`), ArrowLeftSquareFill[FILENAME], [[1, 0, [[1, 183]]]]);
function ArrowLeftSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowLeftSquareFill);
  var svg = root100();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-left-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowLeftSquareFill = hmr(ArrowLeftSquareFill, () => ArrowLeftSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowLeftSquareFill[HMR].source;
    set(ArrowLeftSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowLeftSquareFill_default = ArrowLeftSquareFill;
mark_module_end(ArrowLeftSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowLeftSquare.svelte
mark_module_start();
ArrowLeftSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowLeftSquare.svelte";
var root101 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm11.5 5.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z"></path></svg>`), ArrowLeftSquare[FILENAME], [[1, 0, [[1, 178]]]]);
function ArrowLeftSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowLeftSquare);
  var svg = root101();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-left-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowLeftSquare = hmr(ArrowLeftSquare, () => ArrowLeftSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowLeftSquare[HMR].source;
    set(ArrowLeftSquare[HMR].source, module.default[HMR].original);
  });
}
var ArrowLeftSquare_default = ArrowLeftSquare;
mark_module_end(ArrowLeftSquare);

// node_modules/svelte-bootstrap-icons/lib/ArrowLeft.svelte
mark_module_start();
ArrowLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowLeft.svelte";
var root102 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"></path></svg>`), ArrowLeft[FILENAME], [[1, 0, [[1, 171]]]]);
function ArrowLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowLeft);
  var svg = root102();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowLeft = hmr(ArrowLeft, () => ArrowLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowLeft[HMR].source;
    set(ArrowLeft[HMR].source, module.default[HMR].original);
  });
}
var ArrowLeft_default = ArrowLeft;
mark_module_end(ArrowLeft);

// node_modules/svelte-bootstrap-icons/lib/ArrowRepeat.svelte
mark_module_start();
ArrowRepeat[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowRepeat.svelte";
var root103 = add_locations(ns_template(`<svg><!><path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z"></path><path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z"></path></svg>`), ArrowRepeat[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function ArrowRepeat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowRepeat);
  var svg = root103();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-repeat", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowRepeat = hmr(ArrowRepeat, () => ArrowRepeat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowRepeat[HMR].source;
    set(ArrowRepeat[HMR].source, module.default[HMR].original);
  });
}
var ArrowRepeat_default = ArrowRepeat;
mark_module_end(ArrowRepeat);

// node_modules/svelte-bootstrap-icons/lib/ArrowReturnLeft.svelte
mark_module_start();
ArrowReturnLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowReturnLeft.svelte";
var root104 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14.5 1.5a.5.5 0 0 1 .5.5v4.8a2.5 2.5 0 0 1-2.5 2.5H2.707l3.347 3.346a.5.5 0 0 1-.708.708l-4.2-4.2a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 8.3H12.5A1.5 1.5 0 0 0 14 6.8V2a.5.5 0 0 1 .5-.5z"></path></svg>`), ArrowReturnLeft[FILENAME], [[1, 0, [[1, 178]]]]);
function ArrowReturnLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowReturnLeft);
  var svg = root104();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-return-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowReturnLeft = hmr(ArrowReturnLeft, () => ArrowReturnLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowReturnLeft[HMR].source;
    set(ArrowReturnLeft[HMR].source, module.default[HMR].original);
  });
}
var ArrowReturnLeft_default = ArrowReturnLeft;
mark_module_end(ArrowReturnLeft);

// node_modules/svelte-bootstrap-icons/lib/ArrowReturnRight.svelte
mark_module_start();
ArrowReturnRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowReturnRight.svelte";
var root105 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.5 1.5A.5.5 0 0 0 1 2v4.8a2.5 2.5 0 0 0 2.5 2.5h9.793l-3.347 3.346a.5.5 0 0 0 .708.708l4.2-4.2a.5.5 0 0 0 0-.708l-4-4a.5.5 0 0 0-.708.708L13.293 8.3H3.5A1.5 1.5 0 0 1 2 6.8V2a.5.5 0 0 0-.5-.5z"></path></svg>`), ArrowReturnRight[FILENAME], [[1, 0, [[1, 179]]]]);
function ArrowReturnRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowReturnRight);
  var svg = root105();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-return-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowReturnRight = hmr(ArrowReturnRight, () => ArrowReturnRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowReturnRight[HMR].source;
    set(ArrowReturnRight[HMR].source, module.default[HMR].original);
  });
}
var ArrowReturnRight_default = ArrowReturnRight;
mark_module_end(ArrowReturnRight);

// node_modules/svelte-bootstrap-icons/lib/ArrowRightCircleFill.svelte
mark_module_start();
ArrowRightCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowRightCircleFill.svelte";
var root106 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H4.5z"></path></svg>`), ArrowRightCircleFill[FILENAME], [[1, 0, [[1, 184]]]]);
function ArrowRightCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowRightCircleFill);
  var svg = root106();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-right-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowRightCircleFill = hmr(ArrowRightCircleFill, () => ArrowRightCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowRightCircleFill[HMR].source;
    set(ArrowRightCircleFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowRightCircleFill_default = ArrowRightCircleFill;
mark_module_end(ArrowRightCircleFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowRightCircle.svelte
mark_module_start();
ArrowRightCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowRightCircle.svelte";
var root107 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H4.5z"></path></svg>`), ArrowRightCircle[FILENAME], [[1, 0, [[1, 179]]]]);
function ArrowRightCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowRightCircle);
  var svg = root107();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-right-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowRightCircle = hmr(ArrowRightCircle, () => ArrowRightCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowRightCircle[HMR].source;
    set(ArrowRightCircle[HMR].source, module.default[HMR].original);
  });
}
var ArrowRightCircle_default = ArrowRightCircle;
mark_module_end(ArrowRightCircle);

// node_modules/svelte-bootstrap-icons/lib/ArrowRightShort.svelte
mark_module_start();
ArrowRightShort[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowRightShort.svelte";
var root108 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4 8a.5.5 0 0 1 .5-.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5A.5.5 0 0 1 4 8z"></path></svg>`), ArrowRightShort[FILENAME], [[1, 0, [[1, 178]]]]);
function ArrowRightShort($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowRightShort);
  var svg = root108();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-right-short", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowRightShort = hmr(ArrowRightShort, () => ArrowRightShort[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowRightShort[HMR].source;
    set(ArrowRightShort[HMR].source, module.default[HMR].original);
  });
}
var ArrowRightShort_default = ArrowRightShort;
mark_module_end(ArrowRightShort);

// node_modules/svelte-bootstrap-icons/lib/ArrowRightSquareFill.svelte
mark_module_start();
ArrowRightSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowRightSquareFill.svelte";
var root109 = add_locations(ns_template(`<svg><!><path d="M0 14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v12zm4.5-6.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5a.5.5 0 0 1 0-1z"></path></svg>`), ArrowRightSquareFill[FILENAME], [[1, 0, [[1, 184]]]]);
function ArrowRightSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowRightSquareFill);
  var svg = root109();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-right-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowRightSquareFill = hmr(ArrowRightSquareFill, () => ArrowRightSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowRightSquareFill[HMR].source;
    set(ArrowRightSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowRightSquareFill_default = ArrowRightSquareFill;
mark_module_end(ArrowRightSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowRightSquare.svelte
mark_module_start();
ArrowRightSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowRightSquare.svelte";
var root110 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm4.5 5.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H4.5z"></path></svg>`), ArrowRightSquare[FILENAME], [[1, 0, [[1, 179]]]]);
function ArrowRightSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowRightSquare);
  var svg = root110();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-right-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowRightSquare = hmr(ArrowRightSquare, () => ArrowRightSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowRightSquare[HMR].source;
    set(ArrowRightSquare[HMR].source, module.default[HMR].original);
  });
}
var ArrowRightSquare_default = ArrowRightSquare;
mark_module_end(ArrowRightSquare);

// node_modules/svelte-bootstrap-icons/lib/ArrowRight.svelte
mark_module_start();
ArrowRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowRight.svelte";
var root111 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"></path></svg>`), ArrowRight[FILENAME], [[1, 0, [[1, 172]]]]);
function ArrowRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowRight);
  var svg = root111();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowRight = hmr(ArrowRight, () => ArrowRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowRight[HMR].source;
    set(ArrowRight[HMR].source, module.default[HMR].original);
  });
}
var ArrowRight_default = ArrowRight;
mark_module_end(ArrowRight);

// node_modules/svelte-bootstrap-icons/lib/ArrowThroughHeartFill.svelte
mark_module_start();
ArrowThroughHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowThroughHeartFill.svelte";
var root112 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2.854 15.854A.5.5 0 0 1 2 15.5V14H.5a.5.5 0 0 1-.354-.854l1.5-1.5A.5.5 0 0 1 2 11.5h1.793l3.103-3.104a.5.5 0 1 1 .708.708L4.5 12.207V14a.5.5 0 0 1-.146.354l-1.5 1.5ZM16 3.5a.5.5 0 0 1-.854.354L14 2.707l-1.006 1.006c.236.248.44.531.6.845.562 1.096.585 2.517-.213 4.092-.793 1.563-2.395 3.288-5.105 5.08L8 13.912l-.276-.182A23.825 23.825 0 0 1 5.8 12.323L8.31 9.81a1.5 1.5 0 0 0-2.122-2.122L3.657 10.22a8.827 8.827 0 0 1-1.039-1.57c-.798-1.576-.775-2.997-.213-4.093C3.426 2.565 6.18 1.809 8 3.233c1.25-.98 2.944-.928 4.212-.152L13.292 2 12.147.854A.5.5 0 0 1 12.5 0h3a.5.5 0 0 1 .5.5v3Z"></path></svg>`), ArrowThroughHeartFill[FILENAME], [[1, 0, [[1, 185]]]]);
function ArrowThroughHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowThroughHeartFill);
  var svg = root112();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-through-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowThroughHeartFill = hmr(ArrowThroughHeartFill, () => ArrowThroughHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowThroughHeartFill[HMR].source;
    set(ArrowThroughHeartFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowThroughHeartFill_default = ArrowThroughHeartFill;
mark_module_end(ArrowThroughHeartFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowThroughHeart.svelte
mark_module_start();
ArrowThroughHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowThroughHeart.svelte";
var root113 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2.854 15.854A.5.5 0 0 1 2 15.5V14H.5a.5.5 0 0 1-.354-.854l1.5-1.5A.5.5 0 0 1 2 11.5h1.793l.53-.53c-.771-.802-1.328-1.58-1.704-2.32-.798-1.575-.775-2.996-.213-4.092C3.426 2.565 6.18 1.809 8 3.233c1.25-.98 2.944-.928 4.212-.152L13.292 2 12.147.854A.5.5 0 0 1 12.5 0h3a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.854.354L14 2.707l-1.006 1.006c.236.248.44.531.6.845.562 1.096.585 2.517-.213 4.092-.793 1.563-2.395 3.288-5.105 5.08L8 13.912l-.276-.182a21.86 21.86 0 0 1-2.685-2.062l-.539.54V14a.5.5 0 0 1-.146.354l-1.5 1.5Zm2.893-4.894A20.419 20.419 0 0 0 8 12.71c2.456-1.666 3.827-3.207 4.489-4.512.679-1.34.607-2.42.215-3.185-.817-1.595-3.087-2.054-4.346-.761L8 4.62l-.358-.368c-1.259-1.293-3.53-.834-4.346.761-.392.766-.464 1.845.215 3.185.323.636.815 1.33 1.519 2.065l1.866-1.867a.5.5 0 1 1 .708.708L5.747 10.96Z"></path></svg>`), ArrowThroughHeart[FILENAME], [[1, 0, [[1, 180]]]]);
function ArrowThroughHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowThroughHeart);
  var svg = root113();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-through-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowThroughHeart = hmr(ArrowThroughHeart, () => ArrowThroughHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowThroughHeart[HMR].source;
    set(ArrowThroughHeart[HMR].source, module.default[HMR].original);
  });
}
var ArrowThroughHeart_default = ArrowThroughHeart;
mark_module_end(ArrowThroughHeart);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpCircleFill.svelte
mark_module_start();
ArrowUpCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpCircleFill.svelte";
var root114 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 0 0 8a8 8 0 0 0 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z"></path></svg>`), ArrowUpCircleFill[FILENAME], [[1, 0, [[1, 181]]]]);
function ArrowUpCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpCircleFill);
  var svg = root114();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpCircleFill = hmr(ArrowUpCircleFill, () => ArrowUpCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpCircleFill[HMR].source;
    set(ArrowUpCircleFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpCircleFill_default = ArrowUpCircleFill;
mark_module_end(ArrowUpCircleFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpCircle.svelte
mark_module_start();
ArrowUpCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpCircle.svelte";
var root115 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z"></path></svg>`), ArrowUpCircle[FILENAME], [[1, 0, [[1, 176]]]]);
function ArrowUpCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpCircle);
  var svg = root115();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpCircle = hmr(ArrowUpCircle, () => ArrowUpCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpCircle[HMR].source;
    set(ArrowUpCircle[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpCircle_default = ArrowUpCircle;
mark_module_end(ArrowUpCircle);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpLeftCircleFill.svelte
mark_module_start();
ArrowUpLeftCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpLeftCircleFill.svelte";
var root116 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-5.904 2.803a.5.5 0 1 0 .707-.707L6.707 6h2.768a.5.5 0 1 0 0-1H5.5a.5.5 0 0 0-.5.5v3.975a.5.5 0 0 0 1 0V6.707l4.096 4.096z"></path></svg>`), ArrowUpLeftCircleFill[FILENAME], [[1, 0, [[1, 186]]]]);
function ArrowUpLeftCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpLeftCircleFill);
  var svg = root116();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-left-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpLeftCircleFill = hmr(ArrowUpLeftCircleFill, () => ArrowUpLeftCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpLeftCircleFill[HMR].source;
    set(ArrowUpLeftCircleFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpLeftCircleFill_default = ArrowUpLeftCircleFill;
mark_module_end(ArrowUpLeftCircleFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpLeftCircle.svelte
mark_module_start();
ArrowUpLeftCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpLeftCircle.svelte";
var root117 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-5.904 2.803a.5.5 0 1 0 .707-.707L6.707 6h2.768a.5.5 0 1 0 0-1H5.5a.5.5 0 0 0-.5.5v3.975a.5.5 0 0 0 1 0V6.707l4.096 4.096z"></path></svg>`), ArrowUpLeftCircle[FILENAME], [[1, 0, [[1, 181]]]]);
function ArrowUpLeftCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpLeftCircle);
  var svg = root117();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-left-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpLeftCircle = hmr(ArrowUpLeftCircle, () => ArrowUpLeftCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpLeftCircle[HMR].source;
    set(ArrowUpLeftCircle[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpLeftCircle_default = ArrowUpLeftCircle;
mark_module_end(ArrowUpLeftCircle);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpLeftSquareFill.svelte
mark_module_start();
ArrowUpLeftSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpLeftSquareFill.svelte";
var root118 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm8.096 10.803L6 6.707v2.768a.5.5 0 0 1-1 0V5.5a.5.5 0 0 1 .5-.5h3.975a.5.5 0 1 1 0 1H6.707l4.096 4.096a.5.5 0 1 1-.707.707z"></path></svg>`), ArrowUpLeftSquareFill[FILENAME], [[1, 0, [[1, 186]]]]);
function ArrowUpLeftSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpLeftSquareFill);
  var svg = root118();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-left-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpLeftSquareFill = hmr(ArrowUpLeftSquareFill, () => ArrowUpLeftSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpLeftSquareFill[HMR].source;
    set(ArrowUpLeftSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpLeftSquareFill_default = ArrowUpLeftSquareFill;
mark_module_end(ArrowUpLeftSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpLeftSquare.svelte
mark_module_start();
ArrowUpLeftSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpLeftSquare.svelte";
var root119 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm10.096 8.803a.5.5 0 1 0 .707-.707L6.707 6h2.768a.5.5 0 1 0 0-1H5.5a.5.5 0 0 0-.5.5v3.975a.5.5 0 0 0 1 0V6.707l4.096 4.096z"></path></svg>`), ArrowUpLeftSquare[FILENAME], [[1, 0, [[1, 181]]]]);
function ArrowUpLeftSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpLeftSquare);
  var svg = root119();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-left-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpLeftSquare = hmr(ArrowUpLeftSquare, () => ArrowUpLeftSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpLeftSquare[HMR].source;
    set(ArrowUpLeftSquare[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpLeftSquare_default = ArrowUpLeftSquare;
mark_module_end(ArrowUpLeftSquare);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpLeft.svelte
mark_module_start();
ArrowUpLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpLeft.svelte";
var root120 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 2.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1H3.707l10.147 10.146a.5.5 0 0 1-.708.708L3 3.707V8.5a.5.5 0 0 1-1 0v-6z"></path></svg>`), ArrowUpLeft[FILENAME], [[1, 0, [[1, 174]]]]);
function ArrowUpLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpLeft);
  var svg = root120();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpLeft = hmr(ArrowUpLeft, () => ArrowUpLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpLeft[HMR].source;
    set(ArrowUpLeft[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpLeft_default = ArrowUpLeft;
mark_module_end(ArrowUpLeft);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpRightCircleFill.svelte
mark_module_start();
ArrowUpRightCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpRightCircleFill.svelte";
var root121 = add_locations(ns_template(`<svg><!><path d="M0 8a8 8 0 1 0 16 0A8 8 0 0 0 0 8zm5.904 2.803a.5.5 0 1 1-.707-.707L9.293 6H6.525a.5.5 0 1 1 0-1H10.5a.5.5 0 0 1 .5.5v3.975a.5.5 0 0 1-1 0V6.707l-4.096 4.096z"></path></svg>`), ArrowUpRightCircleFill[FILENAME], [[1, 0, [[1, 187]]]]);
function ArrowUpRightCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpRightCircleFill);
  var svg = root121();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-right-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpRightCircleFill = hmr(ArrowUpRightCircleFill, () => ArrowUpRightCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpRightCircleFill[HMR].source;
    set(ArrowUpRightCircleFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpRightCircleFill_default = ArrowUpRightCircleFill;
mark_module_end(ArrowUpRightCircleFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpRightCircle.svelte
mark_module_start();
ArrowUpRightCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpRightCircle.svelte";
var root122 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.854 10.803a.5.5 0 1 1-.708-.707L9.243 6H6.475a.5.5 0 1 1 0-1h3.975a.5.5 0 0 1 .5.5v3.975a.5.5 0 1 1-1 0V6.707l-4.096 4.096z"></path></svg>`), ArrowUpRightCircle[FILENAME], [[1, 0, [[1, 182]]]]);
function ArrowUpRightCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpRightCircle);
  var svg = root122();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-right-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpRightCircle = hmr(ArrowUpRightCircle, () => ArrowUpRightCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpRightCircle[HMR].source;
    set(ArrowUpRightCircle[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpRightCircle_default = ArrowUpRightCircle;
mark_module_end(ArrowUpRightCircle);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpRightSquareFill.svelte
mark_module_start();
ArrowUpRightSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpRightSquareFill.svelte";
var root123 = add_locations(ns_template(`<svg><!><path d="M14 0a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12zM5.904 10.803 10 6.707v2.768a.5.5 0 0 0 1 0V5.5a.5.5 0 0 0-.5-.5H6.525a.5.5 0 1 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 .707.707z"></path></svg>`), ArrowUpRightSquareFill[FILENAME], [[1, 0, [[1, 187]]]]);
function ArrowUpRightSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpRightSquareFill);
  var svg = root123();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-right-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpRightSquareFill = hmr(ArrowUpRightSquareFill, () => ArrowUpRightSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpRightSquareFill[HMR].source;
    set(ArrowUpRightSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpRightSquareFill_default = ArrowUpRightSquareFill;
mark_module_end(ArrowUpRightSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpRightSquare.svelte
mark_module_start();
ArrowUpRightSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpRightSquare.svelte";
var root124 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm5.854 8.803a.5.5 0 1 1-.708-.707L9.243 6H6.475a.5.5 0 1 1 0-1h3.975a.5.5 0 0 1 .5.5v3.975a.5.5 0 1 1-1 0V6.707l-4.096 4.096z"></path></svg>`), ArrowUpRightSquare[FILENAME], [[1, 0, [[1, 182]]]]);
function ArrowUpRightSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpRightSquare);
  var svg = root124();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-right-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpRightSquare = hmr(ArrowUpRightSquare, () => ArrowUpRightSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpRightSquare[HMR].source;
    set(ArrowUpRightSquare[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpRightSquare_default = ArrowUpRightSquare;
mark_module_end(ArrowUpRightSquare);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpRight.svelte
mark_module_start();
ArrowUpRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpRight.svelte";
var root125 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 2.5a.5.5 0 0 0-.5-.5h-6a.5.5 0 0 0 0 1h4.793L2.146 13.146a.5.5 0 0 0 .708.708L13 3.707V8.5a.5.5 0 0 0 1 0v-6z"></path></svg>`), ArrowUpRight[FILENAME], [[1, 0, [[1, 175]]]]);
function ArrowUpRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpRight);
  var svg = root125();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpRight = hmr(ArrowUpRight, () => ArrowUpRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpRight[HMR].source;
    set(ArrowUpRight[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpRight_default = ArrowUpRight;
mark_module_end(ArrowUpRight);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpShort.svelte
mark_module_start();
ArrowUpShort[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpShort.svelte";
var root126 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z"></path></svg>`), ArrowUpShort[FILENAME], [[1, 0, [[1, 175]]]]);
function ArrowUpShort($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpShort);
  var svg = root126();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-short", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpShort = hmr(ArrowUpShort, () => ArrowUpShort[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpShort[HMR].source;
    set(ArrowUpShort[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpShort_default = ArrowUpShort;
mark_module_end(ArrowUpShort);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpSquareFill.svelte
mark_module_start();
ArrowUpSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpSquareFill.svelte";
var root127 = add_locations(ns_template(`<svg><!><path d="M2 16a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2zm6.5-4.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 1 0z"></path></svg>`), ArrowUpSquareFill[FILENAME], [[1, 0, [[1, 181]]]]);
function ArrowUpSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpSquareFill);
  var svg = root127();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpSquareFill = hmr(ArrowUpSquareFill, () => ArrowUpSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpSquareFill[HMR].source;
    set(ArrowUpSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpSquareFill_default = ArrowUpSquareFill;
mark_module_end(ArrowUpSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ArrowUpSquare.svelte
mark_module_start();
ArrowUpSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUpSquare.svelte";
var root128 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.5 9.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z"></path></svg>`), ArrowUpSquare[FILENAME], [[1, 0, [[1, 176]]]]);
function ArrowUpSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUpSquare);
  var svg = root128();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpSquare = hmr(ArrowUpSquare, () => ArrowUpSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpSquare[HMR].source;
    set(ArrowUpSquare[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpSquare_default = ArrowUpSquare;
mark_module_end(ArrowUpSquare);

// node_modules/svelte-bootstrap-icons/lib/ArrowUp.svelte
mark_module_start();
ArrowUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowUp.svelte";
var root129 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"></path></svg>`), ArrowUp[FILENAME], [[1, 0, [[1, 169]]]]);
function ArrowUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowUp);
  var svg = root129();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrow-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUp = hmr(ArrowUp, () => ArrowUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUp[HMR].source;
    set(ArrowUp[HMR].source, module.default[HMR].original);
  });
}
var ArrowUp_default = ArrowUp;
mark_module_end(ArrowUp);

// node_modules/svelte-bootstrap-icons/lib/ArrowsAngleContract.svelte
mark_module_start();
ArrowsAngleContract[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowsAngleContract.svelte";
var root130 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M.172 15.828a.5.5 0 0 0 .707 0l4.096-4.096V14.5a.5.5 0 1 0 1 0v-3.975a.5.5 0 0 0-.5-.5H1.5a.5.5 0 0 0 0 1h2.768L.172 15.121a.5.5 0 0 0 0 .707zM15.828.172a.5.5 0 0 0-.707 0l-4.096 4.096V1.5a.5.5 0 1 0-1 0v3.975a.5.5 0 0 0 .5.5H14.5a.5.5 0 0 0 0-1h-2.768L15.828.879a.5.5 0 0 0 0-.707z"></path></svg>`), ArrowsAngleContract[FILENAME], [[1, 0, [[1, 182]]]]);
function ArrowsAngleContract($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowsAngleContract);
  var svg = root130();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows-angle-contract", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowsAngleContract = hmr(ArrowsAngleContract, () => ArrowsAngleContract[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowsAngleContract[HMR].source;
    set(ArrowsAngleContract[HMR].source, module.default[HMR].original);
  });
}
var ArrowsAngleContract_default = ArrowsAngleContract;
mark_module_end(ArrowsAngleContract);

// node_modules/svelte-bootstrap-icons/lib/ArrowsAngleExpand.svelte
mark_module_start();
ArrowsAngleExpand[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowsAngleExpand.svelte";
var root131 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707z"></path></svg>`), ArrowsAngleExpand[FILENAME], [[1, 0, [[1, 180]]]]);
function ArrowsAngleExpand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowsAngleExpand);
  var svg = root131();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows-angle-expand", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowsAngleExpand = hmr(ArrowsAngleExpand, () => ArrowsAngleExpand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowsAngleExpand[HMR].source;
    set(ArrowsAngleExpand[HMR].source, module.default[HMR].original);
  });
}
var ArrowsAngleExpand_default = ArrowsAngleExpand;
mark_module_end(ArrowsAngleExpand);

// node_modules/svelte-bootstrap-icons/lib/ArrowsCollapseVertical.svelte
mark_module_start();
ArrowsCollapseVertical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowsCollapseVertical.svelte";
var root132 = add_locations(ns_template(`<svg><!><path d="M8 15a.5.5 0 0 1-.5-.5v-13a.5.5 0 0 1 1 0v13a.5.5 0 0 1-.5.5ZM0 8a.5.5 0 0 1 .5-.5h3.793L3.146 6.354a.5.5 0 1 1 .708-.708l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L4.293 8.5H.5A.5.5 0 0 1 0 8Zm11.707.5 1.147 1.146a.5.5 0 0 1-.708.708l-2-2a.5.5 0 0 1 0-.708l2-2a.5.5 0 0 1 .708.708L11.707 7.5H15.5a.5.5 0 0 1 0 1h-3.793Z"></path></svg>`), ArrowsCollapseVertical[FILENAME], [[1, 0, [[1, 185]]]]);
function ArrowsCollapseVertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowsCollapseVertical);
  var svg = root132();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows-collapse-vertical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowsCollapseVertical = hmr(ArrowsCollapseVertical, () => ArrowsCollapseVertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowsCollapseVertical[HMR].source;
    set(ArrowsCollapseVertical[HMR].source, module.default[HMR].original);
  });
}
var ArrowsCollapseVertical_default = ArrowsCollapseVertical;
mark_module_end(ArrowsCollapseVertical);

// node_modules/svelte-bootstrap-icons/lib/ArrowsCollapse.svelte
mark_module_start();
ArrowsCollapse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowsCollapse.svelte";
var root133 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8Zm7-8a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 4.293V.5A.5.5 0 0 1 8 0Zm-.5 11.707-1.146 1.147a.5.5 0 0 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 11.707V15.5a.5.5 0 0 1-1 0v-3.793Z"></path></svg>`), ArrowsCollapse[FILENAME], [[1, 0, [[1, 176]]]]);
function ArrowsCollapse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowsCollapse);
  var svg = root133();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows-collapse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowsCollapse = hmr(ArrowsCollapse, () => ArrowsCollapse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowsCollapse[HMR].source;
    set(ArrowsCollapse[HMR].source, module.default[HMR].original);
  });
}
var ArrowsCollapse_default = ArrowsCollapse;
mark_module_end(ArrowsCollapse);

// node_modules/svelte-bootstrap-icons/lib/ArrowsExpandVertical.svelte
mark_module_start();
ArrowsExpandVertical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowsExpandVertical.svelte";
var root134 = add_locations(ns_template(`<svg><!><path d="M8 15a.5.5 0 0 1-.5-.5v-13a.5.5 0 0 1 1 0v13a.5.5 0 0 1-.5.5ZM.146 8.354a.5.5 0 0 1 0-.708l2-2a.5.5 0 1 1 .708.708L1.707 7.5H5.5a.5.5 0 0 1 0 1H1.707l1.147 1.146a.5.5 0 0 1-.708.708l-2-2ZM10 8a.5.5 0 0 1 .5-.5h3.793l-1.147-1.146a.5.5 0 0 1 .708-.708l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L14.293 8.5H10.5A.5.5 0 0 1 10 8Z"></path></svg>`), ArrowsExpandVertical[FILENAME], [[1, 0, [[1, 183]]]]);
function ArrowsExpandVertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowsExpandVertical);
  var svg = root134();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows-expand-vertical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowsExpandVertical = hmr(ArrowsExpandVertical, () => ArrowsExpandVertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowsExpandVertical[HMR].source;
    set(ArrowsExpandVertical[HMR].source, module.default[HMR].original);
  });
}
var ArrowsExpandVertical_default = ArrowsExpandVertical;
mark_module_end(ArrowsExpandVertical);

// node_modules/svelte-bootstrap-icons/lib/ArrowsExpand.svelte
mark_module_start();
ArrowsExpand[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowsExpand.svelte";
var root135 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8ZM7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708l2-2ZM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10Z"></path></svg>`), ArrowsExpand[FILENAME], [[1, 0, [[1, 174]]]]);
function ArrowsExpand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowsExpand);
  var svg = root135();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows-expand", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowsExpand = hmr(ArrowsExpand, () => ArrowsExpand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowsExpand[HMR].source;
    set(ArrowsExpand[HMR].source, module.default[HMR].original);
  });
}
var ArrowsExpand_default = ArrowsExpand;
mark_module_end(ArrowsExpand);

// node_modules/svelte-bootstrap-icons/lib/ArrowsFullscreen.svelte
mark_module_start();
ArrowsFullscreen[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowsFullscreen.svelte";
var root136 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344 0a.5.5 0 0 1 .707 0l4.096 4.096V11.5a.5.5 0 1 1 1 0v3.975a.5.5 0 0 1-.5.5H11.5a.5.5 0 0 1 0-1h2.768l-4.096-4.096a.5.5 0 0 1 0-.707zm0-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707zm-4.344 0a.5.5 0 0 1-.707 0L1.025 1.732V4.5a.5.5 0 0 1-1 0V.525a.5.5 0 0 1 .5-.5H4.5a.5.5 0 0 1 0 1H1.732l4.096 4.096a.5.5 0 0 1 0 .707z"></path></svg>`), ArrowsFullscreen[FILENAME], [[1, 0, [[1, 178]]]]);
function ArrowsFullscreen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowsFullscreen);
  var svg = root136();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows-fullscreen", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowsFullscreen = hmr(ArrowsFullscreen, () => ArrowsFullscreen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowsFullscreen[HMR].source;
    set(ArrowsFullscreen[HMR].source, module.default[HMR].original);
  });
}
var ArrowsFullscreen_default = ArrowsFullscreen;
mark_module_end(ArrowsFullscreen);

// node_modules/svelte-bootstrap-icons/lib/ArrowsMove.svelte
mark_module_start();
ArrowsMove[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowsMove.svelte";
var root137 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708l2-2zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10zM.146 8.354a.5.5 0 0 1 0-.708l2-2a.5.5 0 1 1 .708.708L1.707 7.5H5.5a.5.5 0 0 1 0 1H1.707l1.147 1.146a.5.5 0 0 1-.708.708l-2-2zM10 8a.5.5 0 0 1 .5-.5h3.793l-1.147-1.146a.5.5 0 0 1 .708-.708l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L14.293 8.5H10.5A.5.5 0 0 1 10 8z"></path></svg>`), ArrowsMove[FILENAME], [[1, 0, [[1, 172]]]]);
function ArrowsMove($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowsMove);
  var svg = root137();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows-move", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowsMove = hmr(ArrowsMove, () => ArrowsMove[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowsMove[HMR].source;
    set(ArrowsMove[HMR].source, module.default[HMR].original);
  });
}
var ArrowsMove_default = ArrowsMove;
mark_module_end(ArrowsMove);

// node_modules/svelte-bootstrap-icons/lib/ArrowsVertical.svelte
mark_module_start();
ArrowsVertical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ArrowsVertical.svelte";
var root138 = add_locations(ns_template(`<svg><!><path d="M8.354 14.854a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 13.293V2.707L6.354 3.854a.5.5 0 1 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 2.707v10.586l1.146-1.147a.5.5 0 0 1 .708.708l-2 2Z"></path></svg>`), ArrowsVertical[FILENAME], [[1, 0, [[1, 176]]]]);
function ArrowsVertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ArrowsVertical);
  var svg = root138();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows-vertical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowsVertical = hmr(ArrowsVertical, () => ArrowsVertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowsVertical[HMR].source;
    set(ArrowsVertical[HMR].source, module.default[HMR].original);
  });
}
var ArrowsVertical_default = ArrowsVertical;
mark_module_end(ArrowsVertical);

// node_modules/svelte-bootstrap-icons/lib/Arrows.svelte
mark_module_start();
Arrows[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Arrows.svelte";
var root139 = add_locations(ns_template(`<svg><!><path d="M1.146 8.354a.5.5 0 0 1 0-.708l2-2a.5.5 0 1 1 .708.708L2.707 7.5h10.586l-1.147-1.146a.5.5 0 0 1 .708-.708l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L13.293 8.5H2.707l1.147 1.146a.5.5 0 0 1-.708.708l-2-2Z"></path></svg>`), Arrows[FILENAME], [[1, 0, [[1, 167]]]]);
function Arrows($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Arrows);
  var svg = root139();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-arrows", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrows = hmr(Arrows, () => Arrows[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrows[HMR].source;
    set(Arrows[HMR].source, module.default[HMR].original);
  });
}
var Arrows_default = Arrows;
mark_module_end(Arrows);

// node_modules/svelte-bootstrap-icons/lib/AspectRatioFill.svelte
mark_module_start();
AspectRatioFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AspectRatioFill.svelte";
var root140 = add_locations(ns_template(`<svg><!><path d="M0 12.5v-9A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5zM2.5 4a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 1 0V5h2.5a.5.5 0 0 0 0-1h-3zm11 8a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-1 0V11h-2.5a.5.5 0 0 0 0 1h3z"></path></svg>`), AspectRatioFill[FILENAME], [[1, 0, [[1, 178]]]]);
function AspectRatioFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AspectRatioFill);
  var svg = root140();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-aspect-ratio-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AspectRatioFill = hmr(AspectRatioFill, () => AspectRatioFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AspectRatioFill[HMR].source;
    set(AspectRatioFill[HMR].source, module.default[HMR].original);
  });
}
var AspectRatioFill_default = AspectRatioFill;
mark_module_end(AspectRatioFill);

// node_modules/svelte-bootstrap-icons/lib/AspectRatio.svelte
mark_module_start();
AspectRatio[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AspectRatio.svelte";
var root141 = add_locations(ns_template(`<svg><!><path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5v-9zM1.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-13z"></path><path d="M2 4.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1H3v2.5a.5.5 0 0 1-1 0v-3zm12 7a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1 0-1H13V8.5a.5.5 0 0 1 1 0v3z"></path></svg>`), AspectRatio[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function AspectRatio($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AspectRatio);
  var svg = root141();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-aspect-ratio", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AspectRatio = hmr(AspectRatio, () => AspectRatio[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AspectRatio[HMR].source;
    set(AspectRatio[HMR].source, module.default[HMR].original);
  });
}
var AspectRatio_default = AspectRatio;
mark_module_end(AspectRatio);

// node_modules/svelte-bootstrap-icons/lib/Asterisk.svelte
mark_module_start();
Asterisk[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Asterisk.svelte";
var root142 = add_locations(ns_template(`<svg><!><path d="M8 0a1 1 0 0 1 1 1v5.268l4.562-2.634a1 1 0 1 1 1 1.732L10 8l4.562 2.634a1 1 0 1 1-1 1.732L9 9.732V15a1 1 0 1 1-2 0V9.732l-4.562 2.634a1 1 0 1 1-1-1.732L6 8 1.438 5.366a1 1 0 0 1 1-1.732L7 6.268V1a1 1 0 0 1 1-1z"></path></svg>`), Asterisk[FILENAME], [[1, 0, [[1, 169]]]]);
function Asterisk($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Asterisk);
  var svg = root142();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-asterisk", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Asterisk = hmr(Asterisk, () => Asterisk[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Asterisk[HMR].source;
    set(Asterisk[HMR].source, module.default[HMR].original);
  });
}
var Asterisk_default = Asterisk;
mark_module_end(Asterisk);

// node_modules/svelte-bootstrap-icons/lib/At.svelte
mark_module_start();
At[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/At.svelte";
var root143 = add_locations(ns_template(`<svg><!><path d="M13.106 7.222c0-2.967-2.249-5.032-5.482-5.032-3.35 0-5.646 2.318-5.646 5.702 0 3.493 2.235 5.708 5.762 5.708.862 0 1.689-.123 2.304-.335v-.862c-.43.199-1.354.328-2.29.328-2.926 0-4.813-1.88-4.813-4.798 0-2.844 1.921-4.881 4.594-4.881 2.735 0 4.608 1.688 4.608 4.156 0 1.682-.554 2.769-1.416 2.769-.492 0-.772-.28-.772-.76V5.206H8.923v.834h-.11c-.266-.595-.881-.964-1.6-.964-1.4 0-2.378 1.162-2.378 2.823 0 1.737.957 2.906 2.379 2.906.8 0 1.415-.39 1.709-1.087h.11c.081.67.703 1.148 1.503 1.148 1.572 0 2.57-1.415 2.57-3.643zm-7.177.704c0-1.197.54-1.907 1.456-1.907.93 0 1.524.738 1.524 1.907S8.308 9.84 7.371 9.84c-.895 0-1.442-.725-1.442-1.914z"></path></svg>`), At[FILENAME], [[1, 0, [[1, 163]]]]);
function At($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, At);
  var svg = root143();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-at", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  At = hmr(At, () => At[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = At[HMR].source;
    set(At[HMR].source, module.default[HMR].original);
  });
}
var At_default = At;
mark_module_end(At);

// node_modules/svelte-bootstrap-icons/lib/AwardFill.svelte
mark_module_start();
AwardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/AwardFill.svelte";
var root144 = add_locations(ns_template(`<svg><!><path d="m8 0 1.669.864 1.858.282.842 1.68 1.337 1.32L13.4 6l.306 1.854-1.337 1.32-.842 1.68-1.858.282L8 12l-1.669-.864-1.858-.282-.842-1.68-1.337-1.32L2.6 6l-.306-1.854 1.337-1.32.842-1.68L6.331.864 8 0z"></path><path d="M4 11.794V16l4-1 4 1v-4.206l-2.018.306L8 13.126 6.018 12.1 4 11.794z"></path></svg>`), AwardFill[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function AwardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, AwardFill);
  var svg = root144();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-award-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AwardFill = hmr(AwardFill, () => AwardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AwardFill[HMR].source;
    set(AwardFill[HMR].source, module.default[HMR].original);
  });
}
var AwardFill_default = AwardFill;
mark_module_end(AwardFill);

// node_modules/svelte-bootstrap-icons/lib/Award.svelte
mark_module_start();
Award[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Award.svelte";
var root145 = add_locations(ns_template(`<svg><!><path d="M9.669.864 8 0 6.331.864l-1.858.282-.842 1.68-1.337 1.32L2.6 6l-.306 1.854 1.337 1.32.842 1.68 1.858.282L8 12l1.669-.864 1.858-.282.842-1.68 1.337-1.32L13.4 6l.306-1.854-1.337-1.32-.842-1.68L9.669.864zm1.196 1.193.684 1.365 1.086 1.072L12.387 6l.248 1.506-1.086 1.072-.684 1.365-1.51.229L8 10.874l-1.355-.702-1.51-.229-.684-1.365-1.086-1.072L3.614 6l-.25-1.506 1.087-1.072.684-1.365 1.51-.229L8 1.126l1.356.702 1.509.229z"></path><path d="M4 11.794V16l4-1 4 1v-4.206l-2.018.306L8 13.126 6.018 12.1 4 11.794z"></path></svg>`), Award[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Award($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Award);
  var svg = root145();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-award", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Award = hmr(Award, () => Award[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Award[HMR].source;
    set(Award[HMR].source, module.default[HMR].original);
  });
}
var Award_default = Award;
mark_module_end(Award);

// node_modules/svelte-bootstrap-icons/lib/Back.svelte
mark_module_start();
Back[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Back.svelte";
var root146 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2z"></path></svg>`), Back[FILENAME], [[1, 0, [[1, 165]]]]);
function Back($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Back);
  var svg = root146();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-back", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Back = hmr(Back, () => Back[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Back[HMR].source;
    set(Back[HMR].source, module.default[HMR].original);
  });
}
var Back_default = Back;
mark_module_end(Back);

// node_modules/svelte-bootstrap-icons/lib/BackpackFill.svelte
mark_module_start();
BackpackFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BackpackFill.svelte";
var root147 = add_locations(ns_template(`<svg><!><path d="M5 13v-3h4v.5a.5.5 0 0 0 1 0V10h1v3H5Z"></path><path d="M6 2v.341C3.67 3.165 2 5.388 2 8v5.5A2.5 2.5 0 0 0 4.5 16h7a2.5 2.5 0 0 0 2.5-2.5V8a6.002 6.002 0 0 0-4-5.659V2a2 2 0 1 0-4 0Zm2-1a1 1 0 0 1 1 1v.083a6.04 6.04 0 0 0-2 0V2a1 1 0 0 1 1-1Zm0 3a4 4 0 0 1 3.96 3.43.5.5 0 1 1-.99.14 3 3 0 0 0-5.94 0 .5.5 0 1 1-.99-.14A4 4 0 0 1 8 4ZM4.5 9h7a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5Z"></path></svg>`), BackpackFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BackpackFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BackpackFill);
  var svg = root147();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backpack-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BackpackFill = hmr(BackpackFill, () => BackpackFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BackpackFill[HMR].source;
    set(BackpackFill[HMR].source, module.default[HMR].original);
  });
}
var BackpackFill_default = BackpackFill;
mark_module_end(BackpackFill);

// node_modules/svelte-bootstrap-icons/lib/Backpack.svelte
mark_module_start();
Backpack[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Backpack.svelte";
var root148 = add_locations(ns_template(`<svg><!><path d="M4.04 7.43a4 4 0 0 1 7.92 0 .5.5 0 1 1-.99.14 3 3 0 0 0-5.94 0 .5.5 0 1 1-.99-.14ZM4 9.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-4Zm1 .5v3h6v-3h-1v.5a.5.5 0 0 1-1 0V10H5Z"></path><path d="M6 2.341V2a2 2 0 1 1 4 0v.341c2.33.824 4 3.047 4 5.659v5.5a2.5 2.5 0 0 1-2.5 2.5h-7A2.5 2.5 0 0 1 2 13.5V8a6.002 6.002 0 0 1 4-5.659ZM7 2v.083a6.04 6.04 0 0 1 2 0V2a1 1 0 0 0-2 0Zm1 1a5 5 0 0 0-5 5v5.5A1.5 1.5 0 0 0 4.5 15h7a1.5 1.5 0 0 0 1.5-1.5V8a5 5 0 0 0-5-5Z"></path></svg>`), Backpack[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Backpack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Backpack);
  var svg = root148();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backpack", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Backpack = hmr(Backpack, () => Backpack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Backpack[HMR].source;
    set(Backpack[HMR].source, module.default[HMR].original);
  });
}
var Backpack_default = Backpack;
mark_module_end(Backpack);

// node_modules/svelte-bootstrap-icons/lib/Backpack2Fill.svelte
mark_module_start();
Backpack2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Backpack2Fill.svelte";
var root149 = add_locations(ns_template(`<svg><!><path d="M5 13h6v-3h-1v.5a.5.5 0 0 1-1 0V10H5v3Z"></path><path d="M6 2v.341C3.67 3.165 2 5.388 2 8v1.191l-1.17.585A1.5 1.5 0 0 0 0 11.118V13.5A1.5 1.5 0 0 0 1.5 15h1c.456.607 1.182 1 2 1h7c.818 0 1.544-.393 2-1h1a1.5 1.5 0 0 0 1.5-1.5v-2.382a1.5 1.5 0 0 0-.83-1.342L14 9.191V8a6.002 6.002 0 0 0-4-5.659V2a2 2 0 1 0-4 0Zm2-1a1 1 0 0 1 1 1v.083a6.04 6.04 0 0 0-2 0V2a1 1 0 0 1 1-1Zm0 3a4 4 0 0 1 3.96 3.43.5.5 0 1 1-.99.14 3 3 0 0 0-5.94 0 .5.5 0 1 1-.99-.14A4 4 0 0 1 8 4ZM4.5 9h7a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5Z"></path></svg>`), Backpack2Fill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function Backpack2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Backpack2Fill);
  var svg = root149();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backpack2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Backpack2Fill = hmr(Backpack2Fill, () => Backpack2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Backpack2Fill[HMR].source;
    set(Backpack2Fill[HMR].source, module.default[HMR].original);
  });
}
var Backpack2Fill_default = Backpack2Fill;
mark_module_end(Backpack2Fill);

// node_modules/svelte-bootstrap-icons/lib/Backpack2.svelte
mark_module_start();
Backpack2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Backpack2.svelte";
var root150 = add_locations(ns_template(`<svg><!><path d="M4.04 7.43a4 4 0 0 1 7.92 0 .5.5 0 1 1-.99.14 3 3 0 0 0-5.94 0 .5.5 0 1 1-.99-.14Z"></path><path fill-rule="evenodd" d="M4 9.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-4Zm1 .5v3h6v-3h-1v.5a.5.5 0 0 1-1 0V10H5Z"></path><path d="M6 2.341V2a2 2 0 1 1 4 0v.341c2.33.824 4 3.047 4 5.659v1.191l1.17.585a1.5 1.5 0 0 1 .83 1.342V13.5a1.5 1.5 0 0 1-1.5 1.5h-1c-.456.607-1.182 1-2 1h-7a2.497 2.497 0 0 1-2-1h-1A1.5 1.5 0 0 1 0 13.5v-2.382a1.5 1.5 0 0 1 .83-1.342L2 9.191V8a6.002 6.002 0 0 1 4-5.659ZM7 2v.083a6.04 6.04 0 0 1 2 0V2a1 1 0 0 0-2 0ZM3 13.5A1.5 1.5 0 0 0 4.5 15h7a1.5 1.5 0 0 0 1.5-1.5V8A5 5 0 0 0 3 8v5.5Zm-1-3.19-.724.362a.5.5 0 0 0-.276.447V13.5a.5.5 0 0 0 .5.5H2v-3.691Zm12 0V14h.5a.5.5 0 0 0 .5-.5v-2.382a.5.5 0 0 0-.276-.447L14 10.309Z"></path></svg>`), Backpack2[FILENAME], [
  [
    1,
    0,
    [[1, 170], [2, 2], [3, 2]]
  ]
]);
function Backpack2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Backpack2);
  var svg = root150();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backpack2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Backpack2 = hmr(Backpack2, () => Backpack2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Backpack2[HMR].source;
    set(Backpack2[HMR].source, module.default[HMR].original);
  });
}
var Backpack2_default = Backpack2;
mark_module_end(Backpack2);

// node_modules/svelte-bootstrap-icons/lib/Backpack3Fill.svelte
mark_module_start();
Backpack3Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Backpack3Fill.svelte";
var root151 = add_locations(ns_template(`<svg><!><path d="M5 10v3h6v-3h-1v.5a.5.5 0 0 1-1 0V10H5Z"></path><path d="M6 2v.341a5.978 5.978 0 0 0-1.308.653l-.416-1.247a1 1 0 0 0-1.749-.284l-.77 1.027a1 1 0 0 0-.149.917l.803 2.407A5.985 5.985 0 0 0 2 8v5.5A2.5 2.5 0 0 0 4.5 16h7a2.5 2.5 0 0 0 2.5-2.5V8c0-.771-.146-1.509-.41-2.186l.801-2.407a1 1 0 0 0-.148-.917l-.77-1.027a1 1 0 0 0-1.75.284l-.415 1.247A5.976 5.976 0 0 0 10 2.34V2a2 2 0 1 0-4 0Zm1 0a1 1 0 0 1 2 0v.083a6.04 6.04 0 0 0-2 0V2Zm5.941 2.595a6.036 6.036 0 0 0-.8-.937l.531-1.595.77 1.027-.5 1.505ZM3.86 3.658a6.031 6.031 0 0 0-.8.937L2.557 3.09l.77-1.027.532 1.595Zm.18 3.772a4 4 0 0 1 7.92 0 .5.5 0 1 1-.99.142 3 3 0 0 0-5.94 0 .5.5 0 1 1-.99-.142ZM4 9.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-4Z"></path></svg>`), Backpack3Fill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function Backpack3Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Backpack3Fill);
  var svg = root151();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backpack3-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Backpack3Fill = hmr(Backpack3Fill, () => Backpack3Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Backpack3Fill[HMR].source;
    set(Backpack3Fill[HMR].source, module.default[HMR].original);
  });
}
var Backpack3Fill_default = Backpack3Fill;
mark_module_end(Backpack3Fill);

// node_modules/svelte-bootstrap-icons/lib/Backpack3.svelte
mark_module_start();
Backpack3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Backpack3.svelte";
var root152 = add_locations(ns_template(`<svg><!><path d="M4.04 7.43a4 4 0 0 1 7.92 0 .5.5 0 1 1-.99.14 3 3 0 0 0-5.94 0 .5.5 0 1 1-.99-.14ZM4 9.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-4Zm1 .5v3h6v-3h-1v.5a.5.5 0 0 1-1 0V10H5Z"></path><path d="M6 2.341V2a2 2 0 1 1 4 0v.341c.465.165.904.385 1.308.653l.416-1.247a1 1 0 0 1 1.748-.284l.77 1.027a1 1 0 0 1 .15.917l-.803 2.407C13.854 6.49 14 7.229 14 8v5.5a2.5 2.5 0 0 1-2.5 2.5h-7A2.5 2.5 0 0 1 2 13.5V8c0-.771.146-1.509.41-2.186l-.802-2.407a1 1 0 0 1 .15-.917l.77-1.027a1 1 0 0 1 1.748.284l.416 1.247A5.978 5.978 0 0 1 6 2.34ZM7 2v.083a6.04 6.04 0 0 1 2 0V2a1 1 0 1 0-2 0Zm5.941 2.595.502-1.505-.77-1.027-.532 1.595c.297.284.566.598.8.937ZM3.86 3.658l-.532-1.595-.77 1.027.502 1.505c.234-.339.502-.653.8-.937ZM8 3a5 5 0 0 0-5 5v5.5A1.5 1.5 0 0 0 4.5 15h7a1.5 1.5 0 0 0 1.5-1.5V8a5 5 0 0 0-5-5Z"></path></svg>`), Backpack3[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Backpack3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Backpack3);
  var svg = root152();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backpack3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Backpack3 = hmr(Backpack3, () => Backpack3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Backpack3[HMR].source;
    set(Backpack3[HMR].source, module.default[HMR].original);
  });
}
var Backpack3_default = Backpack3;
mark_module_end(Backpack3);

// node_modules/svelte-bootstrap-icons/lib/Backpack4Fill.svelte
mark_module_start();
Backpack4Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Backpack4Fill.svelte";
var root153 = add_locations(ns_template(`<svg><!><path d="M8 0a2 2 0 0 0-2 2H3.5a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h4v.5a.5.5 0 0 0 1 0V7h4a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H10a2 2 0 0 0-2-2Zm1 2a1 1 0 0 0-2 0h2Zm-4 9v2h6v-2h-1v.5a.5.5 0 0 1-1 0V11H5Z"></path><path d="M14 7.599A2.986 2.986 0 0 1 12.5 8H9.415a1.5 1.5 0 0 1-2.83 0H3.5A2.986 2.986 0 0 1 2 7.599V14a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7.599ZM4 10.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-3Z"></path></svg>`), Backpack4Fill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function Backpack4Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Backpack4Fill);
  var svg = root153();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backpack4-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Backpack4Fill = hmr(Backpack4Fill, () => Backpack4Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Backpack4Fill[HMR].source;
    set(Backpack4Fill[HMR].source, module.default[HMR].original);
  });
}
var Backpack4Fill_default = Backpack4Fill;
mark_module_end(Backpack4Fill);

// node_modules/svelte-bootstrap-icons/lib/Backpack4.svelte
mark_module_start();
Backpack4[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Backpack4.svelte";
var root154 = add_locations(ns_template(`<svg><!><path d="M4 9.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-4Zm1 .5v3h6v-3h-1v.5a.5.5 0 0 1-1 0V10H5Z"></path><path d="M8 0a2 2 0 0 0-2 2H3.5a2 2 0 0 0-2 2v1c0 .52.198.993.523 1.349A.5.5 0 0 0 2 6.5V14a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V6.5a.5.5 0 0 0-.023-.151c.325-.356.523-.83.523-1.349V4a2 2 0 0 0-2-2H10a2 2 0 0 0-2-2Zm0 1a1 1 0 0 0-1 1h2a1 1 0 0 0-1-1ZM3 14V6.937c.16.041.327.063.5.063h4v.5a.5.5 0 0 0 1 0V7h4c.173 0 .34-.022.5-.063V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1Zm9.5-11a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1h-9a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h9Z"></path></svg>`), Backpack4[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Backpack4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Backpack4);
  var svg = root154();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backpack4", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Backpack4 = hmr(Backpack4, () => Backpack4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Backpack4[HMR].source;
    set(Backpack4[HMR].source, module.default[HMR].original);
  });
}
var Backpack4_default = Backpack4;
mark_module_end(Backpack4);

// node_modules/svelte-bootstrap-icons/lib/BackspaceFill.svelte
mark_module_start();
BackspaceFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BackspaceFill.svelte";
var root155 = add_locations(ns_template(`<svg><!><path d="M15.683 3a2 2 0 0 0-2-2h-7.08a2 2 0 0 0-1.519.698L.241 7.35a1 1 0 0 0 0 1.302l4.843 5.65A2 2 0 0 0 6.603 15h7.08a2 2 0 0 0 2-2V3zM5.829 5.854a.5.5 0 1 1 .707-.708l2.147 2.147 2.146-2.147a.5.5 0 1 1 .707.708L9.39 8l2.146 2.146a.5.5 0 0 1-.707.708L8.683 8.707l-2.147 2.147a.5.5 0 0 1-.707-.708L7.976 8 5.829 5.854z"></path></svg>`), BackspaceFill[FILENAME], [[1, 0, [[1, 175]]]]);
function BackspaceFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BackspaceFill);
  var svg = root155();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backspace-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BackspaceFill = hmr(BackspaceFill, () => BackspaceFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BackspaceFill[HMR].source;
    set(BackspaceFill[HMR].source, module.default[HMR].original);
  });
}
var BackspaceFill_default = BackspaceFill;
mark_module_end(BackspaceFill);

// node_modules/svelte-bootstrap-icons/lib/BackspaceReverseFill.svelte
mark_module_start();
BackspaceReverseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BackspaceReverseFill.svelte";
var root156 = add_locations(ns_template(`<svg><!><path d="M0 3a2 2 0 0 1 2-2h7.08a2 2 0 0 1 1.519.698l4.843 5.651a1 1 0 0 1 0 1.302L10.6 14.3a2 2 0 0 1-1.52.7H2a2 2 0 0 1-2-2V3zm9.854 2.854a.5.5 0 0 0-.708-.708L7 7.293 4.854 5.146a.5.5 0 1 0-.708.708L6.293 8l-2.147 2.146a.5.5 0 0 0 .708.708L7 8.707l2.146 2.147a.5.5 0 0 0 .708-.708L7.707 8l2.147-2.146z"></path></svg>`), BackspaceReverseFill[FILENAME], [[1, 0, [[1, 183]]]]);
function BackspaceReverseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BackspaceReverseFill);
  var svg = root156();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backspace-reverse-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BackspaceReverseFill = hmr(BackspaceReverseFill, () => BackspaceReverseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BackspaceReverseFill[HMR].source;
    set(BackspaceReverseFill[HMR].source, module.default[HMR].original);
  });
}
var BackspaceReverseFill_default = BackspaceReverseFill;
mark_module_end(BackspaceReverseFill);

// node_modules/svelte-bootstrap-icons/lib/BackspaceReverse.svelte
mark_module_start();
BackspaceReverse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BackspaceReverse.svelte";
var root157 = add_locations(ns_template(`<svg><!><path d="M9.854 5.146a.5.5 0 0 1 0 .708L7.707 8l2.147 2.146a.5.5 0 0 1-.708.708L7 8.707l-2.146 2.147a.5.5 0 0 1-.708-.708L6.293 8 4.146 5.854a.5.5 0 1 1 .708-.708L7 7.293l2.146-2.147a.5.5 0 0 1 .708 0z"></path><path d="M2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h7.08a2 2 0 0 0 1.519-.698l4.843-5.651a1 1 0 0 0 0-1.302L10.6 1.7A2 2 0 0 0 9.08 1H2zm7.08 1a1 1 0 0 1 .76.35L14.682 8l-4.844 5.65a1 1 0 0 1-.759.35H2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h7.08z"></path></svg>`), BackspaceReverse[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function BackspaceReverse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BackspaceReverse);
  var svg = root157();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backspace-reverse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BackspaceReverse = hmr(BackspaceReverse, () => BackspaceReverse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BackspaceReverse[HMR].source;
    set(BackspaceReverse[HMR].source, module.default[HMR].original);
  });
}
var BackspaceReverse_default = BackspaceReverse;
mark_module_end(BackspaceReverse);

// node_modules/svelte-bootstrap-icons/lib/Backspace.svelte
mark_module_start();
Backspace[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Backspace.svelte";
var root158 = add_locations(ns_template(`<svg><!><path d="M5.83 5.146a.5.5 0 0 0 0 .708L7.975 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z"></path><path d="M13.683 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1h7.08zm-7.08 1a1 1 0 0 0-.76.35L1 8l4.844 5.65a1 1 0 0 0 .759.35h7.08a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-7.08z"></path></svg>`), Backspace[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Backspace($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Backspace);
  var svg = root158();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-backspace", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Backspace = hmr(Backspace, () => Backspace[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Backspace[HMR].source;
    set(Backspace[HMR].source, module.default[HMR].original);
  });
}
var Backspace_default = Backspace;
mark_module_end(Backspace);

// node_modules/svelte-bootstrap-icons/lib/Badge3dFill.svelte
mark_module_start();
Badge3dFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Badge3dFill.svelte";
var root159 = add_locations(ns_template(`<svg><!><path d="M10.157 5.968h-.844v4.06h.844c1.116 0 1.621-.667 1.621-2.02 0-1.354-.51-2.04-1.621-2.04z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm5.184 4.368c.646 0 1.055.378 1.06.9.008.537-.427.919-1.086.919-.598-.004-1.037-.325-1.068-.756H3c.03.914.791 1.688 2.153 1.688 1.24 0 2.285-.66 2.272-1.798-.013-.953-.747-1.38-1.292-1.432v-.062c.44-.07 1.125-.527 1.108-1.375-.013-.906-.8-1.57-2.053-1.565-1.31.005-2.043.734-2.074 1.67h1.103c.022-.391.383-.751.936-.751.532 0 .928.33.928.813.004.479-.383.835-.928.835h-.632v.914h.663zM8.126 11h2.189C12.125 11 13 9.893 13 7.985c0-1.894-.861-2.984-2.685-2.984H8.126V11z"></path></svg>`), Badge3dFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function Badge3dFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Badge3dFill);
  var svg = root159();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-3d-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge3dFill = hmr(Badge3dFill, () => Badge3dFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge3dFill[HMR].source;
    set(Badge3dFill[HMR].source, module.default[HMR].original);
  });
}
var Badge3dFill_default = Badge3dFill;
mark_module_end(Badge3dFill);

// node_modules/svelte-bootstrap-icons/lib/Badge3d.svelte
mark_module_start();
Badge3d[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Badge3d.svelte";
var root160 = add_locations(ns_template(`<svg><!><path d="M4.52 8.368h.664c.646 0 1.055.378 1.06.9.008.537-.427.919-1.086.919-.598-.004-1.037-.325-1.068-.756H3c.03.914.791 1.688 2.153 1.688 1.24 0 2.285-.66 2.272-1.798-.013-.953-.747-1.38-1.292-1.432v-.062c.44-.07 1.125-.527 1.108-1.375-.013-.906-.8-1.57-2.053-1.565-1.31.005-2.043.734-2.074 1.67h1.103c.022-.391.383-.751.936-.751.532 0 .928.33.928.813.004.479-.383.835-.928.835h-.632v.914zm3.606-3.367V11h2.189C12.125 11 13 9.893 13 7.985c0-1.894-.861-2.984-2.685-2.984H8.126zm1.187.967h.844c1.112 0 1.621.686 1.621 2.04 0 1.353-.505 2.02-1.621 2.02h-.844v-4.06z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), Badge3d[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Badge3d($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Badge3d);
  var svg = root160();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-3d", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge3d = hmr(Badge3d, () => Badge3d[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge3d[HMR].source;
    set(Badge3d[HMR].source, module.default[HMR].original);
  });
}
var Badge3d_default = Badge3d;
mark_module_end(Badge3d);

// node_modules/svelte-bootstrap-icons/lib/Badge4kFill.svelte
mark_module_start();
Badge4kFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Badge4kFill.svelte";
var root161 = add_locations(ns_template(`<svg><!><path d="M3.577 8.9v.03h1.828V5.898h-.062a46.781 46.781 0 0 0-1.766 3.001z"></path><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm2.372 3.715.435-.714h1.71v3.93h.733v.957h-.733V11H5.405V9.888H2.5v-.971c.574-1.077 1.225-2.142 1.872-3.202zm7.73-.714h1.306l-2.14 2.584L13.5 11h-1.428l-1.679-2.624-.615.7V11H8.59V5.001h1.187v2.686h.057L12.102 5z"></path></svg>`), Badge4kFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function Badge4kFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Badge4kFill);
  var svg = root161();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-4k-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge4kFill = hmr(Badge4kFill, () => Badge4kFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge4kFill[HMR].source;
    set(Badge4kFill[HMR].source, module.default[HMR].original);
  });
}
var Badge4kFill_default = Badge4kFill;
mark_module_end(Badge4kFill);

// node_modules/svelte-bootstrap-icons/lib/Badge4k.svelte
mark_module_start();
Badge4k[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Badge4k.svelte";
var root162 = add_locations(ns_template(`<svg><!><path d="M4.807 5.001C4.021 6.298 3.203 7.6 2.5 8.917v.971h2.905V11h1.112V9.888h.733V8.93h-.733V5.001h-1.71zm-1.23 3.93v-.032a46.781 46.781 0 0 1 1.766-3.001h.062V8.93H3.577zm9.831-3.93h-1.306L9.835 7.687h-.057V5H8.59v6h1.187V9.075l.615-.699L12.072 11H13.5l-2.232-3.415 2.14-2.584z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), Badge4k[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Badge4k($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Badge4k);
  var svg = root162();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-4k", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge4k = hmr(Badge4k, () => Badge4k[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge4k[HMR].source;
    set(Badge4k[HMR].source, module.default[HMR].original);
  });
}
var Badge4k_default = Badge4k;
mark_module_end(Badge4k);

// node_modules/svelte-bootstrap-icons/lib/Badge8kFill.svelte
mark_module_start();
Badge8kFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Badge8kFill.svelte";
var root163 = add_locations(ns_template(`<svg><!><path d="M3.9 6.605c0 .51.405.866.95.866.545 0 .945-.356.945-.866s-.4-.852-.945-.852c-.545 0-.95.343-.95.852zm-.192 2.668c0 .589.492.984 1.142.984.646 0 1.143-.395 1.143-.984S5.496 8.28 4.85 8.28c-.65 0-1.142.404-1.142.993z"></path><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm5.17 7.348c0 1.041-.927 1.766-2.333 1.766-1.406 0-2.312-.72-2.312-1.762 0-.954.712-1.384 1.257-1.494v-.053c-.51-.154-1.02-.558-1.02-1.331 0-.914.831-1.587 2.088-1.587 1.253 0 2.083.673 2.083 1.587 0 .782-.523 1.182-1.02 1.331v.053c.545.11 1.257.545 1.257 1.49zM12.102 5h1.306l-2.14 2.584 2.232 3.415h-1.428l-1.679-2.624-.615.699v1.925H8.59V5h1.187v2.685h.057L12.102 5z"></path></svg>`), Badge8kFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function Badge8kFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Badge8kFill);
  var svg = root163();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-8k-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge8kFill = hmr(Badge8kFill, () => Badge8kFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge8kFill[HMR].source;
    set(Badge8kFill[HMR].source, module.default[HMR].original);
  });
}
var Badge8kFill_default = Badge8kFill;
mark_module_end(Badge8kFill);

// node_modules/svelte-bootstrap-icons/lib/Badge8k.svelte
mark_module_start();
Badge8k[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Badge8k.svelte";
var root164 = add_locations(ns_template(`<svg><!><path d="M4.837 11.114c1.406 0 2.333-.725 2.333-1.766 0-.945-.712-1.38-1.256-1.49v-.053c.496-.15 1.02-.55 1.02-1.331 0-.914-.831-1.587-2.084-1.587-1.257 0-2.087.673-2.087 1.587 0 .773.51 1.177 1.02 1.331v.053c-.546.11-1.258.54-1.258 1.494 0 1.042.906 1.762 2.312 1.762zm.013-3.643c-.545 0-.95-.356-.95-.866s.405-.852.95-.852c.545 0 .945.343.945.852 0 .51-.4.866-.945.866zm0 2.786c-.65 0-1.142-.395-1.142-.984S4.2 8.28 4.85 8.28c.646 0 1.143.404 1.143.993s-.497.984-1.143.984zM13.408 5h-1.306L9.835 7.685h-.057V5H8.59v5.998h1.187V9.075l.615-.699 1.679 2.623H13.5l-2.232-3.414L13.408 5z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), Badge8k[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Badge8k($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Badge8k);
  var svg = root164();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-8k", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge8k = hmr(Badge8k, () => Badge8k[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge8k[HMR].source;
    set(Badge8k[HMR].source, module.default[HMR].original);
  });
}
var Badge8k_default = Badge8k;
mark_module_end(Badge8k);

// node_modules/svelte-bootstrap-icons/lib/BadgeAdFill.svelte
mark_module_start();
BadgeAdFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeAdFill.svelte";
var root165 = add_locations(ns_template(`<svg><!><path d="M11.35 8.337c0-.699-.42-1.138-1.001-1.138-.584 0-.954.444-.954 1.239v.453c0 .8.374 1.248.972 1.248.588 0 .984-.44.984-1.2v-.602zm-5.413.237-.734-2.426H5.15l-.734 2.426h1.52z"></path><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm6.209 6.32c0-1.28.694-2.044 1.753-2.044.655 0 1.156.294 1.336.769h.053v-2.36h1.16V11h-1.138v-.747h-.057c-.145.474-.69.804-1.367.804-1.055 0-1.74-.764-1.74-2.043v-.695zm-4.04 1.138L3.7 11H2.5l2.013-5.999H5.9L7.905 11H6.644l-.47-1.542H4.17z"></path></svg>`), BadgeAdFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BadgeAdFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeAdFill);
  var svg = root165();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-ad-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeAdFill = hmr(BadgeAdFill, () => BadgeAdFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeAdFill[HMR].source;
    set(BadgeAdFill[HMR].source, module.default[HMR].original);
  });
}
var BadgeAdFill_default = BadgeAdFill;
mark_module_end(BadgeAdFill);

// node_modules/svelte-bootstrap-icons/lib/BadgeAd.svelte
mark_module_start();
BadgeAd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeAd.svelte";
var root166 = add_locations(ns_template(`<svg><!><path d="m3.7 11 .47-1.542h2.004L6.644 11h1.261L5.901 5.001H4.513L2.5 11h1.2zm1.503-4.852.734 2.426H4.416l.734-2.426h.053zm4.759.128c-1.059 0-1.753.765-1.753 2.043v.695c0 1.279.685 2.043 1.74 2.043.677 0 1.222-.33 1.367-.804h.057V11h1.138V4.685h-1.16v2.36h-.053c-.18-.475-.68-.77-1.336-.77zm.387.923c.58 0 1.002.44 1.002 1.138v.602c0 .76-.396 1.2-.984 1.2-.598 0-.972-.449-.972-1.248v-.453c0-.795.37-1.24.954-1.24z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), BadgeAd[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BadgeAd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeAd);
  var svg = root166();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-ad", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeAd = hmr(BadgeAd, () => BadgeAd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeAd[HMR].source;
    set(BadgeAd[HMR].source, module.default[HMR].original);
  });
}
var BadgeAd_default = BadgeAd;
mark_module_end(BadgeAd);

// node_modules/svelte-bootstrap-icons/lib/BadgeArFill.svelte
mark_module_start();
BadgeArFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeArFill.svelte";
var root167 = add_locations(ns_template(`<svg><!><path d="m6.031 8.574-.734-2.426h-.052L4.51 8.574h1.52zm3.642-2.641v1.938h1.033c.66 0 1.068-.316 1.068-.95 0-.64-.422-.988-1.05-.988h-1.05z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm4.265 5.458h2.004L6.739 11H8L5.996 5.001H4.607L2.595 11h1.2l.47-1.542zM8.5 5v6h1.173V8.763h1.064L11.787 11h1.327L11.91 8.583C12.455 8.373 13 7.779 13 6.9c0-1.147-.773-1.9-2.105-1.9H8.5z"></path></svg>`), BadgeArFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BadgeArFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeArFill);
  var svg = root167();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-ar-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeArFill = hmr(BadgeArFill, () => BadgeArFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeArFill[HMR].source;
    set(BadgeArFill[HMR].source, module.default[HMR].original);
  });
}
var BadgeArFill_default = BadgeArFill;
mark_module_end(BadgeArFill);

// node_modules/svelte-bootstrap-icons/lib/BadgeAr.svelte
mark_module_start();
BadgeAr[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeAr.svelte";
var root168 = add_locations(ns_template(`<svg><!><path d="m3.794 11 .47-1.542H6.27L6.739 11H8L5.996 5.001H4.607L2.595 11h1.2zm1.503-4.852.734 2.426h-1.52l.734-2.426h.052zm5.598-1.147H8.5V11h1.173V8.763h1.064L11.787 11h1.327L11.91 8.583C12.455 8.373 13 7.779 13 6.9c0-1.147-.773-1.9-2.105-1.9zm-1.222 2.87V5.933h1.05c.63 0 1.05.347 1.05.989 0 .633-.408.95-1.067.95H9.673z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), BadgeAr[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BadgeAr($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeAr);
  var svg = root168();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-ar", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeAr = hmr(BadgeAr, () => BadgeAr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeAr[HMR].source;
    set(BadgeAr[HMR].source, module.default[HMR].original);
  });
}
var BadgeAr_default = BadgeAr;
mark_module_end(BadgeAr);

// node_modules/svelte-bootstrap-icons/lib/BadgeCcFill.svelte
mark_module_start();
BadgeCcFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeCcFill.svelte";
var root169 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm3.027 4.002c-.83 0-1.319.642-1.319 1.753v.743c0 1.107.48 1.727 1.319 1.727.69 0 1.138-.435 1.186-1.05H7.36v.114c-.057 1.147-1.028 1.938-2.342 1.938-1.613 0-2.518-1.028-2.518-2.729v-.747C2.5 6.051 3.414 5 5.018 5c1.318 0 2.29.813 2.342 2v.11H6.213c-.048-.638-.505-1.108-1.186-1.108zm6.14 0c-.831 0-1.319.642-1.319 1.753v.743c0 1.107.48 1.727 1.318 1.727.69 0 1.139-.435 1.187-1.05H13.5v.114c-.057 1.147-1.028 1.938-2.342 1.938-1.613 0-2.518-1.028-2.518-2.729v-.747c0-1.7.914-2.751 2.518-2.751 1.318 0 2.29.813 2.342 2v.11h-1.147c-.048-.638-.505-1.108-1.187-1.108z"></path></svg>`), BadgeCcFill[FILENAME], [[1, 0, [[1, 174]]]]);
function BadgeCcFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeCcFill);
  var svg = root169();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-cc-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeCcFill = hmr(BadgeCcFill, () => BadgeCcFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeCcFill[HMR].source;
    set(BadgeCcFill[HMR].source, module.default[HMR].original);
  });
}
var BadgeCcFill_default = BadgeCcFill;
mark_module_end(BadgeCcFill);

// node_modules/svelte-bootstrap-icons/lib/BadgeCc.svelte
mark_module_start();
BadgeCc[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeCc.svelte";
var root170 = add_locations(ns_template(`<svg><!><path d="M3.708 7.755c0-1.111.488-1.753 1.319-1.753.681 0 1.138.47 1.186 1.107H7.36V7c-.052-1.186-1.024-2-2.342-2C3.414 5 2.5 6.05 2.5 7.751v.747c0 1.7.905 2.73 2.518 2.73 1.314 0 2.285-.792 2.342-1.939v-.114H6.213c-.048.615-.496 1.05-1.186 1.05-.84 0-1.319-.62-1.319-1.727v-.743zm6.14 0c0-1.111.488-1.753 1.318-1.753.682 0 1.139.47 1.187 1.107H13.5V7c-.053-1.186-1.024-2-2.342-2C9.554 5 8.64 6.05 8.64 7.751v.747c0 1.7.905 2.73 2.518 2.73 1.314 0 2.285-.792 2.342-1.939v-.114h-1.147c-.048.615-.497 1.05-1.187 1.05-.839 0-1.318-.62-1.318-1.727v-.743z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), BadgeCc[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BadgeCc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeCc);
  var svg = root170();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-cc", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeCc = hmr(BadgeCc, () => BadgeCc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeCc[HMR].source;
    set(BadgeCc[HMR].source, module.default[HMR].original);
  });
}
var BadgeCc_default = BadgeCc;
mark_module_end(BadgeCc);

// node_modules/svelte-bootstrap-icons/lib/BadgeHdFill.svelte
mark_module_start();
BadgeHdFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeHdFill.svelte";
var root171 = add_locations(ns_template(`<svg><!><path d="M10.53 5.968h-.843v4.06h.843c1.117 0 1.622-.667 1.622-2.02 0-1.354-.51-2.04-1.622-2.04z"></path><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm5.396 3.001V11H6.209V8.43H3.687V11H2.5V5.001h1.187v2.44h2.522V5h1.187zM8.5 11V5.001h2.188c1.824 0 2.685 1.09 2.685 2.984C13.373 9.893 12.5 11 10.69 11H8.5z"></path></svg>`), BadgeHdFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BadgeHdFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeHdFill);
  var svg = root171();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-hd-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeHdFill = hmr(BadgeHdFill, () => BadgeHdFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeHdFill[HMR].source;
    set(BadgeHdFill[HMR].source, module.default[HMR].original);
  });
}
var BadgeHdFill_default = BadgeHdFill;
mark_module_end(BadgeHdFill);

// node_modules/svelte-bootstrap-icons/lib/BadgeHd.svelte
mark_module_start();
BadgeHd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeHd.svelte";
var root172 = add_locations(ns_template(`<svg><!><path d="M7.396 11V5.001H6.209v2.44H3.687V5H2.5v6h1.187V8.43h2.522V11h1.187zM8.5 5.001V11h2.188c1.811 0 2.685-1.107 2.685-3.015 0-1.894-.86-2.984-2.684-2.984H8.5zm1.187.967h.843c1.112 0 1.622.686 1.622 2.04 0 1.353-.505 2.02-1.622 2.02h-.843v-4.06z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), BadgeHd[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BadgeHd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeHd);
  var svg = root172();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-hd", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeHd = hmr(BadgeHd, () => BadgeHd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeHd[HMR].source;
    set(BadgeHd[HMR].source, module.default[HMR].original);
  });
}
var BadgeHd_default = BadgeHd;
mark_module_end(BadgeHd);

// node_modules/svelte-bootstrap-icons/lib/BadgeSdFill.svelte
mark_module_start();
BadgeSdFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeSdFill.svelte";
var root173 = add_locations(ns_template(`<svg><!><path d="M10.338 5.968h-.844v4.06h.844c1.116 0 1.622-.667 1.622-2.02 0-1.354-.51-2.04-1.622-2.04Z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm5.077 7.114c1.521 0 2.378-.764 2.378-1.88 0-1.007-.642-1.473-1.613-1.692l-.932-.216c-.527-.114-.821-.351-.821-.712 0-.466.39-.804 1.046-.804.637 0 1.028.33 1.103.76h1.125c-.058-.923-.849-1.692-2.22-1.692-1.322 0-2.24.717-2.24 1.815 0 .91.588 1.446 1.52 1.657l.927.215c.624.145.923.36.923.778 0 .492-.391.83-1.13.83-.707 0-1.155-.342-1.234-.808H2.762c.052.95.79 1.75 2.315 1.75ZM8.307 11h2.19c1.81 0 2.684-1.107 2.684-3.015 0-1.894-.861-2.984-2.685-2.984H8.308V11Z"></path></svg>`), BadgeSdFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BadgeSdFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeSdFill);
  var svg = root173();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-sd-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeSdFill = hmr(BadgeSdFill, () => BadgeSdFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeSdFill[HMR].source;
    set(BadgeSdFill[HMR].source, module.default[HMR].original);
  });
}
var BadgeSdFill_default = BadgeSdFill;
mark_module_end(BadgeSdFill);

// node_modules/svelte-bootstrap-icons/lib/BadgeSd.svelte
mark_module_start();
BadgeSd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeSd.svelte";
var root174 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 4a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4ZM0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm5.077 7.114c-1.524 0-2.263-.8-2.315-1.749h1.147c.079.466.527.809 1.234.809.739 0 1.13-.339 1.13-.83 0-.418-.3-.634-.923-.779l-.927-.215c-.932-.21-1.52-.747-1.52-1.657 0-1.098.918-1.815 2.24-1.815 1.371 0 2.162.77 2.22 1.692H6.238c-.075-.43-.466-.76-1.103-.76-.655 0-1.046.338-1.046.804 0 .36.294.598.821.712l.932.216c.971.22 1.613.685 1.613 1.691 0 1.117-.857 1.881-2.378 1.881ZM8.307 11V5.001h2.19c1.823 0 2.684 1.09 2.684 2.984 0 1.908-.874 3.015-2.685 3.015H8.308Zm2.031-5.032h-.844v4.06h.844c1.116 0 1.622-.667 1.622-2.02 0-1.354-.51-2.04-1.622-2.04Z"></path></svg>`), BadgeSd[FILENAME], [[1, 0, [[1, 169]]]]);
function BadgeSd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeSd);
  var svg = root174();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-sd", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeSd = hmr(BadgeSd, () => BadgeSd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeSd[HMR].source;
    set(BadgeSd[HMR].source, module.default[HMR].original);
  });
}
var BadgeSd_default = BadgeSd;
mark_module_end(BadgeSd);

// node_modules/svelte-bootstrap-icons/lib/BadgeTmFill.svelte
mark_module_start();
BadgeTmFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeTmFill.svelte";
var root175 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm3.295 3.995V11H4.104V5.995h-1.7V5H7v.994H5.295zM8.692 7.01V11H7.633V5.001h1.209l1.71 3.894h.039l1.71-3.894H13.5V11h-1.072V7.01h-.057l-1.42 3.239h-.773L8.75 7.008h-.058z"></path></svg>`), BadgeTmFill[FILENAME], [[1, 0, [[1, 174]]]]);
function BadgeTmFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeTmFill);
  var svg = root175();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-tm-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeTmFill = hmr(BadgeTmFill, () => BadgeTmFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeTmFill[HMR].source;
    set(BadgeTmFill[HMR].source, module.default[HMR].original);
  });
}
var BadgeTmFill_default = BadgeTmFill;
mark_module_end(BadgeTmFill);

// node_modules/svelte-bootstrap-icons/lib/BadgeTm.svelte
mark_module_start();
BadgeTm[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeTm.svelte";
var root176 = add_locations(ns_template(`<svg><!><path d="M5.295 11V5.995H7V5H2.403v.994h1.701V11h1.19zm3.397 0V7.01h.058l1.428 3.239h.773l1.42-3.24h.057V11H13.5V5.001h-1.2l-1.71 3.894h-.039l-1.71-3.894H7.634V11h1.06z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), BadgeTm[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BadgeTm($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeTm);
  var svg = root176();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-tm", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeTm = hmr(BadgeTm, () => BadgeTm[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeTm[HMR].source;
    set(BadgeTm[HMR].source, module.default[HMR].original);
  });
}
var BadgeTm_default = BadgeTm;
mark_module_end(BadgeTm);

// node_modules/svelte-bootstrap-icons/lib/BadgeVoFill.svelte
mark_module_start();
BadgeVoFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeVoFill.svelte";
var root177 = add_locations(ns_template(`<svg><!><path d="M12.296 8.394v-.782c0-1.156-.571-1.736-1.362-1.736-.796 0-1.363.58-1.363 1.736v.782c0 1.156.567 1.732 1.363 1.732.79 0 1.362-.576 1.362-1.732z"></path><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm11.5 5.62v.77c0 1.691-.962 2.724-2.566 2.724-1.604 0-2.571-1.033-2.571-2.724v-.77c0-1.704.967-2.733 2.57-2.733 1.605 0 2.567 1.037 2.567 2.734zM5.937 11H4.508L2.5 5.001h1.375L5.22 9.708h.057L6.61 5.001h1.318L5.937 11z"></path></svg>`), BadgeVoFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BadgeVoFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeVoFill);
  var svg = root177();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-vo-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeVoFill = hmr(BadgeVoFill, () => BadgeVoFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeVoFill[HMR].source;
    set(BadgeVoFill[HMR].source, module.default[HMR].original);
  });
}
var BadgeVoFill_default = BadgeVoFill;
mark_module_end(BadgeVoFill);

// node_modules/svelte-bootstrap-icons/lib/BadgeVo.svelte
mark_module_start();
BadgeVo[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeVo.svelte";
var root178 = add_locations(ns_template(`<svg><!><path d="M4.508 11h1.429l1.99-5.999H6.61L5.277 9.708H5.22L3.875 5.001H2.5L4.508 11zM13.5 8.39v-.77c0-1.696-.962-2.733-2.566-2.733-1.604 0-2.571 1.029-2.571 2.734v.769c0 1.691.967 2.724 2.57 2.724 1.605 0 2.567-1.033 2.567-2.724zm-1.204-.778v.782c0 1.156-.571 1.732-1.362 1.732-.796 0-1.363-.576-1.363-1.732v-.782c0-1.156.567-1.736 1.363-1.736.79 0 1.362.58 1.362 1.736z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), BadgeVo[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BadgeVo($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeVo);
  var svg = root178();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-vo", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeVo = hmr(BadgeVo, () => BadgeVo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeVo[HMR].source;
    set(BadgeVo[HMR].source, module.default[HMR].original);
  });
}
var BadgeVo_default = BadgeVo;
mark_module_end(BadgeVo);

// node_modules/svelte-bootstrap-icons/lib/BadgeVrFill.svelte
mark_module_start();
BadgeVrFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeVrFill.svelte";
var root179 = add_locations(ns_template(`<svg><!><path d="M9.673 5.933v1.938h1.033c.66 0 1.068-.316 1.068-.95 0-.64-.422-.988-1.05-.988h-1.05z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm5.937 7 1.99-5.999H6.61L5.277 9.708H5.22L3.875 5.001H2.5L4.508 11h1.429zM8.5 5.001V11h1.173V8.763h1.064L11.787 11h1.327L11.91 8.583C12.455 8.373 13 7.779 13 6.9c0-1.147-.773-1.9-2.105-1.9H8.5z"></path></svg>`), BadgeVrFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BadgeVrFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeVrFill);
  var svg = root179();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-vr-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeVrFill = hmr(BadgeVrFill, () => BadgeVrFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeVrFill[HMR].source;
    set(BadgeVrFill[HMR].source, module.default[HMR].original);
  });
}
var BadgeVrFill_default = BadgeVrFill;
mark_module_end(BadgeVrFill);

// node_modules/svelte-bootstrap-icons/lib/BadgeVr.svelte
mark_module_start();
BadgeVr[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeVr.svelte";
var root180 = add_locations(ns_template(`<svg><!><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path><path d="M4.508 11h1.429l1.99-5.999H6.61L5.277 9.708H5.22L3.875 5.001H2.5L4.508 11zm6.387-5.999H8.5V11h1.173V8.763h1.064L11.787 11h1.327L11.91 8.583C12.455 8.373 13 7.779 13 6.9c0-1.147-.773-1.9-2.105-1.9zm-1.222 2.87V5.933h1.05c.63 0 1.05.347 1.05.989 0 .633-.408.95-1.067.95H9.673z"></path></svg>`), BadgeVr[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BadgeVr($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeVr);
  var svg = root180();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-vr", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeVr = hmr(BadgeVr, () => BadgeVr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeVr[HMR].source;
    set(BadgeVr[HMR].source, module.default[HMR].original);
  });
}
var BadgeVr_default = BadgeVr;
mark_module_end(BadgeVr);

// node_modules/svelte-bootstrap-icons/lib/BadgeWcFill.svelte
mark_module_start();
BadgeWcFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeWcFill.svelte";
var root181 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm11.666 1.89c.682 0 1.139.47 1.187 1.107H14v-.11c-.053-1.187-1.024-2-2.342-2-1.604 0-2.518 1.05-2.518 2.751v.747c0 1.7.905 2.73 2.518 2.73 1.314 0 2.285-.792 2.342-1.939v-.114h-1.147c-.048.615-.497 1.05-1.187 1.05-.839 0-1.318-.62-1.318-1.727v-.742c0-1.112.488-1.754 1.318-1.754zm-6.188.926h.044L6.542 11h1.006L9 5.001H7.818l-.82 4.355h-.056L5.97 5.001h-.94l-.972 4.355h-.053l-.827-4.355H2L3.452 11h1.005l1.02-4.184z"></path></svg>`), BadgeWcFill[FILENAME], [[1, 0, [[1, 174]]]]);
function BadgeWcFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeWcFill);
  var svg = root181();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-wc-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeWcFill = hmr(BadgeWcFill, () => BadgeWcFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeWcFill[HMR].source;
    set(BadgeWcFill[HMR].source, module.default[HMR].original);
  });
}
var BadgeWcFill_default = BadgeWcFill;
mark_module_end(BadgeWcFill);

// node_modules/svelte-bootstrap-icons/lib/BadgeWc.svelte
mark_module_start();
BadgeWc[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BadgeWc.svelte";
var root182 = add_locations(ns_template(`<svg><!><path d="M10.348 7.643c0-1.112.488-1.754 1.318-1.754.682 0 1.139.47 1.187 1.108H14v-.11c-.053-1.187-1.024-2-2.342-2-1.604 0-2.518 1.05-2.518 2.751v.747c0 1.7.905 2.73 2.518 2.73 1.314 0 2.285-.792 2.342-1.939v-.114h-1.147c-.048.615-.497 1.05-1.187 1.05-.839 0-1.318-.62-1.318-1.727v-.742zM4.457 11l1.02-4.184h.045L6.542 11h1.006L9 5.001H7.818l-.82 4.355h-.056L5.97 5.001h-.94l-.972 4.355h-.053l-.827-4.355H2L3.452 11h1.005z"></path><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path></svg>`), BadgeWc[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BadgeWc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BadgeWc);
  var svg = root182();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-badge-wc", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BadgeWc = hmr(BadgeWc, () => BadgeWc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BadgeWc[HMR].source;
    set(BadgeWc[HMR].source, module.default[HMR].original);
  });
}
var BadgeWc_default = BadgeWc;
mark_module_end(BadgeWc);

// node_modules/svelte-bootstrap-icons/lib/BagCheckFill.svelte
mark_module_start();
BagCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagCheckFill.svelte";
var root183 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.5 3.5a2.5 2.5 0 0 0-5 0V4h5v-.5zm1 0V4H15v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4h3.5v-.5a3.5 3.5 0 1 1 7 0zm-.646 5.354a.5.5 0 0 0-.708-.708L7.5 10.793 6.354 9.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0l3-3z"></path></svg>`), BagCheckFill[FILENAME], [[1, 0, [[1, 175]]]]);
function BagCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagCheckFill);
  var svg = root183();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagCheckFill = hmr(BagCheckFill, () => BagCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagCheckFill[HMR].source;
    set(BagCheckFill[HMR].source, module.default[HMR].original);
  });
}
var BagCheckFill_default = BagCheckFill;
mark_module_end(BagCheckFill);

// node_modules/svelte-bootstrap-icons/lib/BagCheck.svelte
mark_module_start();
BagCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagCheck.svelte";
var root184 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.854 8.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5zM2 5h12v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V5z"></path></svg>`), BagCheck[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function BagCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagCheck);
  var svg = root184();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagCheck = hmr(BagCheck, () => BagCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagCheck[HMR].source;
    set(BagCheck[HMR].source, module.default[HMR].original);
  });
}
var BagCheck_default = BagCheck;
mark_module_end(BagCheck);

// node_modules/svelte-bootstrap-icons/lib/BagDashFill.svelte
mark_module_start();
BagDashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagDashFill.svelte";
var root185 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.5 3.5a2.5 2.5 0 0 0-5 0V4h5v-.5zm1 0V4H15v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4h3.5v-.5a3.5 3.5 0 1 1 7 0zM6 9.5a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1H6z"></path></svg>`), BagDashFill[FILENAME], [[1, 0, [[1, 174]]]]);
function BagDashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagDashFill);
  var svg = root185();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-dash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagDashFill = hmr(BagDashFill, () => BagDashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagDashFill[HMR].source;
    set(BagDashFill[HMR].source, module.default[HMR].original);
  });
}
var BagDashFill_default = BagDashFill;
mark_module_end(BagDashFill);

// node_modules/svelte-bootstrap-icons/lib/BagDash.svelte
mark_module_start();
BagDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagDash.svelte";
var root186 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5.5 10a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5zM2 5h12v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V5z"></path></svg>`), BagDash[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BagDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagDash);
  var svg = root186();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagDash = hmr(BagDash, () => BagDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagDash[HMR].source;
    set(BagDash[HMR].source, module.default[HMR].original);
  });
}
var BagDash_default = BagDash;
mark_module_end(BagDash);

// node_modules/svelte-bootstrap-icons/lib/BagFill.svelte
mark_module_start();
BagFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagFill.svelte";
var root187 = add_locations(ns_template(`<svg><!><path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5z"></path></svg>`), BagFill[FILENAME], [[1, 0, [[1, 169]]]]);
function BagFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagFill);
  var svg = root187();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagFill = hmr(BagFill, () => BagFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagFill[HMR].source;
    set(BagFill[HMR].source, module.default[HMR].original);
  });
}
var BagFill_default = BagFill;
mark_module_end(BagFill);

// node_modules/svelte-bootstrap-icons/lib/BagHeartFill.svelte
mark_module_start();
BagHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagHeartFill.svelte";
var root188 = add_locations(ns_template(`<svg><!><path d="M11.5 4v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5ZM8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1Zm0 6.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), BagHeartFill[FILENAME], [[1, 0, [[1, 175]]]]);
function BagHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagHeartFill);
  var svg = root188();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagHeartFill = hmr(BagHeartFill, () => BagHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagHeartFill[HMR].source;
    set(BagHeartFill[HMR].source, module.default[HMR].original);
  });
}
var BagHeartFill_default = BagHeartFill;
mark_module_end(BagHeartFill);

// node_modules/svelte-bootstrap-icons/lib/BagHeart.svelte
mark_module_start();
BagHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagHeart.svelte";
var root189 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.5 3.5a2.5 2.5 0 0 0-5 0V4h5v-.5Zm1 0V4H15v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4h3.5v-.5a3.5 3.5 0 1 1 7 0ZM14 14V5H2v9a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1ZM8 7.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), BagHeart[FILENAME], [[1, 0, [[1, 170]]]]);
function BagHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagHeart);
  var svg = root189();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagHeart = hmr(BagHeart, () => BagHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagHeart[HMR].source;
    set(BagHeart[HMR].source, module.default[HMR].original);
  });
}
var BagHeart_default = BagHeart;
mark_module_end(BagHeart);

// node_modules/svelte-bootstrap-icons/lib/BagPlusFill.svelte
mark_module_start();
BagPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagPlusFill.svelte";
var root190 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.5 3.5a2.5 2.5 0 0 0-5 0V4h5v-.5zm1 0V4H15v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4h3.5v-.5a3.5 3.5 0 1 1 7 0zM8.5 8a.5.5 0 0 0-1 0v1.5H6a.5.5 0 0 0 0 1h1.5V12a.5.5 0 0 0 1 0v-1.5H10a.5.5 0 0 0 0-1H8.5V8z"></path></svg>`), BagPlusFill[FILENAME], [[1, 0, [[1, 174]]]]);
function BagPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagPlusFill);
  var svg = root190();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagPlusFill = hmr(BagPlusFill, () => BagPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagPlusFill[HMR].source;
    set(BagPlusFill[HMR].source, module.default[HMR].original);
  });
}
var BagPlusFill_default = BagPlusFill;
mark_module_end(BagPlusFill);

// node_modules/svelte-bootstrap-icons/lib/BagPlus.svelte
mark_module_start();
BagPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagPlus.svelte";
var root191 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 7.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V12a.5.5 0 0 1-1 0v-1.5H6a.5.5 0 0 1 0-1h1.5V8a.5.5 0 0 1 .5-.5z"></path><path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5zM2 5h12v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V5z"></path></svg>`), BagPlus[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BagPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagPlus);
  var svg = root191();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagPlus = hmr(BagPlus, () => BagPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagPlus[HMR].source;
    set(BagPlus[HMR].source, module.default[HMR].original);
  });
}
var BagPlus_default = BagPlus;
mark_module_end(BagPlus);

// node_modules/svelte-bootstrap-icons/lib/BagXFill.svelte
mark_module_start();
BagXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagXFill.svelte";
var root192 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.5 3.5a2.5 2.5 0 0 0-5 0V4h5v-.5zm1 0V4H15v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4h3.5v-.5a3.5 3.5 0 1 1 7 0zM6.854 8.146a.5.5 0 1 0-.708.708L7.293 10l-1.147 1.146a.5.5 0 0 0 .708.708L8 10.707l1.146 1.147a.5.5 0 0 0 .708-.708L8.707 10l1.147-1.146a.5.5 0 0 0-.708-.708L8 9.293 6.854 8.146z"></path></svg>`), BagXFill[FILENAME], [[1, 0, [[1, 171]]]]);
function BagXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagXFill);
  var svg = root192();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagXFill = hmr(BagXFill, () => BagXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagXFill[HMR].source;
    set(BagXFill[HMR].source, module.default[HMR].original);
  });
}
var BagXFill_default = BagXFill;
mark_module_end(BagXFill);

// node_modules/svelte-bootstrap-icons/lib/BagX.svelte
mark_module_start();
BagX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BagX.svelte";
var root193 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.146 8.146a.5.5 0 0 1 .708 0L8 9.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 10l1.147 1.146a.5.5 0 0 1-.708.708L8 10.707l-1.146 1.147a.5.5 0 0 1-.708-.708L7.293 10 6.146 8.854a.5.5 0 0 1 0-.708z"></path><path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5zM2 5h12v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V5z"></path></svg>`), BagX[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function BagX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BagX);
  var svg = root193();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BagX = hmr(BagX, () => BagX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BagX[HMR].source;
    set(BagX[HMR].source, module.default[HMR].original);
  });
}
var BagX_default = BagX;
mark_module_end(BagX);

// node_modules/svelte-bootstrap-icons/lib/Bag.svelte
mark_module_start();
Bag[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bag.svelte";
var root194 = add_locations(ns_template(`<svg><!><path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5zM2 5h12v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V5z"></path></svg>`), Bag[FILENAME], [[1, 0, [[1, 164]]]]);
function Bag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bag);
  var svg = root194();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bag", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bag = hmr(Bag, () => Bag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bag[HMR].source;
    set(Bag[HMR].source, module.default[HMR].original);
  });
}
var Bag_default = Bag;
mark_module_end(Bag);

// node_modules/svelte-bootstrap-icons/lib/BalloonFill.svelte
mark_module_start();
BalloonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BalloonFill.svelte";
var root195 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.48 10.901C11.211 10.227 13 7.837 13 5A5 5 0 0 0 3 5c0 2.837 1.789 5.227 4.52 5.901l-.244.487a.25.25 0 1 0 .448.224l.04-.08c.009.17.024.315.051.45.068.344.208.622.448 1.102l.013.028c.212.422.182.85.05 1.246-.135.402-.366.751-.534 1.003a.25.25 0 0 0 .416.278l.004-.007c.166-.248.431-.646.588-1.115.16-.479.212-1.051-.076-1.629-.258-.515-.365-.732-.419-1.004a2.376 2.376 0 0 1-.037-.289l.008.017a.25.25 0 1 0 .448-.224l-.244-.487ZM4.352 3.356a4.004 4.004 0 0 1 3.15-2.325C7.774.997 8 1.224 8 1.5c0 .276-.226.496-.498.542-.95.162-1.749.78-2.173 1.617a.595.595 0 0 1-.52.341c-.346 0-.599-.329-.457-.644Z"></path></svg>`), BalloonFill[FILENAME], [[1, 0, [[1, 173]]]]);
function BalloonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BalloonFill);
  var svg = root195();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-balloon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BalloonFill = hmr(BalloonFill, () => BalloonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BalloonFill[HMR].source;
    set(BalloonFill[HMR].source, module.default[HMR].original);
  });
}
var BalloonFill_default = BalloonFill;
mark_module_end(BalloonFill);

// node_modules/svelte-bootstrap-icons/lib/BalloonHeartFill.svelte
mark_module_start();
BalloonHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BalloonHeartFill.svelte";
var root196 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.49 10.92C19.412 3.382 11.28-2.387 8 .986 4.719-2.387-3.413 3.382 7.51 10.92l-.234.468a.25.25 0 1 0 .448.224l.04-.08c.009.17.024.315.051.45.068.344.208.622.448 1.102l.013.028c.212.422.182.85.05 1.246-.135.402-.366.751-.534 1.003a.25.25 0 0 0 .416.278l.004-.007c.166-.248.431-.646.588-1.115.16-.479.212-1.051-.076-1.629-.258-.515-.365-.732-.419-1.004a2.376 2.376 0 0 1-.037-.289l.008.017a.25.25 0 1 0 .448-.224l-.235-.468ZM6.726 1.269c-1.167-.61-2.8-.142-3.454 1.135-.237.463-.36 1.08-.202 1.85.055.27.467.197.527-.071.285-1.256 1.177-2.462 2.989-2.528.234-.008.348-.278.14-.386Z"></path></svg>`), BalloonHeartFill[FILENAME], [[1, 0, [[1, 179]]]]);
function BalloonHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BalloonHeartFill);
  var svg = root196();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-balloon-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BalloonHeartFill = hmr(BalloonHeartFill, () => BalloonHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BalloonHeartFill[HMR].source;
    set(BalloonHeartFill[HMR].source, module.default[HMR].original);
  });
}
var BalloonHeartFill_default = BalloonHeartFill;
mark_module_end(BalloonHeartFill);

// node_modules/svelte-bootstrap-icons/lib/BalloonHeart.svelte
mark_module_start();
BalloonHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BalloonHeart.svelte";
var root197 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="m8 2.42-.717-.737c-1.13-1.161-3.243-.777-4.01.72-.35.685-.451 1.707.236 3.062C4.16 6.753 5.52 8.32 8 10.042c2.479-1.723 3.839-3.29 4.491-4.577.687-1.355.587-2.377.236-3.061-.767-1.498-2.88-1.882-4.01-.721L8 2.42Zm-.49 8.5c-10.78-7.44-3-13.155.359-10.063.045.041.089.084.132.129.043-.045.087-.088.132-.129 3.36-3.092 11.137 2.624.357 10.063l.235.468a.25.25 0 1 1-.448.224l-.008-.017c.008.11.02.202.037.29.054.27.161.488.419 1.003.288.578.235 1.15.076 1.629-.157.469-.422.867-.588 1.115l-.004.007a.25.25 0 1 1-.416-.278c.168-.252.4-.6.533-1.003.133-.396.163-.824-.049-1.246l-.013-.028c-.24-.48-.38-.758-.448-1.102a3.177 3.177 0 0 1-.052-.45l-.04.08a.25.25 0 1 1-.447-.224l.235-.468ZM6.013 2.06c-.649-.18-1.483.083-1.85.798-.131.258-.245.689-.08 1.335.063.244.414.198.487-.043.21-.697.627-1.447 1.359-1.692.217-.073.304-.337.084-.398Z"></path></svg>`), BalloonHeart[FILENAME], [[1, 0, [[1, 174]]]]);
function BalloonHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BalloonHeart);
  var svg = root197();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-balloon-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BalloonHeart = hmr(BalloonHeart, () => BalloonHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BalloonHeart[HMR].source;
    set(BalloonHeart[HMR].source, module.default[HMR].original);
  });
}
var BalloonHeart_default = BalloonHeart;
mark_module_end(BalloonHeart);

// node_modules/svelte-bootstrap-icons/lib/Balloon.svelte
mark_module_start();
Balloon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Balloon.svelte";
var root198 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 9.984C10.403 9.506 12 7.48 12 5a4 4 0 0 0-8 0c0 2.48 1.597 4.506 4 4.984ZM13 5c0 2.837-1.789 5.227-4.52 5.901l.244.487a.25.25 0 1 1-.448.224l-.008-.017c.008.11.02.202.037.29.054.27.161.488.419 1.003.288.578.235 1.15.076 1.629-.157.469-.422.867-.588 1.115l-.004.007a.25.25 0 1 1-.416-.278c.168-.252.4-.6.533-1.003.133-.396.163-.824-.049-1.246l-.013-.028c-.24-.48-.38-.758-.448-1.102a3.177 3.177 0 0 1-.052-.45l-.04.08a.25.25 0 1 1-.447-.224l.244-.487C4.789 10.227 3 7.837 3 5a5 5 0 0 1 10 0Zm-6.938-.495a2.003 2.003 0 0 1 1.443-1.443C7.773 2.994 8 2.776 8 2.5c0-.276-.226-.504-.498-.459a3.003 3.003 0 0 0-2.46 2.461c-.046.272.182.498.458.498s.494-.227.562-.495Z"></path></svg>`), Balloon[FILENAME], [[1, 0, [[1, 168]]]]);
function Balloon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Balloon);
  var svg = root198();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-balloon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Balloon = hmr(Balloon, () => Balloon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Balloon[HMR].source;
    set(Balloon[HMR].source, module.default[HMR].original);
  });
}
var Balloon_default = Balloon;
mark_module_end(Balloon);

// node_modules/svelte-bootstrap-icons/lib/BanFill.svelte
mark_module_start();
BanFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BanFill.svelte";
var root199 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM2.71 12.584c.218.252.454.488.706.707l9.875-9.875a7.034 7.034 0 0 0-.707-.707l-9.875 9.875Z"></path></svg>`), BanFill[FILENAME], [[1, 0, [[1, 169]]]]);
function BanFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BanFill);
  var svg = root199();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ban-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BanFill = hmr(BanFill, () => BanFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BanFill[HMR].source;
    set(BanFill[HMR].source, module.default[HMR].original);
  });
}
var BanFill_default = BanFill;
mark_module_end(BanFill);

// node_modules/svelte-bootstrap-icons/lib/Ban.svelte
mark_module_start();
Ban[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Ban.svelte";
var root200 = add_locations(ns_template(`<svg><!><path d="M15 8a6.973 6.973 0 0 0-1.71-4.584l-9.874 9.875A7 7 0 0 0 15 8ZM2.71 12.584l9.874-9.875a7 7 0 0 0-9.874 9.874ZM16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Z"></path></svg>`), Ban[FILENAME], [[1, 0, [[1, 164]]]]);
function Ban($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Ban);
  var svg = root200();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ban", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ban = hmr(Ban, () => Ban[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ban[HMR].source;
    set(Ban[HMR].source, module.default[HMR].original);
  });
}
var Ban_default = Ban;
mark_module_end(Ban);

// node_modules/svelte-bootstrap-icons/lib/BandaidFill.svelte
mark_module_start();
BandaidFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BandaidFill.svelte";
var root201 = add_locations(ns_template(`<svg><!><path d="m2.68 7.676 6.49-6.504a4 4 0 0 1 5.66 5.653l-1.477 1.529-5.006 5.006-1.523 1.472a4 4 0 0 1-5.653-5.66l.001-.002 1.505-1.492.001-.002Zm5.71-2.858a.5.5 0 1 0-.708.707.5.5 0 0 0 .707-.707ZM6.974 6.939a.5.5 0 1 0-.707-.707.5.5 0 0 0 .707.707ZM5.56 8.354a.5.5 0 1 0-.707-.708.5.5 0 0 0 .707.708Zm2.828 2.828a.5.5 0 1 0-.707-.707.5.5 0 0 0 .707.707Zm1.414-2.121a.5.5 0 1 0-.707.707.5.5 0 0 0 .707-.707Zm1.414-.707a.5.5 0 1 0-.706-.708.5.5 0 0 0 .707.708Zm-4.242.707a.5.5 0 1 0-.707.707.5.5 0 0 0 .707-.707Zm1.414-.707a.5.5 0 1 0-.707-.708.5.5 0 0 0 .707.708Zm1.414-2.122a.5.5 0 1 0-.707.707.5.5 0 0 0 .707-.707ZM8.646 3.354l4 4 .708-.708-4-4-.708.708Zm-1.292 9.292-4-4-.708.708 4 4 .708-.708Z"></path></svg>`), BandaidFill[FILENAME], [[1, 0, [[1, 173]]]]);
function BandaidFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BandaidFill);
  var svg = root201();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bandaid-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BandaidFill = hmr(BandaidFill, () => BandaidFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BandaidFill[HMR].source;
    set(BandaidFill[HMR].source, module.default[HMR].original);
  });
}
var BandaidFill_default = BandaidFill;
mark_module_end(BandaidFill);

// node_modules/svelte-bootstrap-icons/lib/Bandaid.svelte
mark_module_start();
Bandaid[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bandaid.svelte";
var root202 = add_locations(ns_template(`<svg><!><path d="M14.121 1.879a3 3 0 0 0-4.242 0L8.733 3.026l4.261 4.26 1.127-1.165a3 3 0 0 0 0-4.242ZM12.293 8 8.027 3.734 3.738 8.031 8 12.293 12.293 8Zm-5.006 4.994L3.03 8.737 1.879 9.88a3 3 0 0 0 4.241 4.24l.006-.006 1.16-1.121ZM2.679 7.676l6.492-6.504a4 4 0 0 1 5.66 5.653l-1.477 1.529-5.006 5.006-1.523 1.472a4 4 0 0 1-5.653-5.66l.001-.002 1.505-1.492.001-.002Z"></path><path d="M5.56 7.646a.5.5 0 1 1-.706.708.5.5 0 0 1 .707-.708Zm1.415-1.414a.5.5 0 1 1-.707.707.5.5 0 0 1 .707-.707ZM8.39 4.818a.5.5 0 1 1-.708.707.5.5 0 0 1 .707-.707Zm0 5.657a.5.5 0 1 1-.708.707.5.5 0 0 1 .707-.707ZM9.803 9.06a.5.5 0 1 1-.707.708.5.5 0 0 1 .707-.707Zm1.414-1.414a.5.5 0 1 1-.706.708.5.5 0 0 1 .707-.708ZM6.975 9.06a.5.5 0 1 1-.707.708.5.5 0 0 1 .707-.707ZM8.39 7.646a.5.5 0 1 1-.708.708.5.5 0 0 1 .707-.708Zm1.413-1.414a.5.5 0 1 1-.707.707.5.5 0 0 1 .707-.707Z"></path></svg>`), Bandaid[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Bandaid($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bandaid);
  var svg = root202();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bandaid", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bandaid = hmr(Bandaid, () => Bandaid[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bandaid[HMR].source;
    set(Bandaid[HMR].source, module.default[HMR].original);
  });
}
var Bandaid_default = Bandaid;
mark_module_end(Bandaid);

// node_modules/svelte-bootstrap-icons/lib/Bank.svelte
mark_module_start();
Bank[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bank.svelte";
var root203 = add_locations(ns_template(`<svg><!><path d="m8 0 6.61 3h.89a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H15v7a.5.5 0 0 1 .485.38l.5 2a.498.498 0 0 1-.485.62H.5a.498.498 0 0 1-.485-.62l.5-2A.501.501 0 0 1 1 13V6H.5a.5.5 0 0 1-.5-.5v-2A.5.5 0 0 1 .5 3h.89L8 0ZM3.777 3h8.447L8 1 3.777 3ZM2 6v7h1V6H2Zm2 0v7h2.5V6H4Zm3.5 0v7h1V6h-1Zm2 0v7H12V6H9.5ZM13 6v7h1V6h-1Zm2-1V4H1v1h14Zm-.39 9H1.39l-.25 1h13.72l-.25-1Z"></path></svg>`), Bank[FILENAME], [[1, 0, [[1, 165]]]]);
function Bank($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bank);
  var svg = root203();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bank", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bank = hmr(Bank, () => Bank[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bank[HMR].source;
    set(Bank[HMR].source, module.default[HMR].original);
  });
}
var Bank_default = Bank;
mark_module_end(Bank);

// node_modules/svelte-bootstrap-icons/lib/Bank2.svelte
mark_module_start();
Bank2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bank2.svelte";
var root204 = add_locations(ns_template(`<svg><!><path d="M8.277.084a.5.5 0 0 0-.554 0l-7.5 5A.5.5 0 0 0 .5 6h1.875v7H1.5a.5.5 0 0 0 0 1h13a.5.5 0 1 0 0-1h-.875V6H15.5a.5.5 0 0 0 .277-.916l-7.5-5zM12.375 6v7h-1.25V6h1.25zm-2.5 0v7h-1.25V6h1.25zm-2.5 0v7h-1.25V6h1.25zm-2.5 0v7h-1.25V6h1.25zM8 4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zM.5 15a.5.5 0 0 0 0 1h15a.5.5 0 1 0 0-1H.5z"></path></svg>`), Bank2[FILENAME], [[1, 0, [[1, 166]]]]);
function Bank2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bank2);
  var svg = root204();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bank2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bank2 = hmr(Bank2, () => Bank2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bank2[HMR].source;
    set(Bank2[HMR].source, module.default[HMR].original);
  });
}
var Bank2_default = Bank2;
mark_module_end(Bank2);

// node_modules/svelte-bootstrap-icons/lib/BarChartFill.svelte
mark_module_start();
BarChartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BarChartFill.svelte";
var root205 = add_locations(ns_template(`<svg><!><path d="M1 11a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3zm5-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5-5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2z"></path></svg>`), BarChartFill[FILENAME], [[1, 0, [[1, 175]]]]);
function BarChartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BarChartFill);
  var svg = root205();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bar-chart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BarChartFill = hmr(BarChartFill, () => BarChartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BarChartFill[HMR].source;
    set(BarChartFill[HMR].source, module.default[HMR].original);
  });
}
var BarChartFill_default = BarChartFill;
mark_module_end(BarChartFill);

// node_modules/svelte-bootstrap-icons/lib/BarChartLineFill.svelte
mark_module_start();
BarChartLineFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BarChartLineFill.svelte";
var root206 = add_locations(ns_template(`<svg><!><path d="M11 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1v-3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3h1V7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7h1V2z"></path></svg>`), BarChartLineFill[FILENAME], [[1, 0, [[1, 180]]]]);
function BarChartLineFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BarChartLineFill);
  var svg = root206();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bar-chart-line-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BarChartLineFill = hmr(BarChartLineFill, () => BarChartLineFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BarChartLineFill[HMR].source;
    set(BarChartLineFill[HMR].source, module.default[HMR].original);
  });
}
var BarChartLineFill_default = BarChartLineFill;
mark_module_end(BarChartLineFill);

// node_modules/svelte-bootstrap-icons/lib/BarChartLine.svelte
mark_module_start();
BarChartLine[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BarChartLine.svelte";
var root207 = add_locations(ns_template(`<svg><!><path d="M11 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1v-3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3h1V7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7h1V2zm1 12h2V2h-2v12zm-3 0V7H7v7h2zm-5 0v-3H2v3h2z"></path></svg>`), BarChartLine[FILENAME], [[1, 0, [[1, 175]]]]);
function BarChartLine($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BarChartLine);
  var svg = root207();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bar-chart-line", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BarChartLine = hmr(BarChartLine, () => BarChartLine[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BarChartLine[HMR].source;
    set(BarChartLine[HMR].source, module.default[HMR].original);
  });
}
var BarChartLine_default = BarChartLine;
mark_module_end(BarChartLine);

// node_modules/svelte-bootstrap-icons/lib/BarChartSteps.svelte
mark_module_start();
BarChartSteps[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BarChartSteps.svelte";
var root208 = add_locations(ns_template(`<svg><!><path d="M.5 0a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-1 0V.5A.5.5 0 0 1 .5 0zM2 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-4a.5.5 0 0 1-.5-.5v-1zm2 4a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-1zm2 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-6a.5.5 0 0 1-.5-.5v-1zm2 4a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-1z"></path></svg>`), BarChartSteps[FILENAME], [[1, 0, [[1, 176]]]]);
function BarChartSteps($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BarChartSteps);
  var svg = root208();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bar-chart-steps", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BarChartSteps = hmr(BarChartSteps, () => BarChartSteps[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BarChartSteps[HMR].source;
    set(BarChartSteps[HMR].source, module.default[HMR].original);
  });
}
var BarChartSteps_default = BarChartSteps;
mark_module_end(BarChartSteps);

// node_modules/svelte-bootstrap-icons/lib/BarChart.svelte
mark_module_start();
BarChart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BarChart.svelte";
var root209 = add_locations(ns_template(`<svg><!><path d="M4 11H2v3h2v-3zm5-4H7v7h2V7zm5-5v12h-2V2h2zm-2-1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1h-2zM6 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm-5 4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3z"></path></svg>`), BarChart[FILENAME], [[1, 0, [[1, 170]]]]);
function BarChart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BarChart);
  var svg = root209();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bar-chart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BarChart = hmr(BarChart, () => BarChart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BarChart[HMR].source;
    set(BarChart[HMR].source, module.default[HMR].original);
  });
}
var BarChart_default = BarChart;
mark_module_end(BarChart);

// node_modules/svelte-bootstrap-icons/lib/BasketFill.svelte
mark_module_start();
BasketFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BasketFill.svelte";
var root210 = add_locations(ns_template(`<svg><!><path d="M5.071 1.243a.5.5 0 0 1 .858.514L3.383 6h9.234L10.07 1.757a.5.5 0 1 1 .858-.514L13.783 6H15.5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H15v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9H.5a.5.5 0 0 1-.5-.5v-2A.5.5 0 0 1 .5 6h1.717L5.07 1.243zM3.5 10.5a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0v-3zm2.5 0a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0v-3zm2.5 0a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0v-3zm2.5 0a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0v-3zm2.5 0a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0v-3z"></path></svg>`), BasketFill[FILENAME], [[1, 0, [[1, 172]]]]);
function BasketFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BasketFill);
  var svg = root210();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-basket-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BasketFill = hmr(BasketFill, () => BasketFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BasketFill[HMR].source;
    set(BasketFill[HMR].source, module.default[HMR].original);
  });
}
var BasketFill_default = BasketFill;
mark_module_end(BasketFill);

// node_modules/svelte-bootstrap-icons/lib/Basket.svelte
mark_module_start();
Basket[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Basket.svelte";
var root211 = add_locations(ns_template(`<svg><!><path d="M5.757 1.071a.5.5 0 0 1 .172.686L3.383 6h9.234L10.07 1.757a.5.5 0 1 1 .858-.514L13.783 6H15a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1v4.5a2.5 2.5 0 0 1-2.5 2.5h-9A2.5 2.5 0 0 1 1 13.5V9a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h1.217L5.07 1.243a.5.5 0 0 1 .686-.172zM2 9v4.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V9H2zM1 7v1h14V7H1zm3 3a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0v-3A.5.5 0 0 1 4 10zm2 0a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0v-3A.5.5 0 0 1 6 10zm2 0a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0v-3A.5.5 0 0 1 8 10zm2 0a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 1 .5-.5zm2 0a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 1 .5-.5z"></path></svg>`), Basket[FILENAME], [[1, 0, [[1, 167]]]]);
function Basket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Basket);
  var svg = root211();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-basket", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Basket = hmr(Basket, () => Basket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Basket[HMR].source;
    set(Basket[HMR].source, module.default[HMR].original);
  });
}
var Basket_default = Basket;
mark_module_end(Basket);

// node_modules/svelte-bootstrap-icons/lib/Basket2Fill.svelte
mark_module_start();
Basket2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Basket2Fill.svelte";
var root212 = add_locations(ns_template(`<svg><!><path d="M5.929 1.757a.5.5 0 1 0-.858-.514L2.217 6H.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h.623l1.844 6.456A.75.75 0 0 0 3.69 15h8.622a.75.75 0 0 0 .722-.544L14.877 8h.623a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1.717L10.93 1.243a.5.5 0 1 0-.858.514L12.617 6H3.383L5.93 1.757zM4 10a1 1 0 0 1 2 0v2a1 1 0 1 1-2 0v-2zm3 0a1 1 0 0 1 2 0v2a1 1 0 1 1-2 0v-2zm4-1a1 1 0 0 1 1 1v2a1 1 0 1 1-2 0v-2a1 1 0 0 1 1-1z"></path></svg>`), Basket2Fill[FILENAME], [[1, 0, [[1, 173]]]]);
function Basket2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Basket2Fill);
  var svg = root212();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-basket2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Basket2Fill = hmr(Basket2Fill, () => Basket2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Basket2Fill[HMR].source;
    set(Basket2Fill[HMR].source, module.default[HMR].original);
  });
}
var Basket2Fill_default = Basket2Fill;
mark_module_end(Basket2Fill);

// node_modules/svelte-bootstrap-icons/lib/Basket2.svelte
mark_module_start();
Basket2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Basket2.svelte";
var root213 = add_locations(ns_template(`<svg><!><path d="M4 10a1 1 0 0 1 2 0v2a1 1 0 0 1-2 0v-2zm3 0a1 1 0 0 1 2 0v2a1 1 0 0 1-2 0v-2zm3 0a1 1 0 1 1 2 0v2a1 1 0 0 1-2 0v-2z"></path><path d="M5.757 1.071a.5.5 0 0 1 .172.686L3.383 6h9.234L10.07 1.757a.5.5 0 1 1 .858-.514L13.783 6H15.5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-.623l-1.844 6.456a.75.75 0 0 1-.722.544H3.69a.75.75 0 0 1-.722-.544L1.123 8H.5a.5.5 0 0 1-.5-.5v-1A.5.5 0 0 1 .5 6h1.717L5.07 1.243a.5.5 0 0 1 .686-.172zM2.163 8l1.714 6h8.246l1.714-6H2.163z"></path></svg>`), Basket2[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Basket2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Basket2);
  var svg = root213();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-basket2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Basket2 = hmr(Basket2, () => Basket2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Basket2[HMR].source;
    set(Basket2[HMR].source, module.default[HMR].original);
  });
}
var Basket2_default = Basket2;
mark_module_end(Basket2);

// node_modules/svelte-bootstrap-icons/lib/Basket3Fill.svelte
mark_module_start();
Basket3Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Basket3Fill.svelte";
var root214 = add_locations(ns_template(`<svg><!><path d="M5.757 1.071a.5.5 0 0 1 .172.686L3.383 6h9.234L10.07 1.757a.5.5 0 1 1 .858-.514L13.783 6H15.5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H.5a.5.5 0 0 1-.5-.5v-1A.5.5 0 0 1 .5 6h1.717L5.07 1.243a.5.5 0 0 1 .686-.172zM2.468 15.426.943 9h14.114l-1.525 6.426a.75.75 0 0 1-.729.574H3.197a.75.75 0 0 1-.73-.574z"></path></svg>`), Basket3Fill[FILENAME], [[1, 0, [[1, 173]]]]);
function Basket3Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Basket3Fill);
  var svg = root214();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-basket3-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Basket3Fill = hmr(Basket3Fill, () => Basket3Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Basket3Fill[HMR].source;
    set(Basket3Fill[HMR].source, module.default[HMR].original);
  });
}
var Basket3Fill_default = Basket3Fill;
mark_module_end(Basket3Fill);

// node_modules/svelte-bootstrap-icons/lib/Basket3.svelte
mark_module_start();
Basket3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Basket3.svelte";
var root215 = add_locations(ns_template(`<svg><!><path d="M5.757 1.071a.5.5 0 0 1 .172.686L3.383 6h9.234L10.07 1.757a.5.5 0 1 1 .858-.514L13.783 6H15.5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H.5a.5.5 0 0 1-.5-.5v-1A.5.5 0 0 1 .5 6h1.717L5.07 1.243a.5.5 0 0 1 .686-.172zM3.394 15l-1.48-6h-.97l1.525 6.426a.75.75 0 0 0 .729.574h9.606a.75.75 0 0 0 .73-.574L15.056 9h-.972l-1.479 6h-9.21z"></path></svg>`), Basket3[FILENAME], [[1, 0, [[1, 168]]]]);
function Basket3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Basket3);
  var svg = root215();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-basket3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Basket3 = hmr(Basket3, () => Basket3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Basket3[HMR].source;
    set(Basket3[HMR].source, module.default[HMR].original);
  });
}
var Basket3_default = Basket3;
mark_module_end(Basket3);

// node_modules/svelte-bootstrap-icons/lib/BatteryCharging.svelte
mark_module_start();
BatteryCharging[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BatteryCharging.svelte";
var root216 = add_locations(ns_template(`<svg><!><path d="M9.585 2.568a.5.5 0 0 1 .226.58L8.677 6.832h1.99a.5.5 0 0 1 .364.843l-5.334 5.667a.5.5 0 0 1-.842-.49L5.99 9.167H4a.5.5 0 0 1-.364-.843l5.333-5.667a.5.5 0 0 1 .616-.09z"></path><path d="M2 4h4.332l-.94 1H2a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h2.38l-.308 1H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2z"></path><path d="M2 6h2.45L2.908 7.639A1.5 1.5 0 0 0 3.313 10H2V6zm8.595-2-.308 1H12a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1H9.276l-.942 1H12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.405z"></path><path d="M12 10h-1.783l1.542-1.639c.097-.103.178-.218.241-.34V10zm0-3.354V6h-.646a1.5 1.5 0 0 1 .646.646zM16 8a1.5 1.5 0 0 1-1.5 1.5v-3A1.5 1.5 0 0 1 16 8z"></path></svg>`), BatteryCharging[FILENAME], [
  [
    1,
    0,
    [
      [1, 177],
      [2, 2],
      [3, 2],
      [4, 2]
    ]
  ]
]);
function BatteryCharging($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BatteryCharging);
  var svg = root216();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(4);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-battery-charging", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BatteryCharging = hmr(BatteryCharging, () => BatteryCharging[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BatteryCharging[HMR].source;
    set(BatteryCharging[HMR].source, module.default[HMR].original);
  });
}
var BatteryCharging_default = BatteryCharging;
mark_module_end(BatteryCharging);

// node_modules/svelte-bootstrap-icons/lib/BatteryFull.svelte
mark_module_start();
BatteryFull[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BatteryFull.svelte";
var root217 = add_locations(ns_template(`<svg><!><path d="M2 6h10v4H2V6z"></path><path d="M2 4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H2zm10 1a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h10zm4 3a1.5 1.5 0 0 1-1.5 1.5v-3A1.5 1.5 0 0 1 16 8z"></path></svg>`), BatteryFull[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function BatteryFull($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BatteryFull);
  var svg = root217();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-battery-full", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BatteryFull = hmr(BatteryFull, () => BatteryFull[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BatteryFull[HMR].source;
    set(BatteryFull[HMR].source, module.default[HMR].original);
  });
}
var BatteryFull_default = BatteryFull;
mark_module_end(BatteryFull);

// node_modules/svelte-bootstrap-icons/lib/BatteryHalf.svelte
mark_module_start();
BatteryHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BatteryHalf.svelte";
var root218 = add_locations(ns_template(`<svg><!><path d="M2 6h5v4H2V6z"></path><path d="M2 4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H2zm10 1a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h10zm4 3a1.5 1.5 0 0 1-1.5 1.5v-3A1.5 1.5 0 0 1 16 8z"></path></svg>`), BatteryHalf[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function BatteryHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BatteryHalf);
  var svg = root218();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-battery-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BatteryHalf = hmr(BatteryHalf, () => BatteryHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BatteryHalf[HMR].source;
    set(BatteryHalf[HMR].source, module.default[HMR].original);
  });
}
var BatteryHalf_default = BatteryHalf;
mark_module_end(BatteryHalf);

// node_modules/svelte-bootstrap-icons/lib/Battery.svelte
mark_module_start();
Battery[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Battery.svelte";
var root219 = add_locations(ns_template(`<svg><!><path d="M0 6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6zm2-1a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H2zm14 3a1.5 1.5 0 0 1-1.5 1.5v-3A1.5 1.5 0 0 1 16 8z"></path></svg>`), Battery[FILENAME], [[1, 0, [[1, 168]]]]);
function Battery($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Battery);
  var svg = root219();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-battery", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Battery = hmr(Battery, () => Battery[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Battery[HMR].source;
    set(Battery[HMR].source, module.default[HMR].original);
  });
}
var Battery_default = Battery;
mark_module_end(Battery);

// node_modules/svelte-bootstrap-icons/lib/Behance.svelte
mark_module_start();
Behance[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Behance.svelte";
var root220 = add_locations(ns_template(`<svg><!><path d="M4.654 3c.461 0 .887.035 1.278.14.39.07.711.216.996.391.286.176.497.426.641.747.14.32.216.711.216 1.137 0 .496-.106.922-.356 1.242-.215.32-.566.606-.997.817.606.176 1.067.496 1.348.922.281.426.461.957.461 1.563 0 .496-.105.922-.285 1.278a2.317 2.317 0 0 1-.782.887c-.32.215-.711.39-1.137.496a5.329 5.329 0 0 1-1.278.176L0 12.803V3h4.654zm-.285 3.978c.39 0 .71-.105.957-.285.246-.18.355-.497.355-.887 0-.216-.035-.426-.105-.567a.981.981 0 0 0-.32-.355 1.84 1.84 0 0 0-.461-.176c-.176-.035-.356-.035-.567-.035H2.17v2.31c0-.005 2.2-.005 2.2-.005zm.105 4.193c.215 0 .426-.035.606-.07.176-.035.356-.106.496-.216s.25-.215.356-.39c.07-.176.14-.391.14-.641 0-.496-.14-.852-.426-1.102-.285-.215-.676-.32-1.137-.32H2.17v2.734h2.305v.005zm6.858-.035c.286.285.711.426 1.278.426.39 0 .746-.106 1.032-.286.285-.215.46-.426.53-.64h1.74c-.286.851-.712 1.457-1.278 1.848-.566.355-1.243.566-2.06.566a4.135 4.135 0 0 1-1.527-.285 2.827 2.827 0 0 1-1.137-.782 2.851 2.851 0 0 1-.712-1.172c-.175-.461-.25-.957-.25-1.528 0-.531.07-1.032.25-1.493.18-.46.426-.852.747-1.207.32-.32.711-.606 1.137-.782a4.018 4.018 0 0 1 1.493-.285c.606 0 1.137.105 1.598.355.46.25.817.532 1.102.958.285.39.496.851.641 1.348.07.496.105.996.07 1.563h-5.15c0 .58.21 1.11.496 1.396zm2.24-3.732c-.25-.25-.642-.391-1.103-.391-.32 0-.566.07-.781.176-.215.105-.356.25-.496.39a.957.957 0 0 0-.25.497c-.036.175-.07.32-.07.46h3.196c-.07-.526-.25-.882-.497-1.132zm-3.127-3.728h3.978v.957h-3.978v-.957z"></path></svg>`), Behance[FILENAME], [[1, 0, [[1, 168]]]]);
function Behance($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Behance);
  var svg = root220();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-behance", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Behance = hmr(Behance, () => Behance[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Behance[HMR].source;
    set(Behance[HMR].source, module.default[HMR].original);
  });
}
var Behance_default = Behance;
mark_module_end(Behance);

// node_modules/svelte-bootstrap-icons/lib/BellFill.svelte
mark_module_start();
BellFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BellFill.svelte";
var root221 = add_locations(ns_template(`<svg><!><path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z"></path></svg>`), BellFill[FILENAME], [[1, 0, [[1, 170]]]]);
function BellFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BellFill);
  var svg = root221();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bell-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BellFill = hmr(BellFill, () => BellFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BellFill[HMR].source;
    set(BellFill[HMR].source, module.default[HMR].original);
  });
}
var BellFill_default = BellFill;
mark_module_end(BellFill);

// node_modules/svelte-bootstrap-icons/lib/BellSlashFill.svelte
mark_module_start();
BellSlashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BellSlashFill.svelte";
var root222 = add_locations(ns_template(`<svg><!><path d="M5.164 14H15c-1.5-1-2-5.902-2-7 0-.264-.02-.523-.06-.776L5.164 14zm6.288-10.617A4.988 4.988 0 0 0 8.995 2.1a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 7c0 .898-.335 4.342-1.278 6.113l9.73-9.73zM10 15a2 2 0 1 1-4 0h4zm-9.375.625a.53.53 0 0 0 .75.75l14.75-14.75a.53.53 0 0 0-.75-.75L.625 15.625z"></path></svg>`), BellSlashFill[FILENAME], [[1, 0, [[1, 176]]]]);
function BellSlashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BellSlashFill);
  var svg = root222();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bell-slash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BellSlashFill = hmr(BellSlashFill, () => BellSlashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BellSlashFill[HMR].source;
    set(BellSlashFill[HMR].source, module.default[HMR].original);
  });
}
var BellSlashFill_default = BellSlashFill;
mark_module_end(BellSlashFill);

// node_modules/svelte-bootstrap-icons/lib/BellSlash.svelte
mark_module_start();
BellSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BellSlash.svelte";
var root223 = add_locations(ns_template(`<svg><!><path d="M5.164 14H15c-.299-.199-.557-.553-.78-1-.9-1.8-1.22-5.12-1.22-6 0-.264-.02-.523-.06-.776l-.938.938c.02.708.157 2.154.457 3.58.161.767.377 1.566.663 2.258H6.164l-1 1zm5.581-9.91a3.986 3.986 0 0 0-1.948-1.01L8 2.917l-.797.161A4.002 4.002 0 0 0 4 7c0 .628-.134 2.197-.459 3.742-.05.238-.105.479-.166.718l-1.653 1.653c.02-.037.04-.074.059-.113C2.679 11.2 3 7.88 3 7c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0c.942.19 1.788.645 2.457 1.284l-.707.707zM10 15a2 2 0 1 1-4 0h4zm-9.375.625a.53.53 0 0 0 .75.75l14.75-14.75a.53.53 0 0 0-.75-.75L.625 15.625z"></path></svg>`), BellSlash[FILENAME], [[1, 0, [[1, 171]]]]);
function BellSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BellSlash);
  var svg = root223();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bell-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BellSlash = hmr(BellSlash, () => BellSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BellSlash[HMR].source;
    set(BellSlash[HMR].source, module.default[HMR].original);
  });
}
var BellSlash_default = BellSlash;
mark_module_end(BellSlash);

// node_modules/svelte-bootstrap-icons/lib/Bell.svelte
mark_module_start();
Bell[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bell.svelte";
var root224 = add_locations(ns_template(`<svg><!><path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zM8 1.918l-.797.161A4.002 4.002 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4.002 4.002 0 0 0-3.203-3.92L8 1.917zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5.002 5.002 0 0 1 13 6c0 .88.32 4.2 1.22 6z"></path></svg>`), Bell[FILENAME], [[1, 0, [[1, 165]]]]);
function Bell($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bell);
  var svg = root224();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bell", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bell = hmr(Bell, () => Bell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bell[HMR].source;
    set(Bell[HMR].source, module.default[HMR].original);
  });
}
var Bell_default = Bell;
mark_module_end(Bell);

// node_modules/svelte-bootstrap-icons/lib/Bezier.svelte
mark_module_start();
Bezier[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bezier.svelte";
var root225 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 10.5A1.5 1.5 0 0 1 1.5 9h1A1.5 1.5 0 0 1 4 10.5v1A1.5 1.5 0 0 1 2.5 13h-1A1.5 1.5 0 0 1 0 11.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zm10.5.5A1.5 1.5 0 0 1 13.5 9h1a1.5 1.5 0 0 1 1.5 1.5v1a1.5 1.5 0 0 1-1.5 1.5h-1a1.5 1.5 0 0 1-1.5-1.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zM6 4.5A1.5 1.5 0 0 1 7.5 3h1A1.5 1.5 0 0 1 10 4.5v1A1.5 1.5 0 0 1 8.5 7h-1A1.5 1.5 0 0 1 6 5.5v-1zM7.5 4a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1z"></path><path d="M6 4.5H1.866a1 1 0 1 0 0 1h2.668A6.517 6.517 0 0 0 1.814 9H2.5c.123 0 .244.015.358.043a5.517 5.517 0 0 1 3.185-3.185A1.503 1.503 0 0 1 6 5.5v-1zm3.957 1.358A1.5 1.5 0 0 0 10 5.5v-1h4.134a1 1 0 1 1 0 1h-2.668a6.517 6.517 0 0 1 2.72 3.5H13.5c-.123 0-.243.015-.358.043a5.517 5.517 0 0 0-3.185-3.185z"></path></svg>`), Bezier[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Bezier($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bezier);
  var svg = root225();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bezier", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bezier = hmr(Bezier, () => Bezier[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bezier[HMR].source;
    set(Bezier[HMR].source, module.default[HMR].original);
  });
}
var Bezier_default = Bezier;
mark_module_end(Bezier);

// node_modules/svelte-bootstrap-icons/lib/Bezier2.svelte
mark_module_start();
Bezier2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bezier2.svelte";
var root226 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 2.5A1.5 1.5 0 0 1 2.5 1h1A1.5 1.5 0 0 1 5 2.5h4.134a1 1 0 1 1 0 1h-2.01c.18.18.34.381.484.605.638.992.892 2.354.892 3.895 0 1.993.257 3.092.713 3.7.356.476.895.721 1.787.784A1.5 1.5 0 0 1 12.5 11h1a1.5 1.5 0 0 1 1.5 1.5v1a1.5 1.5 0 0 1-1.5 1.5h-1a1.5 1.5 0 0 1-1.5-1.5H6.866a1 1 0 1 1 0-1h1.711a2.839 2.839 0 0 1-.165-.2C7.743 11.407 7.5 10.007 7.5 8c0-1.46-.246-2.597-.733-3.355-.39-.605-.952-1-1.767-1.112A1.5 1.5 0 0 1 3.5 5h-1A1.5 1.5 0 0 1 1 3.5v-1zM2.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zm10 10a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1z"></path></svg>`), Bezier2[FILENAME], [[1, 0, [[1, 168]]]]);
function Bezier2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bezier2);
  var svg = root226();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bezier2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bezier2 = hmr(Bezier2, () => Bezier2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bezier2[HMR].source;
    set(Bezier2[HMR].source, module.default[HMR].original);
  });
}
var Bezier2_default = Bezier2;
mark_module_end(Bezier2);

// node_modules/svelte-bootstrap-icons/lib/Bicycle.svelte
mark_module_start();
Bicycle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bicycle.svelte";
var root227 = add_locations(ns_template(`<svg><!><path d="M4 4.5a.5.5 0 0 1 .5-.5H6a.5.5 0 0 1 0 1v.5h4.14l.386-1.158A.5.5 0 0 1 11 4h1a.5.5 0 0 1 0 1h-.64l-.311.935.807 1.29a3 3 0 1 1-.848.53l-.508-.812-2.076 3.322A.5.5 0 0 1 8 10.5H5.959a3 3 0 1 1-1.815-3.274L5 5.856V5h-.5a.5.5 0 0 1-.5-.5zm1.5 2.443-.508.814c.5.444.85 1.054.967 1.743h1.139L5.5 6.943zM8 9.057 9.598 6.5H6.402L8 9.057zM4.937 9.5a1.997 1.997 0 0 0-.487-.877l-.548.877h1.035zM3.603 8.092A2 2 0 1 0 4.937 10.5H3a.5.5 0 0 1-.424-.765l1.027-1.643zm7.947.53a2 2 0 1 0 .848-.53l1.026 1.643a.5.5 0 1 1-.848.53L11.55 8.623z"></path></svg>`), Bicycle[FILENAME], [[1, 0, [[1, 168]]]]);
function Bicycle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bicycle);
  var svg = root227();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bicycle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bicycle = hmr(Bicycle, () => Bicycle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bicycle[HMR].source;
    set(Bicycle[HMR].source, module.default[HMR].original);
  });
}
var Bicycle_default = Bicycle;
mark_module_end(Bicycle);

// node_modules/svelte-bootstrap-icons/lib/Bing.svelte
mark_module_start();
Bing[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bing.svelte";
var root228 = add_locations(ns_template(`<svg><!><path d="M8.35 5.046a.615.615 0 0 0-.54.575c-.009.13-.006.14.289.899.67 1.727.833 2.142.86 2.2.067.142.16.276.277.395.089.092.148.141.247.208.176.117.262.15.944.351.664.197 1.026.327 1.338.482.405.201.688.43.866.7.128.195.242.544.291.896.02.137.02.44 0 .564-.041.27-.124.495-.252.684-.067.1-.044.084.055-.039.278-.346.562-.938.707-1.475a4.42 4.42 0 0 0-2.14-5.028 69.556 69.556 0 0 0-.888-.465 50.419 50.419 0 0 0-.53-.277l-.353-.184c-.16-.082-.266-.138-.345-.18-.368-.192-.523-.27-.568-.283a.93.93 0 0 0-.194-.03l-.063.007Z"></path><path d="M9.152 11.493a2.623 2.623 0 0 0-.135.083 320.256 320.256 0 0 0-1.513.934 164.12 164.12 0 0 0-.8.496c-.012.01-.587.367-.876.543a1.91 1.91 0 0 1-.732.257c-.12.017-.349.017-.47 0a1.891 1.891 0 0 1-.884-.358 2.45 2.45 0 0 1-.365-.364 1.884 1.884 0 0 1-.34-.76 1.441 1.441 0 0 0-.027-.121c-.005-.006.004.092.022.22.018.132.057.324.098.489a4.096 4.096 0 0 0 2.487 2.796c.359.142.72.23 1.114.275.147.016.566.023.72.011a4.103 4.103 0 0 0 1.956-.661l.235-.149a36.314 36.314 0 0 0 .394-.248l.258-.163 1.164-.736c.51-.32.663-.433.9-.665.099-.097.248-.262.255-.283.002-.005.028-.046.059-.091a1.64 1.64 0 0 0 .25-.682c.02-.124.02-.427 0-.565a2.875 2.875 0 0 0-.213-.758c-.15-.314-.47-.6-.928-.83a1.986 1.986 0 0 0-.273-.12c-.006 0-.433.26-.948.58a1699.479 1699.479 0 0 0-1.113.687l-.295.183Z"></path><path d="m3.004 12.184.03.129c.089.402.245.693.515.963a1.823 1.823 0 0 0 1.312.543c.361 0 .673-.09.994-.287l.472-.29.373-.23V5.334c0-1.537-.003-2.45-.008-2.521a1.817 1.817 0 0 0-.535-1.177c-.097-.096-.18-.16-.427-.33A1192.515 1192.515 0 0 1 4.183.24c-.239-.163-.258-.175-.33-.2a.631.631 0 0 0-.842.464c-.009.042-.01.603-.01 3.646l.003 8.035Z"></path></svg>`), Bing[FILENAME], [
  [
    1,
    0,
    [[1, 165], [2, 2], [3, 2]]
  ]
]);
function Bing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bing);
  var svg = root228();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bing", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bing = hmr(Bing, () => Bing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bing[HMR].source;
    set(Bing[HMR].source, module.default[HMR].original);
  });
}
var Bing_default = Bing;
mark_module_end(Bing);

// node_modules/svelte-bootstrap-icons/lib/BinocularsFill.svelte
mark_module_start();
BinocularsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BinocularsFill.svelte";
var root229 = add_locations(ns_template(`<svg><!><path d="M4.5 1A1.5 1.5 0 0 0 3 2.5V3h4v-.5A1.5 1.5 0 0 0 5.5 1h-1zM7 4v1h2V4h4v.882a.5.5 0 0 0 .276.447l.895.447A1.5 1.5 0 0 1 15 7.118V13H9v-1.5a.5.5 0 0 1 .146-.354l.854-.853V9.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v.793l.854.853A.5.5 0 0 1 7 11.5V13H1V7.118a1.5 1.5 0 0 1 .83-1.342l.894-.447A.5.5 0 0 0 3 4.882V4h4zM1 14v.5A1.5 1.5 0 0 0 2.5 16h3A1.5 1.5 0 0 0 7 14.5V14H1zm8 0v.5a1.5 1.5 0 0 0 1.5 1.5h3a1.5 1.5 0 0 0 1.5-1.5V14H9zm4-11H9v-.5A1.5 1.5 0 0 1 10.5 1h1A1.5 1.5 0 0 1 13 2.5V3z"></path></svg>`), BinocularsFill[FILENAME], [[1, 0, [[1, 176]]]]);
function BinocularsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BinocularsFill);
  var svg = root229();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-binoculars-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BinocularsFill = hmr(BinocularsFill, () => BinocularsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BinocularsFill[HMR].source;
    set(BinocularsFill[HMR].source, module.default[HMR].original);
  });
}
var BinocularsFill_default = BinocularsFill;
mark_module_end(BinocularsFill);

// node_modules/svelte-bootstrap-icons/lib/Binoculars.svelte
mark_module_start();
Binoculars[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Binoculars.svelte";
var root230 = add_locations(ns_template(`<svg><!><path d="M3 2.5A1.5 1.5 0 0 1 4.5 1h1A1.5 1.5 0 0 1 7 2.5V5h2V2.5A1.5 1.5 0 0 1 10.5 1h1A1.5 1.5 0 0 1 13 2.5v2.382a.5.5 0 0 0 .276.447l.895.447A1.5 1.5 0 0 1 15 7.118V14.5a1.5 1.5 0 0 1-1.5 1.5h-3A1.5 1.5 0 0 1 9 14.5v-3a.5.5 0 0 1 .146-.354l.854-.853V9.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v.793l.854.853A.5.5 0 0 1 7 11.5v3A1.5 1.5 0 0 1 5.5 16h-3A1.5 1.5 0 0 1 1 14.5V7.118a1.5 1.5 0 0 1 .83-1.342l.894-.447A.5.5 0 0 0 3 4.882V2.5zM4.5 2a.5.5 0 0 0-.5.5V3h2v-.5a.5.5 0 0 0-.5-.5h-1zM6 4H4v.882a1.5 1.5 0 0 1-.83 1.342l-.894.447A.5.5 0 0 0 2 7.118V13h4v-1.293l-.854-.853A.5.5 0 0 1 5 10.5v-1A1.5 1.5 0 0 1 6.5 8h3A1.5 1.5 0 0 1 11 9.5v1a.5.5 0 0 1-.146.354l-.854.853V13h4V7.118a.5.5 0 0 0-.276-.447l-.895-.447A1.5 1.5 0 0 1 12 4.882V4h-2v1.5a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V4zm4-1h2v-.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5V3zm4 11h-4v.5a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5V14zm-8 0H2v.5a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5V14z"></path></svg>`), Binoculars[FILENAME], [[1, 0, [[1, 171]]]]);
function Binoculars($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Binoculars);
  var svg = root230();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-binoculars", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Binoculars = hmr(Binoculars, () => Binoculars[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Binoculars[HMR].source;
    set(Binoculars[HMR].source, module.default[HMR].original);
  });
}
var Binoculars_default = Binoculars;
mark_module_end(Binoculars);

// node_modules/svelte-bootstrap-icons/lib/BlockquoteLeft.svelte
mark_module_start();
BlockquoteLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BlockquoteLeft.svelte";
var root231 = add_locations(ns_template(`<svg><!><path d="M2.5 3a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1h-11zm5 3a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6zm0 3a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6zm-5 3a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1h-11zm.79-5.373c.112-.078.26-.17.444-.275L3.524 6c-.122.074-.272.17-.452.287-.18.117-.35.26-.51.428a2.425 2.425 0 0 0-.398.562c-.11.207-.164.438-.164.692 0 .36.072.65.217.873.144.219.385.328.72.328.215 0 .383-.07.504-.211a.697.697 0 0 0 .188-.463c0-.23-.07-.404-.211-.521-.137-.121-.326-.182-.568-.182h-.282c.024-.203.065-.37.123-.498a1.38 1.38 0 0 1 .252-.37 1.94 1.94 0 0 1 .346-.298zm2.167 0c.113-.078.262-.17.445-.275L5.692 6c-.122.074-.272.17-.452.287-.18.117-.35.26-.51.428a2.425 2.425 0 0 0-.398.562c-.11.207-.164.438-.164.692 0 .36.072.65.217.873.144.219.385.328.72.328.215 0 .383-.07.504-.211a.697.697 0 0 0 .188-.463c0-.23-.07-.404-.211-.521-.137-.121-.326-.182-.568-.182h-.282a1.75 1.75 0 0 1 .118-.492c.058-.13.144-.254.257-.375a1.94 1.94 0 0 1 .346-.3z"></path></svg>`), BlockquoteLeft[FILENAME], [[1, 0, [[1, 176]]]]);
function BlockquoteLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BlockquoteLeft);
  var svg = root231();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-blockquote-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BlockquoteLeft = hmr(BlockquoteLeft, () => BlockquoteLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BlockquoteLeft[HMR].source;
    set(BlockquoteLeft[HMR].source, module.default[HMR].original);
  });
}
var BlockquoteLeft_default = BlockquoteLeft;
mark_module_end(BlockquoteLeft);

// node_modules/svelte-bootstrap-icons/lib/BlockquoteRight.svelte
mark_module_start();
BlockquoteRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BlockquoteRight.svelte";
var root232 = add_locations(ns_template(`<svg><!><path d="M2.5 3a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1h-11zm0 3a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6zm0 3a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6zm0 3a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1h-11zm10.113-5.373a6.59 6.59 0 0 0-.445-.275l.21-.352c.122.074.272.17.452.287.18.117.35.26.51.428.156.164.289.351.398.562.11.207.164.438.164.692 0 .36-.072.65-.216.873-.145.219-.385.328-.721.328-.215 0-.383-.07-.504-.211a.697.697 0 0 1-.188-.463c0-.23.07-.404.211-.521.137-.121.326-.182.569-.182h.281a1.686 1.686 0 0 0-.123-.498 1.379 1.379 0 0 0-.252-.37 1.94 1.94 0 0 0-.346-.298zm-2.168 0A6.59 6.59 0 0 0 10 6.352L10.21 6c.122.074.272.17.452.287.18.117.35.26.51.428.156.164.289.351.398.562.11.207.164.438.164.692 0 .36-.072.65-.216.873-.145.219-.385.328-.721.328-.215 0-.383-.07-.504-.211a.697.697 0 0 1-.188-.463c0-.23.07-.404.211-.521.137-.121.327-.182.569-.182h.281a1.749 1.749 0 0 0-.117-.492 1.402 1.402 0 0 0-.258-.375 1.94 1.94 0 0 0-.346-.3z"></path></svg>`), BlockquoteRight[FILENAME], [[1, 0, [[1, 177]]]]);
function BlockquoteRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BlockquoteRight);
  var svg = root232();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-blockquote-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BlockquoteRight = hmr(BlockquoteRight, () => BlockquoteRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BlockquoteRight[HMR].source;
    set(BlockquoteRight[HMR].source, module.default[HMR].original);
  });
}
var BlockquoteRight_default = BlockquoteRight;
mark_module_end(BlockquoteRight);

// node_modules/svelte-bootstrap-icons/lib/Bluetooth.svelte
mark_module_start();
Bluetooth[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bluetooth.svelte";
var root233 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="m8.543 3.948 1.316 1.316L8.543 6.58V3.948Zm0 8.104 1.316-1.316L8.543 9.42v2.632Zm-1.41-4.043L4.275 5.133l.827-.827L7.377 6.58V1.128l4.137 4.136L8.787 8.01l2.745 2.745-4.136 4.137V9.42l-2.294 2.274-.827-.827L7.133 8.01ZM7.903 16c3.498 0 5.904-1.655 5.904-8.01 0-6.335-2.406-7.99-5.903-7.99C4.407 0 2 1.655 2 8.01 2 14.344 4.407 16 7.904 16Z"></path></svg>`), Bluetooth[FILENAME], [[1, 0, [[1, 170]]]]);
function Bluetooth($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bluetooth);
  var svg = root233();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bluetooth", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bluetooth = hmr(Bluetooth, () => Bluetooth[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bluetooth[HMR].source;
    set(Bluetooth[HMR].source, module.default[HMR].original);
  });
}
var Bluetooth_default = Bluetooth;
mark_module_end(Bluetooth);

// node_modules/svelte-bootstrap-icons/lib/BodyText.svelte
mark_module_start();
BodyText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BodyText.svelte";
var root234 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 .5A.5.5 0 0 1 .5 0h4a.5.5 0 0 1 0 1h-4A.5.5 0 0 1 0 .5Zm0 2A.5.5 0 0 1 .5 2h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5Zm9 0a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Zm-9 2A.5.5 0 0 1 .5 4h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5Zm5 0a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Zm7 0a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5Zm-12 2A.5.5 0 0 1 .5 6h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5Zm8 0a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Zm-8 2A.5.5 0 0 1 .5 8h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Zm7 0a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5Zm-7 2a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 0 1h-8a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Z"></path></svg>`), BodyText[FILENAME], [[1, 0, [[1, 170]]]]);
function BodyText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BodyText);
  var svg = root234();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-body-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BodyText = hmr(BodyText, () => BodyText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BodyText[HMR].source;
    set(BodyText[HMR].source, module.default[HMR].original);
  });
}
var BodyText_default = BodyText;
mark_module_end(BodyText);

// node_modules/svelte-bootstrap-icons/lib/BookFill.svelte
mark_module_start();
BookFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookFill.svelte";
var root235 = add_locations(ns_template(`<svg><!><path d="M8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z"></path></svg>`), BookFill[FILENAME], [[1, 0, [[1, 170]]]]);
function BookFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookFill);
  var svg = root235();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-book-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookFill = hmr(BookFill, () => BookFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookFill[HMR].source;
    set(BookFill[HMR].source, module.default[HMR].original);
  });
}
var BookFill_default = BookFill;
mark_module_end(BookFill);

// node_modules/svelte-bootstrap-icons/lib/BookHalf.svelte
mark_module_start();
BookHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookHalf.svelte";
var root236 = add_locations(ns_template(`<svg><!><path d="M8.5 2.687c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z"></path></svg>`), BookHalf[FILENAME], [[1, 0, [[1, 170]]]]);
function BookHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookHalf);
  var svg = root236();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-book-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookHalf = hmr(BookHalf, () => BookHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookHalf[HMR].source;
    set(BookHalf[HMR].source, module.default[HMR].original);
  });
}
var BookHalf_default = BookHalf;
mark_module_end(BookHalf);

// node_modules/svelte-bootstrap-icons/lib/Book.svelte
mark_module_start();
Book[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Book.svelte";
var root237 = add_locations(ns_template(`<svg><!><path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z"></path></svg>`), Book[FILENAME], [[1, 0, [[1, 165]]]]);
function Book($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Book);
  var svg = root237();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-book", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book = hmr(Book, () => Book[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book[HMR].source;
    set(Book[HMR].source, module.default[HMR].original);
  });
}
var Book_default = Book;
mark_module_end(Book);

// node_modules/svelte-bootstrap-icons/lib/BookmarkCheckFill.svelte
mark_module_start();
BookmarkCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkCheckFill.svelte";
var root238 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 15.5V2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5zm8.854-9.646a.5.5 0 0 0-.708-.708L7.5 7.793 6.354 6.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0l3-3z"></path></svg>`), BookmarkCheckFill[FILENAME], [[1, 0, [[1, 180]]]]);
function BookmarkCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkCheckFill);
  var svg = root238();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkCheckFill = hmr(BookmarkCheckFill, () => BookmarkCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkCheckFill[HMR].source;
    set(BookmarkCheckFill[HMR].source, module.default[HMR].original);
  });
}
var BookmarkCheckFill_default = BookmarkCheckFill;
mark_module_end(BookmarkCheckFill);

// node_modules/svelte-bootstrap-icons/lib/BookmarkCheck.svelte
mark_module_start();
BookmarkCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkCheck.svelte";
var root239 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.854 5.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 7.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"></path></svg>`), BookmarkCheck[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function BookmarkCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkCheck);
  var svg = root239();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkCheck = hmr(BookmarkCheck, () => BookmarkCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkCheck[HMR].source;
    set(BookmarkCheck[HMR].source, module.default[HMR].original);
  });
}
var BookmarkCheck_default = BookmarkCheck;
mark_module_end(BookmarkCheck);

// node_modules/svelte-bootstrap-icons/lib/BookmarkDashFill.svelte
mark_module_start();
BookmarkDashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkDashFill.svelte";
var root240 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 15.5V2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5zM6 6a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1H6z"></path></svg>`), BookmarkDashFill[FILENAME], [[1, 0, [[1, 179]]]]);
function BookmarkDashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkDashFill);
  var svg = root240();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-dash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkDashFill = hmr(BookmarkDashFill, () => BookmarkDashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkDashFill[HMR].source;
    set(BookmarkDashFill[HMR].source, module.default[HMR].original);
  });
}
var BookmarkDashFill_default = BookmarkDashFill;
mark_module_end(BookmarkDashFill);

// node_modules/svelte-bootstrap-icons/lib/BookmarkDash.svelte
mark_module_start();
BookmarkDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkDash.svelte";
var root241 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5.5 6.5A.5.5 0 0 1 6 6h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"></path></svg>`), BookmarkDash[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BookmarkDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkDash);
  var svg = root241();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkDash = hmr(BookmarkDash, () => BookmarkDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkDash[HMR].source;
    set(BookmarkDash[HMR].source, module.default[HMR].original);
  });
}
var BookmarkDash_default = BookmarkDash;
mark_module_end(BookmarkDash);

// node_modules/svelte-bootstrap-icons/lib/BookmarkFill.svelte
mark_module_start();
BookmarkFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkFill.svelte";
var root242 = add_locations(ns_template(`<svg><!><path d="M2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2z"></path></svg>`), BookmarkFill[FILENAME], [[1, 0, [[1, 174]]]]);
function BookmarkFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkFill);
  var svg = root242();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkFill = hmr(BookmarkFill, () => BookmarkFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkFill[HMR].source;
    set(BookmarkFill[HMR].source, module.default[HMR].original);
  });
}
var BookmarkFill_default = BookmarkFill;
mark_module_end(BookmarkFill);

// node_modules/svelte-bootstrap-icons/lib/BookmarkHeartFill.svelte
mark_module_start();
BookmarkHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkHeartFill.svelte";
var root243 = add_locations(ns_template(`<svg><!><path d="M2 15.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v13.5zM8 4.41c1.387-1.425 4.854 1.07 0 4.277C3.146 5.48 6.613 2.986 8 4.412z"></path></svg>`), BookmarkHeartFill[FILENAME], [[1, 0, [[1, 180]]]]);
function BookmarkHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkHeartFill);
  var svg = root243();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkHeartFill = hmr(BookmarkHeartFill, () => BookmarkHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkHeartFill[HMR].source;
    set(BookmarkHeartFill[HMR].source, module.default[HMR].original);
  });
}
var BookmarkHeartFill_default = BookmarkHeartFill;
mark_module_end(BookmarkHeartFill);

// node_modules/svelte-bootstrap-icons/lib/BookmarkHeart.svelte
mark_module_start();
BookmarkHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkHeart.svelte";
var root244 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 4.41c1.387-1.425 4.854 1.07 0 4.277C3.146 5.48 6.613 2.986 8 4.412z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"></path></svg>`), BookmarkHeart[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function BookmarkHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkHeart);
  var svg = root244();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkHeart = hmr(BookmarkHeart, () => BookmarkHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkHeart[HMR].source;
    set(BookmarkHeart[HMR].source, module.default[HMR].original);
  });
}
var BookmarkHeart_default = BookmarkHeart;
mark_module_end(BookmarkHeart);

// node_modules/svelte-bootstrap-icons/lib/BookmarkPlusFill.svelte
mark_module_start();
BookmarkPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkPlusFill.svelte";
var root245 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 15.5V2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5zm6.5-11a.5.5 0 0 0-1 0V6H6a.5.5 0 0 0 0 1h1.5v1.5a.5.5 0 0 0 1 0V7H10a.5.5 0 0 0 0-1H8.5V4.5z"></path></svg>`), BookmarkPlusFill[FILENAME], [[1, 0, [[1, 179]]]]);
function BookmarkPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkPlusFill);
  var svg = root245();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkPlusFill = hmr(BookmarkPlusFill, () => BookmarkPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkPlusFill[HMR].source;
    set(BookmarkPlusFill[HMR].source, module.default[HMR].original);
  });
}
var BookmarkPlusFill_default = BookmarkPlusFill;
mark_module_end(BookmarkPlusFill);

// node_modules/svelte-bootstrap-icons/lib/BookmarkPlus.svelte
mark_module_start();
BookmarkPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkPlus.svelte";
var root246 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"></path><path d="M8 4a.5.5 0 0 1 .5.5V6H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V7H6a.5.5 0 0 1 0-1h1.5V4.5A.5.5 0 0 1 8 4z"></path></svg>`), BookmarkPlus[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BookmarkPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkPlus);
  var svg = root246();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkPlus = hmr(BookmarkPlus, () => BookmarkPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkPlus[HMR].source;
    set(BookmarkPlus[HMR].source, module.default[HMR].original);
  });
}
var BookmarkPlus_default = BookmarkPlus;
mark_module_end(BookmarkPlus);

// node_modules/svelte-bootstrap-icons/lib/BookmarkStarFill.svelte
mark_module_start();
BookmarkStarFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkStarFill.svelte";
var root247 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 15.5V2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5zM8.16 4.1a.178.178 0 0 0-.32 0l-.634 1.285a.178.178 0 0 1-.134.098l-1.42.206a.178.178 0 0 0-.098.303L6.58 6.993c.042.041.061.1.051.158L6.39 8.565a.178.178 0 0 0 .258.187l1.27-.668a.178.178 0 0 1 .165 0l1.27.668a.178.178 0 0 0 .257-.187L9.368 7.15a.178.178 0 0 1 .05-.158l1.028-1.001a.178.178 0 0 0-.098-.303l-1.42-.206a.178.178 0 0 1-.134-.098L8.16 4.1z"></path></svg>`), BookmarkStarFill[FILENAME], [[1, 0, [[1, 179]]]]);
function BookmarkStarFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkStarFill);
  var svg = root247();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-star-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkStarFill = hmr(BookmarkStarFill, () => BookmarkStarFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkStarFill[HMR].source;
    set(BookmarkStarFill[HMR].source, module.default[HMR].original);
  });
}
var BookmarkStarFill_default = BookmarkStarFill;
mark_module_end(BookmarkStarFill);

// node_modules/svelte-bootstrap-icons/lib/BookmarkStar.svelte
mark_module_start();
BookmarkStar[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkStar.svelte";
var root248 = add_locations(ns_template(`<svg><!><path d="M7.84 4.1a.178.178 0 0 1 .32 0l.634 1.285a.178.178 0 0 0 .134.098l1.42.206c.145.021.204.2.098.303L9.42 6.993a.178.178 0 0 0-.051.158l.242 1.414a.178.178 0 0 1-.258.187l-1.27-.668a.178.178 0 0 0-.165 0l-1.27.668a.178.178 0 0 1-.257-.187l.242-1.414a.178.178 0 0 0-.05-.158l-1.03-1.001a.178.178 0 0 1 .098-.303l1.42-.206a.178.178 0 0 0 .134-.098L7.84 4.1z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"></path></svg>`), BookmarkStar[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BookmarkStar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkStar);
  var svg = root248();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-star", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkStar = hmr(BookmarkStar, () => BookmarkStar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkStar[HMR].source;
    set(BookmarkStar[HMR].source, module.default[HMR].original);
  });
}
var BookmarkStar_default = BookmarkStar;
mark_module_end(BookmarkStar);

// node_modules/svelte-bootstrap-icons/lib/BookmarkXFill.svelte
mark_module_start();
BookmarkXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkXFill.svelte";
var root249 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 15.5V2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5zM6.854 5.146a.5.5 0 1 0-.708.708L7.293 7 6.146 8.146a.5.5 0 1 0 .708.708L8 7.707l1.146 1.147a.5.5 0 1 0 .708-.708L8.707 7l1.147-1.146a.5.5 0 0 0-.708-.708L8 6.293 6.854 5.146z"></path></svg>`), BookmarkXFill[FILENAME], [[1, 0, [[1, 176]]]]);
function BookmarkXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkXFill);
  var svg = root249();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkXFill = hmr(BookmarkXFill, () => BookmarkXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkXFill[HMR].source;
    set(BookmarkXFill[HMR].source, module.default[HMR].original);
  });
}
var BookmarkXFill_default = BookmarkXFill;
mark_module_end(BookmarkXFill);

// node_modules/svelte-bootstrap-icons/lib/BookmarkX.svelte
mark_module_start();
BookmarkX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarkX.svelte";
var root250 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.146 5.146a.5.5 0 0 1 .708 0L8 6.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 7l1.147 1.146a.5.5 0 0 1-.708.708L8 7.707 6.854 8.854a.5.5 0 1 1-.708-.708L7.293 7 6.146 5.854a.5.5 0 0 1 0-.708z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"></path></svg>`), BookmarkX[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function BookmarkX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarkX);
  var svg = root250();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkX = hmr(BookmarkX, () => BookmarkX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkX[HMR].source;
    set(BookmarkX[HMR].source, module.default[HMR].original);
  });
}
var BookmarkX_default = BookmarkX;
mark_module_end(BookmarkX);

// node_modules/svelte-bootstrap-icons/lib/Bookmark.svelte
mark_module_start();
Bookmark[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bookmark.svelte";
var root251 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"></path></svg>`), Bookmark[FILENAME], [[1, 0, [[1, 169]]]]);
function Bookmark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bookmark);
  var svg = root251();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmark", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bookmark = hmr(Bookmark, () => Bookmark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bookmark[HMR].source;
    set(Bookmark[HMR].source, module.default[HMR].original);
  });
}
var Bookmark_default = Bookmark;
mark_module_end(Bookmark);

// node_modules/svelte-bootstrap-icons/lib/BookmarksFill.svelte
mark_module_start();
BookmarksFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BookmarksFill.svelte";
var root252 = add_locations(ns_template(`<svg><!><path d="M2 4a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v11.5a.5.5 0 0 1-.777.416L7 13.101l-4.223 2.815A.5.5 0 0 1 2 15.5V4z"></path><path d="M4.268 1A2 2 0 0 1 6 0h6a2 2 0 0 1 2 2v11.5a.5.5 0 0 1-.777.416L13 13.768V2a1 1 0 0 0-1-1H4.268z"></path></svg>`), BookmarksFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function BookmarksFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BookmarksFill);
  var svg = root252();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmarks-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarksFill = hmr(BookmarksFill, () => BookmarksFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarksFill[HMR].source;
    set(BookmarksFill[HMR].source, module.default[HMR].original);
  });
}
var BookmarksFill_default = BookmarksFill;
mark_module_end(BookmarksFill);

// node_modules/svelte-bootstrap-icons/lib/Bookmarks.svelte
mark_module_start();
Bookmarks[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bookmarks.svelte";
var root253 = add_locations(ns_template(`<svg><!><path d="M2 4a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v11.5a.5.5 0 0 1-.777.416L7 13.101l-4.223 2.815A.5.5 0 0 1 2 15.5V4zm2-1a1 1 0 0 0-1 1v10.566l3.723-2.482a.5.5 0 0 1 .554 0L11 14.566V4a1 1 0 0 0-1-1H4z"></path><path d="M4.268 1H12a1 1 0 0 1 1 1v11.768l.223.148A.5.5 0 0 0 14 13.5V2a2 2 0 0 0-2-2H6a2 2 0 0 0-1.732 1z"></path></svg>`), Bookmarks[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Bookmarks($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bookmarks);
  var svg = root253();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookmarks", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bookmarks = hmr(Bookmarks, () => Bookmarks[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bookmarks[HMR].source;
    set(Bookmarks[HMR].source, module.default[HMR].original);
  });
}
var Bookmarks_default = Bookmarks;
mark_module_end(Bookmarks);

// node_modules/svelte-bootstrap-icons/lib/Bookshelf.svelte
mark_module_start();
Bookshelf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bookshelf.svelte";
var root254 = add_locations(ns_template(`<svg><!><path d="M2.5 0a.5.5 0 0 1 .5.5V2h10V.5a.5.5 0 0 1 1 0v15a.5.5 0 0 1-1 0V15H3v.5a.5.5 0 0 1-1 0V.5a.5.5 0 0 1 .5-.5zM3 14h10v-3H3v3zm0-4h10V7H3v3zm0-4h10V3H3v3z"></path></svg>`), Bookshelf[FILENAME], [[1, 0, [[1, 170]]]]);
function Bookshelf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bookshelf);
  var svg = root254();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bookshelf", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bookshelf = hmr(Bookshelf, () => Bookshelf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bookshelf[HMR].source;
    set(Bookshelf[HMR].source, module.default[HMR].original);
  });
}
var Bookshelf_default = Bookshelf;
mark_module_end(Bookshelf);

// node_modules/svelte-bootstrap-icons/lib/BoomboxFill.svelte
mark_module_start();
BoomboxFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoomboxFill.svelte";
var root255 = add_locations(ns_template(`<svg><!><path d="M14 0a.5.5 0 0 1 .5.5V2h.5a1 1 0 0 1 1 1v2H0V3a1 1 0 0 1 1-1h12.5V.5A.5.5 0 0 1 14 0ZM2 3.5a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0Zm2 0a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0Zm7.5.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1.5-.5a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0ZM9.5 3h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1ZM6 10.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Zm-1.5.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm7 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm.5-1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path><path d="M0 6h16v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V6Zm2 4.5a2.5 2.5 0 1 0 5 0 2.5 2.5 0 0 0-5 0Zm7 0a2.5 2.5 0 1 0 5 0 2.5 2.5 0 0 0-5 0Z"></path></svg>`), BoomboxFill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function BoomboxFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoomboxFill);
  var svg = root255();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-boombox-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoomboxFill = hmr(BoomboxFill, () => BoomboxFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoomboxFill[HMR].source;
    set(BoomboxFill[HMR].source, module.default[HMR].original);
  });
}
var BoomboxFill_default = BoomboxFill;
mark_module_end(BoomboxFill);

// node_modules/svelte-bootstrap-icons/lib/Boombox.svelte
mark_module_start();
Boombox[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Boombox.svelte";
var root256 = add_locations(ns_template(`<svg><!><path d="M2.5 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm2 0a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm7.5-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1.5.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm-7-1a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3Zm5.5 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path><path d="M11.5 13a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Zm0-1a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3ZM5 10.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path><path d="M7 10.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm-1 0a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0Z"></path><path d="M14 0a.5.5 0 0 1 .5.5V2h.5a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h12.5V.5A.5.5 0 0 1 14 0ZM1 3v3h14V3H1Zm14 4H1v7h14V7Z"></path></svg>`), Boombox[FILENAME], [
  [
    1,
    0,
    [
      [1, 168],
      [2, 2],
      [3, 2],
      [4, 2]
    ]
  ]
]);
function Boombox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Boombox);
  var svg = root256();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(4);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-boombox", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Boombox = hmr(Boombox, () => Boombox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Boombox[HMR].source;
    set(Boombox[HMR].source, module.default[HMR].original);
  });
}
var Boombox_default = Boombox;
mark_module_end(Boombox);

// node_modules/svelte-bootstrap-icons/lib/BootstrapFill.svelte
mark_module_start();
BootstrapFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BootstrapFill.svelte";
var root257 = add_locations(ns_template(`<svg><!><path d="M6.375 7.125V4.658h1.78c.973 0 1.542.457 1.542 1.237 0 .802-.604 1.23-1.764 1.23H6.375zm0 3.762h1.898c1.184 0 1.81-.48 1.81-1.377 0-.885-.65-1.348-1.886-1.348H6.375v2.725z"></path><path d="M4.002 0a4 4 0 0 0-4 4v8a4 4 0 0 0 4 4h8a4 4 0 0 0 4-4V4a4 4 0 0 0-4-4h-8zm1.06 12V3.545h3.399c1.587 0 2.543.809 2.543 2.11 0 .884-.65 1.675-1.483 1.816v.1c1.143.117 1.904.931 1.904 2.033 0 1.488-1.084 2.396-2.888 2.396H5.062z"></path></svg>`), BootstrapFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function BootstrapFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BootstrapFill);
  var svg = root257();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bootstrap-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BootstrapFill = hmr(BootstrapFill, () => BootstrapFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BootstrapFill[HMR].source;
    set(BootstrapFill[HMR].source, module.default[HMR].original);
  });
}
var BootstrapFill_default = BootstrapFill;
mark_module_end(BootstrapFill);

// node_modules/svelte-bootstrap-icons/lib/BootstrapReboot.svelte
mark_module_start();
BootstrapReboot[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BootstrapReboot.svelte";
var root258 = add_locations(ns_template(`<svg><!><path d="M1.161 8a6.84 6.84 0 1 0 6.842-6.84.58.58 0 1 1 0-1.16 8 8 0 1 1-6.556 3.412l-.663-.577a.58.58 0 0 1 .227-.997l2.52-.69a.58.58 0 0 1 .728.633l-.332 2.592a.58.58 0 0 1-.956.364l-.643-.56A6.812 6.812 0 0 0 1.16 8z"></path><path d="M6.641 11.671V8.843h1.57l1.498 2.828h1.314L9.377 8.665c.897-.3 1.427-1.106 1.427-2.1 0-1.37-.943-2.246-2.456-2.246H5.5v7.352h1.141zm0-3.75V5.277h1.57c.881 0 1.416.499 1.416 1.32 0 .84-.504 1.324-1.386 1.324h-1.6z"></path></svg>`), BootstrapReboot[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function BootstrapReboot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BootstrapReboot);
  var svg = root258();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bootstrap-reboot", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BootstrapReboot = hmr(BootstrapReboot, () => BootstrapReboot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BootstrapReboot[HMR].source;
    set(BootstrapReboot[HMR].source, module.default[HMR].original);
  });
}
var BootstrapReboot_default = BootstrapReboot;
mark_module_end(BootstrapReboot);

// node_modules/svelte-bootstrap-icons/lib/Bootstrap.svelte
mark_module_start();
Bootstrap[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bootstrap.svelte";
var root259 = add_locations(ns_template(`<svg><!><path d="M5.062 12h3.475c1.804 0 2.888-.908 2.888-2.396 0-1.102-.761-1.916-1.904-2.034v-.1c.832-.14 1.482-.93 1.482-1.816 0-1.3-.955-2.11-2.542-2.11H5.062V12zm1.313-4.875V4.658h1.78c.973 0 1.542.457 1.542 1.237 0 .802-.604 1.23-1.764 1.23H6.375zm0 3.762V8.162h1.822c1.236 0 1.887.463 1.887 1.348 0 .896-.627 1.377-1.811 1.377H6.375z"></path><path d="M0 4a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4zm4-3a3 3 0 0 0-3 3v8a3 3 0 0 0 3 3h8a3 3 0 0 0 3-3V4a3 3 0 0 0-3-3H4z"></path></svg>`), Bootstrap[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Bootstrap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bootstrap);
  var svg = root259();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bootstrap", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bootstrap = hmr(Bootstrap, () => Bootstrap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bootstrap[HMR].source;
    set(Bootstrap[HMR].source, module.default[HMR].original);
  });
}
var Bootstrap_default = Bootstrap;
mark_module_end(Bootstrap);

// node_modules/svelte-bootstrap-icons/lib/BorderAll.svelte
mark_module_start();
BorderAll[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderAll.svelte";
var root260 = add_locations(ns_template(`<svg><!><path d="M0 0h16v16H0V0zm1 1v6.5h6.5V1H1zm7.5 0v6.5H15V1H8.5zM15 8.5H8.5V15H15V8.5zM7.5 15V8.5H1V15h6.5z"></path></svg>`), BorderAll[FILENAME], [[1, 0, [[1, 171]]]]);
function BorderAll($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderAll);
  var svg = root260();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-all", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderAll = hmr(BorderAll, () => BorderAll[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderAll[HMR].source;
    set(BorderAll[HMR].source, module.default[HMR].original);
  });
}
var BorderAll_default = BorderAll;
mark_module_end(BorderAll);

// node_modules/svelte-bootstrap-icons/lib/BorderBottom.svelte
mark_module_start();
BorderBottom[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderBottom.svelte";
var root261 = add_locations(ns_template(`<svg><!><path d="M.969 0H0v.969h.5V1h.469V.969H1V.5H.969V0zm.937 1h.938V0h-.938v1zm1.875 0h.938V0H3.78v1zm1.875 0h.938V0h-.938v1zM7.531.969V1h.938V.969H8.5V.5h-.031V0H7.53v.5H7.5v.469h.031zM9.406 1h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.469V.969h.5V0h-.969v.5H15v.469h.031V1zM1 2.844v-.938H0v.938h1zm6.5-.938v.938h1v-.938h-1zm7.5 0v.938h1v-.938h-1zM1 4.719V3.78H0v.938h1zm6.5-.938v.938h1V3.78h-1zm7.5 0v.938h1V3.78h-1zM1 6.594v-.938H0v.938h1zm6.5-.938v.938h1v-.938h-1zm7.5 0v.938h1v-.938h-1zM.5 8.5h.469v-.031H1V7.53H.969V7.5H.5v.031H0v.938h.5V8.5zm1.406 0h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm2.813 0v-.031H8.5V7.53h-.031V7.5H7.53v.031H7.5v.938h.031V8.5h.938zm.937 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.469v-.031h.5V7.53h-.5V7.5h-.469v.031H15v.938h.031V8.5zM0 9.406v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zM0 15h16v1H0v-1z"></path></svg>`), BorderBottom[FILENAME], [[1, 0, [[1, 174]]]]);
function BorderBottom($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderBottom);
  var svg = root261();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-bottom", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderBottom = hmr(BorderBottom, () => BorderBottom[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderBottom[HMR].source;
    set(BorderBottom[HMR].source, module.default[HMR].original);
  });
}
var BorderBottom_default = BorderBottom;
mark_module_end(BorderBottom);

// node_modules/svelte-bootstrap-icons/lib/BorderCenter.svelte
mark_module_start();
BorderCenter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderCenter.svelte";
var root262 = add_locations(ns_template(`<svg><!><path d="M.969 0H0v.969h.5V1h.469V.969H1V.5H.969V0zm.937 1h.938V0h-.938v1zm1.875 0h.938V0H3.78v1zm1.875 0h.938V0h-.938v1zM7.531.969V1h.938V.969H8.5V.5h-.031V0H7.53v.5H7.5v.469h.031zM9.406 1h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.469V.969h.5V0h-.969v.5H15v.469h.031V1zM1 2.844v-.938H0v.938h1zm6.5-.938v.938h1v-.938h-1zm7.5 0v.938h1v-.938h-1zM1 4.719V3.78H0v.938h1zm6.5-.938v.938h1V3.78h-1zm7.5 0v.938h1V3.78h-1zM1 6.594v-.938H0v.938h1zm6.5-.938v.938h1v-.938h-1zm7.5 0v.938h1v-.938h-1zM0 8.5v-1h16v1H0zm0 .906v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zM0 16h.969v-.5H1v-.469H.969V15H.5v.031H0V16zm1.906 0h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm1.875-.5v.5h.938v-.5H8.5v-.469h-.031V15H7.53v.031H7.5v.469h.031zm1.875.5h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875-.5v.5H16v-.969h-.5V15h-.469v.031H15v.469h.031z"></path></svg>`), BorderCenter[FILENAME], [[1, 0, [[1, 174]]]]);
function BorderCenter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderCenter);
  var svg = root262();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-center", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderCenter = hmr(BorderCenter, () => BorderCenter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderCenter[HMR].source;
    set(BorderCenter[HMR].source, module.default[HMR].original);
  });
}
var BorderCenter_default = BorderCenter;
mark_module_end(BorderCenter);

// node_modules/svelte-bootstrap-icons/lib/BorderInner.svelte
mark_module_start();
BorderInner[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderInner.svelte";
var root263 = add_locations(ns_template(`<svg><!><path d="M.969 0H0v.969h.5V1h.469V.969H1V.5H.969V0zm.937 1h.938V0h-.938v1zm1.875 0h.938V0H3.78v1zm1.875 0h.938V0h-.938v1z"></path><path d="M8.5 7.5H16v1H8.5V16h-1V8.5H0v-1h7.5V0h1v7.5z"></path><path d="M9.406 1h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.469V.969h.5V0h-.969v.5H15v.469h.031V1zM1 2.844v-.938H0v.938h1zm14-.938v.938h1v-.938h-1zM1 4.719V3.78H0v.938h1zm14-.938v.938h1V3.78h-1zM1 6.594v-.938H0v.938h1zm14-.938v.938h1v-.938h-1zM0 9.406v.938h1v-.938H0zm16 .938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm16 .938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm16 .938v-.938h-1v.938h1zM0 16h.969v-.5H1v-.469H.969V15H.5v.031H0V16zm1.906 0h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm3.75 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875-.5v.5H16v-.969h-.5V15h-.469v.031H15v.469h.031z"></path></svg>`), BorderInner[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function BorderInner($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderInner);
  var svg = root263();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-inner", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderInner = hmr(BorderInner, () => BorderInner[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderInner[HMR].source;
    set(BorderInner[HMR].source, module.default[HMR].original);
  });
}
var BorderInner_default = BorderInner;
mark_module_end(BorderInner);

// node_modules/svelte-bootstrap-icons/lib/BorderLeft.svelte
mark_module_start();
BorderLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderLeft.svelte";
var root264 = add_locations(ns_template(`<svg><!><path d="M0 0v16h1V0H0zm1.906 1h.938V0h-.938v1zm1.875 0h.938V0H3.78v1zm1.875 0h.938V0h-.938v1zM7.531.969V1h.938V.969H8.5V.5h-.031V0H7.53v.5H7.5v.469h.031zM9.406 1h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.469V.969h.5V0h-.969v.5H15v.469h.031V1zM7.5 1.906v.938h1v-.938h-1zm7.5 0v.938h1v-.938h-1zM7.5 3.781v.938h1V3.78h-1zm7.5 0v.938h1V3.78h-1zM7.5 5.656v.938h1v-.938h-1zm7.5 0v.938h1v-.938h-1zM1.906 8.5h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm2.813 0v-.031H8.5V7.53h-.031V7.5H7.53v.031H7.5v.938h.031V8.5h.938zm.937 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.469v-.031h.5V7.53h-.5V7.5h-.469v.031H15v.938h.031V8.5zM7.5 9.406v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zm-8.5.937v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zm-8.5.937v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zM1.906 16h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm1.875-.5v.5h.938v-.5H8.5v-.469h-.031V15H7.53v.031H7.5v.469h.031zm1.875.5h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875-.5v.5H16v-.969h-.5V15h-.469v.031H15v.469h.031z"></path></svg>`), BorderLeft[FILENAME], [[1, 0, [[1, 172]]]]);
function BorderLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderLeft);
  var svg = root264();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderLeft = hmr(BorderLeft, () => BorderLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderLeft[HMR].source;
    set(BorderLeft[HMR].source, module.default[HMR].original);
  });
}
var BorderLeft_default = BorderLeft;
mark_module_end(BorderLeft);

// node_modules/svelte-bootstrap-icons/lib/BorderMiddle.svelte
mark_module_start();
BorderMiddle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderMiddle.svelte";
var root265 = add_locations(ns_template(`<svg><!><path d="M.969 0H0v.969h.5V1h.469V.969H1V.5H.969V0zm.937 1h.938V0h-.938v1zm1.875 0h.938V0H3.78v1zm1.875 0h.938V0h-.938v1zM8.5 16h-1V0h1v16zm.906-15h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.469V.969h.5V0h-.969v.5H15v.469h.031V1zM1 2.844v-.938H0v.938h1zm14-.938v.938h1v-.938h-1zM1 4.719V3.78H0v.938h1zm14-.938v.938h1V3.78h-1zM1 6.594v-.938H0v.938h1zm14-.938v.938h1v-.938h-1zM.5 8.5h.469v-.031H1V7.53H.969V7.5H.5v.031H0v.938h.5V8.5zm1.406 0h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm3.75 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.469v-.031h.5V7.53h-.5V7.5h-.469v.031H15v.938h.031V8.5zM0 9.406v.938h1v-.938H0zm16 .938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm16 .938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm16 .938v-.938h-1v.938h1zM0 16h.969v-.5H1v-.469H.969V15H.5v.031H0V16zm1.906 0h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm3.75 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875-.5v.5H16v-.969h-.5V15h-.469v.031H15v.469h.031z"></path></svg>`), BorderMiddle[FILENAME], [[1, 0, [[1, 174]]]]);
function BorderMiddle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderMiddle);
  var svg = root265();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-middle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderMiddle = hmr(BorderMiddle, () => BorderMiddle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderMiddle[HMR].source;
    set(BorderMiddle[HMR].source, module.default[HMR].original);
  });
}
var BorderMiddle_default = BorderMiddle;
mark_module_end(BorderMiddle);

// node_modules/svelte-bootstrap-icons/lib/BorderOuter.svelte
mark_module_start();
BorderOuter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderOuter.svelte";
var root266 = add_locations(ns_template(`<svg><!><path d="M7.5 1.906v.938h1v-.938h-1zm0 1.875v.938h1V3.78h-1zm0 1.875v.938h1v-.938h-1zM1.906 8.5h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm2.813 0v-.031H8.5V7.53h-.031V7.5H7.53v.031H7.5v.938h.031V8.5h.938zm.937 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zM7.5 9.406v.938h1v-.938h-1zm0 1.875v.938h1v-.938h-1zm0 1.875v.938h1v-.938h-1z"></path><path d="M0 0v16h16V0H0zm1 1h14v14H1V1z"></path></svg>`), BorderOuter[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function BorderOuter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderOuter);
  var svg = root266();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-outer", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderOuter = hmr(BorderOuter, () => BorderOuter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderOuter[HMR].source;
    set(BorderOuter[HMR].source, module.default[HMR].original);
  });
}
var BorderOuter_default = BorderOuter;
mark_module_end(BorderOuter);

// node_modules/svelte-bootstrap-icons/lib/BorderRight.svelte
mark_module_start();
BorderRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderRight.svelte";
var root267 = add_locations(ns_template(`<svg><!><path d="M.969 0H0v.969h.5V1h.469V.969H1V.5H.969V0zm.937 1h.938V0h-.938v1zm1.875 0h.938V0H3.78v1zm1.875 0h.938V0h-.938v1zM7.531.969V1h.938V.969H8.5V.5h-.031V0H7.53v.5H7.5v.469h.031zM9.406 1h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zm1.875 0h.938V0h-.938v1zM16 0h-1v16h1V0zM1 2.844v-.938H0v.938h1zm6.5-.938v.938h1v-.938h-1zM1 4.719V3.78H0v.938h1zm6.5-.938v.938h1V3.78h-1zM1 6.594v-.938H0v.938h1zm6.5-.938v.938h1v-.938h-1zM.5 8.5h.469v-.031H1V7.53H.969V7.5H.5v.031H0v.938h.5V8.5zm1.406 0h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm2.813 0v-.031H8.5V7.53h-.031V7.5H7.53v.031H7.5v.938h.031V8.5h.938zm.937 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zM0 9.406v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zM0 11.281v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zM0 13.156v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zM0 16h.969v-.5H1v-.469H.969V15H.5v.031H0V16zm1.906 0h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm1.875-.5v.5h.938v-.5H8.5v-.469h-.031V15H7.53v.031H7.5v.469h.031zm1.875.5h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1z"></path></svg>`), BorderRight[FILENAME], [[1, 0, [[1, 173]]]]);
function BorderRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderRight);
  var svg = root267();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderRight = hmr(BorderRight, () => BorderRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderRight[HMR].source;
    set(BorderRight[HMR].source, module.default[HMR].original);
  });
}
var BorderRight_default = BorderRight;
mark_module_end(BorderRight);

// node_modules/svelte-bootstrap-icons/lib/BorderStyle.svelte
mark_module_start();
BorderStyle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderStyle.svelte";
var root268 = add_locations(ns_template(`<svg><!><path d="M1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-1zm0 4a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-1zm0 4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm8 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-4 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm8 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-4-4a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-1z"></path></svg>`), BorderStyle[FILENAME], [[1, 0, [[1, 173]]]]);
function BorderStyle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderStyle);
  var svg = root268();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-style", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderStyle = hmr(BorderStyle, () => BorderStyle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderStyle[HMR].source;
    set(BorderStyle[HMR].source, module.default[HMR].original);
  });
}
var BorderStyle_default = BorderStyle;
mark_module_end(BorderStyle);

// node_modules/svelte-bootstrap-icons/lib/BorderTop.svelte
mark_module_start();
BorderTop[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderTop.svelte";
var root269 = add_locations(ns_template(`<svg><!><path d="M0 0v1h16V0H0zm1 2.844v-.938H0v.938h1zm6.5-.938v.938h1v-.938h-1zm7.5 0v.938h1v-.938h-1zM1 4.719V3.78H0v.938h1zm6.5-.938v.938h1V3.78h-1zm7.5 0v.938h1V3.78h-1zM1 6.594v-.938H0v.938h1zm6.5-.938v.938h1v-.938h-1zm7.5 0v.938h1v-.938h-1zM.5 8.5h.469v-.031H1V7.53H.969V7.5H.5v.031H0v.938h.5V8.5zm1.406 0h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm2.813 0v-.031H8.5V7.53h-.031V7.5H7.53v.031H7.5v.938h.031V8.5h.938zm.937 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.469v-.031h.5V7.53h-.5V7.5h-.469v.031H15v.938h.031V8.5zM0 9.406v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zm-16 .937v.938h1v-.938H0zm7.5 0v.938h1v-.938h-1zm8.5.938v-.938h-1v.938h1zM0 16h.969v-.5H1v-.469H.969V15H.5v.031H0V16zm1.906 0h.938v-1h-.938v1zm1.875 0h.938v-1H3.78v1zm1.875 0h.938v-1h-.938v1zm1.875-.5v.5h.938v-.5H8.5v-.469h-.031V15H7.53v.031H7.5v.469h.031zm1.875.5h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875 0h.938v-1h-.938v1zm1.875-.5v.5H16v-.969h-.5V15h-.469v.031H15v.469h.031z"></path></svg>`), BorderTop[FILENAME], [[1, 0, [[1, 171]]]]);
function BorderTop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderTop);
  var svg = root269();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-top", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderTop = hmr(BorderTop, () => BorderTop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderTop[HMR].source;
    set(BorderTop[HMR].source, module.default[HMR].original);
  });
}
var BorderTop_default = BorderTop;
mark_module_end(BorderTop);

// node_modules/svelte-bootstrap-icons/lib/BorderWidth.svelte
mark_module_start();
BorderWidth[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BorderWidth.svelte";
var root270 = add_locations(ns_template(`<svg><!><path d="M0 3.5A.5.5 0 0 1 .5 3h15a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H.5a.5.5 0 0 1-.5-.5v-2zm0 5A.5.5 0 0 1 .5 8h15a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H.5a.5.5 0 0 1-.5-.5v-1zm0 4a.5.5 0 0 1 .5-.5h15a.5.5 0 0 1 0 1H.5a.5.5 0 0 1-.5-.5z"></path></svg>`), BorderWidth[FILENAME], [[1, 0, [[1, 173]]]]);
function BorderWidth($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BorderWidth);
  var svg = root270();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border-width", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BorderWidth = hmr(BorderWidth, () => BorderWidth[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BorderWidth[HMR].source;
    set(BorderWidth[HMR].source, module.default[HMR].original);
  });
}
var BorderWidth_default = BorderWidth;
mark_module_end(BorderWidth);

// node_modules/svelte-bootstrap-icons/lib/Border.svelte
mark_module_start();
Border[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Border.svelte";
var root271 = add_locations(ns_template(`<svg><!><path d="M0 0h.969v.5H1v.469H.969V1H.5V.969H0V0zm2.844 1h-.938V0h.938v1zm1.875 0H3.78V0h.938v1zm1.875 0h-.938V0h.938v1zm.937 0V.969H7.5V.5h.031V0h.938v.5H8.5v.469h-.031V1H7.53zm2.813 0h-.938V0h.938v1zm1.875 0h-.938V0h.938v1zm1.875 0h-.938V0h.938v1zM15.5 1h-.469V.969H15V.5h.031V0H16v.969h-.5V1zM1 1.906v.938H0v-.938h1zm6.5.938v-.938h1v.938h-1zm7.5 0v-.938h1v.938h-1zM1 3.78v.938H0V3.78h1zm6.5.938V3.78h1v.938h-1zm7.5 0V3.78h1v.938h-1zM1 5.656v.938H0v-.938h1zm6.5.938v-.938h1v.938h-1zm7.5 0v-.938h1v.938h-1zM.969 8.5H.5v-.031H0V7.53h.5V7.5h.469v.031H1v.938H.969V8.5zm1.875 0h-.938v-1h.938v1zm1.875 0H3.78v-1h.938v1zm1.875 0h-.938v-1h.938v1zm1.875-.031V8.5H7.53v-.031H7.5V7.53h.031V7.5h.938v.031H8.5v.938h-.031zm1.875.031h-.938v-1h.938v1zm1.875 0h-.938v-1h.938v1zm1.875 0h-.938v-1h.938v1zm1.406 0h-.469v-.031H15V7.53h.031V7.5h.469v.031h.5v.938h-.5V8.5zM0 10.344v-.938h1v.938H0zm7.5 0v-.938h1v.938h-1zm8.5-.938v.938h-1v-.938h1zM0 12.22v-.938h1v.938H0zm7.5 0v-.938h1v.938h-1zm8.5-.938v.938h-1v-.938h1zM0 14.094v-.938h1v.938H0zm7.5 0v-.938h1v.938h-1zm8.5-.938v.938h-1v-.938h1zM.969 16H0v-.969h.5V15h.469v.031H1v.469H.969v.5zm1.875 0h-.938v-1h.938v1zm1.875 0H3.78v-1h.938v1zm1.875 0h-.938v-1h.938v1zm.937 0v-.5H7.5v-.469h.031V15h.938v.031H8.5v.469h-.031v.5H7.53zm2.813 0h-.938v-1h.938v1zm1.875 0h-.938v-1h.938v1zm1.875 0h-.938v-1h.938v1zm.937 0v-.5H15v-.469h.031V15h.469v.031h.5V16h-.969z"></path></svg>`), Border[FILENAME], [[1, 0, [[1, 167]]]]);
function Border($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Border);
  var svg = root271();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-border", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Border = hmr(Border, () => Border[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Border[HMR].source;
    set(Border[HMR].source, module.default[HMR].original);
  });
}
var Border_default = Border;
mark_module_end(Border);

// node_modules/svelte-bootstrap-icons/lib/BoundingBoxCircles.svelte
mark_module_start();
BoundingBoxCircles[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoundingBoxCircles.svelte";
var root272 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zM0 2a2 2 0 0 1 3.937-.5h8.126A2 2 0 1 1 14.5 3.937v8.126a2 2 0 1 1-2.437 2.437H3.937A2 2 0 1 1 1.5 12.063V3.937A2 2 0 0 1 0 2zm2.5 1.937v8.126c.703.18 1.256.734 1.437 1.437h8.126a2.004 2.004 0 0 1 1.437-1.437V3.937A2.004 2.004 0 0 1 12.063 2.5H3.937A2.004 2.004 0 0 1 2.5 3.937zM14 1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zM2 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm12 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"></path></svg>`), BoundingBoxCircles[FILENAME], [[1, 0, [[1, 181]]]]);
function BoundingBoxCircles($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoundingBoxCircles);
  var svg = root272();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bounding-box-circles", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoundingBoxCircles = hmr(BoundingBoxCircles, () => BoundingBoxCircles[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoundingBoxCircles[HMR].source;
    set(BoundingBoxCircles[HMR].source, module.default[HMR].original);
  });
}
var BoundingBoxCircles_default = BoundingBoxCircles;
mark_module_end(BoundingBoxCircles);

// node_modules/svelte-bootstrap-icons/lib/BoundingBox.svelte
mark_module_start();
BoundingBox[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoundingBox.svelte";
var root273 = add_locations(ns_template(`<svg><!><path d="M5 2V0H0v5h2v6H0v5h5v-2h6v2h5v-5h-2V5h2V0h-5v2H5zm6 1v2h2v6h-2v2H5v-2H3V5h2V3h6zm1-2h3v3h-3V1zm3 11v3h-3v-3h3zM4 15H1v-3h3v3zM1 4V1h3v3H1z"></path></svg>`), BoundingBox[FILENAME], [[1, 0, [[1, 173]]]]);
function BoundingBox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoundingBox);
  var svg = root273();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bounding-box", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoundingBox = hmr(BoundingBox, () => BoundingBox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoundingBox[HMR].source;
    set(BoundingBox[HMR].source, module.default[HMR].original);
  });
}
var BoundingBox_default = BoundingBox;
mark_module_end(BoundingBox);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowDownLeft.svelte
mark_module_start();
BoxArrowDownLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowDownLeft.svelte";
var root274 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.364 12.5a.5.5 0 0 0 .5.5H14.5a1.5 1.5 0 0 0 1.5-1.5v-10A1.5 1.5 0 0 0 14.5 0h-10A1.5 1.5 0 0 0 3 1.5v6.636a.5.5 0 1 0 1 0V1.5a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v10a.5.5 0 0 1-.5.5H7.864a.5.5 0 0 0-.5.5z"></path><path fill-rule="evenodd" d="M0 15.5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 0-1H1.707l8.147-8.146a.5.5 0 0 0-.708-.708L1 14.293V10.5a.5.5 0 0 0-1 0v5z"></path></svg>`), BoxArrowDownLeft[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function BoxArrowDownLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowDownLeft);
  var svg = root274();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-down-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowDownLeft = hmr(BoxArrowDownLeft, () => BoxArrowDownLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowDownLeft[HMR].source;
    set(BoxArrowDownLeft[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowDownLeft_default = BoxArrowDownLeft;
mark_module_end(BoxArrowDownLeft);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowDownRight.svelte
mark_module_start();
BoxArrowDownRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowDownRight.svelte";
var root275 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.636 12.5a.5.5 0 0 1-.5.5H1.5A1.5 1.5 0 0 1 0 11.5v-10A1.5 1.5 0 0 1 1.5 0h10A1.5 1.5 0 0 1 13 1.5v6.636a.5.5 0 0 1-1 0V1.5a.5.5 0 0 0-.5-.5h-10a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5h6.636a.5.5 0 0 1 .5.5z"></path><path fill-rule="evenodd" d="M16 15.5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1 0-1h3.793L6.146 6.854a.5.5 0 1 1 .708-.708L15 14.293V10.5a.5.5 0 0 1 1 0v5z"></path></svg>`), BoxArrowDownRight[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function BoxArrowDownRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowDownRight);
  var svg = root275();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-down-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowDownRight = hmr(BoxArrowDownRight, () => BoxArrowDownRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowDownRight[HMR].source;
    set(BoxArrowDownRight[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowDownRight_default = BoxArrowDownRight;
mark_module_end(BoxArrowDownRight);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowDown.svelte
mark_module_start();
BoxArrowDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowDown.svelte";
var root276 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.5 10a.5.5 0 0 1-.5-.5v-8a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 0 0 1h2A1.5 1.5 0 0 0 14 9.5v-8A1.5 1.5 0 0 0 12.5 0h-9A1.5 1.5 0 0 0 2 1.5v8A1.5 1.5 0 0 0 3.5 11h2a.5.5 0 0 0 0-1h-2z"></path><path fill-rule="evenodd" d="M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708l3 3z"></path></svg>`), BoxArrowDown[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function BoxArrowDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowDown);
  var svg = root276();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowDown = hmr(BoxArrowDown, () => BoxArrowDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowDown[HMR].source;
    set(BoxArrowDown[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowDown_default = BoxArrowDown;
mark_module_end(BoxArrowDown);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowInDownLeft.svelte
mark_module_start();
BoxArrowInDownLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowInDownLeft.svelte";
var root277 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M9.636 2.5a.5.5 0 0 0-.5-.5H2.5A1.5 1.5 0 0 0 1 3.5v10A1.5 1.5 0 0 0 2.5 15h10a1.5 1.5 0 0 0 1.5-1.5V6.864a.5.5 0 0 0-1 0V13.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"></path><path fill-rule="evenodd" d="M5 10.5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 0-1H6.707l8.147-8.146a.5.5 0 0 0-.708-.708L6 9.293V5.5a.5.5 0 0 0-1 0v5z"></path></svg>`), BoxArrowInDownLeft[FILENAME], [
  [1, 0, [[1, 183], [2, 2]]]
]);
function BoxArrowInDownLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowInDownLeft);
  var svg = root277();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-in-down-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowInDownLeft = hmr(BoxArrowInDownLeft, () => BoxArrowInDownLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowInDownLeft[HMR].source;
    set(BoxArrowInDownLeft[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowInDownLeft_default = BoxArrowInDownLeft;
mark_module_end(BoxArrowInDownLeft);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowInDownRight.svelte
mark_module_start();
BoxArrowInDownRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowInDownRight.svelte";
var root278 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.364 2.5a.5.5 0 0 1 .5-.5H13.5A1.5 1.5 0 0 1 15 3.5v10a1.5 1.5 0 0 1-1.5 1.5h-10A1.5 1.5 0 0 1 2 13.5V6.864a.5.5 0 1 1 1 0V13.5a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5v-10a.5.5 0 0 0-.5-.5H6.864a.5.5 0 0 1-.5-.5z"></path><path fill-rule="evenodd" d="M11 10.5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1 0-1h3.793L1.146 1.854a.5.5 0 1 1 .708-.708L10 9.293V5.5a.5.5 0 0 1 1 0v5z"></path></svg>`), BoxArrowInDownRight[FILENAME], [
  [1, 0, [[1, 184], [2, 2]]]
]);
function BoxArrowInDownRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowInDownRight);
  var svg = root278();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-in-down-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowInDownRight = hmr(BoxArrowInDownRight, () => BoxArrowInDownRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowInDownRight[HMR].source;
    set(BoxArrowInDownRight[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowInDownRight_default = BoxArrowInDownRight;
mark_module_end(BoxArrowInDownRight);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowInDown.svelte
mark_module_start();
BoxArrowInDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowInDown.svelte";
var root279 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.5 6a.5.5 0 0 0-.5.5v8a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-8a.5.5 0 0 0-.5-.5h-2a.5.5 0 0 1 0-1h2A1.5 1.5 0 0 1 14 6.5v8a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-8A1.5 1.5 0 0 1 3.5 5h2a.5.5 0 0 1 0 1h-2z"></path><path fill-rule="evenodd" d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"></path></svg>`), BoxArrowInDown[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function BoxArrowInDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowInDown);
  var svg = root279();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-in-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowInDown = hmr(BoxArrowInDown, () => BoxArrowInDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowInDown[HMR].source;
    set(BoxArrowInDown[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowInDown_default = BoxArrowInDown;
mark_module_end(BoxArrowInDown);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowInLeft.svelte
mark_module_start();
BoxArrowInLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowInLeft.svelte";
var root280 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10 3.5a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 1 1 0v2A1.5 1.5 0 0 1 9.5 14h-8A1.5 1.5 0 0 1 0 12.5v-9A1.5 1.5 0 0 1 1.5 2h8A1.5 1.5 0 0 1 11 3.5v2a.5.5 0 0 1-1 0v-2z"></path><path fill-rule="evenodd" d="M4.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H14.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3z"></path></svg>`), BoxArrowInLeft[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function BoxArrowInLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowInLeft);
  var svg = root280();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-in-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowInLeft = hmr(BoxArrowInLeft, () => BoxArrowInLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowInLeft[HMR].source;
    set(BoxArrowInLeft[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowInLeft_default = BoxArrowInLeft;
mark_module_end(BoxArrowInLeft);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowInRight.svelte
mark_module_start();
BoxArrowInRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowInRight.svelte";
var root281 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0v-2z"></path><path fill-rule="evenodd" d="M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"></path></svg>`), BoxArrowInRight[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function BoxArrowInRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowInRight);
  var svg = root281();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-in-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowInRight = hmr(BoxArrowInRight, () => BoxArrowInRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowInRight[HMR].source;
    set(BoxArrowInRight[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowInRight_default = BoxArrowInRight;
mark_module_end(BoxArrowInRight);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowInUpLeft.svelte
mark_module_start();
BoxArrowInUpLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowInUpLeft.svelte";
var root282 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M9.636 13.5a.5.5 0 0 1-.5.5H2.5A1.5 1.5 0 0 1 1 12.5v-10A1.5 1.5 0 0 1 2.5 1h10A1.5 1.5 0 0 1 14 2.5v6.636a.5.5 0 0 1-1 0V2.5a.5.5 0 0 0-.5-.5h-10a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5h6.636a.5.5 0 0 1 .5.5z"></path><path fill-rule="evenodd" d="M5 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1H6.707l8.147 8.146a.5.5 0 0 1-.708.708L6 6.707V10.5a.5.5 0 0 1-1 0v-5z"></path></svg>`), BoxArrowInUpLeft[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function BoxArrowInUpLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowInUpLeft);
  var svg = root282();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-in-up-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowInUpLeft = hmr(BoxArrowInUpLeft, () => BoxArrowInUpLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowInUpLeft[HMR].source;
    set(BoxArrowInUpLeft[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowInUpLeft_default = BoxArrowInUpLeft;
mark_module_end(BoxArrowInUpLeft);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowInUpRight.svelte
mark_module_start();
BoxArrowInUpRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowInUpRight.svelte";
var root283 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.364 13.5a.5.5 0 0 0 .5.5H13.5a1.5 1.5 0 0 0 1.5-1.5v-10A1.5 1.5 0 0 0 13.5 1h-10A1.5 1.5 0 0 0 2 2.5v6.636a.5.5 0 1 0 1 0V2.5a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v10a.5.5 0 0 1-.5.5H6.864a.5.5 0 0 0-.5.5z"></path><path fill-rule="evenodd" d="M11 5.5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793l-8.147 8.146a.5.5 0 0 0 .708.708L10 6.707V10.5a.5.5 0 0 0 1 0v-5z"></path></svg>`), BoxArrowInUpRight[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function BoxArrowInUpRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowInUpRight);
  var svg = root283();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-in-up-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowInUpRight = hmr(BoxArrowInUpRight, () => BoxArrowInUpRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowInUpRight[HMR].source;
    set(BoxArrowInUpRight[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowInUpRight_default = BoxArrowInUpRight;
mark_module_end(BoxArrowInUpRight);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowInUp.svelte
mark_module_start();
BoxArrowInUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowInUp.svelte";
var root284 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.5 10a.5.5 0 0 1-.5-.5v-8a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 0 0 1h2A1.5 1.5 0 0 0 14 9.5v-8A1.5 1.5 0 0 0 12.5 0h-9A1.5 1.5 0 0 0 2 1.5v8A1.5 1.5 0 0 0 3.5 11h2a.5.5 0 0 0 0-1h-2z"></path><path fill-rule="evenodd" d="M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3z"></path></svg>`), BoxArrowInUp[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function BoxArrowInUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowInUp);
  var svg = root284();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-in-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowInUp = hmr(BoxArrowInUp, () => BoxArrowInUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowInUp[HMR].source;
    set(BoxArrowInUp[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowInUp_default = BoxArrowInUp;
mark_module_end(BoxArrowInUp);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowLeft.svelte
mark_module_start();
BoxArrowLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowLeft.svelte";
var root285 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 12.5a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v2a.5.5 0 0 1-1 0v-2A1.5 1.5 0 0 1 6.5 2h8A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-8A1.5 1.5 0 0 1 5 12.5v-2a.5.5 0 0 1 1 0v2z"></path><path fill-rule="evenodd" d="M.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L1.707 7.5H10.5a.5.5 0 0 1 0 1H1.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3z"></path></svg>`), BoxArrowLeft[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function BoxArrowLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowLeft);
  var svg = root285();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowLeft = hmr(BoxArrowLeft, () => BoxArrowLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowLeft[HMR].source;
    set(BoxArrowLeft[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowLeft_default = BoxArrowLeft;
mark_module_end(BoxArrowLeft);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowRight.svelte
mark_module_start();
BoxArrowRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowRight.svelte";
var root286 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"></path><path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"></path></svg>`), BoxArrowRight[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function BoxArrowRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowRight);
  var svg = root286();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowRight = hmr(BoxArrowRight, () => BoxArrowRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowRight[HMR].source;
    set(BoxArrowRight[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowRight_default = BoxArrowRight;
mark_module_end(BoxArrowRight);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowUpLeft.svelte
mark_module_start();
BoxArrowUpLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowUpLeft.svelte";
var root287 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.364 3.5a.5.5 0 0 1 .5-.5H14.5A1.5 1.5 0 0 1 16 4.5v10a1.5 1.5 0 0 1-1.5 1.5h-10A1.5 1.5 0 0 1 3 14.5V7.864a.5.5 0 1 1 1 0V14.5a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5v-10a.5.5 0 0 0-.5-.5H7.864a.5.5 0 0 1-.5-.5z"></path><path fill-rule="evenodd" d="M0 .5A.5.5 0 0 1 .5 0h5a.5.5 0 0 1 0 1H1.707l8.147 8.146a.5.5 0 0 1-.708.708L1 1.707V5.5a.5.5 0 0 1-1 0v-5z"></path></svg>`), BoxArrowUpLeft[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function BoxArrowUpLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowUpLeft);
  var svg = root287();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-up-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowUpLeft = hmr(BoxArrowUpLeft, () => BoxArrowUpLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowUpLeft[HMR].source;
    set(BoxArrowUpLeft[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowUpLeft_default = BoxArrowUpLeft;
mark_module_end(BoxArrowUpLeft);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowUpRight.svelte
mark_module_start();
BoxArrowUpRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowUpRight.svelte";
var root288 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"></path><path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"></path></svg>`), BoxArrowUpRight[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function BoxArrowUpRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowUpRight);
  var svg = root288();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-up-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowUpRight = hmr(BoxArrowUpRight, () => BoxArrowUpRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowUpRight[HMR].source;
    set(BoxArrowUpRight[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowUpRight_default = BoxArrowUpRight;
mark_module_end(BoxArrowUpRight);

// node_modules/svelte-bootstrap-icons/lib/BoxArrowUp.svelte
mark_module_start();
BoxArrowUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxArrowUp.svelte";
var root289 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.5 6a.5.5 0 0 0-.5.5v8a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-8a.5.5 0 0 0-.5-.5h-2a.5.5 0 0 1 0-1h2A1.5 1.5 0 0 1 14 6.5v8a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-8A1.5 1.5 0 0 1 3.5 5h2a.5.5 0 0 1 0 1h-2z"></path><path fill-rule="evenodd" d="M7.646.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 1.707V10.5a.5.5 0 0 1-1 0V1.707L5.354 3.854a.5.5 0 1 1-.708-.708l3-3z"></path></svg>`), BoxArrowUp[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function BoxArrowUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxArrowUp);
  var svg = root289();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-arrow-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxArrowUp = hmr(BoxArrowUp, () => BoxArrowUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxArrowUp[HMR].source;
    set(BoxArrowUp[HMR].source, module.default[HMR].original);
  });
}
var BoxArrowUp_default = BoxArrowUp;
mark_module_end(BoxArrowUp);

// node_modules/svelte-bootstrap-icons/lib/BoxFill.svelte
mark_module_start();
BoxFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxFill.svelte";
var root290 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15.528 2.973a.75.75 0 0 1 .472.696v8.662a.75.75 0 0 1-.472.696l-7.25 2.9a.75.75 0 0 1-.557 0l-7.25-2.9A.75.75 0 0 1 0 12.331V3.669a.75.75 0 0 1 .471-.696L7.443.184l.004-.001.274-.11a.75.75 0 0 1 .558 0l.274.11.004.001 6.971 2.789Zm-1.374.527L8 5.962 1.846 3.5 1 3.839v.4l6.5 2.6v7.922l.5.2.5-.2V6.84l6.5-2.6v-.4l-.846-.339Z"></path></svg>`), BoxFill[FILENAME], [[1, 0, [[1, 169]]]]);
function BoxFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxFill);
  var svg = root290();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxFill = hmr(BoxFill, () => BoxFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxFill[HMR].source;
    set(BoxFill[HMR].source, module.default[HMR].original);
  });
}
var BoxFill_default = BoxFill;
mark_module_end(BoxFill);

// node_modules/svelte-bootstrap-icons/lib/BoxSeamFill.svelte
mark_module_start();
BoxSeamFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxSeamFill.svelte";
var root291 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15.528 2.973a.75.75 0 0 1 .472.696v8.662a.75.75 0 0 1-.472.696l-7.25 2.9a.75.75 0 0 1-.557 0l-7.25-2.9A.75.75 0 0 1 0 12.331V3.669a.75.75 0 0 1 .471-.696L7.443.184l.01-.003.268-.108a.75.75 0 0 1 .558 0l.269.108.01.003 6.97 2.789ZM10.404 2 4.25 4.461 1.846 3.5 1 3.839v.4l6.5 2.6v7.922l.5.2.5-.2V6.84l6.5-2.6v-.4l-.846-.339L8 5.961 5.596 5l6.154-2.461L10.404 2Z"></path></svg>`), BoxSeamFill[FILENAME], [[1, 0, [[1, 174]]]]);
function BoxSeamFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxSeamFill);
  var svg = root291();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-seam-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxSeamFill = hmr(BoxSeamFill, () => BoxSeamFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxSeamFill[HMR].source;
    set(BoxSeamFill[HMR].source, module.default[HMR].original);
  });
}
var BoxSeamFill_default = BoxSeamFill;
mark_module_end(BoxSeamFill);

// node_modules/svelte-bootstrap-icons/lib/BoxSeam.svelte
mark_module_start();
BoxSeam[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BoxSeam.svelte";
var root292 = add_locations(ns_template(`<svg><!><path d="M8.186 1.113a.5.5 0 0 0-.372 0L1.846 3.5l2.404.961L10.404 2l-2.218-.887zm3.564 1.426L5.596 5 8 5.961 14.154 3.5l-2.404-.961zm3.25 1.7-6.5 2.6v7.922l6.5-2.6V4.24zM7.5 14.762V6.838L1 4.239v7.923l6.5 2.6zM7.443.184a1.5 1.5 0 0 1 1.114 0l7.129 2.852A.5.5 0 0 1 16 3.5v8.662a1 1 0 0 1-.629.928l-7.185 2.874a.5.5 0 0 1-.372 0L.63 13.09a1 1 0 0 1-.63-.928V3.5a.5.5 0 0 1 .314-.464L7.443.184z"></path></svg>`), BoxSeam[FILENAME], [[1, 0, [[1, 169]]]]);
function BoxSeam($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BoxSeam);
  var svg = root292();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box-seam", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxSeam = hmr(BoxSeam, () => BoxSeam[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxSeam[HMR].source;
    set(BoxSeam[HMR].source, module.default[HMR].original);
  });
}
var BoxSeam_default = BoxSeam;
mark_module_end(BoxSeam);

// node_modules/svelte-bootstrap-icons/lib/Box.svelte
mark_module_start();
Box[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Box.svelte";
var root293 = add_locations(ns_template(`<svg><!><path d="M8.186 1.113a.5.5 0 0 0-.372 0L1.846 3.5 8 5.961 14.154 3.5 8.186 1.113zM15 4.239l-6.5 2.6v7.922l6.5-2.6V4.24zM7.5 14.762V6.838L1 4.239v7.923l6.5 2.6zM7.443.184a1.5 1.5 0 0 1 1.114 0l7.129 2.852A.5.5 0 0 1 16 3.5v8.662a1 1 0 0 1-.629.928l-7.185 2.874a.5.5 0 0 1-.372 0L.63 13.09a1 1 0 0 1-.63-.928V3.5a.5.5 0 0 1 .314-.464L7.443.184z"></path></svg>`), Box[FILENAME], [[1, 0, [[1, 164]]]]);
function Box($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Box);
  var svg = root293();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Box = hmr(Box, () => Box[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Box[HMR].source;
    set(Box[HMR].source, module.default[HMR].original);
  });
}
var Box_default = Box;
mark_module_end(Box);

// node_modules/svelte-bootstrap-icons/lib/Box2Fill.svelte
mark_module_start();
Box2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Box2Fill.svelte";
var root294 = add_locations(ns_template(`<svg><!><path d="M3.75 0a1 1 0 0 0-.8.4L.1 4.2a.5.5 0 0 0-.1.3V15a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V4.5a.5.5 0 0 0-.1-.3L13.05.4a1 1 0 0 0-.8-.4h-8.5ZM15 4.667V5H1v-.333L1.5 4h6V1h1v3h6l.5.667Z"></path></svg>`), Box2Fill[FILENAME], [[1, 0, [[1, 170]]]]);
function Box2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Box2Fill);
  var svg = root294();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Box2Fill = hmr(Box2Fill, () => Box2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Box2Fill[HMR].source;
    set(Box2Fill[HMR].source, module.default[HMR].original);
  });
}
var Box2Fill_default = Box2Fill;
mark_module_end(Box2Fill);

// node_modules/svelte-bootstrap-icons/lib/Box2HeartFill.svelte
mark_module_start();
Box2HeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Box2HeartFill.svelte";
var root295 = add_locations(ns_template(`<svg><!><path d="M3.75 0a1 1 0 0 0-.8.4L.1 4.2a.5.5 0 0 0-.1.3V15a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V4.5a.5.5 0 0 0-.1-.3L13.05.4a1 1 0 0 0-.8-.4h-8.5ZM8.5 4h6l.5.667V5H1v-.333L1.5 4h6V1h1v3ZM8 7.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), Box2HeartFill[FILENAME], [[1, 0, [[1, 176]]]]);
function Box2HeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Box2HeartFill);
  var svg = root295();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box2-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Box2HeartFill = hmr(Box2HeartFill, () => Box2HeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Box2HeartFill[HMR].source;
    set(Box2HeartFill[HMR].source, module.default[HMR].original);
  });
}
var Box2HeartFill_default = Box2HeartFill;
mark_module_end(Box2HeartFill);

// node_modules/svelte-bootstrap-icons/lib/Box2Heart.svelte
mark_module_start();
Box2Heart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Box2Heart.svelte";
var root296 = add_locations(ns_template(`<svg><!><path d="M8 7.982C9.664 6.309 13.825 9.236 8 13 2.175 9.236 6.336 6.31 8 7.982Z"></path><path d="M3.75 0a1 1 0 0 0-.8.4L.1 4.2a.5.5 0 0 0-.1.3V15a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V4.5a.5.5 0 0 0-.1-.3L13.05.4a1 1 0 0 0-.8-.4h-8.5Zm0 1H7.5v3h-6l2.25-3ZM8.5 4V1h3.75l2.25 3h-6ZM15 5v10H1V5h14Z"></path></svg>`), Box2Heart[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Box2Heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Box2Heart);
  var svg = root296();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box2-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Box2Heart = hmr(Box2Heart, () => Box2Heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Box2Heart[HMR].source;
    set(Box2Heart[HMR].source, module.default[HMR].original);
  });
}
var Box2Heart_default = Box2Heart;
mark_module_end(Box2Heart);

// node_modules/svelte-bootstrap-icons/lib/Box2.svelte
mark_module_start();
Box2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Box2.svelte";
var root297 = add_locations(ns_template(`<svg><!><path d="M2.95.4a1 1 0 0 1 .8-.4h8.5a1 1 0 0 1 .8.4l2.85 3.8a.5.5 0 0 1 .1.3V15a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V4.5a.5.5 0 0 1 .1-.3L2.95.4ZM7.5 1H3.75L1.5 4h6V1Zm1 0v3h6l-2.25-3H8.5ZM15 5H1v10h14V5Z"></path></svg>`), Box2[FILENAME], [[1, 0, [[1, 165]]]]);
function Box2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Box2);
  var svg = root297();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-box2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Box2 = hmr(Box2, () => Box2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Box2[HMR].source;
    set(Box2[HMR].source, module.default[HMR].original);
  });
}
var Box2_default = Box2;
mark_module_end(Box2);

// node_modules/svelte-bootstrap-icons/lib/Boxes.svelte
mark_module_start();
Boxes[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Boxes.svelte";
var root298 = add_locations(ns_template(`<svg><!><path d="M7.752.066a.5.5 0 0 1 .496 0l3.75 2.143a.5.5 0 0 1 .252.434v3.995l3.498 2A.5.5 0 0 1 16 9.07v4.286a.5.5 0 0 1-.252.434l-3.75 2.143a.5.5 0 0 1-.496 0l-3.502-2-3.502 2.001a.5.5 0 0 1-.496 0l-3.75-2.143A.5.5 0 0 1 0 13.357V9.071a.5.5 0 0 1 .252-.434L3.75 6.638V2.643a.5.5 0 0 1 .252-.434L7.752.066ZM4.25 7.504 1.508 9.071l2.742 1.567 2.742-1.567L4.25 7.504ZM7.5 9.933l-2.75 1.571v3.134l2.75-1.571V9.933Zm1 3.134 2.75 1.571v-3.134L8.5 9.933v3.134Zm.508-3.996 2.742 1.567 2.742-1.567-2.742-1.567-2.742 1.567Zm2.242-2.433V3.504L8.5 5.076V8.21l2.75-1.572ZM7.5 8.21V5.076L4.75 3.504v3.134L7.5 8.21ZM5.258 2.643 8 4.21l2.742-1.567L8 1.076 5.258 2.643ZM15 9.933l-2.75 1.571v3.134L15 13.067V9.933ZM3.75 14.638v-3.134L1 9.933v3.134l2.75 1.571Z"></path></svg>`), Boxes[FILENAME], [[1, 0, [[1, 166]]]]);
function Boxes($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Boxes);
  var svg = root298();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-boxes", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Boxes = hmr(Boxes, () => Boxes[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Boxes[HMR].source;
    set(Boxes[HMR].source, module.default[HMR].original);
  });
}
var Boxes_default = Boxes;
mark_module_end(Boxes);

// node_modules/svelte-bootstrap-icons/lib/BracesAsterisk.svelte
mark_module_start();
BracesAsterisk[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BracesAsterisk.svelte";
var root299 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.114 8.063V7.9c1.005-.102 1.497-.615 1.497-1.6V4.503c0-1.094.39-1.538 1.354-1.538h.273V2h-.376C2.25 2 1.49 2.759 1.49 4.352v1.524c0 1.094-.376 1.456-1.49 1.456v1.299c1.114 0 1.49.362 1.49 1.456v1.524c0 1.593.759 2.352 2.372 2.352h.376v-.964h-.273c-.964 0-1.354-.444-1.354-1.538V9.663c0-.984-.492-1.497-1.497-1.6ZM14.886 7.9v.164c-1.005.103-1.497.616-1.497 1.6v1.798c0 1.094-.39 1.538-1.354 1.538h-.273v.964h.376c1.613 0 2.372-.759 2.372-2.352v-1.524c0-1.094.376-1.456 1.49-1.456v-1.3c-1.114 0-1.49-.362-1.49-1.456V4.352C14.51 2.759 13.75 2 12.138 2h-.376v.964h.273c.964 0 1.354.444 1.354 1.538V6.3c0 .984.492 1.497 1.497 1.6ZM7.5 11.5V9.207l-1.621 1.621-.707-.707L6.792 8.5H4.5v-1h2.293L5.172 5.879l.707-.707L7.5 6.792V4.5h1v2.293l1.621-1.621.707.707L9.208 7.5H11.5v1H9.207l1.621 1.621-.707.707L8.5 9.208V11.5h-1Z"></path></svg>`), BracesAsterisk[FILENAME], [[1, 0, [[1, 176]]]]);
function BracesAsterisk($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BracesAsterisk);
  var svg = root299();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-braces-asterisk", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BracesAsterisk = hmr(BracesAsterisk, () => BracesAsterisk[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BracesAsterisk[HMR].source;
    set(BracesAsterisk[HMR].source, module.default[HMR].original);
  });
}
var BracesAsterisk_default = BracesAsterisk;
mark_module_end(BracesAsterisk);

// node_modules/svelte-bootstrap-icons/lib/Braces.svelte
mark_module_start();
Braces[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Braces.svelte";
var root300 = add_locations(ns_template(`<svg><!><path d="M2.114 8.063V7.9c1.005-.102 1.497-.615 1.497-1.6V4.503c0-1.094.39-1.538 1.354-1.538h.273V2h-.376C3.25 2 2.49 2.759 2.49 4.352v1.524c0 1.094-.376 1.456-1.49 1.456v1.299c1.114 0 1.49.362 1.49 1.456v1.524c0 1.593.759 2.352 2.372 2.352h.376v-.964h-.273c-.964 0-1.354-.444-1.354-1.538V9.663c0-.984-.492-1.497-1.497-1.6zM13.886 7.9v.163c-1.005.103-1.497.616-1.497 1.6v1.798c0 1.094-.39 1.538-1.354 1.538h-.273v.964h.376c1.613 0 2.372-.759 2.372-2.352v-1.524c0-1.094.376-1.456 1.49-1.456V7.332c-1.114 0-1.49-.362-1.49-1.456V4.352C13.51 2.759 12.75 2 11.138 2h-.376v.964h.273c.964 0 1.354.444 1.354 1.538V6.3c0 .984.492 1.497 1.497 1.6z"></path></svg>`), Braces[FILENAME], [[1, 0, [[1, 167]]]]);
function Braces($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Braces);
  var svg = root300();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-braces", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Braces = hmr(Braces, () => Braces[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Braces[HMR].source;
    set(Braces[HMR].source, module.default[HMR].original);
  });
}
var Braces_default = Braces;
mark_module_end(Braces);

// node_modules/svelte-bootstrap-icons/lib/Bricks.svelte
mark_module_start();
Bricks[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bricks.svelte";
var root301 = add_locations(ns_template(`<svg><!><path d="M0 .5A.5.5 0 0 1 .5 0h15a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5H14v2h1.5a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5H14v2h1.5a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5H.5a.5.5 0 0 1-.5-.5v-3a.5.5 0 0 1 .5-.5H2v-2H.5a.5.5 0 0 1-.5-.5v-3A.5.5 0 0 1 .5 6H2V4H.5a.5.5 0 0 1-.5-.5v-3zM3 4v2h4.5V4H3zm5.5 0v2H13V4H8.5zM3 10v2h4.5v-2H3zm5.5 0v2H13v-2H8.5zM1 1v2h3.5V1H1zm4.5 0v2h5V1h-5zm6 0v2H15V1h-3.5zM1 7v2h3.5V7H1zm4.5 0v2h5V7h-5zm6 0v2H15V7h-3.5zM1 13v2h3.5v-2H1zm4.5 0v2h5v-2h-5zm6 0v2H15v-2h-3.5z"></path></svg>`), Bricks[FILENAME], [[1, 0, [[1, 167]]]]);
function Bricks($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bricks);
  var svg = root301();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bricks", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bricks = hmr(Bricks, () => Bricks[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bricks[HMR].source;
    set(Bricks[HMR].source, module.default[HMR].original);
  });
}
var Bricks_default = Bricks;
mark_module_end(Bricks);

// node_modules/svelte-bootstrap-icons/lib/BriefcaseFill.svelte
mark_module_start();
BriefcaseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BriefcaseFill.svelte";
var root302 = add_locations(ns_template(`<svg><!><path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v1.384l7.614 2.03a1.5 1.5 0 0 0 .772 0L16 5.884V4.5A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1h-3zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5z"></path><path d="M0 12.5A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5V6.85L8.129 8.947a.5.5 0 0 1-.258 0L0 6.85v5.65z"></path></svg>`), BriefcaseFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function BriefcaseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BriefcaseFill);
  var svg = root302();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-briefcase-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BriefcaseFill = hmr(BriefcaseFill, () => BriefcaseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BriefcaseFill[HMR].source;
    set(BriefcaseFill[HMR].source, module.default[HMR].original);
  });
}
var BriefcaseFill_default = BriefcaseFill;
mark_module_end(BriefcaseFill);

// node_modules/svelte-bootstrap-icons/lib/Briefcase.svelte
mark_module_start();
Briefcase[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Briefcase.svelte";
var root303 = add_locations(ns_template(`<svg><!><path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1h-3zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5zm1.886 6.914L15 7.151V12.5a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5V7.15l6.614 1.764a1.5 1.5 0 0 0 .772 0zM1.5 4h13a.5.5 0 0 1 .5.5v1.616L8.129 7.948a.5.5 0 0 1-.258 0L1 6.116V4.5a.5.5 0 0 1 .5-.5z"></path></svg>`), Briefcase[FILENAME], [[1, 0, [[1, 170]]]]);
function Briefcase($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Briefcase);
  var svg = root303();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-briefcase", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Briefcase = hmr(Briefcase, () => Briefcase[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Briefcase[HMR].source;
    set(Briefcase[HMR].source, module.default[HMR].original);
  });
}
var Briefcase_default = Briefcase;
mark_module_end(Briefcase);

// node_modules/svelte-bootstrap-icons/lib/BrightnessAltHighFill.svelte
mark_module_start();
BrightnessAltHighFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrightnessAltHighFill.svelte";
var root304 = add_locations(ns_template(`<svg><!><path d="M8 3a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 3zm8 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zm-13.5.5a.5.5 0 0 0 0-1h-2a.5.5 0 0 0 0 1h2zm11.157-6.157a.5.5 0 0 1 0 .707l-1.414 1.414a.5.5 0 1 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm-9.9 2.121a.5.5 0 0 0 .707-.707L3.05 5.343a.5.5 0 1 0-.707.707l1.414 1.414zM8 7a4 4 0 0 0-4 4 .5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5 4 4 0 0 0-4-4z"></path></svg>`), BrightnessAltHighFill[FILENAME], [[1, 0, [[1, 185]]]]);
function BrightnessAltHighFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrightnessAltHighFill);
  var svg = root304();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brightness-alt-high-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrightnessAltHighFill = hmr(BrightnessAltHighFill, () => BrightnessAltHighFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrightnessAltHighFill[HMR].source;
    set(BrightnessAltHighFill[HMR].source, module.default[HMR].original);
  });
}
var BrightnessAltHighFill_default = BrightnessAltHighFill;
mark_module_end(BrightnessAltHighFill);

// node_modules/svelte-bootstrap-icons/lib/BrightnessAltHigh.svelte
mark_module_start();
BrightnessAltHigh[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrightnessAltHigh.svelte";
var root305 = add_locations(ns_template(`<svg><!><path d="M8 3a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 3zm8 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zm-13.5.5a.5.5 0 0 0 0-1h-2a.5.5 0 0 0 0 1h2zm11.157-6.157a.5.5 0 0 1 0 .707l-1.414 1.414a.5.5 0 1 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm-9.9 2.121a.5.5 0 0 0 .707-.707L3.05 5.343a.5.5 0 1 0-.707.707l1.414 1.414zM8 7a4 4 0 0 0-4 4 .5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5 4 4 0 0 0-4-4zm0 1a3 3 0 0 1 2.959 2.5H5.04A3 3 0 0 1 8 8z"></path></svg>`), BrightnessAltHigh[FILENAME], [[1, 0, [[1, 180]]]]);
function BrightnessAltHigh($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrightnessAltHigh);
  var svg = root305();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brightness-alt-high", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrightnessAltHigh = hmr(BrightnessAltHigh, () => BrightnessAltHigh[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrightnessAltHigh[HMR].source;
    set(BrightnessAltHigh[HMR].source, module.default[HMR].original);
  });
}
var BrightnessAltHigh_default = BrightnessAltHigh;
mark_module_end(BrightnessAltHigh);

// node_modules/svelte-bootstrap-icons/lib/BrightnessAltLowFill.svelte
mark_module_start();
BrightnessAltLowFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrightnessAltLowFill.svelte";
var root306 = add_locations(ns_template(`<svg><!><path d="M8.5 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm5 6a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zM2 11a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0zm10.243-3.536a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm-8.486-.707a.5.5 0 1 0 .707.707.5.5 0 0 0-.707-.707zM8 7a4 4 0 0 0-4 4 .5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5 4 4 0 0 0-4-4z"></path></svg>`), BrightnessAltLowFill[FILENAME], [[1, 0, [[1, 184]]]]);
function BrightnessAltLowFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrightnessAltLowFill);
  var svg = root306();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brightness-alt-low-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrightnessAltLowFill = hmr(BrightnessAltLowFill, () => BrightnessAltLowFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrightnessAltLowFill[HMR].source;
    set(BrightnessAltLowFill[HMR].source, module.default[HMR].original);
  });
}
var BrightnessAltLowFill_default = BrightnessAltLowFill;
mark_module_end(BrightnessAltLowFill);

// node_modules/svelte-bootstrap-icons/lib/BrightnessAltLow.svelte
mark_module_start();
BrightnessAltLow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrightnessAltLow.svelte";
var root307 = add_locations(ns_template(`<svg><!><path d="M8.5 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm5 6a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zM2 11a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0zm10.243-3.536a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm-8.486-.707a.5.5 0 1 0 .707.707.5.5 0 0 0-.707-.707zM8 7a4 4 0 0 0-4 4 .5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5 4 4 0 0 0-4-4zm0 1a3 3 0 0 1 2.959 2.5H5.04A3 3 0 0 1 8 8z"></path></svg>`), BrightnessAltLow[FILENAME], [[1, 0, [[1, 179]]]]);
function BrightnessAltLow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrightnessAltLow);
  var svg = root307();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brightness-alt-low", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrightnessAltLow = hmr(BrightnessAltLow, () => BrightnessAltLow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrightnessAltLow[HMR].source;
    set(BrightnessAltLow[HMR].source, module.default[HMR].original);
  });
}
var BrightnessAltLow_default = BrightnessAltLow;
mark_module_end(BrightnessAltLow);

// node_modules/svelte-bootstrap-icons/lib/BrightnessHighFill.svelte
mark_module_start();
BrightnessHighFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrightnessHighFill.svelte";
var root308 = add_locations(ns_template(`<svg><!><path d="M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"></path></svg>`), BrightnessHighFill[FILENAME], [[1, 0, [[1, 181]]]]);
function BrightnessHighFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrightnessHighFill);
  var svg = root308();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brightness-high-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrightnessHighFill = hmr(BrightnessHighFill, () => BrightnessHighFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrightnessHighFill[HMR].source;
    set(BrightnessHighFill[HMR].source, module.default[HMR].original);
  });
}
var BrightnessHighFill_default = BrightnessHighFill;
mark_module_end(BrightnessHighFill);

// node_modules/svelte-bootstrap-icons/lib/BrightnessHigh.svelte
mark_module_start();
BrightnessHigh[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrightnessHigh.svelte";
var root309 = add_locations(ns_template(`<svg><!><path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"></path></svg>`), BrightnessHigh[FILENAME], [[1, 0, [[1, 176]]]]);
function BrightnessHigh($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrightnessHigh);
  var svg = root309();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brightness-high", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrightnessHigh = hmr(BrightnessHigh, () => BrightnessHigh[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrightnessHigh[HMR].source;
    set(BrightnessHigh[HMR].source, module.default[HMR].original);
  });
}
var BrightnessHigh_default = BrightnessHigh;
mark_module_end(BrightnessHigh);

// node_modules/svelte-bootstrap-icons/lib/BrightnessLowFill.svelte
mark_module_start();
BrightnessLowFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrightnessLowFill.svelte";
var root310 = add_locations(ns_template(`<svg><!><path d="M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0zM8.5 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm0 11a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm5-5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm-11 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm9.743-4.036a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm-7.779 7.779a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm7.072 0a.5.5 0 1 1 .707-.707.5.5 0 0 1-.707.707zM3.757 4.464a.5.5 0 1 1 .707-.707.5.5 0 0 1-.707.707z"></path></svg>`), BrightnessLowFill[FILENAME], [[1, 0, [[1, 180]]]]);
function BrightnessLowFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrightnessLowFill);
  var svg = root310();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brightness-low-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrightnessLowFill = hmr(BrightnessLowFill, () => BrightnessLowFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrightnessLowFill[HMR].source;
    set(BrightnessLowFill[HMR].source, module.default[HMR].original);
  });
}
var BrightnessLowFill_default = BrightnessLowFill;
mark_module_end(BrightnessLowFill);

// node_modules/svelte-bootstrap-icons/lib/BrightnessLow.svelte
mark_module_start();
BrightnessLow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrightnessLow.svelte";
var root311 = add_locations(ns_template(`<svg><!><path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zm.5-9.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm0 11a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm5-5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm-11 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm9.743-4.036a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm-7.779 7.779a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm7.072 0a.5.5 0 1 1 .707-.707.5.5 0 0 1-.707.707zM3.757 4.464a.5.5 0 1 1 .707-.707.5.5 0 0 1-.707.707z"></path></svg>`), BrightnessLow[FILENAME], [[1, 0, [[1, 175]]]]);
function BrightnessLow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrightnessLow);
  var svg = root311();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brightness-low", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrightnessLow = hmr(BrightnessLow, () => BrightnessLow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrightnessLow[HMR].source;
    set(BrightnessLow[HMR].source, module.default[HMR].original);
  });
}
var BrightnessLow_default = BrightnessLow;
mark_module_end(BrightnessLow);

// node_modules/svelte-bootstrap-icons/lib/Brilliance.svelte
mark_module_start();
Brilliance[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Brilliance.svelte";
var root312 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16ZM1 8a7 7 0 0 1 7-7 3.5 3.5 0 1 0 0 7 3.5 3.5 0 1 1 0 7 7 7 0 0 1-7-7Z"></path></svg>`), Brilliance[FILENAME], [[1, 0, [[1, 171]]]]);
function Brilliance($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Brilliance);
  var svg = root312();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brilliance", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brilliance = hmr(Brilliance, () => Brilliance[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brilliance[HMR].source;
    set(Brilliance[HMR].source, module.default[HMR].original);
  });
}
var Brilliance_default = Brilliance;
mark_module_end(Brilliance);

// node_modules/svelte-bootstrap-icons/lib/BroadcastPin.svelte
mark_module_start();
BroadcastPin[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BroadcastPin.svelte";
var root313 = add_locations(ns_template(`<svg><!><path d="M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 0 1 .707.707zm2.122 2.122a4 4 0 0 0 0 5.656.5.5 0 1 1-.708.708 5 5 0 0 1 0-7.072.5.5 0 0 1 .708.708zm5.656-.708a.5.5 0 0 1 .708 0 5 5 0 0 1 0 7.072.5.5 0 1 1-.708-.708 4 4 0 0 0 0-5.656.5.5 0 0 1 0-.708zm2.122-2.12a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.313.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707zM6 8a2 2 0 1 1 2.5 1.937V15.5a.5.5 0 0 1-1 0V9.937A2 2 0 0 1 6 8z"></path></svg>`), BroadcastPin[FILENAME], [[1, 0, [[1, 174]]]]);
function BroadcastPin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BroadcastPin);
  var svg = root313();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-broadcast-pin", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BroadcastPin = hmr(BroadcastPin, () => BroadcastPin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BroadcastPin[HMR].source;
    set(BroadcastPin[HMR].source, module.default[HMR].original);
  });
}
var BroadcastPin_default = BroadcastPin;
mark_module_end(BroadcastPin);

// node_modules/svelte-bootstrap-icons/lib/Broadcast.svelte
mark_module_start();
Broadcast[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Broadcast.svelte";
var root314 = add_locations(ns_template(`<svg><!><path d="M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 0 1 .707.707zm2.122 2.122a4 4 0 0 0 0 5.656.5.5 0 1 1-.708.708 5 5 0 0 1 0-7.072.5.5 0 0 1 .708.708zm5.656-.708a.5.5 0 0 1 .708 0 5 5 0 0 1 0 7.072.5.5 0 1 1-.708-.708 4 4 0 0 0 0-5.656.5.5 0 0 1 0-.708zm2.122-2.12a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.313.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707zM10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"></path></svg>`), Broadcast[FILENAME], [[1, 0, [[1, 170]]]]);
function Broadcast($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Broadcast);
  var svg = root314();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-broadcast", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Broadcast = hmr(Broadcast, () => Broadcast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Broadcast[HMR].source;
    set(Broadcast[HMR].source, module.default[HMR].original);
  });
}
var Broadcast_default = Broadcast;
mark_module_end(Broadcast);

// node_modules/svelte-bootstrap-icons/lib/BrowserChrome.svelte
mark_module_start();
BrowserChrome[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrowserChrome.svelte";
var root315 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M16 8a8.001 8.001 0 0 1-7.022 7.94l1.902-7.098a2.995 2.995 0 0 0 .05-1.492A2.977 2.977 0 0 0 10.237 6h5.511A8 8 0 0 1 16 8ZM0 8a8 8 0 0 0 7.927 8l1.426-5.321a2.978 2.978 0 0 1-.723.255 2.979 2.979 0 0 1-1.743-.147 2.986 2.986 0 0 1-1.043-.7L.633 4.876A7.975 7.975 0 0 0 0 8Zm5.004-.167L1.108 3.936A8.003 8.003 0 0 1 15.418 5H8.066a2.979 2.979 0 0 0-1.252.243 2.987 2.987 0 0 0-1.81 2.59ZM8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path></svg>`), BrowserChrome[FILENAME], [[1, 0, [[1, 175]]]]);
function BrowserChrome($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrowserChrome);
  var svg = root315();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-browser-chrome", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrowserChrome = hmr(BrowserChrome, () => BrowserChrome[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrowserChrome[HMR].source;
    set(BrowserChrome[HMR].source, module.default[HMR].original);
  });
}
var BrowserChrome_default = BrowserChrome;
mark_module_end(BrowserChrome);

// node_modules/svelte-bootstrap-icons/lib/BrowserEdge.svelte
mark_module_start();
BrowserEdge[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrowserEdge.svelte";
var root316 = add_locations(ns_template(`<svg><!><path d="M9.482 9.341c-.069.062-.17.153-.17.309 0 .162.107.325.3.456.877.613 2.521.54 2.592.538h.002c.667 0 1.32-.18 1.894-.519A3.838 3.838 0 0 0 16 6.819c.018-1.316-.44-2.218-.666-2.664l-.04-.08C13.963 1.487 11.106 0 8 0A8 8 0 0 0 .473 5.29C1.488 4.048 3.183 3.262 5 3.262c2.83 0 5.01 1.885 5.01 4.797h-.004v.002c0 .338-.168.832-.487 1.244l.006-.006a.594.594 0 0 1-.043.041Z"></path><path d="M.01 7.753a8.137 8.137 0 0 0 .753 3.641 8 8 0 0 0 6.495 4.564 5.21 5.21 0 0 1-.785-.377h-.01l-.12-.075a5.45 5.45 0 0 1-1.56-1.463A5.543 5.543 0 0 1 6.81 5.8l.01-.004.025-.012c.208-.098.62-.292 1.167-.285.129.001.257.012.384.033a4.037 4.037 0 0 0-.993-.698l-.01-.005C6.348 4.282 5.199 4.263 5 4.263c-2.44 0-4.824 1.634-4.99 3.49Zm10.263 7.912c.088-.027.177-.054.265-.084-.102.032-.204.06-.307.086l.042-.002Z"></path><path d="M10.228 15.667a5.21 5.21 0 0 0 .303-.086l.082-.025a8.019 8.019 0 0 0 4.162-3.3.25.25 0 0 0-.331-.35c-.215.112-.436.21-.663.294a6.367 6.367 0 0 1-2.243.4c-2.957 0-5.532-2.031-5.532-4.644.002-.135.017-.268.046-.399a4.543 4.543 0 0 0-.46 5.898l.003.005c.315.441.707.821 1.158 1.121h.003l.144.09c.877.55 1.721 1.078 3.328.996Z"></path></svg>`), BrowserEdge[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function BrowserEdge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrowserEdge);
  var svg = root316();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-browser-edge", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrowserEdge = hmr(BrowserEdge, () => BrowserEdge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrowserEdge[HMR].source;
    set(BrowserEdge[HMR].source, module.default[HMR].original);
  });
}
var BrowserEdge_default = BrowserEdge;
mark_module_end(BrowserEdge);

// node_modules/svelte-bootstrap-icons/lib/BrowserFirefox.svelte
mark_module_start();
BrowserFirefox[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrowserFirefox.svelte";
var root317 = add_locations(ns_template(`<svg><!><path d="M13.384 3.408c.535.276 1.22 1.152 1.556 1.963a7.98 7.98 0 0 1 .503 3.897l-.009.077a8.533 8.533 0 0 1-.026.224A7.758 7.758 0 0 1 .006 8.257v-.04c.016-.363.055-.724.114-1.082.01-.074.075-.42.09-.489l.01-.051a6.551 6.551 0 0 1 1.041-2.35c.217-.31.46-.6.725-.87.233-.238.487-.456.758-.65a1.5 1.5 0 0 1 .26-.137c-.018.268-.04 1.553.268 1.943h.003a5.744 5.744 0 0 1 1.868-1.443 3.597 3.597 0 0 0 .021 1.896c.07.047.137.098.2.152.107.09.226.207.454.433l.068.066.009.009a1.933 1.933 0 0 0 .213.18c.383.287.943.563 1.306.741.201.1.342.168.359.193l.004.008c-.012.193-.695.858-.933.858-2.206 0-2.564 1.335-2.564 1.335.087.997.714 1.839 1.517 2.357a3.72 3.72 0 0 0 .439.241c.076.034.152.065.228.094.325.115.665.18 1.01.194 3.043.143 4.155-2.804 3.129-4.745v-.001a3.005 3.005 0 0 0-.731-.9 2.945 2.945 0 0 0-.571-.37l-.003-.002a2.679 2.679 0 0 1 1.87.454 3.915 3.915 0 0 0-3.396-1.983c-.078 0-.153.005-.23.01l-.042.003V4.31h-.002a3.882 3.882 0 0 0-.8.14 6.454 6.454 0 0 0-.333-.314 2.321 2.321 0 0 0-.2-.152 3.594 3.594 0 0 1-.088-.383 4.88 4.88 0 0 1 1.352-.289l.05-.003c.052-.004.125-.01.205-.012C7.996 2.212 8.733.843 10.17.002l-.003.005.003-.001.002-.002h.002l.002-.002a.028.028 0 0 1 .015 0 .02.02 0 0 1 .012.007 2.408 2.408 0 0 0 .206.48c.06.103.122.2.183.297.49.774 1.023 1.379 1.543 1.968.771.874 1.512 1.715 2.036 3.02l-.001-.013a8.06 8.06 0 0 0-.786-2.353Z"></path></svg>`), BrowserFirefox[FILENAME], [[1, 0, [[1, 176]]]]);
function BrowserFirefox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrowserFirefox);
  var svg = root317();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-browser-firefox", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrowserFirefox = hmr(BrowserFirefox, () => BrowserFirefox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrowserFirefox[HMR].source;
    set(BrowserFirefox[HMR].source, module.default[HMR].original);
  });
}
var BrowserFirefox_default = BrowserFirefox;
mark_module_end(BrowserFirefox);

// node_modules/svelte-bootstrap-icons/lib/BrowserSafari.svelte
mark_module_start();
BrowserSafari[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrowserSafari.svelte";
var root318 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm.25-14.75v1.5a.25.25 0 0 1-.5 0v-1.5a.25.25 0 0 1 .5 0Zm0 12v1.5a.25.25 0 1 1-.5 0v-1.5a.25.25 0 1 1 .5 0ZM4.5 1.938a.25.25 0 0 1 .342.091l.75 1.3a.25.25 0 0 1-.434.25l-.75-1.3a.25.25 0 0 1 .092-.341Zm6 10.392a.25.25 0 0 1 .341.092l.75 1.299a.25.25 0 1 1-.432.25l-.75-1.3a.25.25 0 0 1 .091-.34ZM2.28 4.408l1.298.75a.25.25 0 0 1-.25.434l-1.299-.75a.25.25 0 0 1 .25-.434Zm10.392 6 1.299.75a.25.25 0 1 1-.25.434l-1.3-.75a.25.25 0 0 1 .25-.434ZM1 8a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 0 .5h-1.5A.25.25 0 0 1 1 8Zm12 0a.25.25 0 0 1 .25-.25h1.5a.25.25 0 1 1 0 .5h-1.5A.25.25 0 0 1 13 8ZM2.03 11.159l1.298-.75a.25.25 0 0 1 .25.432l-1.299.75a.25.25 0 0 1-.25-.432Zm10.392-6 1.299-.75a.25.25 0 1 1 .25.433l-1.3.75a.25.25 0 0 1-.25-.434ZM4.5 14.061a.25.25 0 0 1-.092-.341l.75-1.3a.25.25 0 0 1 .434.25l-.75 1.3a.25.25 0 0 1-.342.091Zm6-10.392a.25.25 0 0 1-.091-.342l.75-1.299a.25.25 0 1 1 .432.25l-.75 1.3a.25.25 0 0 1-.341.09ZM6.494 1.415l.13.483a.25.25 0 1 1-.483.13l-.13-.483a.25.25 0 0 1 .483-.13ZM9.86 13.972l.13.483a.25.25 0 1 1-.483.13l-.13-.483a.25.25 0 0 1 .483-.13ZM3.05 3.05a.25.25 0 0 1 .354 0l.353.354a.25.25 0 0 1-.353.353l-.354-.353a.25.25 0 0 1 0-.354Zm9.193 9.193a.25.25 0 0 1 .353 0l.354.353a.25.25 0 1 1-.354.354l-.353-.354a.25.25 0 0 1 0-.353ZM1.545 6.01l.483.13a.25.25 0 1 1-.13.483l-.483-.13a.25.25 0 1 1 .13-.482Zm12.557 3.365.483.13a.25.25 0 1 1-.13.483l-.483-.13a.25.25 0 1 1 .13-.483Zm-12.863.436a.25.25 0 0 1 .176-.306l.483-.13a.25.25 0 1 1 .13.483l-.483.13a.25.25 0 0 1-.306-.177Zm12.557-3.365a.25.25 0 0 1 .176-.306l.483-.13a.25.25 0 1 1 .13.483l-.483.13a.25.25 0 0 1-.306-.177ZM3.045 12.944a.299.299 0 0 1-.029-.376l3.898-5.592a.25.25 0 0 1 .062-.062l5.602-3.884a.278.278 0 0 1 .392.392L9.086 9.024a.25.25 0 0 1-.062.062l-5.592 3.898a.299.299 0 0 1-.382-.034l-.005-.006Zm3.143 1.817a.25.25 0 0 1-.176-.306l.129-.483a.25.25 0 0 1 .483.13l-.13.483a.25.25 0 0 1-.306.176ZM9.553 2.204a.25.25 0 0 1-.177-.306l.13-.483a.25.25 0 1 1 .483.13l-.13.483a.25.25 0 0 1-.306.176Z"></path></svg>`), BrowserSafari[FILENAME], [[1, 0, [[1, 175]]]]);
function BrowserSafari($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrowserSafari);
  var svg = root318();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-browser-safari", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrowserSafari = hmr(BrowserSafari, () => BrowserSafari[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrowserSafari[HMR].source;
    set(BrowserSafari[HMR].source, module.default[HMR].original);
  });
}
var BrowserSafari_default = BrowserSafari;
mark_module_end(BrowserSafari);

// node_modules/svelte-bootstrap-icons/lib/BrushFill.svelte
mark_module_start();
BrushFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BrushFill.svelte";
var root319 = add_locations(ns_template(`<svg><!><path d="M15.825.12a.5.5 0 0 1 .132.584c-1.53 3.43-4.743 8.17-7.095 10.64a6.067 6.067 0 0 1-2.373 1.534c-.018.227-.06.538-.16.868-.201.659-.667 1.479-1.708 1.74a8.118 8.118 0 0 1-3.078.132 3.659 3.659 0 0 1-.562-.135 1.382 1.382 0 0 1-.466-.247.714.714 0 0 1-.204-.288.622.622 0 0 1 .004-.443c.095-.245.316-.38.461-.452.394-.197.625-.453.867-.826.095-.144.184-.297.287-.472l.117-.198c.151-.255.326-.54.546-.848.528-.739 1.201-.925 1.746-.896.126.007.243.025.348.048.062-.172.142-.38.238-.608.261-.619.658-1.419 1.187-2.069 2.176-2.67 6.18-6.206 9.117-8.104a.5.5 0 0 1 .596.04z"></path></svg>`), BrushFill[FILENAME], [[1, 0, [[1, 171]]]]);
function BrushFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BrushFill);
  var svg = root319();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brush-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BrushFill = hmr(BrushFill, () => BrushFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BrushFill[HMR].source;
    set(BrushFill[HMR].source, module.default[HMR].original);
  });
}
var BrushFill_default = BrushFill;
mark_module_end(BrushFill);

// node_modules/svelte-bootstrap-icons/lib/Brush.svelte
mark_module_start();
Brush[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Brush.svelte";
var root320 = add_locations(ns_template(`<svg><!><path d="M15.825.12a.5.5 0 0 1 .132.584c-1.53 3.43-4.743 8.17-7.095 10.64a6.067 6.067 0 0 1-2.373 1.534c-.018.227-.06.538-.16.868-.201.659-.667 1.479-1.708 1.74a8.118 8.118 0 0 1-3.078.132 3.659 3.659 0 0 1-.562-.135 1.382 1.382 0 0 1-.466-.247.714.714 0 0 1-.204-.288.622.622 0 0 1 .004-.443c.095-.245.316-.38.461-.452.394-.197.625-.453.867-.826.095-.144.184-.297.287-.472l.117-.198c.151-.255.326-.54.546-.848.528-.739 1.201-.925 1.746-.896.126.007.243.025.348.048.062-.172.142-.38.238-.608.261-.619.658-1.419 1.187-2.069 2.176-2.67 6.18-6.206 9.117-8.104a.5.5 0 0 1 .596.04zM4.705 11.912a1.23 1.23 0 0 0-.419-.1c-.246-.013-.573.05-.879.479-.197.275-.355.532-.5.777l-.105.177c-.106.181-.213.362-.32.528a3.39 3.39 0 0 1-.76.861c.69.112 1.736.111 2.657-.12.559-.139.843-.569.993-1.06a3.122 3.122 0 0 0 .126-.75l-.793-.792zm1.44.026c.12-.04.277-.1.458-.183a5.068 5.068 0 0 0 1.535-1.1c1.9-1.996 4.412-5.57 6.052-8.631-2.59 1.927-5.566 4.66-7.302 6.792-.442.543-.795 1.243-1.042 1.826-.121.288-.214.54-.275.72v.001l.575.575zm-4.973 3.04.007-.005a.031.031 0 0 1-.007.004zm3.582-3.043.002.001h-.002z"></path></svg>`), Brush[FILENAME], [[1, 0, [[1, 166]]]]);
function Brush($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Brush);
  var svg = root320();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-brush", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brush = hmr(Brush, () => Brush[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brush[HMR].source;
    set(Brush[HMR].source, module.default[HMR].original);
  });
}
var Brush_default = Brush;
mark_module_end(Brush);

// node_modules/svelte-bootstrap-icons/lib/BucketFill.svelte
mark_module_start();
BucketFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BucketFill.svelte";
var root321 = add_locations(ns_template(`<svg><!><path d="M2.522 5H2a.5.5 0 0 0-.494.574l1.372 9.149A1.5 1.5 0 0 0 4.36 16h7.278a1.5 1.5 0 0 0 1.483-1.277l1.373-9.149A.5.5 0 0 0 14 5h-.522A5.5 5.5 0 0 0 2.522 5zm1.005 0a4.5 4.5 0 0 1 8.945 0H3.527z"></path></svg>`), BucketFill[FILENAME], [[1, 0, [[1, 172]]]]);
function BucketFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BucketFill);
  var svg = root321();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bucket-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BucketFill = hmr(BucketFill, () => BucketFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BucketFill[HMR].source;
    set(BucketFill[HMR].source, module.default[HMR].original);
  });
}
var BucketFill_default = BucketFill;
mark_module_end(BucketFill);

// node_modules/svelte-bootstrap-icons/lib/Bucket.svelte
mark_module_start();
Bucket[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bucket.svelte";
var root322 = add_locations(ns_template(`<svg><!><path d="M2.522 5H2a.5.5 0 0 0-.494.574l1.372 9.149A1.5 1.5 0 0 0 4.36 16h7.278a1.5 1.5 0 0 0 1.483-1.277l1.373-9.149A.5.5 0 0 0 14 5h-.522A5.5 5.5 0 0 0 2.522 5zm1.005 0a4.5 4.5 0 0 1 8.945 0H3.527zm9.892 1-1.286 8.574a.5.5 0 0 1-.494.426H4.36a.5.5 0 0 1-.494-.426L2.58 6h10.838z"></path></svg>`), Bucket[FILENAME], [[1, 0, [[1, 167]]]]);
function Bucket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bucket);
  var svg = root322();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bucket", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bucket = hmr(Bucket, () => Bucket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bucket[HMR].source;
    set(Bucket[HMR].source, module.default[HMR].original);
  });
}
var Bucket_default = Bucket;
mark_module_end(Bucket);

// node_modules/svelte-bootstrap-icons/lib/BugFill.svelte
mark_module_start();
BugFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BugFill.svelte";
var root323 = add_locations(ns_template(`<svg><!><path d="M4.978.855a.5.5 0 1 0-.956.29l.41 1.352A4.985 4.985 0 0 0 3 6h10a4.985 4.985 0 0 0-1.432-3.503l.41-1.352a.5.5 0 1 0-.956-.29l-.291.956A4.978 4.978 0 0 0 8 1a4.979 4.979 0 0 0-2.731.811l-.29-.956z"></path><path d="M13 6v1H8.5v8.975A5 5 0 0 0 13 11h.5a.5.5 0 0 1 .5.5v.5a.5.5 0 1 0 1 0v-.5a1.5 1.5 0 0 0-1.5-1.5H13V9h1.5a.5.5 0 0 0 0-1H13V7h.5A1.5 1.5 0 0 0 15 5.5V5a.5.5 0 0 0-1 0v.5a.5.5 0 0 1-.5.5H13zm-5.5 9.975V7H3V6h-.5a.5.5 0 0 1-.5-.5V5a.5.5 0 0 0-1 0v.5A1.5 1.5 0 0 0 2.5 7H3v1H1.5a.5.5 0 0 0 0 1H3v1h-.5A1.5 1.5 0 0 0 1 11.5v.5a.5.5 0 1 0 1 0v-.5a.5.5 0 0 1 .5-.5H3a5 5 0 0 0 4.5 4.975z"></path></svg>`), BugFill[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function BugFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BugFill);
  var svg = root323();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bug-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BugFill = hmr(BugFill, () => BugFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BugFill[HMR].source;
    set(BugFill[HMR].source, module.default[HMR].original);
  });
}
var BugFill_default = BugFill;
mark_module_end(BugFill);

// node_modules/svelte-bootstrap-icons/lib/Bug.svelte
mark_module_start();
Bug[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bug.svelte";
var root324 = add_locations(ns_template(`<svg><!><path d="M4.355.522a.5.5 0 0 1 .623.333l.291.956A4.979 4.979 0 0 1 8 1c1.007 0 1.946.298 2.731.811l.29-.956a.5.5 0 1 1 .957.29l-.41 1.352A4.985 4.985 0 0 1 13 6h.5a.5.5 0 0 0 .5-.5V5a.5.5 0 0 1 1 0v.5A1.5 1.5 0 0 1 13.5 7H13v1h1.5a.5.5 0 0 1 0 1H13v1h.5a1.5 1.5 0 0 1 1.5 1.5v.5a.5.5 0 1 1-1 0v-.5a.5.5 0 0 0-.5-.5H13a5 5 0 0 1-10 0h-.5a.5.5 0 0 0-.5.5v.5a.5.5 0 1 1-1 0v-.5A1.5 1.5 0 0 1 2.5 10H3V9H1.5a.5.5 0 0 1 0-1H3V7h-.5A1.5 1.5 0 0 1 1 5.5V5a.5.5 0 0 1 1 0v.5a.5.5 0 0 0 .5.5H3c0-1.364.547-2.601 1.432-3.503l-.41-1.352a.5.5 0 0 1 .333-.623zM4 7v4a4 4 0 0 0 3.5 3.97V7H4zm4.5 0v7.97A4 4 0 0 0 12 11V7H8.5zM12 6a3.989 3.989 0 0 0-1.334-2.982A3.983 3.983 0 0 0 8 2a3.983 3.983 0 0 0-2.667 1.018A3.989 3.989 0 0 0 4 6h8z"></path></svg>`), Bug[FILENAME], [[1, 0, [[1, 164]]]]);
function Bug($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bug);
  var svg = root324();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bug", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bug = hmr(Bug, () => Bug[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bug[HMR].source;
    set(Bug[HMR].source, module.default[HMR].original);
  });
}
var Bug_default = Bug;
mark_module_end(Bug);

// node_modules/svelte-bootstrap-icons/lib/BuildingAdd.svelte
mark_module_start();
BuildingAdd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingAdd.svelte";
var root325 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingAdd[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function BuildingAdd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingAdd);
  var svg = root325();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-add", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingAdd = hmr(BuildingAdd, () => BuildingAdd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingAdd[HMR].source;
    set(BuildingAdd[HMR].source, module.default[HMR].original);
  });
}
var BuildingAdd_default = BuildingAdd;
mark_module_end(BuildingAdd);

// node_modules/svelte-bootstrap-icons/lib/BuildingCheck.svelte
mark_module_start();
BuildingCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingCheck.svelte";
var root326 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.708l.547.548 1.17-1.951a.5.5 0 1 1 .858.514Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingCheck[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function BuildingCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingCheck);
  var svg = root326();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingCheck = hmr(BuildingCheck, () => BuildingCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingCheck[HMR].source;
    set(BuildingCheck[HMR].source, module.default[HMR].original);
  });
}
var BuildingCheck_default = BuildingCheck;
mark_module_end(BuildingCheck);

// node_modules/svelte-bootstrap-icons/lib/BuildingDash.svelte
mark_module_start();
BuildingDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingDash.svelte";
var root327 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7ZM11 12h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingDash[FILENAME], [
  [
    1,
    0,
    [[1, 174], [2, 2], [3, 2]]
  ]
]);
function BuildingDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingDash);
  var svg = root327();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingDash = hmr(BuildingDash, () => BuildingDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingDash[HMR].source;
    set(BuildingDash[HMR].source, module.default[HMR].original);
  });
}
var BuildingDash_default = BuildingDash;
mark_module_end(BuildingDash);

// node_modules/svelte-bootstrap-icons/lib/BuildingDown.svelte
mark_module_start();
BuildingDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingDown.svelte";
var root328 = add_locations(ns_template(`<svg><!><path d="M12.5 9a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7Zm.354 5.854 1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V10.5a.5.5 0 0 0-1 0v2.793l-.646-.647a.5.5 0 0 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingDown[FILENAME], [
  [
    1,
    0,
    [[1, 174], [2, 2], [3, 2]]
  ]
]);
function BuildingDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingDown);
  var svg = root328();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingDown = hmr(BuildingDown, () => BuildingDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingDown[HMR].source;
    set(BuildingDown[HMR].source, module.default[HMR].original);
  });
}
var BuildingDown_default = BuildingDown;
mark_module_end(BuildingDown);

// node_modules/svelte-bootstrap-icons/lib/BuildingExclamation.svelte
mark_module_start();
BuildingExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingExclamation.svelte";
var root329 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm8.5 4.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1.5a.5.5 0 0 0 1 0V11a.5.5 0 0 0-.5-.5Zm0 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path></svg>`), BuildingExclamation[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function BuildingExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingExclamation);
  var svg = root329();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingExclamation = hmr(BuildingExclamation, () => BuildingExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingExclamation[HMR].source;
    set(BuildingExclamation[HMR].source, module.default[HMR].original);
  });
}
var BuildingExclamation_default = BuildingExclamation;
mark_module_end(BuildingExclamation);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillAdd.svelte
mark_module_start();
BuildingFillAdd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillAdd.svelte";
var root330 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.256A4.493 4.493 0 0 0 12.5 8a4.493 4.493 0 0 0-3.59 1.787A.498.498 0 0 0 9 9.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .39-.187A4.476 4.476 0 0 0 8.027 12H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingFillAdd[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function BuildingFillAdd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillAdd);
  var svg = root330();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-add", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillAdd = hmr(BuildingFillAdd, () => BuildingFillAdd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillAdd[HMR].source;
    set(BuildingFillAdd[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillAdd_default = BuildingFillAdd;
mark_module_end(BuildingFillAdd);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillCheck.svelte
mark_module_start();
BuildingFillCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillCheck.svelte";
var root331 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.708l.547.548 1.17-1.951a.5.5 0 1 1 .858.514Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.256A4.493 4.493 0 0 0 12.5 8a4.493 4.493 0 0 0-3.59 1.787A.498.498 0 0 0 9 9.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .39-.187A4.476 4.476 0 0 0 8.027 12H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingFillCheck[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function BuildingFillCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillCheck);
  var svg = root331();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillCheck = hmr(BuildingFillCheck, () => BuildingFillCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillCheck[HMR].source;
    set(BuildingFillCheck[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillCheck_default = BuildingFillCheck;
mark_module_end(BuildingFillCheck);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillDash.svelte
mark_module_start();
BuildingFillDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillDash.svelte";
var root332 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7ZM11 12h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.256A4.493 4.493 0 0 0 12.5 8a4.493 4.493 0 0 0-3.59 1.787A.498.498 0 0 0 9 9.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .39-.187A4.476 4.476 0 0 0 8.027 12H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingFillDash[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function BuildingFillDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillDash);
  var svg = root332();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillDash = hmr(BuildingFillDash, () => BuildingFillDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillDash[HMR].source;
    set(BuildingFillDash[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillDash_default = BuildingFillDash;
mark_module_end(BuildingFillDash);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillDown.svelte
mark_module_start();
BuildingFillDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillDown.svelte";
var root333 = add_locations(ns_template(`<svg><!><path d="M12.5 9a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7Zm.354 5.854 1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V10.5a.5.5 0 0 0-1 0v2.793l-.646-.647a.5.5 0 0 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.256A4.493 4.493 0 0 0 12.5 8a4.493 4.493 0 0 0-3.59 1.787A.498.498 0 0 0 9 9.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .39-.187A4.476 4.476 0 0 0 8.027 12H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingFillDown[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function BuildingFillDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillDown);
  var svg = root333();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillDown = hmr(BuildingFillDown, () => BuildingFillDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillDown[HMR].source;
    set(BuildingFillDown[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillDown_default = BuildingFillDown;
mark_module_end(BuildingFillDown);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillExclamation.svelte
mark_module_start();
BuildingFillExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillExclamation.svelte";
var root334 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.256A4.493 4.493 0 0 0 12.5 8a4.493 4.493 0 0 0-3.59 1.787A.498.498 0 0 0 9 9.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .39-.187A4.476 4.476 0 0 0 8.027 12H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1.5a.5.5 0 0 0 1 0V11a.5.5 0 0 0-.5-.5Zm0 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path></svg>`), BuildingFillExclamation[FILENAME], [
  [1, 0, [[1, 186], [2, 2]]]
]);
function BuildingFillExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillExclamation);
  var svg = root334();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillExclamation = hmr(BuildingFillExclamation, () => BuildingFillExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillExclamation[HMR].source;
    set(BuildingFillExclamation[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillExclamation_default = BuildingFillExclamation;
mark_module_end(BuildingFillExclamation);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillGear.svelte
mark_module_start();
BuildingFillGear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillGear.svelte";
var root335 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.256A4.493 4.493 0 0 0 12.5 8a4.493 4.493 0 0 0-3.59 1.787A.498.498 0 0 0 9 9.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .39-.187A4.476 4.476 0 0 0 8.027 12H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path><path d="M11.886 9.46c.18-.613 1.048-.613 1.229 0l.043.148a.64.64 0 0 0 .921.382l.136-.074c.561-.306 1.175.308.87.869l-.075.136a.64.64 0 0 0 .382.92l.149.045c.612.18.612 1.048 0 1.229l-.15.043a.64.64 0 0 0-.38.921l.074.136c.305.561-.309 1.175-.87.87l-.136-.075a.64.64 0 0 0-.92.382l-.045.149c-.18.612-1.048.612-1.229 0l-.043-.15a.64.64 0 0 0-.921-.38l-.136.074c-.561.305-1.175-.309-.87-.87l.075-.136a.64.64 0 0 0-.382-.92l-.148-.045c-.613-.18-.613-1.048 0-1.229l.148-.043a.64.64 0 0 0 .382-.921l-.074-.136c-.306-.561.308-1.175.869-.87l.136.075a.64.64 0 0 0 .92-.382l.045-.148ZM14 12.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0Z"></path></svg>`), BuildingFillGear[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function BuildingFillGear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillGear);
  var svg = root335();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-gear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillGear = hmr(BuildingFillGear, () => BuildingFillGear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillGear[HMR].source;
    set(BuildingFillGear[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillGear_default = BuildingFillGear;
mark_module_end(BuildingFillGear);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillLock.svelte
mark_module_start();
BuildingFillLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillLock.svelte";
var root336 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.764a3 3 0 0 0-4.989 2.497 2.01 2.01 0 0 0-.743.739H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Z"></path><path d="M9 13a1 1 0 0 1 1-1v-1a2 2 0 1 1 4 0v1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2Zm3-3a1 1 0 0 0-1 1v1h2v-1a1 1 0 0 0-1-1Z"></path></svg>`), BuildingFillLock[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function BuildingFillLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillLock);
  var svg = root336();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillLock = hmr(BuildingFillLock, () => BuildingFillLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillLock[HMR].source;
    set(BuildingFillLock[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillLock_default = BuildingFillLock;
mark_module_end(BuildingFillLock);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillSlash.svelte
mark_module_start();
BuildingFillSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillSlash.svelte";
var root337 = add_locations(ns_template(`<svg><!><path d="M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.256A4.493 4.493 0 0 0 12.5 8a4.493 4.493 0 0 0-3.59 1.787A.498.498 0 0 0 9 9.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .39-.187A4.476 4.476 0 0 0 8.027 12H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingFillSlash[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function BuildingFillSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillSlash);
  var svg = root337();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillSlash = hmr(BuildingFillSlash, () => BuildingFillSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillSlash[HMR].source;
    set(BuildingFillSlash[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillSlash_default = BuildingFillSlash;
mark_module_end(BuildingFillSlash);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillUp.svelte
mark_module_start();
BuildingFillUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillUp.svelte";
var root338 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.854 1.5 1.5a.5.5 0 0 1-.708.708L13 11.707V14.5a.5.5 0 0 1-1 0v-2.793l-.646.647a.5.5 0 0 1-.708-.708l1.5-1.5a.5.5 0 0 1 .708 0Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.256A4.493 4.493 0 0 0 12.5 8a4.493 4.493 0 0 0-3.59 1.787A.498.498 0 0 0 9 9.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .39-.187A4.476 4.476 0 0 0 8.027 12H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingFillUp[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function BuildingFillUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillUp);
  var svg = root338();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillUp = hmr(BuildingFillUp, () => BuildingFillUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillUp[HMR].source;
    set(BuildingFillUp[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillUp_default = BuildingFillUp;
mark_module_end(BuildingFillUp);

// node_modules/svelte-bootstrap-icons/lib/BuildingFillX.svelte
mark_module_start();
BuildingFillX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFillX.svelte";
var root339 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7.256A4.493 4.493 0 0 0 12.5 8a4.493 4.493 0 0 0-3.59 1.787A.498.498 0 0 0 9 9.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .39-.187A4.476 4.476 0 0 0 8.027 12H6.5a.5.5 0 0 0-.5.5V16H3a1 1 0 0 1-1-1V1Zm2 1.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3 0v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm-.646-4.854.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 .708-.708Z"></path></svg>`), BuildingFillX[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function BuildingFillX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFillX);
  var svg = root339();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFillX = hmr(BuildingFillX, () => BuildingFillX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFillX[HMR].source;
    set(BuildingFillX[HMR].source, module.default[HMR].original);
  });
}
var BuildingFillX_default = BuildingFillX;
mark_module_end(BuildingFillX);

// node_modules/svelte-bootstrap-icons/lib/BuildingFill.svelte
mark_module_start();
BuildingFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingFill.svelte";
var root340 = add_locations(ns_template(`<svg><!><path d="M3 0a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h3v-3.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5V16h3a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1H3Zm1 2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3.5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5ZM4 5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM7.5 5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM4.5 8h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3.5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Z"></path></svg>`), BuildingFill[FILENAME], [[1, 0, [[1, 174]]]]);
function BuildingFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingFill);
  var svg = root340();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingFill = hmr(BuildingFill, () => BuildingFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingFill[HMR].source;
    set(BuildingFill[HMR].source, module.default[HMR].original);
  });
}
var BuildingFill_default = BuildingFill;
mark_module_end(BuildingFill);

// node_modules/svelte-bootstrap-icons/lib/BuildingGear.svelte
mark_module_start();
BuildingGear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingGear.svelte";
var root341 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm4.386 1.46c.18-.613 1.048-.613 1.229 0l.043.148a.64.64 0 0 0 .921.382l.136-.074c.561-.306 1.175.308.87.869l-.075.136a.64.64 0 0 0 .382.92l.149.045c.612.18.612 1.048 0 1.229l-.15.043a.64.64 0 0 0-.38.921l.074.136c.305.561-.309 1.175-.87.87l-.136-.075a.64.64 0 0 0-.92.382l-.045.149c-.18.612-1.048.612-1.229 0l-.043-.15a.64.64 0 0 0-.921-.38l-.136.074c-.561.305-1.175-.309-.87-.87l.075-.136a.64.64 0 0 0-.382-.92l-.148-.045c-.613-.18-.613-1.048 0-1.229l.148-.043a.64.64 0 0 0 .382-.921l-.074-.136c-.306-.561.308-1.175.869-.87l.136.075a.64.64 0 0 0 .92-.382l.045-.148ZM14 12.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0Z"></path></svg>`), BuildingGear[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BuildingGear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingGear);
  var svg = root341();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-gear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingGear = hmr(BuildingGear, () => BuildingGear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingGear[HMR].source;
    set(BuildingGear[HMR].source, module.default[HMR].original);
  });
}
var BuildingGear_default = BuildingGear;
mark_module_end(BuildingGear);

// node_modules/svelte-bootstrap-icons/lib/BuildingLock.svelte
mark_module_start();
BuildingLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingLock.svelte";
var root342 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM9 13a1 1 0 0 1 1-1v-1a2 2 0 1 1 4 0v1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2Zm3-3a1 1 0 0 0-1 1v1h2v-1a1 1 0 0 0-1-1Z"></path></svg>`), BuildingLock[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function BuildingLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingLock);
  var svg = root342();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingLock = hmr(BuildingLock, () => BuildingLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingLock[HMR].source;
    set(BuildingLock[HMR].source, module.default[HMR].original);
  });
}
var BuildingLock_default = BuildingLock;
mark_module_end(BuildingLock);

// node_modules/svelte-bootstrap-icons/lib/BuildingSlash.svelte
mark_module_start();
BuildingSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingSlash.svelte";
var root343 = add_locations(ns_template(`<svg><!><path d="M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingSlash[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function BuildingSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingSlash);
  var svg = root343();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingSlash = hmr(BuildingSlash, () => BuildingSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingSlash[HMR].source;
    set(BuildingSlash[HMR].source, module.default[HMR].original);
  });
}
var BuildingSlash_default = BuildingSlash;
mark_module_end(BuildingSlash);

// node_modules/svelte-bootstrap-icons/lib/BuildingUp.svelte
mark_module_start();
BuildingUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingUp.svelte";
var root344 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.854 1.5 1.5a.5.5 0 0 1-.708.708L13 11.707V14.5a.5.5 0 0 1-1 0v-2.793l-.646.647a.5.5 0 0 1-.708-.708l1.5-1.5a.5.5 0 0 1 .708 0Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), BuildingUp[FILENAME], [
  [
    1,
    0,
    [[1, 172], [2, 2], [3, 2]]
  ]
]);
function BuildingUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingUp);
  var svg = root344();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingUp = hmr(BuildingUp, () => BuildingUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingUp[HMR].source;
    set(BuildingUp[HMR].source, module.default[HMR].original);
  });
}
var BuildingUp_default = BuildingUp;
mark_module_end(BuildingUp);

// node_modules/svelte-bootstrap-icons/lib/BuildingX.svelte
mark_module_start();
BuildingX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingX.svelte";
var root345 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6.5a.5.5 0 0 1-1 0V1H3v14h3v-2.5a.5.5 0 0 1 .5-.5H8v4H3a1 1 0 0 1-1-1V1Z"></path><path d="M4.5 2a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm-6 3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm5 8a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm-.646-4.854.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 .708-.708Z"></path></svg>`), BuildingX[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function BuildingX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingX);
  var svg = root345();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingX = hmr(BuildingX, () => BuildingX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingX[HMR].source;
    set(BuildingX[HMR].source, module.default[HMR].original);
  });
}
var BuildingX_default = BuildingX;
mark_module_end(BuildingX);

// node_modules/svelte-bootstrap-icons/lib/Building.svelte
mark_module_start();
Building[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Building.svelte";
var root346 = add_locations(ns_template(`<svg><!><path d="M4 2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V1Zm11 0H3v14h3v-2.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5V15h3V1Z"></path></svg>`), Building[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Building($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Building);
  var svg = root346();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-building", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Building = hmr(Building, () => Building[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Building[HMR].source;
    set(Building[HMR].source, module.default[HMR].original);
  });
}
var Building_default = Building;
mark_module_end(Building);

// node_modules/svelte-bootstrap-icons/lib/BuildingsFill.svelte
mark_module_start();
BuildingsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BuildingsFill.svelte";
var root347 = add_locations(ns_template(`<svg><!><path d="M15 .5a.5.5 0 0 0-.724-.447l-8 4A.5.5 0 0 0 6 4.5v3.14L.342 9.526A.5.5 0 0 0 0 10v5.5a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5V14h1v1.5a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5V.5ZM2 11h1v1H2v-1Zm2 0h1v1H4v-1Zm-1 2v1H2v-1h1Zm1 0h1v1H4v-1Zm9-10v1h-1V3h1ZM8 5h1v1H8V5Zm1 2v1H8V7h1ZM8 9h1v1H8V9Zm2 0h1v1h-1V9Zm-1 2v1H8v-1h1Zm1 0h1v1h-1v-1Zm3-2v1h-1V9h1Zm-1 2h1v1h-1v-1Zm-2-4h1v1h-1V7Zm3 0v1h-1V7h1Zm-2-2v1h-1V5h1Zm1 0h1v1h-1V5Z"></path></svg>`), BuildingsFill[FILENAME], [[1, 0, [[1, 175]]]]);
function BuildingsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BuildingsFill);
  var svg = root347();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-buildings-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BuildingsFill = hmr(BuildingsFill, () => BuildingsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BuildingsFill[HMR].source;
    set(BuildingsFill[HMR].source, module.default[HMR].original);
  });
}
var BuildingsFill_default = BuildingsFill;
mark_module_end(BuildingsFill);

// node_modules/svelte-bootstrap-icons/lib/Buildings.svelte
mark_module_start();
Buildings[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Buildings.svelte";
var root348 = add_locations(ns_template(`<svg><!><path d="M14.763.075A.5.5 0 0 1 15 .5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V14h-1v1.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V10a.5.5 0 0 1 .342-.474L6 7.64V4.5a.5.5 0 0 1 .276-.447l8-4a.5.5 0 0 1 .487.022ZM6 8.694 1 10.36V15h5V8.694ZM7 15h2v-1.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5V15h2V1.309l-7 3.5V15Z"></path><path d="M2 11h1v1H2v-1Zm2 0h1v1H4v-1Zm-2 2h1v1H2v-1Zm2 0h1v1H4v-1Zm4-4h1v1H8V9Zm2 0h1v1h-1V9Zm-2 2h1v1H8v-1Zm2 0h1v1h-1v-1Zm2-2h1v1h-1V9Zm0 2h1v1h-1v-1ZM8 7h1v1H8V7Zm2 0h1v1h-1V7Zm2 0h1v1h-1V7ZM8 5h1v1H8V5Zm2 0h1v1h-1V5Zm2 0h1v1h-1V5Zm0-2h1v1h-1V3Z"></path></svg>`), Buildings[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Buildings($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Buildings);
  var svg = root348();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-buildings", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Buildings = hmr(Buildings, () => Buildings[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Buildings[HMR].source;
    set(Buildings[HMR].source, module.default[HMR].original);
  });
}
var Buildings_default = Buildings;
mark_module_end(Buildings);

// node_modules/svelte-bootstrap-icons/lib/Bullseye.svelte
mark_module_start();
Bullseye[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Bullseye.svelte";
var root349 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M8 13A5 5 0 1 1 8 3a5 5 0 0 1 0 10zm0 1A6 6 0 1 0 8 2a6 6 0 0 0 0 12z"></path><path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8z"></path><path d="M9.5 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path></svg>`), Bullseye[FILENAME], [
  [
    1,
    0,
    [
      [1, 169],
      [2, 2],
      [3, 2],
      [4, 2]
    ]
  ]
]);
function Bullseye($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Bullseye);
  var svg = root349();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(4);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bullseye", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bullseye = hmr(Bullseye, () => Bullseye[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bullseye[HMR].source;
    set(Bullseye[HMR].source, module.default[HMR].original);
  });
}
var Bullseye_default = Bullseye;
mark_module_end(Bullseye);

// node_modules/svelte-bootstrap-icons/lib/BusFrontFill.svelte
mark_module_start();
BusFrontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BusFrontFill.svelte";
var root350 = add_locations(ns_template(`<svg><!><path d="M16 7a1 1 0 0 1-1 1v3.5c0 .818-.393 1.544-1 2v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5V14H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2a2.496 2.496 0 0 1-1-2V8a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1V2.64C1 1.452 1.845.408 3.064.268A43.608 43.608 0 0 1 8 0c2.1 0 3.792.136 4.936.268C14.155.408 15 1.452 15 2.64V4a1 1 0 0 1 1 1v2ZM3.552 3.22A43.306 43.306 0 0 1 8 3c1.837 0 3.353.107 4.448.22a.5.5 0 0 0 .104-.994A44.304 44.304 0 0 0 8 2c-1.876 0-3.426.109-4.552.226a.5.5 0 1 0 .104.994ZM8 4c-1.876 0-3.426.109-4.552.226A.5.5 0 0 0 3 4.723v3.554a.5.5 0 0 0 .448.497C4.574 8.891 6.124 9 8 9c1.876 0 3.426-.109 4.552-.226A.5.5 0 0 0 13 8.277V4.723a.5.5 0 0 0-.448-.497A44.304 44.304 0 0 0 8 4Zm-3 7a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm8 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm-7 0a1 1 0 0 0 1 1h2a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z"></path></svg>`), BusFrontFill[FILENAME], [[1, 0, [[1, 175]]]]);
function BusFrontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BusFrontFill);
  var svg = root350();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bus-front-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BusFrontFill = hmr(BusFrontFill, () => BusFrontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BusFrontFill[HMR].source;
    set(BusFrontFill[HMR].source, module.default[HMR].original);
  });
}
var BusFrontFill_default = BusFrontFill;
mark_module_end(BusFrontFill);

// node_modules/svelte-bootstrap-icons/lib/BusFront.svelte
mark_module_start();
BusFront[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/BusFront.svelte";
var root351 = add_locations(ns_template(`<svg><!><path d="M5 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm8 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-6-1a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H7Zm1-6c-1.876 0-3.426.109-4.552.226A.5.5 0 0 0 3 4.723v3.554a.5.5 0 0 0 .448.497C4.574 8.891 6.124 9 8 9c1.876 0 3.426-.109 4.552-.226A.5.5 0 0 0 13 8.277V4.723a.5.5 0 0 0-.448-.497A44.303 44.303 0 0 0 8 4Zm0-1c-1.837 0-3.353.107-4.448.22a.5.5 0 1 1-.104-.994A44.304 44.304 0 0 1 8 2c1.876 0 3.426.109 4.552.226a.5.5 0 1 1-.104.994A43.306 43.306 0 0 0 8 3Z"></path><path d="M15 8a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1V2.64c0-1.188-.845-2.232-2.064-2.372A43.61 43.61 0 0 0 8 0C5.9 0 4.208.136 3.064.268 1.845.408 1 1.452 1 2.64V4a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1v3.5c0 .818.393 1.544 1 2v2a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5V14h6v1.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-2c.607-.456 1-1.182 1-2V8ZM8 1c2.056 0 3.71.134 4.822.261.676.078 1.178.66 1.178 1.379v8.86a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 11.5V2.64c0-.72.502-1.301 1.178-1.379A42.611 42.611 0 0 1 8 1Z"></path></svg>`), BusFront[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function BusFront($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, BusFront);
  var svg = root351();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-bus-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BusFront = hmr(BusFront, () => BusFront[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BusFront[HMR].source;
    set(BusFront[HMR].source, module.default[HMR].original);
  });
}
var BusFront_default = BusFront;
mark_module_end(BusFront);

// node_modules/svelte-bootstrap-icons/lib/CCircleFill.svelte
mark_module_start();
CCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CCircleFill.svelte";
var root352 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM8.146 4.992c.961 0 1.641.633 1.729 1.512h1.295v-.088c-.094-1.518-1.348-2.572-3.03-2.572-2.068 0-3.269 1.377-3.269 3.638v1.073c0 2.267 1.178 3.603 3.27 3.603 1.675 0 2.93-1.02 3.029-2.467v-.093H9.875c-.088.832-.75 1.418-1.729 1.418-1.224 0-1.927-.891-1.927-2.461v-1.06c0-1.583.715-2.503 1.927-2.503Z"></path></svg>`), CCircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function CCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CCircleFill);
  var svg = root352();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-c-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CCircleFill = hmr(CCircleFill, () => CCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CCircleFill[HMR].source;
    set(CCircleFill[HMR].source, module.default[HMR].original);
  });
}
var CCircleFill_default = CCircleFill;
mark_module_end(CCircleFill);

// node_modules/svelte-bootstrap-icons/lib/CCircle.svelte
mark_module_start();
CCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CCircle.svelte";
var root353 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM8.146 4.992c-1.212 0-1.927.92-1.927 2.502v1.06c0 1.571.703 2.462 1.927 2.462.979 0 1.641-.586 1.729-1.418h1.295v.093c-.1 1.448-1.354 2.467-3.03 2.467-2.091 0-3.269-1.336-3.269-3.603V7.482c0-2.261 1.201-3.638 3.27-3.638 1.681 0 2.935 1.054 3.029 2.572v.088H9.875c-.088-.879-.768-1.512-1.729-1.512Z"></path></svg>`), CCircle[FILENAME], [[1, 0, [[1, 169]]]]);
function CCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CCircle);
  var svg = root353();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-c-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CCircle = hmr(CCircle, () => CCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CCircle[HMR].source;
    set(CCircle[HMR].source, module.default[HMR].original);
  });
}
var CCircle_default = CCircle;
mark_module_end(CCircle);

// node_modules/svelte-bootstrap-icons/lib/CSquareFill.svelte
mark_module_start();
CSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CSquareFill.svelte";
var root354 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm6.146 4.992c-1.212 0-1.927.92-1.927 2.502v1.06c0 1.571.703 2.462 1.927 2.462.979 0 1.641-.586 1.729-1.418h1.295v.093c-.1 1.448-1.354 2.467-3.03 2.467-2.091 0-3.269-1.336-3.269-3.603V7.482c0-2.261 1.201-3.638 3.27-3.638 1.681 0 2.935 1.054 3.029 2.572v.088H9.875c-.088-.879-.768-1.512-1.729-1.512Z"></path></svg>`), CSquareFill[FILENAME], [[1, 0, [[1, 174]]]]);
function CSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CSquareFill);
  var svg = root354();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-c-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CSquareFill = hmr(CSquareFill, () => CSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CSquareFill[HMR].source;
    set(CSquareFill[HMR].source, module.default[HMR].original);
  });
}
var CSquareFill_default = CSquareFill;
mark_module_end(CSquareFill);

// node_modules/svelte-bootstrap-icons/lib/CSquare.svelte
mark_module_start();
CSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CSquare.svelte";
var root355 = add_locations(ns_template(`<svg><!><path d="M8.146 4.992c-1.212 0-1.927.92-1.927 2.502v1.06c0 1.571.703 2.462 1.927 2.462.979 0 1.641-.586 1.729-1.418h1.295v.093c-.1 1.448-1.354 2.467-3.03 2.467-2.091 0-3.269-1.336-3.269-3.603V7.482c0-2.261 1.201-3.638 3.27-3.638 1.681 0 2.935 1.054 3.029 2.572v.088H9.875c-.088-.879-.768-1.512-1.729-1.512Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), CSquare[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function CSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CSquare);
  var svg = root355();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-c-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CSquare = hmr(CSquare, () => CSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CSquare[HMR].source;
    set(CSquare[HMR].source, module.default[HMR].original);
  });
}
var CSquare_default = CSquare;
mark_module_end(CSquare);

// node_modules/svelte-bootstrap-icons/lib/CakeFill.svelte
mark_module_start();
CakeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CakeFill.svelte";
var root356 = add_locations(ns_template(`<svg><!><path d="m7.399.804.595-.792.598.79A.747.747 0 0 1 8.5 1.806V4H11a2 2 0 0 1 2 2v3h1a2 2 0 0 1 2 2v4a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1v-4a2 2 0 0 1 2-2h1V6a2 2 0 0 1 2-2h2.5V1.813a.747.747 0 0 1-.101-1.01ZM12 6.414a.911.911 0 0 1-.646-.268 1.914 1.914 0 0 0-2.708 0 .914.914 0 0 1-1.292 0 1.914 1.914 0 0 0-2.708 0A.911.911 0 0 1 4 6.414v1c.49 0 .98-.187 1.354-.56a.914.914 0 0 1 1.292 0c.748.747 1.96.747 2.708 0a.914.914 0 0 1 1.292 0c.374.373.864.56 1.354.56v-1Zm2.646 5.732a.914.914 0 0 1-1.293 0 1.914 1.914 0 0 0-2.707 0 .914.914 0 0 1-1.292 0 1.914 1.914 0 0 0-2.708 0 .914.914 0 0 1-1.292 0 1.914 1.914 0 0 0-2.708 0 .914.914 0 0 1-1.292 0L1 11.793v1.34c.737.452 1.715.36 2.354-.28a.914.914 0 0 1 1.292 0c.748.748 1.96.748 2.708 0a.914.914 0 0 1 1.292 0c.748.748 1.96.748 2.707 0a.914.914 0 0 1 1.293 0 1.915 1.915 0 0 0 2.354.28v-1.34l-.354.354Z"></path></svg>`), CakeFill[FILENAME], [[1, 0, [[1, 170]]]]);
function CakeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CakeFill);
  var svg = root356();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cake-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CakeFill = hmr(CakeFill, () => CakeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CakeFill[HMR].source;
    set(CakeFill[HMR].source, module.default[HMR].original);
  });
}
var CakeFill_default = CakeFill;
mark_module_end(CakeFill);

// node_modules/svelte-bootstrap-icons/lib/Cake.svelte
mark_module_start();
Cake[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cake.svelte";
var root357 = add_locations(ns_template(`<svg><!><path d="m7.994.013-.595.79a.747.747 0 0 0 .101 1.01V4H5a2 2 0 0 0-2 2v3H2a2 2 0 0 0-2 2v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a2 2 0 0 0-2-2h-1V6a2 2 0 0 0-2-2H8.5V1.806A.747.747 0 0 0 8.592.802l-.598-.79ZM4 6a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v.414a.911.911 0 0 1-.646-.268 1.914 1.914 0 0 0-2.708 0 .914.914 0 0 1-1.292 0 1.914 1.914 0 0 0-2.708 0A.911.911 0 0 1 4 6.414V6Zm0 1.414c.49 0 .98-.187 1.354-.56a.914.914 0 0 1 1.292 0c.748.747 1.96.747 2.708 0a.914.914 0 0 1 1.292 0c.374.373.864.56 1.354.56V9H4V7.414ZM1 11a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v.793l-.354.354a.914.914 0 0 1-1.293 0 1.914 1.914 0 0 0-2.707 0 .914.914 0 0 1-1.292 0 1.914 1.914 0 0 0-2.708 0 .914.914 0 0 1-1.292 0 1.914 1.914 0 0 0-2.708 0 .914.914 0 0 1-1.292 0L1 11.793V11Zm11.646 1.854a1.915 1.915 0 0 0 2.354.279V15H1v-1.867c.737.452 1.715.36 2.354-.28a.914.914 0 0 1 1.292 0c.748.748 1.96.748 2.708 0a.914.914 0 0 1 1.292 0c.748.748 1.96.748 2.707 0a.914.914 0 0 1 1.293 0Z"></path></svg>`), Cake[FILENAME], [[1, 0, [[1, 165]]]]);
function Cake($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cake);
  var svg = root357();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cake", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cake = hmr(Cake, () => Cake[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cake[HMR].source;
    set(Cake[HMR].source, module.default[HMR].original);
  });
}
var Cake_default = Cake;
mark_module_end(Cake);

// node_modules/svelte-bootstrap-icons/lib/Cake2Fill.svelte
mark_module_start();
Cake2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cake2Fill.svelte";
var root358 = add_locations(ns_template(`<svg><!><path d="m2.899.804.595-.792.598.79A.747.747 0 0 1 4 1.806v4.886c-.354-.06-.689-.127-1-.201V1.813a.747.747 0 0 1-.1-1.01ZM13 1.806v4.685a15.19 15.19 0 0 1-1 .201v-4.88a.747.747 0 0 1-.1-1.007l.595-.792.598.79A.746.746 0 0 1 13 1.806Zm-3 0a.746.746 0 0 0 .092-1.004l-.598-.79-.595.792A.747.747 0 0 0 9 1.813v5.17c.341-.013.675-.031 1-.055V1.806Zm-3 0v5.176c-.341-.012-.675-.03-1-.054V1.813a.747.747 0 0 1-.1-1.01l.595-.79.598.789A.747.747 0 0 1 7 1.806Z"></path><path d="M4.5 6.988V4.226a22.6 22.6 0 0 1 1-.114V7.16c0 .131.101.24.232.25l.231.017c.332.024.672.043 1.02.055l.258.01a.25.25 0 0 0 .26-.25V4.003a29.015 29.015 0 0 1 1 0V7.24a.25.25 0 0 0 .258.25l.259-.009c.347-.012.687-.03 1.019-.055l.231-.017a.25.25 0 0 0 .232-.25V4.112c.345.031.679.07 1 .114v2.762a.25.25 0 0 0 .292.246l.291-.049c.364-.061.71-.13 1.033-.208l.192-.046a.25.25 0 0 0 .192-.243V4.621c.672.184 1.251.409 1.677.678.415.261.823.655.823 1.2V13.5c0 .546-.408.94-.823 1.201-.44.278-1.043.51-1.745.696-1.41.376-3.33.603-5.432.603-2.102 0-4.022-.227-5.432-.603-.702-.187-1.305-.418-1.745-.696C.408 14.44 0 14.046 0 13.5v-7c0-.546.408-.94.823-1.201.426-.269 1.005-.494 1.677-.678v2.067c0 .116.08.216.192.243l.192.046c.323.077.669.147 1.033.208l.292.05a.25.25 0 0 0 .291-.247ZM1 8.82v1.659a1.935 1.935 0 0 0 2.298.43.935.935 0 0 1 1.08.175l.348.349a2 2 0 0 0 2.615.185l.059-.044a1 1 0 0 1 1.2 0l.06.044a2 2 0 0 0 2.613-.185l.348-.348a.938.938 0 0 1 1.082-.175c.781.39 1.718.208 2.297-.426V8.833l-.68.907a.938.938 0 0 1-1.17.276 1.938 1.938 0 0 0-2.236.363l-.348.348a1 1 0 0 1-1.307.092l-.06-.044a2 2 0 0 0-2.399 0l-.06.044a1 1 0 0 1-1.306-.092l-.35-.35a1.935 1.935 0 0 0-2.233-.362.935.935 0 0 1-1.168-.277L1 8.82Z"></path></svg>`), Cake2Fill[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Cake2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cake2Fill);
  var svg = root358();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cake2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cake2Fill = hmr(Cake2Fill, () => Cake2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cake2Fill[HMR].source;
    set(Cake2Fill[HMR].source, module.default[HMR].original);
  });
}
var Cake2Fill_default = Cake2Fill;
mark_module_end(Cake2Fill);

// node_modules/svelte-bootstrap-icons/lib/Cake2.svelte
mark_module_start();
Cake2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cake2.svelte";
var root359 = add_locations(ns_template(`<svg><!><path d="m3.494.013-.595.79A.747.747 0 0 0 3 1.814v2.683c-.149.034-.293.07-.432.107-.702.187-1.305.418-1.745.696C.408 5.56 0 5.954 0 6.5v7c0 .546.408.94.823 1.201.44.278 1.043.51 1.745.696C3.978 15.773 5.898 16 8 16c2.102 0 4.022-.227 5.432-.603.701-.187 1.305-.418 1.745-.696.415-.261.823-.655.823-1.201v-7c0-.546-.408-.94-.823-1.201-.44-.278-1.043-.51-1.745-.696A12.418 12.418 0 0 0 13 4.496v-2.69a.747.747 0 0 0 .092-1.004l-.598-.79-.595.792A.747.747 0 0 0 12 1.813V4.3a22.03 22.03 0 0 0-2-.23V1.806a.747.747 0 0 0 .092-1.004l-.598-.79-.595.792A.747.747 0 0 0 9 1.813v2.204a28.708 28.708 0 0 0-2 0V1.806A.747.747 0 0 0 7.092.802l-.598-.79-.595.792A.747.747 0 0 0 6 1.813V4.07c-.71.05-1.383.129-2 .23V1.806A.747.747 0 0 0 4.092.802l-.598-.79Zm-.668 5.556L3 5.524v.967c.311.074.646.141 1 .201V5.315a21.05 21.05 0 0 1 2-.242v1.855c.325.024.659.042 1 .054V5.018a27.685 27.685 0 0 1 2 0v1.964c.341-.012.675-.03 1-.054V5.073c.72.054 1.393.137 2 .242v1.377c.354-.06.689-.127 1-.201v-.967l.175.045c.655.175 1.15.374 1.469.575.344.217.356.35.356.356 0 .006-.012.139-.356.356-.319.2-.814.4-1.47.575C11.87 7.78 10.041 8 8 8c-2.04 0-3.87-.221-5.174-.569-.656-.175-1.151-.374-1.47-.575C1.012 6.639 1 6.506 1 6.5c0-.006.012-.139.356-.356.319-.2.814-.4 1.47-.575ZM15 7.806v1.027l-.68.907a.938.938 0 0 1-1.17.276 1.938 1.938 0 0 0-2.236.363l-.348.348a1 1 0 0 1-1.307.092l-.06-.044a2 2 0 0 0-2.399 0l-.06.044a1 1 0 0 1-1.306-.092l-.35-.35a1.935 1.935 0 0 0-2.233-.362.935.935 0 0 1-1.168-.277L1 8.82V7.806c.42.232.956.428 1.568.591C3.978 8.773 5.898 9 8 9c2.102 0 4.022-.227 5.432-.603.612-.163 1.149-.36 1.568-.591Zm0 2.679V13.5c0 .006-.012.139-.356.355-.319.202-.814.401-1.47.576C11.87 14.78 10.041 15 8 15c-2.04 0-3.87-.221-5.174-.569-.656-.175-1.151-.374-1.47-.575-.344-.217-.356-.35-.356-.356v-3.02a1.935 1.935 0 0 0 2.298.43.935.935 0 0 1 1.08.175l.348.349a2 2 0 0 0 2.615.185l.059-.044a1 1 0 0 1 1.2 0l.06.044a2 2 0 0 0 2.613-.185l.348-.348a.938.938 0 0 1 1.082-.175c.781.39 1.718.208 2.297-.426Z"></path></svg>`), Cake2[FILENAME], [[1, 0, [[1, 166]]]]);
function Cake2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cake2);
  var svg = root359();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cake2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cake2 = hmr(Cake2, () => Cake2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cake2[HMR].source;
    set(Cake2[HMR].source, module.default[HMR].original);
  });
}
var Cake2_default = Cake2;
mark_module_end(Cake2);

// node_modules/svelte-bootstrap-icons/lib/CalculatorFill.svelte
mark_module_start();
CalculatorFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalculatorFill.svelte";
var root360 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm2 .5v2a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5h-7a.5.5 0 0 0-.5.5zm0 4v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5zM4.5 9a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zM4 12.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5zM7.5 6a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zM7 9.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5zm.5 2.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zM10 6.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5zm.5 2.5a.5.5 0 0 0-.5.5v4a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 0-.5-.5h-1z"></path></svg>`), CalculatorFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CalculatorFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalculatorFill);
  var svg = root360();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calculator-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalculatorFill = hmr(CalculatorFill, () => CalculatorFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalculatorFill[HMR].source;
    set(CalculatorFill[HMR].source, module.default[HMR].original);
  });
}
var CalculatorFill_default = CalculatorFill;
mark_module_end(CalculatorFill);

// node_modules/svelte-bootstrap-icons/lib/Calculator.svelte
mark_module_start();
Calculator[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calculator.svelte";
var root361 = add_locations(ns_template(`<svg><!><path d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h8zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z"></path><path d="M4 2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-2zm0 4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-4z"></path></svg>`), Calculator[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Calculator($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calculator);
  var svg = root361();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calculator", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calculator = hmr(Calculator, () => Calculator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calculator[HMR].source;
    set(Calculator[HMR].source, module.default[HMR].original);
  });
}
var Calculator_default = Calculator;
mark_module_end(Calculator);

// node_modules/svelte-bootstrap-icons/lib/CalendarCheckFill.svelte
mark_module_start();
CalendarCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarCheckFill.svelte";
var root362 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2zm-5.146-5.146-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708.708z"></path></svg>`), CalendarCheckFill[FILENAME], [[1, 0, [[1, 180]]]]);
function CalendarCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarCheckFill);
  var svg = root362();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarCheckFill = hmr(CalendarCheckFill, () => CalendarCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarCheckFill[HMR].source;
    set(CalendarCheckFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarCheckFill_default = CalendarCheckFill;
mark_module_end(CalendarCheckFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarCheck.svelte
mark_module_start();
CalendarCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarCheck.svelte";
var root363 = add_locations(ns_template(`<svg><!><path d="M10.854 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarCheck[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function CalendarCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarCheck);
  var svg = root363();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarCheck = hmr(CalendarCheck, () => CalendarCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarCheck[HMR].source;
    set(CalendarCheck[HMR].source, module.default[HMR].original);
  });
}
var CalendarCheck_default = CalendarCheck;
mark_module_end(CalendarCheck);

// node_modules/svelte-bootstrap-icons/lib/CalendarDateFill.svelte
mark_module_start();
CalendarDateFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarDateFill.svelte";
var root364 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zm5.402 9.746c.625 0 1.184-.484 1.184-1.18 0-.832-.527-1.23-1.16-1.23-.586 0-1.168.387-1.168 1.21 0 .817.543 1.2 1.144 1.2z"></path><path d="M16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2zm-6.664-1.21c-1.11 0-1.656-.767-1.703-1.407h.683c.043.37.387.82 1.051.82.844 0 1.301-.848 1.305-2.164h-.027c-.153.414-.637.79-1.383.79-.852 0-1.676-.61-1.676-1.77 0-1.137.871-1.809 1.797-1.809 1.172 0 1.953.734 1.953 2.668 0 1.805-.742 2.871-2 2.871zm-2.89-5.435v5.332H5.77V8.079h-.012c-.29.156-.883.52-1.258.777V8.16a12.6 12.6 0 0 1 1.313-.805h.632z"></path></svg>`), CalendarDateFill[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function CalendarDateFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarDateFill);
  var svg = root364();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-date-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarDateFill = hmr(CalendarDateFill, () => CalendarDateFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarDateFill[HMR].source;
    set(CalendarDateFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarDateFill_default = CalendarDateFill;
mark_module_end(CalendarDateFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarDate.svelte
mark_module_start();
CalendarDate[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarDate.svelte";
var root365 = add_locations(ns_template(`<svg><!><path d="M6.445 11.688V6.354h-.633A12.6 12.6 0 0 0 4.5 7.16v.695c.375-.257.969-.62 1.258-.777h.012v4.61h.675zm1.188-1.305c.047.64.594 1.406 1.703 1.406 1.258 0 2-1.066 2-2.871 0-1.934-.781-2.668-1.953-2.668-.926 0-1.797.672-1.797 1.809 0 1.16.824 1.77 1.676 1.77.746 0 1.23-.376 1.383-.79h.027c-.004 1.316-.461 2.164-1.305 2.164-.664 0-1.008-.45-1.05-.82h-.684zm2.953-2.317c0 .696-.559 1.18-1.184 1.18-.601 0-1.144-.383-1.144-1.2 0-.823.582-1.21 1.168-1.21.633 0 1.16.398 1.16 1.23z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarDate[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function CalendarDate($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarDate);
  var svg = root365();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-date", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarDate = hmr(CalendarDate, () => CalendarDate[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarDate[HMR].source;
    set(CalendarDate[HMR].source, module.default[HMR].original);
  });
}
var CalendarDate_default = CalendarDate;
mark_module_end(CalendarDate);

// node_modules/svelte-bootstrap-icons/lib/CalendarDayFill.svelte
mark_module_start();
CalendarDayFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarDayFill.svelte";
var root366 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 14a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V5h16v9zm-4.785-6.145a.428.428 0 1 0 0-.855.426.426 0 0 0-.43.43c0 .238.192.425.43.425zm.336.563h-.672v4.105h.672V8.418zm-6.867 4.105v-2.3h2.261v-.61H4.684V7.801h2.464v-.61H4v5.332h.684zm3.296 0h.676V9.98c0-.554.227-1.007.953-1.007.125 0 .258.004.329.015v-.613a1.806 1.806 0 0 0-.254-.02c-.582 0-.891.32-1.012.567h-.02v-.504H7.98v4.105z"></path></svg>`), CalendarDayFill[FILENAME], [[1, 0, [[1, 178]]]]);
function CalendarDayFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarDayFill);
  var svg = root366();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-day-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarDayFill = hmr(CalendarDayFill, () => CalendarDayFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarDayFill[HMR].source;
    set(CalendarDayFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarDayFill_default = CalendarDayFill;
mark_module_end(CalendarDayFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarDay.svelte
mark_module_start();
CalendarDay[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarDay.svelte";
var root367 = add_locations(ns_template(`<svg><!><path d="M4.684 11.523v-2.3h2.261v-.61H4.684V6.801h2.464v-.61H4v5.332h.684zm3.296 0h.676V8.98c0-.554.227-1.007.953-1.007.125 0 .258.004.329.015v-.613a1.806 1.806 0 0 0-.254-.02c-.582 0-.891.32-1.012.567h-.02v-.504H7.98v4.105zm2.805-5.093c0 .238.192.425.43.425a.428.428 0 1 0 0-.855.426.426 0 0 0-.43.43zm.094 5.093h.672V7.418h-.672v4.105z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarDay[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function CalendarDay($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarDay);
  var svg = root367();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-day", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarDay = hmr(CalendarDay, () => CalendarDay[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarDay[HMR].source;
    set(CalendarDay[HMR].source, module.default[HMR].original);
  });
}
var CalendarDay_default = CalendarDay;
mark_module_end(CalendarDay);

// node_modules/svelte-bootstrap-icons/lib/CalendarEventFill.svelte
mark_module_start();
CalendarEventFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarEventFill.svelte";
var root368 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2zm-3.5-7h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5z"></path></svg>`), CalendarEventFill[FILENAME], [[1, 0, [[1, 180]]]]);
function CalendarEventFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarEventFill);
  var svg = root368();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-event-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarEventFill = hmr(CalendarEventFill, () => CalendarEventFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarEventFill[HMR].source;
    set(CalendarEventFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarEventFill_default = CalendarEventFill;
mark_module_end(CalendarEventFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarEvent.svelte
mark_module_start();
CalendarEvent[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarEvent.svelte";
var root369 = add_locations(ns_template(`<svg><!><path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarEvent[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function CalendarEvent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarEvent);
  var svg = root369();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-event", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarEvent = hmr(CalendarEvent, () => CalendarEvent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarEvent[HMR].source;
    set(CalendarEvent[HMR].source, module.default[HMR].original);
  });
}
var CalendarEvent_default = CalendarEvent;
mark_module_end(CalendarEvent);

// node_modules/svelte-bootstrap-icons/lib/CalendarFill.svelte
mark_module_start();
CalendarFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarFill.svelte";
var root370 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V5h16V4H0V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5z"></path></svg>`), CalendarFill[FILENAME], [[1, 0, [[1, 174]]]]);
function CalendarFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarFill);
  var svg = root370();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarFill = hmr(CalendarFill, () => CalendarFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarFill[HMR].source;
    set(CalendarFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarFill_default = CalendarFill;
mark_module_end(CalendarFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarHeartFill.svelte
mark_module_start();
CalendarHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarHeartFill.svelte";
var root371 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5ZM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2ZM8 7.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), CalendarHeartFill[FILENAME], [[1, 0, [[1, 180]]]]);
function CalendarHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarHeartFill);
  var svg = root371();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarHeartFill = hmr(CalendarHeartFill, () => CalendarHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarHeartFill[HMR].source;
    set(CalendarHeartFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarHeartFill_default = CalendarHeartFill;
mark_module_end(CalendarHeartFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarHeart.svelte
mark_module_start();
CalendarHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarHeart.svelte";
var root372 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5ZM1 14V4h14v10a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1Zm7-6.507c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), CalendarHeart[FILENAME], [[1, 0, [[1, 175]]]]);
function CalendarHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarHeart);
  var svg = root372();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarHeart = hmr(CalendarHeart, () => CalendarHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarHeart[HMR].source;
    set(CalendarHeart[HMR].source, module.default[HMR].original);
  });
}
var CalendarHeart_default = CalendarHeart;
mark_module_end(CalendarHeart);

// node_modules/svelte-bootstrap-icons/lib/CalendarMinusFill.svelte
mark_module_start();
CalendarMinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarMinusFill.svelte";
var root373 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2zM6 10h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1 0-1z"></path></svg>`), CalendarMinusFill[FILENAME], [[1, 0, [[1, 180]]]]);
function CalendarMinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarMinusFill);
  var svg = root373();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarMinusFill = hmr(CalendarMinusFill, () => CalendarMinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarMinusFill[HMR].source;
    set(CalendarMinusFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarMinusFill_default = CalendarMinusFill;
mark_module_end(CalendarMinusFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarMinus.svelte
mark_module_start();
CalendarMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarMinus.svelte";
var root374 = add_locations(ns_template(`<svg><!><path d="M5.5 9.5A.5.5 0 0 1 6 9h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarMinus[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function CalendarMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarMinus);
  var svg = root374();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarMinus = hmr(CalendarMinus, () => CalendarMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarMinus[HMR].source;
    set(CalendarMinus[HMR].source, module.default[HMR].original);
  });
}
var CalendarMinus_default = CalendarMinus;
mark_module_end(CalendarMinus);

// node_modules/svelte-bootstrap-icons/lib/CalendarMonthFill.svelte
mark_module_start();
CalendarMonthFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarMonthFill.svelte";
var root375 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zm.104 7.305L4.9 10.18H3.284l.8-2.375h.02zm9.074 2.297c0-.832-.414-1.36-1.062-1.36-.692 0-1.098.492-1.098 1.36v.253c0 .852.406 1.364 1.098 1.364.671 0 1.062-.516 1.062-1.364v-.253z"></path><path d="M16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2zM2.56 12.332h-.71L3.748 7h.696l1.898 5.332h-.719l-.539-1.602H3.1l-.54 1.602zm7.29-4.105v4.105h-.668v-.539h-.027c-.145.324-.532.605-1.188.605-.847 0-1.453-.484-1.453-1.425V8.227h.676v2.554c0 .766.441 1.012.98 1.012.59 0 1.004-.371 1.004-1.023V8.227h.676zm1.273 4.41c.075.332.422.636.985.636.648 0 1.07-.378 1.07-1.023v-.605h-.02c-.163.355-.613.648-1.171.648-.957 0-1.64-.672-1.64-1.902v-.34c0-1.207.675-1.887 1.64-1.887.558 0 1.004.293 1.195.64h.02v-.577h.648v4.03c0 1.052-.816 1.579-1.746 1.579-1.043 0-1.574-.516-1.668-1.2h.687z"></path></svg>`), CalendarMonthFill[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function CalendarMonthFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarMonthFill);
  var svg = root375();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-month-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarMonthFill = hmr(CalendarMonthFill, () => CalendarMonthFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarMonthFill[HMR].source;
    set(CalendarMonthFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarMonthFill_default = CalendarMonthFill;
mark_module_end(CalendarMonthFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarMonth.svelte
mark_module_start();
CalendarMonth[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarMonth.svelte";
var root376 = add_locations(ns_template(`<svg><!><path d="M2.56 11.332 3.1 9.73h1.984l.54 1.602h.718L4.444 6h-.696L1.85 11.332h.71zm1.544-4.527L4.9 9.18H3.284l.8-2.375h.02zm5.746.422h-.676V9.77c0 .652-.414 1.023-1.004 1.023-.539 0-.98-.246-.98-1.012V7.227h-.676v2.746c0 .941.606 1.425 1.453 1.425.656 0 1.043-.28 1.188-.605h.027v.539h.668V7.227zm2.258 5.046c-.563 0-.91-.304-.985-.636h-.687c.094.683.625 1.199 1.668 1.199.93 0 1.746-.527 1.746-1.578V7.227h-.649v.578h-.019c-.191-.348-.637-.64-1.195-.64-.965 0-1.64.679-1.64 1.886v.34c0 1.23.683 1.902 1.64 1.902.558 0 1.008-.293 1.172-.648h.02v.605c0 .645-.423 1.023-1.071 1.023zm.008-4.53c.648 0 1.062.527 1.062 1.359v.253c0 .848-.39 1.364-1.062 1.364-.692 0-1.098-.512-1.098-1.364v-.253c0-.868.406-1.36 1.098-1.36z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarMonth[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function CalendarMonth($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarMonth);
  var svg = root376();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-month", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarMonth = hmr(CalendarMonth, () => CalendarMonth[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarMonth[HMR].source;
    set(CalendarMonth[HMR].source, module.default[HMR].original);
  });
}
var CalendarMonth_default = CalendarMonth;
mark_module_end(CalendarMonth);

// node_modules/svelte-bootstrap-icons/lib/CalendarPlusFill.svelte
mark_module_start();
CalendarPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarPlusFill.svelte";
var root377 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2zM8.5 8.5V10H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V11H6a.5.5 0 0 1 0-1h1.5V8.5a.5.5 0 0 1 1 0z"></path></svg>`), CalendarPlusFill[FILENAME], [[1, 0, [[1, 179]]]]);
function CalendarPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarPlusFill);
  var svg = root377();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarPlusFill = hmr(CalendarPlusFill, () => CalendarPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarPlusFill[HMR].source;
    set(CalendarPlusFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarPlusFill_default = CalendarPlusFill;
mark_module_end(CalendarPlusFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarPlus.svelte
mark_module_start();
CalendarPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarPlus.svelte";
var root378 = add_locations(ns_template(`<svg><!><path d="M8 7a.5.5 0 0 1 .5.5V9H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V10H6a.5.5 0 0 1 0-1h1.5V7.5A.5.5 0 0 1 8 7z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarPlus[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function CalendarPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarPlus);
  var svg = root378();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarPlus = hmr(CalendarPlus, () => CalendarPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarPlus[HMR].source;
    set(CalendarPlus[HMR].source, module.default[HMR].original);
  });
}
var CalendarPlus_default = CalendarPlus;
mark_module_end(CalendarPlus);

// node_modules/svelte-bootstrap-icons/lib/CalendarRangeFill.svelte
mark_module_start();
CalendarRangeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarRangeFill.svelte";
var root379 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 7V5H0v5h5a1 1 0 1 1 0 2H0v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9h-6a1 1 0 1 1 0-2h6z"></path></svg>`), CalendarRangeFill[FILENAME], [[1, 0, [[1, 180]]]]);
function CalendarRangeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarRangeFill);
  var svg = root379();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-range-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarRangeFill = hmr(CalendarRangeFill, () => CalendarRangeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarRangeFill[HMR].source;
    set(CalendarRangeFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarRangeFill_default = CalendarRangeFill;
mark_module_end(CalendarRangeFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarRange.svelte
mark_module_start();
CalendarRange[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarRange.svelte";
var root380 = add_locations(ns_template(`<svg><!><path d="M9 7a1 1 0 0 1 1-1h5v2h-5a1 1 0 0 1-1-1zM1 9h4a1 1 0 0 1 0 2H1V9z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarRange[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function CalendarRange($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarRange);
  var svg = root380();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-range", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarRange = hmr(CalendarRange, () => CalendarRange[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarRange[HMR].source;
    set(CalendarRange[HMR].source, module.default[HMR].original);
  });
}
var CalendarRange_default = CalendarRange;
mark_module_end(CalendarRange);

// node_modules/svelte-bootstrap-icons/lib/CalendarWeekFill.svelte
mark_module_start();
CalendarWeekFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarWeekFill.svelte";
var root381 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2zM9.5 7h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5zm3 0h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5zM2 10.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3.5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5z"></path></svg>`), CalendarWeekFill[FILENAME], [[1, 0, [[1, 179]]]]);
function CalendarWeekFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarWeekFill);
  var svg = root381();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-week-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarWeekFill = hmr(CalendarWeekFill, () => CalendarWeekFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarWeekFill[HMR].source;
    set(CalendarWeekFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarWeekFill_default = CalendarWeekFill;
mark_module_end(CalendarWeekFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarWeek.svelte
mark_module_start();
CalendarWeek[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarWeek.svelte";
var root382 = add_locations(ns_template(`<svg><!><path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-5 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarWeek[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function CalendarWeek($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarWeek);
  var svg = root382();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-week", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarWeek = hmr(CalendarWeek, () => CalendarWeek[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarWeek[HMR].source;
    set(CalendarWeek[HMR].source, module.default[HMR].original);
  });
}
var CalendarWeek_default = CalendarWeek;
mark_module_end(CalendarWeek);

// node_modules/svelte-bootstrap-icons/lib/CalendarXFill.svelte
mark_module_start();
CalendarXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarXFill.svelte";
var root383 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2zM6.854 8.146 8 9.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 10l1.147 1.146a.5.5 0 0 1-.708.708L8 10.707l-1.146 1.147a.5.5 0 0 1-.708-.708L7.293 10 6.146 8.854a.5.5 0 1 1 .708-.708z"></path></svg>`), CalendarXFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CalendarXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarXFill);
  var svg = root383();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarXFill = hmr(CalendarXFill, () => CalendarXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarXFill[HMR].source;
    set(CalendarXFill[HMR].source, module.default[HMR].original);
  });
}
var CalendarXFill_default = CalendarXFill;
mark_module_end(CalendarXFill);

// node_modules/svelte-bootstrap-icons/lib/CalendarX.svelte
mark_module_start();
CalendarX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CalendarX.svelte";
var root384 = add_locations(ns_template(`<svg><!><path d="M6.146 7.146a.5.5 0 0 1 .708 0L8 8.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 9l1.147 1.146a.5.5 0 0 1-.708.708L8 9.707l-1.146 1.147a.5.5 0 0 1-.708-.708L7.293 9 6.146 7.854a.5.5 0 0 1 0-.708z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), CalendarX[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function CalendarX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CalendarX);
  var svg = root384();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarX = hmr(CalendarX, () => CalendarX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarX[HMR].source;
    set(CalendarX[HMR].source, module.default[HMR].original);
  });
}
var CalendarX_default = CalendarX;
mark_module_end(CalendarX);

// node_modules/svelte-bootstrap-icons/lib/Calendar.svelte
mark_module_start();
Calendar[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar.svelte";
var root385 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path></svg>`), Calendar[FILENAME], [[1, 0, [[1, 169]]]]);
function Calendar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar);
  var svg = root385();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar = hmr(Calendar, () => Calendar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar[HMR].source;
    set(Calendar[HMR].source, module.default[HMR].original);
  });
}
var Calendar_default = Calendar;
mark_module_end(Calendar);

// node_modules/svelte-bootstrap-icons/lib/Calendar2CheckFill.svelte
mark_module_start();
Calendar2CheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2CheckFill.svelte";
var root386 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zm9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5zm-2.6 5.854a.5.5 0 0 0-.708-.708L7.5 10.793 6.354 9.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0l3-3z"></path></svg>`), Calendar2CheckFill[FILENAME], [[1, 0, [[1, 181]]]]);
function Calendar2CheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2CheckFill);
  var svg = root386();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2CheckFill = hmr(Calendar2CheckFill, () => Calendar2CheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2CheckFill[HMR].source;
    set(Calendar2CheckFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2CheckFill_default = Calendar2CheckFill;
mark_module_end(Calendar2CheckFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Check.svelte
mark_module_start();
Calendar2Check[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Check.svelte";
var root387 = add_locations(ns_template(`<svg><!><path d="M10.854 8.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4z"></path></svg>`), Calendar2Check[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function Calendar2Check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Check);
  var svg = root387();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Check = hmr(Calendar2Check, () => Calendar2Check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Check[HMR].source;
    set(Calendar2Check[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Check_default = Calendar2Check;
mark_module_end(Calendar2Check);

// node_modules/svelte-bootstrap-icons/lib/Calendar2DateFill.svelte
mark_module_start();
Calendar2DateFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2DateFill.svelte";
var root388 = add_locations(ns_template(`<svg><!><path d="M9.402 10.246c.625 0 1.184-.484 1.184-1.18 0-.832-.527-1.23-1.16-1.23-.586 0-1.168.387-1.168 1.21 0 .817.543 1.2 1.144 1.2z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zm9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5zm-4.118 9.79c1.258 0 2-1.067 2-2.872 0-1.934-.781-2.668-1.953-2.668-.926 0-1.797.672-1.797 1.809 0 1.16.824 1.77 1.676 1.77.746 0 1.23-.376 1.383-.79h.027c-.004 1.316-.461 2.164-1.305 2.164-.664 0-1.008-.45-1.05-.82h-.684c.047.64.594 1.406 1.703 1.406zm-2.89-5.435h-.633A12.6 12.6 0 0 0 4.5 8.16v.695c.375-.257.969-.62 1.258-.777h.012v4.61h.675V7.354z"></path></svg>`), Calendar2DateFill[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function Calendar2DateFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2DateFill);
  var svg = root388();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-date-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2DateFill = hmr(Calendar2DateFill, () => Calendar2DateFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2DateFill[HMR].source;
    set(Calendar2DateFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2DateFill_default = Calendar2DateFill;
mark_module_end(Calendar2DateFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Date.svelte
mark_module_start();
Calendar2Date[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Date.svelte";
var root389 = add_locations(ns_template(`<svg><!><path d="M6.445 12.688V7.354h-.633A12.6 12.6 0 0 0 4.5 8.16v.695c.375-.257.969-.62 1.258-.777h.012v4.61h.675zm1.188-1.305c.047.64.594 1.406 1.703 1.406 1.258 0 2-1.066 2-2.871 0-1.934-.781-2.668-1.953-2.668-.926 0-1.797.672-1.797 1.809 0 1.16.824 1.77 1.676 1.77.746 0 1.23-.376 1.383-.79h.027c-.004 1.316-.461 2.164-1.305 2.164-.664 0-1.008-.45-1.05-.82h-.684zm2.953-2.317c0 .696-.559 1.18-1.184 1.18-.601 0-1.144-.383-1.144-1.2 0-.823.582-1.21 1.168-1.21.633 0 1.16.398 1.16 1.23z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4z"></path></svg>`), Calendar2Date[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function Calendar2Date($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Date);
  var svg = root389();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-date", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Date = hmr(Calendar2Date, () => Calendar2Date[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Date[HMR].source;
    set(Calendar2Date[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Date_default = Calendar2Date;
mark_module_end(Calendar2Date);

// node_modules/svelte-bootstrap-icons/lib/Calendar2DayFill.svelte
mark_module_start();
Calendar2DayFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2DayFill.svelte";
var root390 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zm9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5zm-2.24 4.855a.428.428 0 1 0 0-.855.426.426 0 0 0-.429.43c0 .238.192.425.43.425zm.337.563h-.672v4.105h.672V8.418zm-6.867 4.105v-2.3h2.261v-.61H4.684V7.801h2.464v-.61H4v5.332h.684zm3.296 0h.676V9.98c0-.554.227-1.007.953-1.007.125 0 .258.004.329.015v-.613a1.806 1.806 0 0 0-.254-.02c-.582 0-.891.32-1.012.567h-.02v-.504H7.98v4.105z"></path></svg>`), Calendar2DayFill[FILENAME], [[1, 0, [[1, 179]]]]);
function Calendar2DayFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2DayFill);
  var svg = root390();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-day-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2DayFill = hmr(Calendar2DayFill, () => Calendar2DayFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2DayFill[HMR].source;
    set(Calendar2DayFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2DayFill_default = Calendar2DayFill;
mark_module_end(Calendar2DayFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Day.svelte
mark_module_start();
Calendar2Day[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Day.svelte";
var root391 = add_locations(ns_template(`<svg><!><path d="M4.684 12.523v-2.3h2.261v-.61H4.684V7.801h2.464v-.61H4v5.332h.684zm3.296 0h.676V9.98c0-.554.227-1.007.953-1.007.125 0 .258.004.329.015v-.613a1.806 1.806 0 0 0-.254-.02c-.582 0-.891.32-1.012.567h-.02v-.504H7.98v4.105zm2.805-5.093c0 .238.192.425.43.425a.428.428 0 1 0 0-.855.426.426 0 0 0-.43.43zm.094 5.093h.672V8.418h-.672v4.105z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4z"></path></svg>`), Calendar2Day[FILENAME], [
  [
    1,
    0,
    [[1, 174], [2, 2], [3, 2]]
  ]
]);
function Calendar2Day($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Day);
  var svg = root391();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-day", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Day = hmr(Calendar2Day, () => Calendar2Day[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Day[HMR].source;
    set(Calendar2Day[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Day_default = Calendar2Day;
mark_module_end(Calendar2Day);

// node_modules/svelte-bootstrap-icons/lib/Calendar2EventFill.svelte
mark_module_start();
Calendar2EventFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2EventFill.svelte";
var root392 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zm9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5zM11.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1z"></path></svg>`), Calendar2EventFill[FILENAME], [[1, 0, [[1, 181]]]]);
function Calendar2EventFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2EventFill);
  var svg = root392();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-event-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2EventFill = hmr(Calendar2EventFill, () => Calendar2EventFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2EventFill[HMR].source;
    set(Calendar2EventFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2EventFill_default = Calendar2EventFill;
mark_module_end(Calendar2EventFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Event.svelte
mark_module_start();
Calendar2Event[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Event.svelte";
var root393 = add_locations(ns_template(`<svg><!><path d="M11 7.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4z"></path></svg>`), Calendar2Event[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function Calendar2Event($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Event);
  var svg = root393();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-event", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Event = hmr(Calendar2Event, () => Calendar2Event[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Event[HMR].source;
    set(Calendar2Event[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Event_default = Calendar2Event;
mark_module_end(Calendar2Event);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Fill.svelte
mark_module_start();
Calendar2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Fill.svelte";
var root394 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM2.545 3h10.91c.3 0 .545.224.545.5v1c0 .276-.244.5-.546.5H2.545C2.245 5 2 4.776 2 4.5v-1c0-.276.244-.5.545-.5z"></path></svg>`), Calendar2Fill[FILENAME], [[1, 0, [[1, 175]]]]);
function Calendar2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Fill);
  var svg = root394();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Fill = hmr(Calendar2Fill, () => Calendar2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Fill[HMR].source;
    set(Calendar2Fill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Fill_default = Calendar2Fill;
mark_module_end(Calendar2Fill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2HeartFill.svelte
mark_module_start();
Calendar2HeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2HeartFill.svelte";
var root395 = add_locations(ns_template(`<svg><!><path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5Zm-2 4v-1c0-.276.244-.5.545-.5h10.91c.3 0 .545.224.545.5v1c0 .276-.244.5-.546.5H2.545C2.245 5 2 4.776 2 4.5Zm6 3.493c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), Calendar2HeartFill[FILENAME], [[1, 0, [[1, 181]]]]);
function Calendar2HeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2HeartFill);
  var svg = root395();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2HeartFill = hmr(Calendar2HeartFill, () => Calendar2HeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2HeartFill[HMR].source;
    set(Calendar2HeartFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2HeartFill_default = Calendar2HeartFill;
mark_module_end(Calendar2HeartFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Heart.svelte
mark_module_start();
Calendar2Heart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Heart.svelte";
var root396 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5ZM1 3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V3Zm2 .5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5V4a.5.5 0 0 0-.5-.5H3Zm5 4.493c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), Calendar2Heart[FILENAME], [[1, 0, [[1, 176]]]]);
function Calendar2Heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Heart);
  var svg = root396();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Heart = hmr(Calendar2Heart, () => Calendar2Heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Heart[HMR].source;
    set(Calendar2Heart[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Heart_default = Calendar2Heart;
mark_module_end(Calendar2Heart);

// node_modules/svelte-bootstrap-icons/lib/Calendar2MinusFill.svelte
mark_module_start();
Calendar2MinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2MinusFill.svelte";
var root397 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zm9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5zM6 10a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1H6z"></path></svg>`), Calendar2MinusFill[FILENAME], [[1, 0, [[1, 181]]]]);
function Calendar2MinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2MinusFill);
  var svg = root397();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2MinusFill = hmr(Calendar2MinusFill, () => Calendar2MinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2MinusFill[HMR].source;
    set(Calendar2MinusFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2MinusFill_default = Calendar2MinusFill;
mark_module_end(Calendar2MinusFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Minus.svelte
mark_module_start();
Calendar2Minus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Minus.svelte";
var root398 = add_locations(ns_template(`<svg><!><path d="M5.5 10.5A.5.5 0 0 1 6 10h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4z"></path></svg>`), Calendar2Minus[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function Calendar2Minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Minus);
  var svg = root398();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Minus = hmr(Calendar2Minus, () => Calendar2Minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Minus[HMR].source;
    set(Calendar2Minus[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Minus_default = Calendar2Minus;
mark_module_end(Calendar2Minus);

// node_modules/svelte-bootstrap-icons/lib/Calendar2MonthFill.svelte
mark_module_start();
Calendar2MonthFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2MonthFill.svelte";
var root399 = add_locations(ns_template(`<svg><!><path d="M4.104 7.805 4.9 10.18H3.284l.8-2.375h.02zm9.074 2.297c0-.832-.414-1.36-1.062-1.36-.692 0-1.098.492-1.098 1.36v.253c0 .852.406 1.364 1.098 1.364.671 0 1.062-.516 1.062-1.364v-.253z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zm9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5zM2.561 12.332 3.1 10.73h1.984l.54 1.602h.718L4.444 7h-.696L1.85 12.332h.71zM9.85 8.227h-.676v2.543c0 .652-.414 1.023-1.004 1.023-.539 0-.98-.246-.98-1.012V8.227h-.676v2.746c0 .941.606 1.425 1.453 1.425.656 0 1.043-.28 1.188-.605h.027v.539h.668V8.227zm1.273 4.41h-.687c.094.683.625 1.199 1.668 1.199.93 0 1.746-.527 1.746-1.578V8.227h-.649v.578h-.019c-.191-.348-.637-.64-1.195-.64-.965 0-1.64.679-1.64 1.886v.34c0 1.23.683 1.902 1.64 1.902.558 0 1.008-.293 1.172-.648h.02v.605c0 .645-.423 1.023-1.071 1.023-.563 0-.91-.304-.985-.636z"></path></svg>`), Calendar2MonthFill[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function Calendar2MonthFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2MonthFill);
  var svg = root399();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-month-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2MonthFill = hmr(Calendar2MonthFill, () => Calendar2MonthFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2MonthFill[HMR].source;
    set(Calendar2MonthFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2MonthFill_default = Calendar2MonthFill;
mark_module_end(Calendar2MonthFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Month.svelte
mark_module_start();
Calendar2Month[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Month.svelte";
var root400 = add_locations(ns_template(`<svg><!><path d="m2.56 12.332.54-1.602h1.984l.54 1.602h.718L4.444 7h-.696L1.85 12.332h.71zm1.544-4.527L4.9 10.18H3.284l.8-2.375h.02zm5.746.422h-.676v2.543c0 .652-.414 1.023-1.004 1.023-.539 0-.98-.246-.98-1.012V8.227h-.676v2.746c0 .941.606 1.425 1.453 1.425.656 0 1.043-.28 1.188-.605h.027v.539h.668V8.227zm2.258 5.046c-.563 0-.91-.304-.985-.636h-.687c.094.683.625 1.199 1.668 1.199.93 0 1.746-.527 1.746-1.578V8.227h-.649v.578h-.019c-.191-.348-.637-.64-1.195-.64-.965 0-1.64.679-1.64 1.886v.34c0 1.23.683 1.902 1.64 1.902.558 0 1.008-.293 1.172-.648h.02v.605c0 .645-.423 1.023-1.071 1.023zm.008-4.53c.648 0 1.062.527 1.062 1.359v.253c0 .848-.39 1.364-1.062 1.364-.692 0-1.098-.512-1.098-1.364v-.253c0-.868.406-1.36 1.098-1.36z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4z"></path></svg>`), Calendar2Month[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function Calendar2Month($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Month);
  var svg = root400();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-month", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Month = hmr(Calendar2Month, () => Calendar2Month[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Month[HMR].source;
    set(Calendar2Month[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Month_default = Calendar2Month;
mark_module_end(Calendar2Month);

// node_modules/svelte-bootstrap-icons/lib/Calendar2PlusFill.svelte
mark_module_start();
Calendar2PlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2PlusFill.svelte";
var root401 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 3.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5H2.545c-.3 0-.545.224-.545.5zm6.5 5a.5.5 0 0 0-1 0V10H6a.5.5 0 0 0 0 1h1.5v1.5a.5.5 0 0 0 1 0V11H10a.5.5 0 0 0 0-1H8.5V8.5z"></path></svg>`), Calendar2PlusFill[FILENAME], [[1, 0, [[1, 180]]]]);
function Calendar2PlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2PlusFill);
  var svg = root401();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2PlusFill = hmr(Calendar2PlusFill, () => Calendar2PlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2PlusFill[HMR].source;
    set(Calendar2PlusFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2PlusFill_default = Calendar2PlusFill;
mark_module_end(Calendar2PlusFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Plus.svelte
mark_module_start();
Calendar2Plus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Plus.svelte";
var root402 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4zM8 8a.5.5 0 0 1 .5.5V10H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V11H6a.5.5 0 0 1 0-1h1.5V8.5A.5.5 0 0 1 8 8z"></path></svg>`), Calendar2Plus[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function Calendar2Plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Plus);
  var svg = root402();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Plus = hmr(Calendar2Plus, () => Calendar2Plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Plus[HMR].source;
    set(Calendar2Plus[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Plus_default = Calendar2Plus;
mark_module_end(Calendar2Plus);

// node_modules/svelte-bootstrap-icons/lib/Calendar2RangeFill.svelte
mark_module_start();
Calendar2RangeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2RangeFill.svelte";
var root403 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zm9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5zM10 7a1 1 0 0 0 0 2h5V7h-5zm-4 4a1 1 0 0 0-1-1H1v2h4a1 1 0 0 0 1-1z"></path></svg>`), Calendar2RangeFill[FILENAME], [[1, 0, [[1, 181]]]]);
function Calendar2RangeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2RangeFill);
  var svg = root403();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-range-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2RangeFill = hmr(Calendar2RangeFill, () => Calendar2RangeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2RangeFill[HMR].source;
    set(Calendar2RangeFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2RangeFill_default = Calendar2RangeFill;
mark_module_end(Calendar2RangeFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Range.svelte
mark_module_start();
Calendar2Range[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Range.svelte";
var root404 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4zM9 8a1 1 0 0 1 1-1h5v2h-5a1 1 0 0 1-1-1zm-8 2h4a1 1 0 1 1 0 2H1v-2z"></path></svg>`), Calendar2Range[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function Calendar2Range($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Range);
  var svg = root404();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-range", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Range = hmr(Calendar2Range, () => Calendar2Range[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Range[HMR].source;
    set(Calendar2Range[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Range_default = Calendar2Range;
mark_module_end(Calendar2Range);

// node_modules/svelte-bootstrap-icons/lib/Calendar2WeekFill.svelte
mark_module_start();
Calendar2WeekFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2WeekFill.svelte";
var root405 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zm9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5zM8.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zM3 10.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1z"></path></svg>`), Calendar2WeekFill[FILENAME], [[1, 0, [[1, 180]]]]);
function Calendar2WeekFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2WeekFill);
  var svg = root405();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-week-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2WeekFill = hmr(Calendar2WeekFill, () => Calendar2WeekFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2WeekFill[HMR].source;
    set(Calendar2WeekFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2WeekFill_default = Calendar2WeekFill;
mark_module_end(Calendar2WeekFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2Week.svelte
mark_module_start();
Calendar2Week[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2Week.svelte";
var root406 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4zM11 7.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-5 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"></path></svg>`), Calendar2Week[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function Calendar2Week($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2Week);
  var svg = root406();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-week", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2Week = hmr(Calendar2Week, () => Calendar2Week[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2Week[HMR].source;
    set(Calendar2Week[HMR].source, module.default[HMR].original);
  });
}
var Calendar2Week_default = Calendar2Week;
mark_module_end(Calendar2Week);

// node_modules/svelte-bootstrap-icons/lib/Calendar2XFill.svelte
mark_module_start();
Calendar2XFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2XFill.svelte";
var root407 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zm9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5zm-6.6 5.146a.5.5 0 1 0-.708.708L7.293 10l-1.147 1.146a.5.5 0 0 0 .708.708L8 10.707l1.146 1.147a.5.5 0 0 0 .708-.708L8.707 10l1.147-1.146a.5.5 0 0 0-.708-.708L8 9.293 6.854 8.146z"></path></svg>`), Calendar2XFill[FILENAME], [[1, 0, [[1, 177]]]]);
function Calendar2XFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2XFill);
  var svg = root407();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2XFill = hmr(Calendar2XFill, () => Calendar2XFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2XFill[HMR].source;
    set(Calendar2XFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar2XFill_default = Calendar2XFill;
mark_module_end(Calendar2XFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar2X.svelte
mark_module_start();
Calendar2X[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2X.svelte";
var root408 = add_locations(ns_template(`<svg><!><path d="M6.146 8.146a.5.5 0 0 1 .708 0L8 9.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 10l1.147 1.146a.5.5 0 0 1-.708.708L8 10.707l-1.146 1.147a.5.5 0 0 1-.708-.708L7.293 10 6.146 8.854a.5.5 0 0 1 0-.708z"></path><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4z"></path></svg>`), Calendar2X[FILENAME], [
  [
    1,
    0,
    [[1, 172], [2, 2], [3, 2]]
  ]
]);
function Calendar2X($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2X);
  var svg = root408();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2X = hmr(Calendar2X, () => Calendar2X[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2X[HMR].source;
    set(Calendar2X[HMR].source, module.default[HMR].original);
  });
}
var Calendar2X_default = Calendar2X;
mark_module_end(Calendar2X);

// node_modules/svelte-bootstrap-icons/lib/Calendar2.svelte
mark_module_start();
Calendar2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar2.svelte";
var root409 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"></path><path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4z"></path></svg>`), Calendar2[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Calendar2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar2);
  var svg = root409();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar2 = hmr(Calendar2, () => Calendar2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar2[HMR].source;
    set(Calendar2[HMR].source, module.default[HMR].original);
  });
}
var Calendar2_default = Calendar2;
mark_module_end(Calendar2);

// node_modules/svelte-bootstrap-icons/lib/Calendar3EventFill.svelte
mark_module_start();
Calendar3EventFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar3EventFill.svelte";
var root410 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 0a2 2 0 0 0-2 2h16a2 2 0 0 0-2-2H2zM0 14V3h16v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm12-8a1 1 0 1 0 2 0 1 1 0 0 0-2 0z"></path></svg>`), Calendar3EventFill[FILENAME], [[1, 0, [[1, 181]]]]);
function Calendar3EventFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar3EventFill);
  var svg = root410();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar3-event-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar3EventFill = hmr(Calendar3EventFill, () => Calendar3EventFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar3EventFill[HMR].source;
    set(Calendar3EventFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar3EventFill_default = Calendar3EventFill;
mark_module_end(Calendar3EventFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar3Event.svelte
mark_module_start();
Calendar3Event[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar3Event.svelte";
var root411 = add_locations(ns_template(`<svg><!><path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"></path><path d="M12 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), Calendar3Event[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function Calendar3Event($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar3Event);
  var svg = root411();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar3-event", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar3Event = hmr(Calendar3Event, () => Calendar3Event[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar3Event[HMR].source;
    set(Calendar3Event[HMR].source, module.default[HMR].original);
  });
}
var Calendar3Event_default = Calendar3Event;
mark_module_end(Calendar3Event);

// node_modules/svelte-bootstrap-icons/lib/Calendar3Fill.svelte
mark_module_start();
Calendar3Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar3Fill.svelte";
var root412 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2H0zm0 1v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3H0z"></path></svg>`), Calendar3Fill[FILENAME], [[1, 0, [[1, 175]]]]);
function Calendar3Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar3Fill);
  var svg = root412();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar3-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar3Fill = hmr(Calendar3Fill, () => Calendar3Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar3Fill[HMR].source;
    set(Calendar3Fill[HMR].source, module.default[HMR].original);
  });
}
var Calendar3Fill_default = Calendar3Fill;
mark_module_end(Calendar3Fill);

// node_modules/svelte-bootstrap-icons/lib/Calendar3RangeFill.svelte
mark_module_start();
Calendar3RangeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar3RangeFill.svelte";
var root413 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 0a2 2 0 0 0-2 2h16a2 2 0 0 0-2-2H2zM0 8V3h16v2h-6a1 1 0 1 0 0 2h6v7a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-4h6a1 1 0 1 0 0-2H0z"></path></svg>`), Calendar3RangeFill[FILENAME], [[1, 0, [[1, 181]]]]);
function Calendar3RangeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar3RangeFill);
  var svg = root413();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar3-range-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar3RangeFill = hmr(Calendar3RangeFill, () => Calendar3RangeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar3RangeFill[HMR].source;
    set(Calendar3RangeFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar3RangeFill_default = Calendar3RangeFill;
mark_module_end(Calendar3RangeFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar3Range.svelte
mark_module_start();
Calendar3Range[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar3Range.svelte";
var root414 = add_locations(ns_template(`<svg><!><path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"></path><path d="M7 10a1 1 0 0 0 0-2H1v2h6zm2-3h6V5H9a1 1 0 0 0 0 2z"></path></svg>`), Calendar3Range[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function Calendar3Range($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar3Range);
  var svg = root414();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar3-range", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar3Range = hmr(Calendar3Range, () => Calendar3Range[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar3Range[HMR].source;
    set(Calendar3Range[HMR].source, module.default[HMR].original);
  });
}
var Calendar3Range_default = Calendar3Range;
mark_module_end(Calendar3Range);

// node_modules/svelte-bootstrap-icons/lib/Calendar3WeekFill.svelte
mark_module_start();
Calendar3WeekFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar3WeekFill.svelte";
var root415 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 0a2 2 0 0 0-2 2h16a2 2 0 0 0-2-2H2zM0 14V3h16v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm12-8a1 1 0 1 0 2 0 1 1 0 0 0-2 0zM5 9a1 1 0 1 0 2 0 1 1 0 0 0-2 0zm5-2a1 1 0 1 1 0-2 1 1 0 0 1 0 2zM2 9a1 1 0 1 0 2 0 1 1 0 0 0-2 0z"></path></svg>`), Calendar3WeekFill[FILENAME], [[1, 0, [[1, 180]]]]);
function Calendar3WeekFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar3WeekFill);
  var svg = root415();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar3-week-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar3WeekFill = hmr(Calendar3WeekFill, () => Calendar3WeekFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar3WeekFill[HMR].source;
    set(Calendar3WeekFill[HMR].source, module.default[HMR].original);
  });
}
var Calendar3WeekFill_default = Calendar3WeekFill;
mark_module_end(Calendar3WeekFill);

// node_modules/svelte-bootstrap-icons/lib/Calendar3Week.svelte
mark_module_start();
Calendar3Week[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar3Week.svelte";
var root416 = add_locations(ns_template(`<svg><!><path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"></path><path d="M12 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-5 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm2-3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-5 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), Calendar3Week[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function Calendar3Week($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar3Week);
  var svg = root416();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar3-week", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar3Week = hmr(Calendar3Week, () => Calendar3Week[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar3Week[HMR].source;
    set(Calendar3Week[HMR].source, module.default[HMR].original);
  });
}
var Calendar3Week_default = Calendar3Week;
mark_module_end(Calendar3Week);

// node_modules/svelte-bootstrap-icons/lib/Calendar3.svelte
mark_module_start();
Calendar3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar3.svelte";
var root417 = add_locations(ns_template(`<svg><!><path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"></path><path d="M6.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), Calendar3[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Calendar3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar3);
  var svg = root417();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar3 = hmr(Calendar3, () => Calendar3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar3[HMR].source;
    set(Calendar3[HMR].source, module.default[HMR].original);
  });
}
var Calendar3_default = Calendar3;
mark_module_end(Calendar3);

// node_modules/svelte-bootstrap-icons/lib/Calendar4Event.svelte
mark_module_start();
Calendar4Event[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar4Event.svelte";
var root418 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1H2zm13 3H1v9a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V5z"></path><path d="M11 7.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"></path></svg>`), Calendar4Event[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function Calendar4Event($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar4Event);
  var svg = root418();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar4-event", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar4Event = hmr(Calendar4Event, () => Calendar4Event[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar4Event[HMR].source;
    set(Calendar4Event[HMR].source, module.default[HMR].original);
  });
}
var Calendar4Event_default = Calendar4Event;
mark_module_end(Calendar4Event);

// node_modules/svelte-bootstrap-icons/lib/Calendar4Range.svelte
mark_module_start();
Calendar4Range[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar4Range.svelte";
var root419 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1H2zm13 3H1v9a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V5z"></path><path d="M9 7.5a.5.5 0 0 1 .5-.5H15v2H9.5a.5.5 0 0 1-.5-.5v-1zm-2 3v1a.5.5 0 0 1-.5.5H1v-2h5.5a.5.5 0 0 1 .5.5z"></path></svg>`), Calendar4Range[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function Calendar4Range($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar4Range);
  var svg = root419();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar4-range", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar4Range = hmr(Calendar4Range, () => Calendar4Range[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar4Range[HMR].source;
    set(Calendar4Range[HMR].source, module.default[HMR].original);
  });
}
var Calendar4Range_default = Calendar4Range;
mark_module_end(Calendar4Range);

// node_modules/svelte-bootstrap-icons/lib/Calendar4Week.svelte
mark_module_start();
Calendar4Week[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar4Week.svelte";
var root420 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1H2zm13 3H1v9a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V5z"></path><path d="M11 7.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-2 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"></path></svg>`), Calendar4Week[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function Calendar4Week($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar4Week);
  var svg = root420();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar4-week", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar4Week = hmr(Calendar4Week, () => Calendar4Week[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar4Week[HMR].source;
    set(Calendar4Week[HMR].source, module.default[HMR].original);
  });
}
var Calendar4Week_default = Calendar4Week;
mark_module_end(Calendar4Week);

// node_modules/svelte-bootstrap-icons/lib/Calendar4.svelte
mark_module_start();
Calendar4[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Calendar4.svelte";
var root421 = add_locations(ns_template(`<svg><!><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1H2zm13 3H1v9a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V5z"></path></svg>`), Calendar4[FILENAME], [[1, 0, [[1, 170]]]]);
function Calendar4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Calendar4);
  var svg = root421();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-calendar4", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar4 = hmr(Calendar4, () => Calendar4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar4[HMR].source;
    set(Calendar4[HMR].source, module.default[HMR].original);
  });
}
var Calendar4_default = Calendar4;
mark_module_end(Calendar4);

// node_modules/svelte-bootstrap-icons/lib/CameraFill.svelte
mark_module_start();
CameraFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CameraFill.svelte";
var root422 = add_locations(ns_template(`<svg><!><path d="M10.5 8.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"></path><path d="M2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2zm.5 2a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm9 2.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0z"></path></svg>`), CameraFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function CameraFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CameraFill);
  var svg = root422();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-camera-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CameraFill = hmr(CameraFill, () => CameraFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CameraFill[HMR].source;
    set(CameraFill[HMR].source, module.default[HMR].original);
  });
}
var CameraFill_default = CameraFill;
mark_module_end(CameraFill);

// node_modules/svelte-bootstrap-icons/lib/CameraReelsFill.svelte
mark_module_start();
CameraReelsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CameraReelsFill.svelte";
var root423 = add_locations(ns_template(`<svg><!><path d="M6 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"></path><path d="M9 6a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"></path><path d="M9 6h.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 7.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 16H2a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h7z"></path></svg>`), CameraReelsFill[FILENAME], [
  [
    1,
    0,
    [[1, 178], [2, 2], [3, 2]]
  ]
]);
function CameraReelsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CameraReelsFill);
  var svg = root423();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-camera-reels-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CameraReelsFill = hmr(CameraReelsFill, () => CameraReelsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CameraReelsFill[HMR].source;
    set(CameraReelsFill[HMR].source, module.default[HMR].original);
  });
}
var CameraReelsFill_default = CameraReelsFill;
mark_module_end(CameraReelsFill);

// node_modules/svelte-bootstrap-icons/lib/CameraReels.svelte
mark_module_start();
CameraReels[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CameraReels.svelte";
var root424 = add_locations(ns_template(`<svg><!><path d="M6 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM1 3a2 2 0 1 0 4 0 2 2 0 0 0-4 0z"></path><path d="M9 6h.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 7.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 16H2a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h7zm6 8.73V7.27l-3.5 1.555v4.35l3.5 1.556zM1 8v6a1 1 0 0 0 1 1h7.5a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1z"></path><path d="M9 6a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM7 3a2 2 0 1 1 4 0 2 2 0 0 1-4 0z"></path></svg>`), CameraReels[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function CameraReels($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CameraReels);
  var svg = root424();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-camera-reels", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CameraReels = hmr(CameraReels, () => CameraReels[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CameraReels[HMR].source;
    set(CameraReels[HMR].source, module.default[HMR].original);
  });
}
var CameraReels_default = CameraReels;
mark_module_end(CameraReels);

// node_modules/svelte-bootstrap-icons/lib/CameraVideoFill.svelte
mark_module_start();
CameraVideoFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CameraVideoFill.svelte";
var root425 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 5a2 2 0 0 1 2-2h7.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 4.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 13H2a2 2 0 0 1-2-2V5z"></path></svg>`), CameraVideoFill[FILENAME], [[1, 0, [[1, 178]]]]);
function CameraVideoFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CameraVideoFill);
  var svg = root425();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-camera-video-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CameraVideoFill = hmr(CameraVideoFill, () => CameraVideoFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CameraVideoFill[HMR].source;
    set(CameraVideoFill[HMR].source, module.default[HMR].original);
  });
}
var CameraVideoFill_default = CameraVideoFill;
mark_module_end(CameraVideoFill);

// node_modules/svelte-bootstrap-icons/lib/CameraVideoOffFill.svelte
mark_module_start();
CameraVideoOffFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CameraVideoOffFill.svelte";
var root426 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.961 12.365a1.99 1.99 0 0 0 .522-1.103l3.11 1.382A1 1 0 0 0 16 11.731V4.269a1 1 0 0 0-1.406-.913l-3.111 1.382A2 2 0 0 0 9.5 3H4.272l6.69 9.365zm-10.114-9A2.001 2.001 0 0 0 0 5v6a2 2 0 0 0 2 2h5.728L.847 3.366zm9.746 11.925-10-14 .814-.58 10 14-.814.58z"></path></svg>`), CameraVideoOffFill[FILENAME], [[1, 0, [[1, 182]]]]);
function CameraVideoOffFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CameraVideoOffFill);
  var svg = root426();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-camera-video-off-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CameraVideoOffFill = hmr(CameraVideoOffFill, () => CameraVideoOffFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CameraVideoOffFill[HMR].source;
    set(CameraVideoOffFill[HMR].source, module.default[HMR].original);
  });
}
var CameraVideoOffFill_default = CameraVideoOffFill;
mark_module_end(CameraVideoOffFill);

// node_modules/svelte-bootstrap-icons/lib/CameraVideoOff.svelte
mark_module_start();
CameraVideoOff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CameraVideoOff.svelte";
var root427 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.961 12.365a1.99 1.99 0 0 0 .522-1.103l3.11 1.382A1 1 0 0 0 16 11.731V4.269a1 1 0 0 0-1.406-.913l-3.111 1.382A2 2 0 0 0 9.5 3H4.272l.714 1H9.5a1 1 0 0 1 1 1v6a1 1 0 0 1-.144.518l.605.847zM1.428 4.18A.999.999 0 0 0 1 5v6a1 1 0 0 0 1 1h5.014l.714 1H2a2 2 0 0 1-2-2V5c0-.675.334-1.272.847-1.634l.58.814zM15 11.73l-3.5-1.555v-4.35L15 4.269v7.462zm-4.407 3.56-10-14 .814-.58 10 14-.814.58z"></path></svg>`), CameraVideoOff[FILENAME], [[1, 0, [[1, 177]]]]);
function CameraVideoOff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CameraVideoOff);
  var svg = root427();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-camera-video-off", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CameraVideoOff = hmr(CameraVideoOff, () => CameraVideoOff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CameraVideoOff[HMR].source;
    set(CameraVideoOff[HMR].source, module.default[HMR].original);
  });
}
var CameraVideoOff_default = CameraVideoOff;
mark_module_end(CameraVideoOff);

// node_modules/svelte-bootstrap-icons/lib/CameraVideo.svelte
mark_module_start();
CameraVideo[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CameraVideo.svelte";
var root428 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 5a2 2 0 0 1 2-2h7.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 4.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 13H2a2 2 0 0 1-2-2V5zm11.5 5.175 3.5 1.556V4.269l-3.5 1.556v4.35zM2 4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h7.5a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H2z"></path></svg>`), CameraVideo[FILENAME], [[1, 0, [[1, 173]]]]);
function CameraVideo($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CameraVideo);
  var svg = root428();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-camera-video", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CameraVideo = hmr(CameraVideo, () => CameraVideo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CameraVideo[HMR].source;
    set(CameraVideo[HMR].source, module.default[HMR].original);
  });
}
var CameraVideo_default = CameraVideo;
mark_module_end(CameraVideo);

// node_modules/svelte-bootstrap-icons/lib/Camera.svelte
mark_module_start();
Camera[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Camera.svelte";
var root429 = add_locations(ns_template(`<svg><!><path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2z"></path><path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"></path></svg>`), Camera[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Camera($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Camera);
  var svg = root429();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-camera", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Camera = hmr(Camera, () => Camera[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Camera[HMR].source;
    set(Camera[HMR].source, module.default[HMR].original);
  });
}
var Camera_default = Camera;
mark_module_end(Camera);

// node_modules/svelte-bootstrap-icons/lib/Camera2.svelte
mark_module_start();
Camera2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Camera2.svelte";
var root430 = add_locations(ns_template(`<svg><!><path d="M5 8c0-1.657 2.343-3 4-3V4a4 4 0 0 0-4 4z"></path><path d="M12.318 3h2.015C15.253 3 16 3.746 16 4.667v6.666c0 .92-.746 1.667-1.667 1.667h-2.015A5.97 5.97 0 0 1 9 14a5.972 5.972 0 0 1-3.318-1H1.667C.747 13 0 12.254 0 11.333V4.667C0 3.747.746 3 1.667 3H2a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1h.682A5.97 5.97 0 0 1 9 2c1.227 0 2.367.368 3.318 1zM2 4.5a.5.5 0 1 0-1 0 .5.5 0 0 0 1 0zM14 8A5 5 0 1 0 4 8a5 5 0 0 0 10 0z"></path></svg>`), Camera2[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Camera2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Camera2);
  var svg = root430();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-camera2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Camera2 = hmr(Camera2, () => Camera2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Camera2[HMR].source;
    set(Camera2[HMR].source, module.default[HMR].original);
  });
}
var Camera2_default = Camera2;
mark_module_end(Camera2);

// node_modules/svelte-bootstrap-icons/lib/CapslockFill.svelte
mark_module_start();
CapslockFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CapslockFill.svelte";
var root431 = add_locations(ns_template(`<svg><!><path d="M7.27 1.047a1 1 0 0 1 1.46 0l6.345 6.77c.6.638.146 1.683-.73 1.683H11.5v1a1 1 0 0 1-1 1h-5a1 1 0 0 1-1-1v-1H1.654C.78 9.5.326 8.455.924 7.816L7.27 1.047zM4.5 13.5a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1h-5a1 1 0 0 1-1-1v-1z"></path></svg>`), CapslockFill[FILENAME], [[1, 0, [[1, 174]]]]);
function CapslockFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CapslockFill);
  var svg = root431();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-capslock-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CapslockFill = hmr(CapslockFill, () => CapslockFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CapslockFill[HMR].source;
    set(CapslockFill[HMR].source, module.default[HMR].original);
  });
}
var CapslockFill_default = CapslockFill;
mark_module_end(CapslockFill);

// node_modules/svelte-bootstrap-icons/lib/Capslock.svelte
mark_module_start();
Capslock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Capslock.svelte";
var root432 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.27 1.047a1 1 0 0 1 1.46 0l6.345 6.77c.6.638.146 1.683-.73 1.683H11.5v1a1 1 0 0 1-1 1h-5a1 1 0 0 1-1-1v-1H1.654C.78 9.5.326 8.455.924 7.816L7.27 1.047zM14.346 8.5 8 1.731 1.654 8.5H4.5a1 1 0 0 1 1 1v1h5v-1a1 1 0 0 1 1-1h2.846zm-9.846 5a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1h-5a1 1 0 0 1-1-1v-1zm6 0h-5v1h5v-1z"></path></svg>`), Capslock[FILENAME], [[1, 0, [[1, 169]]]]);
function Capslock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Capslock);
  var svg = root432();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-capslock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Capslock = hmr(Capslock, () => Capslock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Capslock[HMR].source;
    set(Capslock[HMR].source, module.default[HMR].original);
  });
}
var Capslock_default = Capslock;
mark_module_end(Capslock);

// node_modules/svelte-bootstrap-icons/lib/CapsulePill.svelte
mark_module_start();
CapsulePill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CapsulePill.svelte";
var root433 = add_locations(ns_template(`<svg><!><path d="M11.02 5.364a3 3 0 0 0-4.242-4.243L1.121 6.778a3 3 0 1 0 4.243 4.243l5.657-5.657Zm-6.413-.657 2.878-2.879a2 2 0 1 1 2.829 2.829L7.435 7.536 4.607 4.707ZM12 8a4 4 0 1 1 0 8 4 4 0 0 1 0-8Zm-.5 1.042a3 3 0 0 0 0 5.917V9.042Zm1 5.917a3 3 0 0 0 0-5.917v5.917Z"></path></svg>`), CapsulePill[FILENAME], [[1, 0, [[1, 173]]]]);
function CapsulePill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CapsulePill);
  var svg = root433();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-capsule-pill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CapsulePill = hmr(CapsulePill, () => CapsulePill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CapsulePill[HMR].source;
    set(CapsulePill[HMR].source, module.default[HMR].original);
  });
}
var CapsulePill_default = CapsulePill;
mark_module_end(CapsulePill);

// node_modules/svelte-bootstrap-icons/lib/Capsule.svelte
mark_module_start();
Capsule[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Capsule.svelte";
var root434 = add_locations(ns_template(`<svg><!><path d="M1.828 8.9 8.9 1.827a4 4 0 1 1 5.657 5.657l-7.07 7.071A4 4 0 1 1 1.827 8.9Zm9.128.771 2.893-2.893a3 3 0 1 0-4.243-4.242L6.713 5.429l4.243 4.242Z"></path></svg>`), Capsule[FILENAME], [[1, 0, [[1, 168]]]]);
function Capsule($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Capsule);
  var svg = root434();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-capsule", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Capsule = hmr(Capsule, () => Capsule[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Capsule[HMR].source;
    set(Capsule[HMR].source, module.default[HMR].original);
  });
}
var Capsule_default = Capsule;
mark_module_end(Capsule);

// node_modules/svelte-bootstrap-icons/lib/CarFrontFill.svelte
mark_module_start();
CarFrontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CarFrontFill.svelte";
var root435 = add_locations(ns_template(`<svg><!><path d="M2.52 3.515A2.5 2.5 0 0 1 4.82 2h6.362c1 0 1.904.596 2.298 1.515l.792 1.848c.075.175.21.319.38.404.5.25.855.715.965 1.262l.335 1.679c.033.161.049.325.049.49v.413c0 .814-.39 1.543-1 1.997V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.338c-1.292.048-2.745.088-4 .088s-2.708-.04-4-.088V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.892c-.61-.454-1-1.183-1-1.997v-.413a2.5 2.5 0 0 1 .049-.49l.335-1.68c.11-.546.465-1.012.964-1.261a.807.807 0 0 0 .381-.404l.792-1.848ZM3 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm10 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM6 8a1 1 0 0 0 0 2h4a1 1 0 1 0 0-2H6ZM2.906 5.189a.51.51 0 0 0 .497.731c.91-.073 3.35-.17 4.597-.17 1.247 0 3.688.097 4.597.17a.51.51 0 0 0 .497-.731l-.956-1.913A.5.5 0 0 0 11.691 3H4.309a.5.5 0 0 0-.447.276L2.906 5.19Z"></path></svg>`), CarFrontFill[FILENAME], [[1, 0, [[1, 175]]]]);
function CarFrontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CarFrontFill);
  var svg = root435();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-car-front-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CarFrontFill = hmr(CarFrontFill, () => CarFrontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CarFrontFill[HMR].source;
    set(CarFrontFill[HMR].source, module.default[HMR].original);
  });
}
var CarFrontFill_default = CarFrontFill;
mark_module_end(CarFrontFill);

// node_modules/svelte-bootstrap-icons/lib/CarFront.svelte
mark_module_start();
CarFront[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CarFront.svelte";
var root436 = add_locations(ns_template(`<svg><!><path d="M4 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm10 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM6 8a1 1 0 0 0 0 2h4a1 1 0 1 0 0-2H6ZM4.862 4.276 3.906 6.19a.51.51 0 0 0 .497.731c.91-.073 2.35-.17 3.597-.17 1.247 0 2.688.097 3.597.17a.51.51 0 0 0 .497-.731l-.956-1.913A.5.5 0 0 0 10.691 4H5.309a.5.5 0 0 0-.447.276Z"></path><path d="M2.52 3.515A2.5 2.5 0 0 1 4.82 2h6.362c1 0 1.904.596 2.298 1.515l.792 1.848c.075.175.21.319.38.404.5.25.855.715.965 1.262l.335 1.679c.033.161.049.325.049.49v.413c0 .814-.39 1.543-1 1.997V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.338c-1.292.048-2.745.088-4 .088s-2.708-.04-4-.088V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.892c-.61-.454-1-1.183-1-1.997v-.413a2.5 2.5 0 0 1 .049-.49l.335-1.68c.11-.546.465-1.012.964-1.261a.807.807 0 0 0 .381-.404l.792-1.848ZM4.82 3a1.5 1.5 0 0 0-1.379.91l-.792 1.847a1.8 1.8 0 0 1-.853.904.807.807 0 0 0-.43.564L1.03 8.904a1.5 1.5 0 0 0-.03.294v.413c0 .796.62 1.448 1.408 1.484 1.555.07 3.786.155 5.592.155 1.806 0 4.037-.084 5.592-.155A1.479 1.479 0 0 0 15 9.611v-.413c0-.099-.01-.197-.03-.294l-.335-1.68a.807.807 0 0 0-.43-.563 1.807 1.807 0 0 1-.853-.904l-.792-1.848A1.5 1.5 0 0 0 11.18 3H4.82Z"></path></svg>`), CarFront[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function CarFront($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CarFront);
  var svg = root436();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-car-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CarFront = hmr(CarFront, () => CarFront[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CarFront[HMR].source;
    set(CarFront[HMR].source, module.default[HMR].original);
  });
}
var CarFront_default = CarFront;
mark_module_end(CarFront);

// node_modules/svelte-bootstrap-icons/lib/CardChecklist.svelte
mark_module_start();
CardChecklist[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CardChecklist.svelte";
var root437 = add_locations(ns_template(`<svg><!><path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z"></path><path d="M7 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0zM7 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0z"></path></svg>`), CardChecklist[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function CardChecklist($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CardChecklist);
  var svg = root437();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-card-checklist", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CardChecklist = hmr(CardChecklist, () => CardChecklist[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardChecklist[HMR].source;
    set(CardChecklist[HMR].source, module.default[HMR].original);
  });
}
var CardChecklist_default = CardChecklist;
mark_module_end(CardChecklist);

// node_modules/svelte-bootstrap-icons/lib/CardHeading.svelte
mark_module_start();
CardHeading[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CardHeading.svelte";
var root438 = add_locations(ns_template(`<svg><!><path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z"></path><path d="M3 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm0-5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-1z"></path></svg>`), CardHeading[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function CardHeading($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CardHeading);
  var svg = root438();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-card-heading", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CardHeading = hmr(CardHeading, () => CardHeading[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardHeading[HMR].source;
    set(CardHeading[HMR].source, module.default[HMR].original);
  });
}
var CardHeading_default = CardHeading;
mark_module_end(CardHeading);

// node_modules/svelte-bootstrap-icons/lib/CardImage.svelte
mark_module_start();
CardImage[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CardImage.svelte";
var root439 = add_locations(ns_template(`<svg><!><path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path><path d="M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13zm13 1a.5.5 0 0 1 .5.5v6l-3.775-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12v.54A.505.505 0 0 1 1 12.5v-9a.5.5 0 0 1 .5-.5h13z"></path></svg>`), CardImage[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function CardImage($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CardImage);
  var svg = root439();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-card-image", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CardImage = hmr(CardImage, () => CardImage[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardImage[HMR].source;
    set(CardImage[HMR].source, module.default[HMR].original);
  });
}
var CardImage_default = CardImage;
mark_module_end(CardImage);

// node_modules/svelte-bootstrap-icons/lib/CardList.svelte
mark_module_start();
CardList[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CardList.svelte";
var root440 = add_locations(ns_template(`<svg><!><path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z"></path><path d="M5 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 5 8zm0-2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0 5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-1-5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zM4 8a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm0 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"></path></svg>`), CardList[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function CardList($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CardList);
  var svg = root440();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-card-list", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CardList = hmr(CardList, () => CardList[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardList[HMR].source;
    set(CardList[HMR].source, module.default[HMR].original);
  });
}
var CardList_default = CardList;
mark_module_end(CardList);

// node_modules/svelte-bootstrap-icons/lib/CardText.svelte
mark_module_start();
CardText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CardText.svelte";
var root441 = add_locations(ns_template(`<svg><!><path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z"></path><path d="M3 5.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 8a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 8zm0 2.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"></path></svg>`), CardText[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function CardText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CardText);
  var svg = root441();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-card-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CardText = hmr(CardText, () => CardText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardText[HMR].source;
    set(CardText[HMR].source, module.default[HMR].original);
  });
}
var CardText_default = CardText;
mark_module_end(CardText);

// node_modules/svelte-bootstrap-icons/lib/CaretDownFill.svelte
mark_module_start();
CaretDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretDownFill.svelte";
var root442 = add_locations(ns_template(`<svg><!><path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"></path></svg>`), CaretDownFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CaretDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretDownFill);
  var svg = root442();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretDownFill = hmr(CaretDownFill, () => CaretDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretDownFill[HMR].source;
    set(CaretDownFill[HMR].source, module.default[HMR].original);
  });
}
var CaretDownFill_default = CaretDownFill;
mark_module_end(CaretDownFill);

// node_modules/svelte-bootstrap-icons/lib/CaretDownSquareFill.svelte
mark_module_start();
CaretDownSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretDownSquareFill.svelte";
var root443 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm4 4a.5.5 0 0 0-.374.832l4 4.5a.5.5 0 0 0 .748 0l4-4.5A.5.5 0 0 0 12 6H4z"></path></svg>`), CaretDownSquareFill[FILENAME], [[1, 0, [[1, 183]]]]);
function CaretDownSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretDownSquareFill);
  var svg = root443();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-down-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretDownSquareFill = hmr(CaretDownSquareFill, () => CaretDownSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretDownSquareFill[HMR].source;
    set(CaretDownSquareFill[HMR].source, module.default[HMR].original);
  });
}
var CaretDownSquareFill_default = CaretDownSquareFill;
mark_module_end(CaretDownSquareFill);

// node_modules/svelte-bootstrap-icons/lib/CaretDownSquare.svelte
mark_module_start();
CaretDownSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretDownSquare.svelte";
var root444 = add_locations(ns_template(`<svg><!><path d="M3.626 6.832A.5.5 0 0 1 4 6h8a.5.5 0 0 1 .374.832l-4 4.5a.5.5 0 0 1-.748 0l-4-4.5z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2z"></path></svg>`), CaretDownSquare[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function CaretDownSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretDownSquare);
  var svg = root444();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-down-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretDownSquare = hmr(CaretDownSquare, () => CaretDownSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretDownSquare[HMR].source;
    set(CaretDownSquare[HMR].source, module.default[HMR].original);
  });
}
var CaretDownSquare_default = CaretDownSquare;
mark_module_end(CaretDownSquare);

// node_modules/svelte-bootstrap-icons/lib/CaretDown.svelte
mark_module_start();
CaretDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretDown.svelte";
var root445 = add_locations(ns_template(`<svg><!><path d="M3.204 5h9.592L8 10.481 3.204 5zm-.753.659 4.796 5.48a1 1 0 0 0 1.506 0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 0 0-.753 1.659z"></path></svg>`), CaretDown[FILENAME], [[1, 0, [[1, 171]]]]);
function CaretDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretDown);
  var svg = root445();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretDown = hmr(CaretDown, () => CaretDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretDown[HMR].source;
    set(CaretDown[HMR].source, module.default[HMR].original);
  });
}
var CaretDown_default = CaretDown;
mark_module_end(CaretDown);

// node_modules/svelte-bootstrap-icons/lib/CaretLeftFill.svelte
mark_module_start();
CaretLeftFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretLeftFill.svelte";
var root446 = add_locations(ns_template(`<svg><!><path d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"></path></svg>`), CaretLeftFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CaretLeftFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretLeftFill);
  var svg = root446();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-left-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretLeftFill = hmr(CaretLeftFill, () => CaretLeftFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretLeftFill[HMR].source;
    set(CaretLeftFill[HMR].source, module.default[HMR].original);
  });
}
var CaretLeftFill_default = CaretLeftFill;
mark_module_end(CaretLeftFill);

// node_modules/svelte-bootstrap-icons/lib/CaretLeftSquareFill.svelte
mark_module_start();
CaretLeftSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretLeftSquareFill.svelte";
var root447 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm10.5 10V4a.5.5 0 0 0-.832-.374l-4.5 4a.5.5 0 0 0 0 .748l4.5 4A.5.5 0 0 0 10.5 12z"></path></svg>`), CaretLeftSquareFill[FILENAME], [[1, 0, [[1, 183]]]]);
function CaretLeftSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretLeftSquareFill);
  var svg = root447();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-left-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretLeftSquareFill = hmr(CaretLeftSquareFill, () => CaretLeftSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretLeftSquareFill[HMR].source;
    set(CaretLeftSquareFill[HMR].source, module.default[HMR].original);
  });
}
var CaretLeftSquareFill_default = CaretLeftSquareFill;
mark_module_end(CaretLeftSquareFill);

// node_modules/svelte-bootstrap-icons/lib/CaretLeftSquare.svelte
mark_module_start();
CaretLeftSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretLeftSquare.svelte";
var root448 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M10.205 12.456A.5.5 0 0 0 10.5 12V4a.5.5 0 0 0-.832-.374l-4.5 4a.5.5 0 0 0 0 .748l4.5 4a.5.5 0 0 0 .537.082z"></path></svg>`), CaretLeftSquare[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function CaretLeftSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretLeftSquare);
  var svg = root448();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-left-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretLeftSquare = hmr(CaretLeftSquare, () => CaretLeftSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretLeftSquare[HMR].source;
    set(CaretLeftSquare[HMR].source, module.default[HMR].original);
  });
}
var CaretLeftSquare_default = CaretLeftSquare;
mark_module_end(CaretLeftSquare);

// node_modules/svelte-bootstrap-icons/lib/CaretLeft.svelte
mark_module_start();
CaretLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretLeft.svelte";
var root449 = add_locations(ns_template(`<svg><!><path d="M10 12.796V3.204L4.519 8 10 12.796zm-.659.753-5.48-4.796a1 1 0 0 1 0-1.506l5.48-4.796A1 1 0 0 1 11 3.204v9.592a1 1 0 0 1-1.659.753z"></path></svg>`), CaretLeft[FILENAME], [[1, 0, [[1, 171]]]]);
function CaretLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretLeft);
  var svg = root449();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretLeft = hmr(CaretLeft, () => CaretLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretLeft[HMR].source;
    set(CaretLeft[HMR].source, module.default[HMR].original);
  });
}
var CaretLeft_default = CaretLeft;
mark_module_end(CaretLeft);

// node_modules/svelte-bootstrap-icons/lib/CaretRightFill.svelte
mark_module_start();
CaretRightFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretRightFill.svelte";
var root450 = add_locations(ns_template(`<svg><!><path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"></path></svg>`), CaretRightFill[FILENAME], [[1, 0, [[1, 177]]]]);
function CaretRightFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretRightFill);
  var svg = root450();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-right-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretRightFill = hmr(CaretRightFill, () => CaretRightFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretRightFill[HMR].source;
    set(CaretRightFill[HMR].source, module.default[HMR].original);
  });
}
var CaretRightFill_default = CaretRightFill;
mark_module_end(CaretRightFill);

// node_modules/svelte-bootstrap-icons/lib/CaretRightSquareFill.svelte
mark_module_start();
CaretRightSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretRightSquareFill.svelte";
var root451 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm5.5 10a.5.5 0 0 0 .832.374l4.5-4a.5.5 0 0 0 0-.748l-4.5-4A.5.5 0 0 0 5.5 4v8z"></path></svg>`), CaretRightSquareFill[FILENAME], [[1, 0, [[1, 184]]]]);
function CaretRightSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretRightSquareFill);
  var svg = root451();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-right-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretRightSquareFill = hmr(CaretRightSquareFill, () => CaretRightSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretRightSquareFill[HMR].source;
    set(CaretRightSquareFill[HMR].source, module.default[HMR].original);
  });
}
var CaretRightSquareFill_default = CaretRightSquareFill;
mark_module_end(CaretRightSquareFill);

// node_modules/svelte-bootstrap-icons/lib/CaretRightSquare.svelte
mark_module_start();
CaretRightSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretRightSquare.svelte";
var root452 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M5.795 12.456A.5.5 0 0 1 5.5 12V4a.5.5 0 0 1 .832-.374l4.5 4a.5.5 0 0 1 0 .748l-4.5 4a.5.5 0 0 1-.537.082z"></path></svg>`), CaretRightSquare[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function CaretRightSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretRightSquare);
  var svg = root452();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-right-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretRightSquare = hmr(CaretRightSquare, () => CaretRightSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretRightSquare[HMR].source;
    set(CaretRightSquare[HMR].source, module.default[HMR].original);
  });
}
var CaretRightSquare_default = CaretRightSquare;
mark_module_end(CaretRightSquare);

// node_modules/svelte-bootstrap-icons/lib/CaretRight.svelte
mark_module_start();
CaretRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretRight.svelte";
var root453 = add_locations(ns_template(`<svg><!><path d="M6 12.796V3.204L11.481 8 6 12.796zm.659.753 5.48-4.796a1 1 0 0 0 0-1.506L6.66 2.451C6.011 1.885 5 2.345 5 3.204v9.592a1 1 0 0 0 1.659.753z"></path></svg>`), CaretRight[FILENAME], [[1, 0, [[1, 172]]]]);
function CaretRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretRight);
  var svg = root453();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretRight = hmr(CaretRight, () => CaretRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretRight[HMR].source;
    set(CaretRight[HMR].source, module.default[HMR].original);
  });
}
var CaretRight_default = CaretRight;
mark_module_end(CaretRight);

// node_modules/svelte-bootstrap-icons/lib/CaretUpFill.svelte
mark_module_start();
CaretUpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretUpFill.svelte";
var root454 = add_locations(ns_template(`<svg><!><path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"></path></svg>`), CaretUpFill[FILENAME], [[1, 0, [[1, 174]]]]);
function CaretUpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretUpFill);
  var svg = root454();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-up-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretUpFill = hmr(CaretUpFill, () => CaretUpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretUpFill[HMR].source;
    set(CaretUpFill[HMR].source, module.default[HMR].original);
  });
}
var CaretUpFill_default = CaretUpFill;
mark_module_end(CaretUpFill);

// node_modules/svelte-bootstrap-icons/lib/CaretUpSquareFill.svelte
mark_module_start();
CaretUpSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretUpSquareFill.svelte";
var root455 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm4 9h8a.5.5 0 0 0 .374-.832l-4-4.5a.5.5 0 0 0-.748 0l-4 4.5A.5.5 0 0 0 4 11z"></path></svg>`), CaretUpSquareFill[FILENAME], [[1, 0, [[1, 181]]]]);
function CaretUpSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretUpSquareFill);
  var svg = root455();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-up-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretUpSquareFill = hmr(CaretUpSquareFill, () => CaretUpSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretUpSquareFill[HMR].source;
    set(CaretUpSquareFill[HMR].source, module.default[HMR].original);
  });
}
var CaretUpSquareFill_default = CaretUpSquareFill;
mark_module_end(CaretUpSquareFill);

// node_modules/svelte-bootstrap-icons/lib/CaretUpSquare.svelte
mark_module_start();
CaretUpSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretUpSquare.svelte";
var root456 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M3.544 10.705A.5.5 0 0 0 4 11h8a.5.5 0 0 0 .374-.832l-4-4.5a.5.5 0 0 0-.748 0l-4 4.5a.5.5 0 0 0-.082.537z"></path></svg>`), CaretUpSquare[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function CaretUpSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretUpSquare);
  var svg = root456();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-up-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretUpSquare = hmr(CaretUpSquare, () => CaretUpSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretUpSquare[HMR].source;
    set(CaretUpSquare[HMR].source, module.default[HMR].original);
  });
}
var CaretUpSquare_default = CaretUpSquare;
mark_module_end(CaretUpSquare);

// node_modules/svelte-bootstrap-icons/lib/CaretUp.svelte
mark_module_start();
CaretUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CaretUp.svelte";
var root457 = add_locations(ns_template(`<svg><!><path d="M3.204 11h9.592L8 5.519 3.204 11zm-.753-.659 4.796-5.48a1 1 0 0 1 1.506 0l4.796 5.48c.566.647.106 1.659-.753 1.659H3.204a1 1 0 0 1-.753-1.659z"></path></svg>`), CaretUp[FILENAME], [[1, 0, [[1, 169]]]]);
function CaretUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CaretUp);
  var svg = root457();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-caret-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CaretUp = hmr(CaretUp, () => CaretUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CaretUp[HMR].source;
    set(CaretUp[HMR].source, module.default[HMR].original);
  });
}
var CaretUp_default = CaretUp;
mark_module_end(CaretUp);

// node_modules/svelte-bootstrap-icons/lib/CartCheckFill.svelte
mark_module_start();
CartCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CartCheckFill.svelte";
var root458 = add_locations(ns_template(`<svg><!><path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-1.646-7.646-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L8 8.293l2.646-2.647a.5.5 0 0 1 .708.708z"></path></svg>`), CartCheckFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CartCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CartCheckFill);
  var svg = root458();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CartCheckFill = hmr(CartCheckFill, () => CartCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CartCheckFill[HMR].source;
    set(CartCheckFill[HMR].source, module.default[HMR].original);
  });
}
var CartCheckFill_default = CartCheckFill;
mark_module_end(CartCheckFill);

// node_modules/svelte-bootstrap-icons/lib/CartCheck.svelte
mark_module_start();
CartCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CartCheck.svelte";
var root459 = add_locations(ns_template(`<svg><!><path d="M11.354 6.354a.5.5 0 0 0-.708-.708L8 8.293 6.854 7.146a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0l3-3z"></path><path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zm3.915 10L3.102 4h10.796l-1.313 7h-8.17zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), CartCheck[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function CartCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CartCheck);
  var svg = root459();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CartCheck = hmr(CartCheck, () => CartCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CartCheck[HMR].source;
    set(CartCheck[HMR].source, module.default[HMR].original);
  });
}
var CartCheck_default = CartCheck;
mark_module_end(CartCheck);

// node_modules/svelte-bootstrap-icons/lib/CartDashFill.svelte
mark_module_start();
CartDashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CartDashFill.svelte";
var root460 = add_locations(ns_template(`<svg><!><path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM6.5 7h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1 0-1z"></path></svg>`), CartDashFill[FILENAME], [[1, 0, [[1, 175]]]]);
function CartDashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CartDashFill);
  var svg = root460();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart-dash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CartDashFill = hmr(CartDashFill, () => CartDashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CartDashFill[HMR].source;
    set(CartDashFill[HMR].source, module.default[HMR].original);
  });
}
var CartDashFill_default = CartDashFill;
mark_module_end(CartDashFill);

// node_modules/svelte-bootstrap-icons/lib/CartDash.svelte
mark_module_start();
CartDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CartDash.svelte";
var root461 = add_locations(ns_template(`<svg><!><path d="M6.5 7a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1h-4z"></path><path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zm3.915 10L3.102 4h10.796l-1.313 7h-8.17zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), CartDash[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function CartDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CartDash);
  var svg = root461();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CartDash = hmr(CartDash, () => CartDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CartDash[HMR].source;
    set(CartDash[HMR].source, module.default[HMR].original);
  });
}
var CartDash_default = CartDash;
mark_module_end(CartDash);

// node_modules/svelte-bootstrap-icons/lib/CartFill.svelte
mark_module_start();
CartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CartFill.svelte";
var root462 = add_locations(ns_template(`<svg><!><path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path></svg>`), CartFill[FILENAME], [[1, 0, [[1, 170]]]]);
function CartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CartFill);
  var svg = root462();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CartFill = hmr(CartFill, () => CartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CartFill[HMR].source;
    set(CartFill[HMR].source, module.default[HMR].original);
  });
}
var CartFill_default = CartFill;
mark_module_end(CartFill);

// node_modules/svelte-bootstrap-icons/lib/CartPlusFill.svelte
mark_module_start();
CartPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CartPlusFill.svelte";
var root463 = add_locations(ns_template(`<svg><!><path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM9 5.5V7h1.5a.5.5 0 0 1 0 1H9v1.5a.5.5 0 0 1-1 0V8H6.5a.5.5 0 0 1 0-1H8V5.5a.5.5 0 0 1 1 0z"></path></svg>`), CartPlusFill[FILENAME], [[1, 0, [[1, 175]]]]);
function CartPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CartPlusFill);
  var svg = root463();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CartPlusFill = hmr(CartPlusFill, () => CartPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CartPlusFill[HMR].source;
    set(CartPlusFill[HMR].source, module.default[HMR].original);
  });
}
var CartPlusFill_default = CartPlusFill;
mark_module_end(CartPlusFill);

// node_modules/svelte-bootstrap-icons/lib/CartPlus.svelte
mark_module_start();
CartPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CartPlus.svelte";
var root464 = add_locations(ns_template(`<svg><!><path d="M9 5.5a.5.5 0 0 0-1 0V7H6.5a.5.5 0 0 0 0 1H8v1.5a.5.5 0 0 0 1 0V8h1.5a.5.5 0 0 0 0-1H9V5.5z"></path><path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zm3.915 10L3.102 4h10.796l-1.313 7h-8.17zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), CartPlus[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function CartPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CartPlus);
  var svg = root464();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CartPlus = hmr(CartPlus, () => CartPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CartPlus[HMR].source;
    set(CartPlus[HMR].source, module.default[HMR].original);
  });
}
var CartPlus_default = CartPlus;
mark_module_end(CartPlus);

// node_modules/svelte-bootstrap-icons/lib/CartXFill.svelte
mark_module_start();
CartXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CartXFill.svelte";
var root465 = add_locations(ns_template(`<svg><!><path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7.354 5.646 8.5 6.793l1.146-1.147a.5.5 0 0 1 .708.708L9.207 7.5l1.147 1.146a.5.5 0 0 1-.708.708L8.5 8.207 7.354 9.354a.5.5 0 1 1-.708-.708L7.793 7.5 6.646 6.354a.5.5 0 1 1 .708-.708z"></path></svg>`), CartXFill[FILENAME], [[1, 0, [[1, 172]]]]);
function CartXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CartXFill);
  var svg = root465();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CartXFill = hmr(CartXFill, () => CartXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CartXFill[HMR].source;
    set(CartXFill[HMR].source, module.default[HMR].original);
  });
}
var CartXFill_default = CartXFill;
mark_module_end(CartXFill);

// node_modules/svelte-bootstrap-icons/lib/CartX.svelte
mark_module_start();
CartX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CartX.svelte";
var root466 = add_locations(ns_template(`<svg><!><path d="M7.354 5.646a.5.5 0 1 0-.708.708L7.793 7.5 6.646 8.646a.5.5 0 1 0 .708.708L8.5 8.207l1.146 1.147a.5.5 0 0 0 .708-.708L9.207 7.5l1.147-1.146a.5.5 0 0 0-.708-.708L8.5 6.793 7.354 5.646z"></path><path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zm3.915 10L3.102 4h10.796l-1.313 7h-8.17zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), CartX[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function CartX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CartX);
  var svg = root466();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CartX = hmr(CartX, () => CartX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CartX[HMR].source;
    set(CartX[HMR].source, module.default[HMR].original);
  });
}
var CartX_default = CartX;
mark_module_end(CartX);

// node_modules/svelte-bootstrap-icons/lib/Cart.svelte
mark_module_start();
Cart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cart.svelte";
var root467 = add_locations(ns_template(`<svg><!><path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM3.102 4l1.313 7h8.17l1.313-7H3.102zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path></svg>`), Cart[FILENAME], [[1, 0, [[1, 165]]]]);
function Cart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cart);
  var svg = root467();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cart = hmr(Cart, () => Cart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cart[HMR].source;
    set(Cart[HMR].source, module.default[HMR].original);
  });
}
var Cart_default = Cart;
mark_module_end(Cart);

// node_modules/svelte-bootstrap-icons/lib/Cart2.svelte
mark_module_start();
Cart2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cart2.svelte";
var root468 = add_locations(ns_template(`<svg><!><path d="M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5zM3.14 5l1.25 5h8.22l1.25-5H3.14zM5 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0zm9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0z"></path></svg>`), Cart2[FILENAME], [[1, 0, [[1, 166]]]]);
function Cart2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cart2);
  var svg = root468();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cart2 = hmr(Cart2, () => Cart2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cart2[HMR].source;
    set(Cart2[HMR].source, module.default[HMR].original);
  });
}
var Cart2_default = Cart2;
mark_module_end(Cart2);

// node_modules/svelte-bootstrap-icons/lib/Cart3.svelte
mark_module_start();
Cart3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cart3.svelte";
var root469 = add_locations(ns_template(`<svg><!><path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .49.598l-1 5a.5.5 0 0 1-.465.401l-9.397.472L4.415 11H13a.5.5 0 0 1 0 1H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM3.102 4l.84 4.479 9.144-.459L13.89 4H3.102zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path></svg>`), Cart3[FILENAME], [[1, 0, [[1, 166]]]]);
function Cart3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cart3);
  var svg = root469();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cart3 = hmr(Cart3, () => Cart3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cart3[HMR].source;
    set(Cart3[HMR].source, module.default[HMR].original);
  });
}
var Cart3_default = Cart3;
mark_module_end(Cart3);

// node_modules/svelte-bootstrap-icons/lib/Cart4.svelte
mark_module_start();
Cart4[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cart4.svelte";
var root470 = add_locations(ns_template(`<svg><!><path d="M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5zM3.14 5l.5 2H5V5H3.14zM6 5v2h2V5H6zm3 0v2h2V5H9zm3 0v2h1.36l.5-2H12zm1.11 3H12v2h.61l.5-2zM11 8H9v2h2V8zM8 8H6v2h2V8zM5 8H3.89l.5 2H5V8zm0 5a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0zm9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0z"></path></svg>`), Cart4[FILENAME], [[1, 0, [[1, 166]]]]);
function Cart4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cart4);
  var svg = root470();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cart4", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cart4 = hmr(Cart4, () => Cart4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cart4[HMR].source;
    set(Cart4[HMR].source, module.default[HMR].original);
  });
}
var Cart4_default = Cart4;
mark_module_end(Cart4);

// node_modules/svelte-bootstrap-icons/lib/CashCoin.svelte
mark_module_start();
CashCoin[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CashCoin.svelte";
var root471 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11 15a4 4 0 1 0 0-8 4 4 0 0 0 0 8zm5-4a5 5 0 1 1-10 0 5 5 0 0 1 10 0z"></path><path d="M9.438 11.944c.047.596.518 1.06 1.363 1.116v.44h.375v-.443c.875-.061 1.386-.529 1.386-1.207 0-.618-.39-.936-1.09-1.1l-.296-.07v-1.2c.376.043.614.248.671.532h.658c-.047-.575-.54-1.024-1.329-1.073V8.5h-.375v.45c-.747.073-1.255.522-1.255 1.158 0 .562.378.92 1.007 1.066l.248.061v1.272c-.384-.058-.639-.27-.696-.563h-.668zm1.36-1.354c-.369-.085-.569-.26-.569-.522 0-.294.216-.514.572-.578v1.1h-.003zm.432.746c.449.104.655.272.655.569 0 .339-.257.571-.709.614v-1.195l.054.012z"></path><path d="M1 0a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4.083c.058-.344.145-.678.258-1H3a2 2 0 0 0-2-2V3a2 2 0 0 0 2-2h10a2 2 0 0 0 2 2v3.528c.38.34.717.728 1 1.154V1a1 1 0 0 0-1-1H1z"></path><path d="M9.998 5.083 10 5a2 2 0 1 0-3.132 1.65 5.982 5.982 0 0 1 3.13-1.567z"></path></svg>`), CashCoin[FILENAME], [
  [
    1,
    0,
    [
      [1, 170],
      [2, 2],
      [3, 2],
      [4, 2]
    ]
  ]
]);
function CashCoin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CashCoin);
  var svg = root471();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(4);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cash-coin", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CashCoin = hmr(CashCoin, () => CashCoin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CashCoin[HMR].source;
    set(CashCoin[HMR].source, module.default[HMR].original);
  });
}
var CashCoin_default = CashCoin;
mark_module_end(CashCoin);

// node_modules/svelte-bootstrap-icons/lib/CashStack.svelte
mark_module_start();
CashStack[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CashStack.svelte";
var root472 = add_locations(ns_template(`<svg><!><path d="M1 3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1H1zm7 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"></path><path d="M0 5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V5zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V7a2 2 0 0 1-2-2H3z"></path></svg>`), CashStack[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function CashStack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CashStack);
  var svg = root472();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cash-stack", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CashStack = hmr(CashStack, () => CashStack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CashStack[HMR].source;
    set(CashStack[HMR].source, module.default[HMR].original);
  });
}
var CashStack_default = CashStack;
mark_module_end(CashStack);

// node_modules/svelte-bootstrap-icons/lib/Cash.svelte
mark_module_start();
Cash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cash.svelte";
var root473 = add_locations(ns_template(`<svg><!><path d="M8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"></path><path d="M0 4a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V4zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V6a2 2 0 0 1-2-2H3z"></path></svg>`), Cash[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Cash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cash);
  var svg = root473();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cash = hmr(Cash, () => Cash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cash[HMR].source;
    set(Cash[HMR].source, module.default[HMR].original);
  });
}
var Cash_default = Cash;
mark_module_end(Cash);

// node_modules/svelte-bootstrap-icons/lib/CassetteFill.svelte
mark_module_start();
CassetteFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CassetteFill.svelte";
var root474 = add_locations(ns_template(`<svg><!><path d="M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h.191l1.862-3.724A.5.5 0 0 1 4 10h8a.5.5 0 0 1 .447.276L14.31 14h.191a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13ZM4 7a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2ZM6 6a1 1 0 0 1 1-1h2a1 1 0 0 1 0 2H7a1 1 0 0 1-1-1Z"></path><path d="m13.191 14-1.5-3H4.309l-1.5 3h10.382Z"></path></svg>`), CassetteFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function CassetteFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CassetteFill);
  var svg = root474();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cassette-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CassetteFill = hmr(CassetteFill, () => CassetteFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CassetteFill[HMR].source;
    set(CassetteFill[HMR].source, module.default[HMR].original);
  });
}
var CassetteFill_default = CassetteFill;
mark_module_end(CassetteFill);

// node_modules/svelte-bootstrap-icons/lib/Cassette.svelte
mark_module_start();
Cassette[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cassette.svelte";
var root475 = add_locations(ns_template(`<svg><!><path d="M4 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm9-1a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM7 6a1 1 0 0 0 0 2h2a1 1 0 1 0 0-2H7Z"></path><path d="M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13ZM1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-.691l-1.362-2.724A.5.5 0 0 0 12 10H4a.5.5 0 0 0-.447.276L2.19 13H1.5a.5.5 0 0 1-.5-.5v-9ZM11.691 11l1 2H3.309l1-2h7.382Z"></path></svg>`), Cassette[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Cassette($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cassette);
  var svg = root475();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cassette", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cassette = hmr(Cassette, () => Cassette[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cassette[HMR].source;
    set(Cassette[HMR].source, module.default[HMR].original);
  });
}
var Cassette_default = Cassette;
mark_module_end(Cassette);

// node_modules/svelte-bootstrap-icons/lib/Cast.svelte
mark_module_start();
Cast[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cast.svelte";
var root476 = add_locations(ns_template(`<svg><!><path d="m7.646 9.354-3.792 3.792a.5.5 0 0 0 .353.854h7.586a.5.5 0 0 0 .354-.854L8.354 9.354a.5.5 0 0 0-.708 0z"></path><path d="M11.414 11H14.5a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.5-.5h-13a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h3.086l-1 1H1.5A1.5 1.5 0 0 1 0 10.5v-7A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v7a1.5 1.5 0 0 1-1.5 1.5h-2.086l-1-1z"></path></svg>`), Cast[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Cast($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cast);
  var svg = root476();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cast", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cast = hmr(Cast, () => Cast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cast[HMR].source;
    set(Cast[HMR].source, module.default[HMR].original);
  });
}
var Cast_default = Cast;
mark_module_end(Cast);

// node_modules/svelte-bootstrap-icons/lib/CcCircleFill.svelte
mark_module_start();
CcCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CcCircleFill.svelte";
var root477 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM5.408 5.89c.681 0 1.138.47 1.187 1.107h1.147v-.11c-.053-1.187-1.024-2-2.343-2-1.604 0-2.518 1.05-2.518 2.751v.747c0 1.7.906 2.73 2.518 2.73 1.314 0 2.285-.792 2.343-1.939v-.114H6.595c-.049.615-.497 1.05-1.187 1.05-.84 0-1.318-.62-1.318-1.727v-.742c0-1.112.488-1.754 1.318-1.754Zm5.404 0c.68 0 1.138.47 1.186 1.107h1.147v-.11c-.053-1.187-1.024-2-2.342-2-1.604 0-2.518 1.05-2.518 2.751v.747c0 1.7.905 2.73 2.518 2.73 1.314 0 2.285-.792 2.342-1.939v-.114h-1.147c-.048.615-.496 1.05-1.186 1.05-.84 0-1.319-.62-1.319-1.727v-.742c0-1.112.488-1.754 1.319-1.754Z"></path></svg>`), CcCircleFill[FILENAME], [[1, 0, [[1, 175]]]]);
function CcCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CcCircleFill);
  var svg = root477();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cc-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CcCircleFill = hmr(CcCircleFill, () => CcCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CcCircleFill[HMR].source;
    set(CcCircleFill[HMR].source, module.default[HMR].original);
  });
}
var CcCircleFill_default = CcCircleFill;
mark_module_end(CcCircleFill);

// node_modules/svelte-bootstrap-icons/lib/CcCircle.svelte
mark_module_start();
CcCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CcCircle.svelte";
var root478 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM5.408 5.89c-.83 0-1.318.64-1.318 1.753v.742c0 1.108.479 1.727 1.318 1.727.69 0 1.138-.435 1.187-1.05h1.147v.114c-.058 1.147-1.029 1.938-2.343 1.938-1.612 0-2.518-1.028-2.518-2.729v-.747c0-1.7.914-2.75 2.518-2.75 1.319 0 2.29.812 2.343 1.999v.11H6.595c-.049-.638-.506-1.108-1.187-1.108Zm5.404 0c-.831 0-1.319.64-1.319 1.753v.742c0 1.108.48 1.727 1.319 1.727.69 0 1.138-.435 1.186-1.05h1.147v.114c-.057 1.147-1.028 1.938-2.342 1.938-1.613 0-2.518-1.028-2.518-2.729v-.747c0-1.7.914-2.75 2.518-2.75 1.318 0 2.29.812 2.342 1.999v.11h-1.147c-.048-.638-.505-1.108-1.186-1.108Z"></path></svg>`), CcCircle[FILENAME], [[1, 0, [[1, 170]]]]);
function CcCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CcCircle);
  var svg = root478();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cc-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CcCircle = hmr(CcCircle, () => CcCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CcCircle[HMR].source;
    set(CcCircle[HMR].source, module.default[HMR].original);
  });
}
var CcCircle_default = CcCircle;
mark_module_end(CcCircle);

// node_modules/svelte-bootstrap-icons/lib/CcSquareFill.svelte
mark_module_start();
CcSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CcSquareFill.svelte";
var root479 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm3.408 5.89c-.83 0-1.318.64-1.318 1.753v.742c0 1.108.479 1.727 1.318 1.727.69 0 1.138-.435 1.187-1.05h1.147v.114c-.058 1.147-1.029 1.938-2.343 1.938-1.612 0-2.518-1.028-2.518-2.729v-.747c0-1.7.914-2.75 2.518-2.75 1.319 0 2.29.812 2.343 1.999v.11H6.595c-.049-.638-.506-1.108-1.187-1.108Zm5.404 0c-.831 0-1.319.64-1.319 1.753v.742c0 1.108.48 1.727 1.319 1.727.69 0 1.138-.435 1.186-1.05h1.147v.114c-.057 1.147-1.028 1.938-2.342 1.938-1.613 0-2.518-1.028-2.518-2.729v-.747c0-1.7.914-2.75 2.518-2.75 1.318 0 2.29.812 2.342 1.999v.11h-1.147c-.048-.638-.505-1.108-1.186-1.108Z"></path></svg>`), CcSquareFill[FILENAME], [[1, 0, [[1, 175]]]]);
function CcSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CcSquareFill);
  var svg = root479();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cc-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CcSquareFill = hmr(CcSquareFill, () => CcSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CcSquareFill[HMR].source;
    set(CcSquareFill[HMR].source, module.default[HMR].original);
  });
}
var CcSquareFill_default = CcSquareFill;
mark_module_end(CcSquareFill);

// node_modules/svelte-bootstrap-icons/lib/CcSquare.svelte
mark_module_start();
CcSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CcSquare.svelte";
var root480 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2ZM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm5.408 3.89c-.83 0-1.318.64-1.318 1.753v.742c0 1.108.479 1.727 1.318 1.727.69 0 1.138-.435 1.187-1.05h1.147v.114c-.058 1.147-1.029 1.938-2.343 1.938-1.612 0-2.518-1.028-2.518-2.729v-.747c0-1.7.914-2.75 2.518-2.75 1.319 0 2.29.812 2.343 1.999v.11H6.595c-.049-.638-.506-1.108-1.187-1.108Zm5.404 0c-.831 0-1.319.64-1.319 1.753v.742c0 1.108.48 1.727 1.319 1.727.69 0 1.138-.435 1.186-1.05h1.147v.114c-.057 1.147-1.028 1.938-2.342 1.938-1.613 0-2.518-1.028-2.518-2.729v-.747c0-1.7.914-2.75 2.518-2.75 1.318 0 2.29.812 2.342 1.999v.11h-1.147c-.048-.638-.505-1.108-1.186-1.108Z"></path><path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2ZM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm5.408 3.89c-.83 0-1.318.64-1.318 1.753v.742c0 1.108.479 1.727 1.318 1.727.69 0 1.138-.435 1.187-1.05h1.147v.114c-.058 1.147-1.029 1.938-2.343 1.938-1.612 0-2.518-1.028-2.518-2.729v-.747c0-1.7.914-2.75 2.518-2.75 1.319 0 2.29.812 2.343 1.999v.11H6.595c-.049-.638-.506-1.108-1.187-1.108Zm5.404 0c-.831 0-1.319.64-1.319 1.753v.742c0 1.108.48 1.727 1.319 1.727.69 0 1.138-.435 1.186-1.05h1.147v.114c-.057 1.147-1.028 1.938-2.342 1.938-1.613 0-2.518-1.028-2.518-2.729v-.747c0-1.7.914-2.75 2.518-2.75 1.318 0 2.29.812 2.342 1.999v.11h-1.147c-.048-.638-.505-1.108-1.186-1.108Z"></path></svg>`), CcSquare[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function CcSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CcSquare);
  var svg = root480();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cc-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CcSquare = hmr(CcSquare, () => CcSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CcSquare[HMR].source;
    set(CcSquare[HMR].source, module.default[HMR].original);
  });
}
var CcSquare_default = CcSquare;
mark_module_end(CcSquare);

// node_modules/svelte-bootstrap-icons/lib/ChatDotsFill.svelte
mark_module_start();
ChatDotsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatDotsFill.svelte";
var root481 = add_locations(ns_template(`<svg><!><path d="M16 8c0 3.866-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.584.296-1.925.864-4.181 1.234-.2.032-.352-.176-.273-.362.354-.836.674-1.95.77-2.966C.744 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7zM5 8a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), ChatDotsFill[FILENAME], [[1, 0, [[1, 175]]]]);
function ChatDotsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatDotsFill);
  var svg = root481();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-dots-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatDotsFill = hmr(ChatDotsFill, () => ChatDotsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatDotsFill[HMR].source;
    set(ChatDotsFill[HMR].source, module.default[HMR].original);
  });
}
var ChatDotsFill_default = ChatDotsFill;
mark_module_end(ChatDotsFill);

// node_modules/svelte-bootstrap-icons/lib/ChatDots.svelte
mark_module_start();
ChatDots[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatDots.svelte";
var root482 = add_locations(ns_template(`<svg><!><path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path><path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"></path></svg>`), ChatDots[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function ChatDots($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatDots);
  var svg = root482();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-dots", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatDots = hmr(ChatDots, () => ChatDots[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatDots[HMR].source;
    set(ChatDots[HMR].source, module.default[HMR].original);
  });
}
var ChatDots_default = ChatDots;
mark_module_end(ChatDots);

// node_modules/svelte-bootstrap-icons/lib/ChatFill.svelte
mark_module_start();
ChatFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatFill.svelte";
var root483 = add_locations(ns_template(`<svg><!><path d="M8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6-.097 1.016-.417 2.13-.771 2.966-.079.186.074.394.273.362 2.256-.37 3.597-.938 4.18-1.234A9.06 9.06 0 0 0 8 15z"></path></svg>`), ChatFill[FILENAME], [[1, 0, [[1, 170]]]]);
function ChatFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatFill);
  var svg = root483();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatFill = hmr(ChatFill, () => ChatFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatFill[HMR].source;
    set(ChatFill[HMR].source, module.default[HMR].original);
  });
}
var ChatFill_default = ChatFill;
mark_module_end(ChatFill);

// node_modules/svelte-bootstrap-icons/lib/ChatHeartFill.svelte
mark_module_start();
ChatHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatHeartFill.svelte";
var root484 = add_locations(ns_template(`<svg><!><path d="M8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6-.097 1.016-.417 2.13-.771 2.966-.079.186.074.394.273.362 2.256-.37 3.597-.938 4.18-1.234A9.06 9.06 0 0 0 8 15Zm0-9.007c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), ChatHeartFill[FILENAME], [[1, 0, [[1, 176]]]]);
function ChatHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatHeartFill);
  var svg = root484();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatHeartFill = hmr(ChatHeartFill, () => ChatHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatHeartFill[HMR].source;
    set(ChatHeartFill[HMR].source, module.default[HMR].original);
  });
}
var ChatHeartFill_default = ChatHeartFill;
mark_module_end(ChatHeartFill);

// node_modules/svelte-bootstrap-icons/lib/ChatHeart.svelte
mark_module_start();
ChatHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatHeart.svelte";
var root485 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2.965 12.695a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2Zm-.8 3.108.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125ZM8 5.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), ChatHeart[FILENAME], [[1, 0, [[1, 171]]]]);
function ChatHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatHeart);
  var svg = root485();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatHeart = hmr(ChatHeart, () => ChatHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatHeart[HMR].source;
    set(ChatHeart[HMR].source, module.default[HMR].original);
  });
}
var ChatHeart_default = ChatHeart;
mark_module_end(ChatHeart);

// node_modules/svelte-bootstrap-icons/lib/ChatLeftDotsFill.svelte
mark_module_start();
ChatLeftDotsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeftDotsFill.svelte";
var root486 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4.414a1 1 0 0 0-.707.293L.854 15.146A.5.5 0 0 1 0 14.793V2zm5 4a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), ChatLeftDotsFill[FILENAME], [[1, 0, [[1, 180]]]]);
function ChatLeftDotsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeftDotsFill);
  var svg = root486();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left-dots-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeftDotsFill = hmr(ChatLeftDotsFill, () => ChatLeftDotsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeftDotsFill[HMR].source;
    set(ChatLeftDotsFill[HMR].source, module.default[HMR].original);
  });
}
var ChatLeftDotsFill_default = ChatLeftDotsFill;
mark_module_end(ChatLeftDotsFill);

// node_modules/svelte-bootstrap-icons/lib/ChatLeftDots.svelte
mark_module_start();
ChatLeftDots[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeftDots.svelte";
var root487 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M5 6a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), ChatLeftDots[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function ChatLeftDots($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeftDots);
  var svg = root487();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left-dots", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeftDots = hmr(ChatLeftDots, () => ChatLeftDots[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeftDots[HMR].source;
    set(ChatLeftDots[HMR].source, module.default[HMR].original);
  });
}
var ChatLeftDots_default = ChatLeftDots;
mark_module_end(ChatLeftDots);

// node_modules/svelte-bootstrap-icons/lib/ChatLeftFill.svelte
mark_module_start();
ChatLeftFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeftFill.svelte";
var root488 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path></svg>`), ChatLeftFill[FILENAME], [[1, 0, [[1, 175]]]]);
function ChatLeftFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeftFill);
  var svg = root488();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeftFill = hmr(ChatLeftFill, () => ChatLeftFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeftFill[HMR].source;
    set(ChatLeftFill[HMR].source, module.default[HMR].original);
  });
}
var ChatLeftFill_default = ChatLeftFill;
mark_module_end(ChatLeftFill);

// node_modules/svelte-bootstrap-icons/lib/ChatLeftHeartFill.svelte
mark_module_start();
ChatLeftHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeftHeartFill.svelte";
var root489 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm6 3.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), ChatLeftHeartFill[FILENAME], [[1, 0, [[1, 181]]]]);
function ChatLeftHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeftHeartFill);
  var svg = root489();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeftHeartFill = hmr(ChatLeftHeartFill, () => ChatLeftHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeftHeartFill[HMR].source;
    set(ChatLeftHeartFill[HMR].source, module.default[HMR].original);
  });
}
var ChatLeftHeartFill_default = ChatLeftHeartFill;
mark_module_end(ChatLeftHeartFill);

// node_modules/svelte-bootstrap-icons/lib/ChatLeftHeart.svelte
mark_module_start();
ChatLeftHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeftHeart.svelte";
var root490 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12ZM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Z"></path><path d="M8 3.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), ChatLeftHeart[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function ChatLeftHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeftHeart);
  var svg = root490();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeftHeart = hmr(ChatLeftHeart, () => ChatLeftHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeftHeart[HMR].source;
    set(ChatLeftHeart[HMR].source, module.default[HMR].original);
  });
}
var ChatLeftHeart_default = ChatLeftHeart;
mark_module_end(ChatLeftHeart);

// node_modules/svelte-bootstrap-icons/lib/ChatLeftQuoteFill.svelte
mark_module_start();
ChatLeftQuoteFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeftQuoteFill.svelte";
var root491 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4.414a1 1 0 0 0-.707.293L.854 15.146A.5.5 0 0 1 0 14.793V2zm7.194 2.766a1.688 1.688 0 0 0-.227-.272 1.467 1.467 0 0 0-.469-.324l-.008-.004A1.785 1.785 0 0 0 5.734 4C4.776 4 4 4.746 4 5.667c0 .92.776 1.666 1.734 1.666.343 0 .662-.095.931-.26-.137.389-.39.804-.81 1.22a.405.405 0 0 0 .011.59c.173.16.447.155.614-.01 1.334-1.329 1.37-2.758.941-3.706a2.461 2.461 0 0 0-.227-.4zM11 7.073c-.136.389-.39.804-.81 1.22a.405.405 0 0 0 .012.59c.172.16.446.155.613-.01 1.334-1.329 1.37-2.758.942-3.706a2.466 2.466 0 0 0-.228-.4 1.686 1.686 0 0 0-.227-.273 1.466 1.466 0 0 0-.469-.324l-.008-.004A1.785 1.785 0 0 0 10.07 4c-.957 0-1.734.746-1.734 1.667 0 .92.777 1.666 1.734 1.666.343 0 .662-.095.931-.26z"></path></svg>`), ChatLeftQuoteFill[FILENAME], [[1, 0, [[1, 181]]]]);
function ChatLeftQuoteFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeftQuoteFill);
  var svg = root491();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left-quote-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeftQuoteFill = hmr(ChatLeftQuoteFill, () => ChatLeftQuoteFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeftQuoteFill[HMR].source;
    set(ChatLeftQuoteFill[HMR].source, module.default[HMR].original);
  });
}
var ChatLeftQuoteFill_default = ChatLeftQuoteFill;
mark_module_end(ChatLeftQuoteFill);

// node_modules/svelte-bootstrap-icons/lib/ChatLeftQuote.svelte
mark_module_start();
ChatLeftQuote[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeftQuote.svelte";
var root492 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M7.066 4.76A1.665 1.665 0 0 0 4 5.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 1 0 .6.58c1.486-1.54 1.293-3.214.682-4.112zm4 0A1.665 1.665 0 0 0 8 5.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 1 0 .6.58c1.486-1.54 1.293-3.214.682-4.112z"></path></svg>`), ChatLeftQuote[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function ChatLeftQuote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeftQuote);
  var svg = root492();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left-quote", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeftQuote = hmr(ChatLeftQuote, () => ChatLeftQuote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeftQuote[HMR].source;
    set(ChatLeftQuote[HMR].source, module.default[HMR].original);
  });
}
var ChatLeftQuote_default = ChatLeftQuote;
mark_module_end(ChatLeftQuote);

// node_modules/svelte-bootstrap-icons/lib/ChatLeftTextFill.svelte
mark_module_start();
ChatLeftTextFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeftTextFill.svelte";
var root493 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4.414a1 1 0 0 0-.707.293L.854 15.146A.5.5 0 0 1 0 14.793V2zm3.5 1a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9zm0 2.5a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9zm0 2.5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5z"></path></svg>`), ChatLeftTextFill[FILENAME], [[1, 0, [[1, 180]]]]);
function ChatLeftTextFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeftTextFill);
  var svg = root493();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left-text-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeftTextFill = hmr(ChatLeftTextFill, () => ChatLeftTextFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeftTextFill[HMR].source;
    set(ChatLeftTextFill[HMR].source, module.default[HMR].original);
  });
}
var ChatLeftTextFill_default = ChatLeftTextFill;
mark_module_end(ChatLeftTextFill);

// node_modules/svelte-bootstrap-icons/lib/ChatLeftText.svelte
mark_module_start();
ChatLeftText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeftText.svelte";
var root494 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"></path></svg>`), ChatLeftText[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function ChatLeftText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeftText);
  var svg = root494();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeftText = hmr(ChatLeftText, () => ChatLeftText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeftText[HMR].source;
    set(ChatLeftText[HMR].source, module.default[HMR].original);
  });
}
var ChatLeftText_default = ChatLeftText;
mark_module_end(ChatLeftText);

// node_modules/svelte-bootstrap-icons/lib/ChatLeft.svelte
mark_module_start();
ChatLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatLeft.svelte";
var root495 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path></svg>`), ChatLeft[FILENAME], [[1, 0, [[1, 170]]]]);
function ChatLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatLeft);
  var svg = root495();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatLeft = hmr(ChatLeft, () => ChatLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatLeft[HMR].source;
    set(ChatLeft[HMR].source, module.default[HMR].original);
  });
}
var ChatLeft_default = ChatLeft;
mark_module_end(ChatLeft);

// node_modules/svelte-bootstrap-icons/lib/ChatQuoteFill.svelte
mark_module_start();
ChatQuoteFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatQuoteFill.svelte";
var root496 = add_locations(ns_template(`<svg><!><path d="M16 8c0 3.866-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.584.296-1.925.864-4.181 1.234-.2.032-.352-.176-.273-.362.354-.836.674-1.95.77-2.966C.744 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7zM7.194 6.766a1.688 1.688 0 0 0-.227-.272 1.467 1.467 0 0 0-.469-.324l-.008-.004A1.785 1.785 0 0 0 5.734 6C4.776 6 4 6.746 4 7.667c0 .92.776 1.666 1.734 1.666.343 0 .662-.095.931-.26-.137.389-.39.804-.81 1.22a.405.405 0 0 0 .011.59c.173.16.447.155.614-.01 1.334-1.329 1.37-2.758.941-3.706a2.461 2.461 0 0 0-.227-.4zM11 9.073c-.136.389-.39.804-.81 1.22a.405.405 0 0 0 .012.59c.172.16.446.155.613-.01 1.334-1.329 1.37-2.758.942-3.706a2.466 2.466 0 0 0-.228-.4 1.686 1.686 0 0 0-.227-.273 1.466 1.466 0 0 0-.469-.324l-.008-.004A1.785 1.785 0 0 0 10.07 6c-.957 0-1.734.746-1.734 1.667 0 .92.777 1.666 1.734 1.666.343 0 .662-.095.931-.26z"></path></svg>`), ChatQuoteFill[FILENAME], [[1, 0, [[1, 176]]]]);
function ChatQuoteFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatQuoteFill);
  var svg = root496();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-quote-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatQuoteFill = hmr(ChatQuoteFill, () => ChatQuoteFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatQuoteFill[HMR].source;
    set(ChatQuoteFill[HMR].source, module.default[HMR].original);
  });
}
var ChatQuoteFill_default = ChatQuoteFill;
mark_module_end(ChatQuoteFill);

// node_modules/svelte-bootstrap-icons/lib/ChatQuote.svelte
mark_module_start();
ChatQuote[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatQuote.svelte";
var root497 = add_locations(ns_template(`<svg><!><path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z"></path><path d="M7.066 6.76A1.665 1.665 0 0 0 4 7.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 0 0 .6.58c1.486-1.54 1.293-3.214.682-4.112zm4 0A1.665 1.665 0 0 0 8 7.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 0 0 .6.58c1.486-1.54 1.293-3.214.682-4.112z"></path></svg>`), ChatQuote[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function ChatQuote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatQuote);
  var svg = root497();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-quote", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatQuote = hmr(ChatQuote, () => ChatQuote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatQuote[HMR].source;
    set(ChatQuote[HMR].source, module.default[HMR].original);
  });
}
var ChatQuote_default = ChatQuote;
mark_module_end(ChatQuote);

// node_modules/svelte-bootstrap-icons/lib/ChatRightDotsFill.svelte
mark_module_start();
ChatRightDotsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRightDotsFill.svelte";
var root498 = add_locations(ns_template(`<svg><!><path d="M16 2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h9.586a1 1 0 0 1 .707.293l2.853 2.853a.5.5 0 0 0 .854-.353V2zM5 6a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"></path></svg>`), ChatRightDotsFill[FILENAME], [[1, 0, [[1, 181]]]]);
function ChatRightDotsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRightDotsFill);
  var svg = root498();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right-dots-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRightDotsFill = hmr(ChatRightDotsFill, () => ChatRightDotsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRightDotsFill[HMR].source;
    set(ChatRightDotsFill[HMR].source, module.default[HMR].original);
  });
}
var ChatRightDotsFill_default = ChatRightDotsFill;
mark_module_end(ChatRightDotsFill);

// node_modules/svelte-bootstrap-icons/lib/ChatRightDots.svelte
mark_module_start();
ChatRightDots[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRightDots.svelte";
var root499 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h9.586a2 2 0 0 1 1.414.586l2 2V2a1 1 0 0 0-1-1H2zm12-1a2 2 0 0 1 2 2v12.793a.5.5 0 0 1-.854.353l-2.853-2.853a1 1 0 0 0-.707-.293H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12z"></path><path d="M5 6a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), ChatRightDots[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function ChatRightDots($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRightDots);
  var svg = root499();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right-dots", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRightDots = hmr(ChatRightDots, () => ChatRightDots[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRightDots[HMR].source;
    set(ChatRightDots[HMR].source, module.default[HMR].original);
  });
}
var ChatRightDots_default = ChatRightDots;
mark_module_end(ChatRightDots);

// node_modules/svelte-bootstrap-icons/lib/ChatRightFill.svelte
mark_module_start();
ChatRightFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRightFill.svelte";
var root500 = add_locations(ns_template(`<svg><!><path d="M14 0a2 2 0 0 1 2 2v12.793a.5.5 0 0 1-.854.353l-2.853-2.853a1 1 0 0 0-.707-.293H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12z"></path></svg>`), ChatRightFill[FILENAME], [[1, 0, [[1, 176]]]]);
function ChatRightFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRightFill);
  var svg = root500();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRightFill = hmr(ChatRightFill, () => ChatRightFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRightFill[HMR].source;
    set(ChatRightFill[HMR].source, module.default[HMR].original);
  });
}
var ChatRightFill_default = ChatRightFill;
mark_module_end(ChatRightFill);

// node_modules/svelte-bootstrap-icons/lib/ChatRightHeartFill.svelte
mark_module_start();
ChatRightHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRightHeartFill.svelte";
var root501 = add_locations(ns_template(`<svg><!><path d="M16 2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h9.586a1 1 0 0 1 .707.293l2.853 2.853a.5.5 0 0 0 .854-.353V2ZM8 3.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), ChatRightHeartFill[FILENAME], [[1, 0, [[1, 182]]]]);
function ChatRightHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRightHeartFill);
  var svg = root501();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRightHeartFill = hmr(ChatRightHeartFill, () => ChatRightHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRightHeartFill[HMR].source;
    set(ChatRightHeartFill[HMR].source, module.default[HMR].original);
  });
}
var ChatRightHeartFill_default = ChatRightHeartFill;
mark_module_end(ChatRightHeartFill);

// node_modules/svelte-bootstrap-icons/lib/ChatRightHeart.svelte
mark_module_start();
ChatRightHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRightHeart.svelte";
var root502 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h9.586a2 2 0 0 1 1.414.586l2 2V2a1 1 0 0 0-1-1H2Zm12-1a2 2 0 0 1 2 2v12.793a.5.5 0 0 1-.854.353l-2.853-2.853a1 1 0 0 0-.707-.293H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12Z"></path><path d="M8 3.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), ChatRightHeart[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function ChatRightHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRightHeart);
  var svg = root502();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRightHeart = hmr(ChatRightHeart, () => ChatRightHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRightHeart[HMR].source;
    set(ChatRightHeart[HMR].source, module.default[HMR].original);
  });
}
var ChatRightHeart_default = ChatRightHeart;
mark_module_end(ChatRightHeart);

// node_modules/svelte-bootstrap-icons/lib/ChatRightQuoteFill.svelte
mark_module_start();
ChatRightQuoteFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRightQuoteFill.svelte";
var root503 = add_locations(ns_template(`<svg><!><path d="M16 2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h9.586a1 1 0 0 1 .707.293l2.853 2.853a.5.5 0 0 0 .854-.353V2zM7.194 4.766c.087.124.163.26.227.401.428.948.393 2.377-.942 3.706a.446.446 0 0 1-.612.01.405.405 0 0 1-.011-.59c.419-.416.672-.831.809-1.22-.269.165-.588.26-.93.26C4.775 7.333 4 6.587 4 5.667 4 4.747 4.776 4 5.734 4c.271 0 .528.06.756.166l.008.004c.169.07.327.182.469.324.085.083.161.174.227.272zM11 7.073c-.269.165-.588.26-.93.26-.958 0-1.735-.746-1.735-1.666 0-.92.777-1.667 1.734-1.667.271 0 .528.06.756.166l.008.004c.17.07.327.182.469.324.085.083.161.174.227.272.087.124.164.26.228.401.428.948.392 2.377-.942 3.706a.446.446 0 0 1-.613.01.405.405 0 0 1-.011-.59c.42-.416.672-.831.81-1.22z"></path></svg>`), ChatRightQuoteFill[FILENAME], [[1, 0, [[1, 182]]]]);
function ChatRightQuoteFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRightQuoteFill);
  var svg = root503();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right-quote-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRightQuoteFill = hmr(ChatRightQuoteFill, () => ChatRightQuoteFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRightQuoteFill[HMR].source;
    set(ChatRightQuoteFill[HMR].source, module.default[HMR].original);
  });
}
var ChatRightQuoteFill_default = ChatRightQuoteFill;
mark_module_end(ChatRightQuoteFill);

// node_modules/svelte-bootstrap-icons/lib/ChatRightQuote.svelte
mark_module_start();
ChatRightQuote[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRightQuote.svelte";
var root504 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h9.586a2 2 0 0 1 1.414.586l2 2V2a1 1 0 0 0-1-1H2zm12-1a2 2 0 0 1 2 2v12.793a.5.5 0 0 1-.854.353l-2.853-2.853a1 1 0 0 0-.707-.293H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12z"></path><path d="M7.066 4.76A1.665 1.665 0 0 0 4 5.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 1 0 .6.58c1.486-1.54 1.293-3.214.682-4.112zm4 0A1.665 1.665 0 0 0 8 5.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 1 0 .6.58c1.486-1.54 1.293-3.214.682-4.112z"></path></svg>`), ChatRightQuote[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function ChatRightQuote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRightQuote);
  var svg = root504();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right-quote", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRightQuote = hmr(ChatRightQuote, () => ChatRightQuote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRightQuote[HMR].source;
    set(ChatRightQuote[HMR].source, module.default[HMR].original);
  });
}
var ChatRightQuote_default = ChatRightQuote;
mark_module_end(ChatRightQuote);

// node_modules/svelte-bootstrap-icons/lib/ChatRightTextFill.svelte
mark_module_start();
ChatRightTextFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRightTextFill.svelte";
var root505 = add_locations(ns_template(`<svg><!><path d="M16 2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h9.586a1 1 0 0 1 .707.293l2.853 2.853a.5.5 0 0 0 .854-.353V2zM3.5 3h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1 0-1zm0 2.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1 0-1zm0 2.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1z"></path></svg>`), ChatRightTextFill[FILENAME], [[1, 0, [[1, 181]]]]);
function ChatRightTextFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRightTextFill);
  var svg = root505();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right-text-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRightTextFill = hmr(ChatRightTextFill, () => ChatRightTextFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRightTextFill[HMR].source;
    set(ChatRightTextFill[HMR].source, module.default[HMR].original);
  });
}
var ChatRightTextFill_default = ChatRightTextFill;
mark_module_end(ChatRightTextFill);

// node_modules/svelte-bootstrap-icons/lib/ChatRightText.svelte
mark_module_start();
ChatRightText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRightText.svelte";
var root506 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h9.586a2 2 0 0 1 1.414.586l2 2V2a1 1 0 0 0-1-1H2zm12-1a2 2 0 0 1 2 2v12.793a.5.5 0 0 1-.854.353l-2.853-2.853a1 1 0 0 0-.707-.293H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12z"></path><path d="M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"></path></svg>`), ChatRightText[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function ChatRightText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRightText);
  var svg = root506();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRightText = hmr(ChatRightText, () => ChatRightText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRightText[HMR].source;
    set(ChatRightText[HMR].source, module.default[HMR].original);
  });
}
var ChatRightText_default = ChatRightText;
mark_module_end(ChatRightText);

// node_modules/svelte-bootstrap-icons/lib/ChatRight.svelte
mark_module_start();
ChatRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatRight.svelte";
var root507 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h9.586a2 2 0 0 1 1.414.586l2 2V2a1 1 0 0 0-1-1H2zm12-1a2 2 0 0 1 2 2v12.793a.5.5 0 0 1-.854.353l-2.853-2.853a1 1 0 0 0-.707-.293H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12z"></path></svg>`), ChatRight[FILENAME], [[1, 0, [[1, 171]]]]);
function ChatRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatRight);
  var svg = root507();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatRight = hmr(ChatRight, () => ChatRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatRight[HMR].source;
    set(ChatRight[HMR].source, module.default[HMR].original);
  });
}
var ChatRight_default = ChatRight;
mark_module_end(ChatRight);

// node_modules/svelte-bootstrap-icons/lib/ChatSquareDotsFill.svelte
mark_module_start();
ChatSquareDotsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquareDotsFill.svelte";
var root508 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.5a1 1 0 0 0-.8.4l-1.9 2.533a1 1 0 0 1-1.6 0L5.3 12.4a1 1 0 0 0-.8-.4H2a2 2 0 0 1-2-2V2zm5 4a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), ChatSquareDotsFill[FILENAME], [[1, 0, [[1, 182]]]]);
function ChatSquareDotsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquareDotsFill);
  var svg = root508();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square-dots-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquareDotsFill = hmr(ChatSquareDotsFill, () => ChatSquareDotsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquareDotsFill[HMR].source;
    set(ChatSquareDotsFill[HMR].source, module.default[HMR].original);
  });
}
var ChatSquareDotsFill_default = ChatSquareDotsFill;
mark_module_end(ChatSquareDotsFill);

// node_modules/svelte-bootstrap-icons/lib/ChatSquareDots.svelte
mark_module_start();
ChatSquareDots[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquareDots.svelte";
var root509 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-2.5a2 2 0 0 0-1.6.8L8 14.333 6.1 11.8a2 2 0 0 0-1.6-.8H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M5 6a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), ChatSquareDots[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function ChatSquareDots($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquareDots);
  var svg = root509();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square-dots", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquareDots = hmr(ChatSquareDots, () => ChatSquareDots[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquareDots[HMR].source;
    set(ChatSquareDots[HMR].source, module.default[HMR].original);
  });
}
var ChatSquareDots_default = ChatSquareDots;
mark_module_end(ChatSquareDots);

// node_modules/svelte-bootstrap-icons/lib/ChatSquareFill.svelte
mark_module_start();
ChatSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquareFill.svelte";
var root510 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path></svg>`), ChatSquareFill[FILENAME], [[1, 0, [[1, 177]]]]);
function ChatSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquareFill);
  var svg = root510();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquareFill = hmr(ChatSquareFill, () => ChatSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquareFill[HMR].source;
    set(ChatSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ChatSquareFill_default = ChatSquareFill;
mark_module_end(ChatSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ChatSquareHeartFill.svelte
mark_module_start();
ChatSquareHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquareHeartFill.svelte";
var root511 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm6 3.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), ChatSquareHeartFill[FILENAME], [[1, 0, [[1, 183]]]]);
function ChatSquareHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquareHeartFill);
  var svg = root511();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquareHeartFill = hmr(ChatSquareHeartFill, () => ChatSquareHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquareHeartFill[HMR].source;
    set(ChatSquareHeartFill[HMR].source, module.default[HMR].original);
  });
}
var ChatSquareHeartFill_default = ChatSquareHeartFill;
mark_module_end(ChatSquareHeartFill);

// node_modules/svelte-bootstrap-icons/lib/ChatSquareHeart.svelte
mark_module_start();
ChatSquareHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquareHeart.svelte";
var root512 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-2.5a2 2 0 0 0-1.6.8L8 14.333 6.1 11.8a2 2 0 0 0-1.6-.8H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12ZM2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Z"></path><path d="M8 3.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), ChatSquareHeart[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function ChatSquareHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquareHeart);
  var svg = root512();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquareHeart = hmr(ChatSquareHeart, () => ChatSquareHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquareHeart[HMR].source;
    set(ChatSquareHeart[HMR].source, module.default[HMR].original);
  });
}
var ChatSquareHeart_default = ChatSquareHeart;
mark_module_end(ChatSquareHeart);

// node_modules/svelte-bootstrap-icons/lib/ChatSquareQuoteFill.svelte
mark_module_start();
ChatSquareQuoteFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquareQuoteFill.svelte";
var root513 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.5a1 1 0 0 0-.8.4l-1.9 2.533a1 1 0 0 1-1.6 0L5.3 12.4a1 1 0 0 0-.8-.4H2a2 2 0 0 1-2-2V2zm7.194 2.766a1.688 1.688 0 0 0-.227-.272 1.467 1.467 0 0 0-.469-.324l-.008-.004A1.785 1.785 0 0 0 5.734 4C4.776 4 4 4.746 4 5.667c0 .92.776 1.666 1.734 1.666.343 0 .662-.095.931-.26-.137.389-.39.804-.81 1.22a.405.405 0 0 0 .011.59c.173.16.447.155.614-.01 1.334-1.329 1.37-2.758.941-3.706a2.461 2.461 0 0 0-.227-.4zM11 7.073c-.136.389-.39.804-.81 1.22a.405.405 0 0 0 .012.59c.172.16.446.155.613-.01 1.334-1.329 1.37-2.758.942-3.706a2.466 2.466 0 0 0-.228-.4 1.686 1.686 0 0 0-.227-.273 1.466 1.466 0 0 0-.469-.324l-.008-.004A1.785 1.785 0 0 0 10.07 4c-.957 0-1.734.746-1.734 1.667 0 .92.777 1.666 1.734 1.666.343 0 .662-.095.931-.26z"></path></svg>`), ChatSquareQuoteFill[FILENAME], [[1, 0, [[1, 183]]]]);
function ChatSquareQuoteFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquareQuoteFill);
  var svg = root513();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square-quote-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquareQuoteFill = hmr(ChatSquareQuoteFill, () => ChatSquareQuoteFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquareQuoteFill[HMR].source;
    set(ChatSquareQuoteFill[HMR].source, module.default[HMR].original);
  });
}
var ChatSquareQuoteFill_default = ChatSquareQuoteFill;
mark_module_end(ChatSquareQuoteFill);

// node_modules/svelte-bootstrap-icons/lib/ChatSquareQuote.svelte
mark_module_start();
ChatSquareQuote[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquareQuote.svelte";
var root514 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-2.5a2 2 0 0 0-1.6.8L8 14.333 6.1 11.8a2 2 0 0 0-1.6-.8H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M7.066 4.76A1.665 1.665 0 0 0 4 5.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 1 0 .6.58c1.486-1.54 1.293-3.214.682-4.112zm4 0A1.665 1.665 0 0 0 8 5.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 1 0 .6.58c1.486-1.54 1.293-3.214.682-4.112z"></path></svg>`), ChatSquareQuote[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function ChatSquareQuote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquareQuote);
  var svg = root514();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square-quote", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquareQuote = hmr(ChatSquareQuote, () => ChatSquareQuote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquareQuote[HMR].source;
    set(ChatSquareQuote[HMR].source, module.default[HMR].original);
  });
}
var ChatSquareQuote_default = ChatSquareQuote;
mark_module_end(ChatSquareQuote);

// node_modules/svelte-bootstrap-icons/lib/ChatSquareTextFill.svelte
mark_module_start();
ChatSquareTextFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquareTextFill.svelte";
var root515 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.5a1 1 0 0 0-.8.4l-1.9 2.533a1 1 0 0 1-1.6 0L5.3 12.4a1 1 0 0 0-.8-.4H2a2 2 0 0 1-2-2V2zm3.5 1a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9zm0 2.5a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9zm0 2.5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5z"></path></svg>`), ChatSquareTextFill[FILENAME], [[1, 0, [[1, 182]]]]);
function ChatSquareTextFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquareTextFill);
  var svg = root515();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square-text-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquareTextFill = hmr(ChatSquareTextFill, () => ChatSquareTextFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquareTextFill[HMR].source;
    set(ChatSquareTextFill[HMR].source, module.default[HMR].original);
  });
}
var ChatSquareTextFill_default = ChatSquareTextFill;
mark_module_end(ChatSquareTextFill);

// node_modules/svelte-bootstrap-icons/lib/ChatSquareText.svelte
mark_module_start();
ChatSquareText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquareText.svelte";
var root516 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-2.5a2 2 0 0 0-1.6.8L8 14.333 6.1 11.8a2 2 0 0 0-1.6-.8H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"></path></svg>`), ChatSquareText[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function ChatSquareText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquareText);
  var svg = root516();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquareText = hmr(ChatSquareText, () => ChatSquareText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquareText[HMR].source;
    set(ChatSquareText[HMR].source, module.default[HMR].original);
  });
}
var ChatSquareText_default = ChatSquareText;
mark_module_end(ChatSquareText);

// node_modules/svelte-bootstrap-icons/lib/ChatSquare.svelte
mark_module_start();
ChatSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatSquare.svelte";
var root517 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-2.5a2 2 0 0 0-1.6.8L8 14.333 6.1 11.8a2 2 0 0 0-1.6-.8H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path></svg>`), ChatSquare[FILENAME], [[1, 0, [[1, 172]]]]);
function ChatSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatSquare);
  var svg = root517();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatSquare = hmr(ChatSquare, () => ChatSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatSquare[HMR].source;
    set(ChatSquare[HMR].source, module.default[HMR].original);
  });
}
var ChatSquare_default = ChatSquare;
mark_module_end(ChatSquare);

// node_modules/svelte-bootstrap-icons/lib/ChatTextFill.svelte
mark_module_start();
ChatTextFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatTextFill.svelte";
var root518 = add_locations(ns_template(`<svg><!><path d="M16 8c0 3.866-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.584.296-1.925.864-4.181 1.234-.2.032-.352-.176-.273-.362.354-.836.674-1.95.77-2.966C.744 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7zM4.5 5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7zm0 2.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7zm0 2.5a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1h-4z"></path></svg>`), ChatTextFill[FILENAME], [[1, 0, [[1, 175]]]]);
function ChatTextFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatTextFill);
  var svg = root518();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-text-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatTextFill = hmr(ChatTextFill, () => ChatTextFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatTextFill[HMR].source;
    set(ChatTextFill[HMR].source, module.default[HMR].original);
  });
}
var ChatTextFill_default = ChatTextFill;
mark_module_end(ChatTextFill);

// node_modules/svelte-bootstrap-icons/lib/ChatText.svelte
mark_module_start();
ChatText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChatText.svelte";
var root519 = add_locations(ns_template(`<svg><!><path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z"></path><path d="M4 5.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8zm0 2.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5z"></path></svg>`), ChatText[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function ChatText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChatText);
  var svg = root519();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChatText = hmr(ChatText, () => ChatText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChatText[HMR].source;
    set(ChatText[HMR].source, module.default[HMR].original);
  });
}
var ChatText_default = ChatText;
mark_module_end(ChatText);

// node_modules/svelte-bootstrap-icons/lib/Chat.svelte
mark_module_start();
Chat[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Chat.svelte";
var root520 = add_locations(ns_template(`<svg><!><path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z"></path></svg>`), Chat[FILENAME], [[1, 0, [[1, 165]]]]);
function Chat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Chat);
  var svg = root520();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chat", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chat = hmr(Chat, () => Chat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chat[HMR].source;
    set(Chat[HMR].source, module.default[HMR].original);
  });
}
var Chat_default = Chat;
mark_module_end(Chat);

// node_modules/svelte-bootstrap-icons/lib/CheckAll.svelte
mark_module_start();
CheckAll[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CheckAll.svelte";
var root521 = add_locations(ns_template(`<svg><!><path d="M8.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L2.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093L8.95 4.992a.252.252 0 0 1 .02-.022zm-.92 5.14.92.92a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 1 0-1.091-1.028L9.477 9.417l-.485-.486-.943 1.179z"></path></svg>`), CheckAll[FILENAME], [[1, 0, [[1, 170]]]]);
function CheckAll($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CheckAll);
  var svg = root521();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check-all", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckAll = hmr(CheckAll, () => CheckAll[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckAll[HMR].source;
    set(CheckAll[HMR].source, module.default[HMR].original);
  });
}
var CheckAll_default = CheckAll;
mark_module_end(CheckAll);

// node_modules/svelte-bootstrap-icons/lib/CheckCircleFill.svelte
mark_module_start();
CheckCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CheckCircleFill.svelte";
var root522 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"></path></svg>`), CheckCircleFill[FILENAME], [[1, 0, [[1, 178]]]]);
function CheckCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CheckCircleFill);
  var svg = root522();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckCircleFill = hmr(CheckCircleFill, () => CheckCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckCircleFill[HMR].source;
    set(CheckCircleFill[HMR].source, module.default[HMR].original);
  });
}
var CheckCircleFill_default = CheckCircleFill;
mark_module_end(CheckCircleFill);

// node_modules/svelte-bootstrap-icons/lib/CheckCircle.svelte
mark_module_start();
CheckCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CheckCircle.svelte";
var root523 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"></path></svg>`), CheckCircle[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function CheckCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CheckCircle);
  var svg = root523();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckCircle = hmr(CheckCircle, () => CheckCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckCircle[HMR].source;
    set(CheckCircle[HMR].source, module.default[HMR].original);
  });
}
var CheckCircle_default = CheckCircle;
mark_module_end(CheckCircle);

// node_modules/svelte-bootstrap-icons/lib/CheckLg.svelte
mark_module_start();
CheckLg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CheckLg.svelte";
var root524 = add_locations(ns_template(`<svg><!><path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"></path></svg>`), CheckLg[FILENAME], [[1, 0, [[1, 169]]]]);
function CheckLg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CheckLg);
  var svg = root524();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check-lg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckLg = hmr(CheckLg, () => CheckLg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckLg[HMR].source;
    set(CheckLg[HMR].source, module.default[HMR].original);
  });
}
var CheckLg_default = CheckLg;
mark_module_end(CheckLg);

// node_modules/svelte-bootstrap-icons/lib/CheckSquareFill.svelte
mark_module_start();
CheckSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CheckSquareFill.svelte";
var root525 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm10.03 4.97a.75.75 0 0 1 .011 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.75.75 0 0 1 1.08-.022z"></path></svg>`), CheckSquareFill[FILENAME], [[1, 0, [[1, 178]]]]);
function CheckSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CheckSquareFill);
  var svg = root525();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckSquareFill = hmr(CheckSquareFill, () => CheckSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckSquareFill[HMR].source;
    set(CheckSquareFill[HMR].source, module.default[HMR].original);
  });
}
var CheckSquareFill_default = CheckSquareFill;
mark_module_end(CheckSquareFill);

// node_modules/svelte-bootstrap-icons/lib/CheckSquare.svelte
mark_module_start();
CheckSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CheckSquare.svelte";
var root526 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.235.235 0 0 1 .02-.022z"></path></svg>`), CheckSquare[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function CheckSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CheckSquare);
  var svg = root526();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckSquare = hmr(CheckSquare, () => CheckSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckSquare[HMR].source;
    set(CheckSquare[HMR].source, module.default[HMR].original);
  });
}
var CheckSquare_default = CheckSquare;
mark_module_end(CheckSquare);

// node_modules/svelte-bootstrap-icons/lib/Check.svelte
mark_module_start();
Check[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Check.svelte";
var root527 = add_locations(ns_template(`<svg><!><path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"></path></svg>`), Check[FILENAME], [[1, 0, [[1, 166]]]]);
function Check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Check);
  var svg = root527();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Check = hmr(Check, () => Check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Check[HMR].source;
    set(Check[HMR].source, module.default[HMR].original);
  });
}
var Check_default = Check;
mark_module_end(Check);

// node_modules/svelte-bootstrap-icons/lib/Check2All.svelte
mark_module_start();
Check2All[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Check2All.svelte";
var root528 = add_locations(ns_template(`<svg><!><path d="M12.354 4.354a.5.5 0 0 0-.708-.708L5 10.293 1.854 7.146a.5.5 0 1 0-.708.708l3.5 3.5a.5.5 0 0 0 .708 0l7-7zm-4.208 7-.896-.897.707-.707.543.543 6.646-6.647a.5.5 0 0 1 .708.708l-7 7a.5.5 0 0 1-.708 0z"></path><path d="m5.354 7.146.896.897-.707.707-.897-.896a.5.5 0 1 1 .708-.708z"></path></svg>`), Check2All[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Check2All($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Check2All);
  var svg = root528();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check2-all", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Check2All = hmr(Check2All, () => Check2All[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Check2All[HMR].source;
    set(Check2All[HMR].source, module.default[HMR].original);
  });
}
var Check2All_default = Check2All;
mark_module_end(Check2All);

// node_modules/svelte-bootstrap-icons/lib/Check2Circle.svelte
mark_module_start();
Check2Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Check2Circle.svelte";
var root529 = add_locations(ns_template(`<svg><!><path d="M2.5 8a5.5 5.5 0 0 1 8.25-4.764.5.5 0 0 0 .5-.866A6.5 6.5 0 1 0 14.5 8a.5.5 0 0 0-1 0 5.5 5.5 0 1 1-11 0z"></path><path d="M15.354 3.354a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l7-7z"></path></svg>`), Check2Circle[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function Check2Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Check2Circle);
  var svg = root529();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check2-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Check2Circle = hmr(Check2Circle, () => Check2Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Check2Circle[HMR].source;
    set(Check2Circle[HMR].source, module.default[HMR].original);
  });
}
var Check2Circle_default = Check2Circle;
mark_module_end(Check2Circle);

// node_modules/svelte-bootstrap-icons/lib/Check2Square.svelte
mark_module_start();
Check2Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Check2Square.svelte";
var root530 = add_locations(ns_template(`<svg><!><path d="M3 14.5A1.5 1.5 0 0 1 1.5 13V3A1.5 1.5 0 0 1 3 1.5h8a.5.5 0 0 1 0 1H3a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5V8a.5.5 0 0 1 1 0v5a1.5 1.5 0 0 1-1.5 1.5H3z"></path><path d="m8.354 10.354 7-7a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0z"></path></svg>`), Check2Square[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function Check2Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Check2Square);
  var svg = root530();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check2-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Check2Square = hmr(Check2Square, () => Check2Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Check2Square[HMR].source;
    set(Check2Square[HMR].source, module.default[HMR].original);
  });
}
var Check2Square_default = Check2Square;
mark_module_end(Check2Square);

// node_modules/svelte-bootstrap-icons/lib/Check2.svelte
mark_module_start();
Check2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Check2.svelte";
var root531 = add_locations(ns_template(`<svg><!><path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"></path></svg>`), Check2[FILENAME], [[1, 0, [[1, 167]]]]);
function Check2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Check2);
  var svg = root531();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-check2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Check2 = hmr(Check2, () => Check2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Check2[HMR].source;
    set(Check2[HMR].source, module.default[HMR].original);
  });
}
var Check2_default = Check2;
mark_module_end(Check2);

// node_modules/svelte-bootstrap-icons/lib/ChevronBarContract.svelte
mark_module_start();
ChevronBarContract[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronBarContract.svelte";
var root532 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.646 14.854a.5.5 0 0 0 .708 0L8 11.207l3.646 3.647a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 0 0 0 .708zm0-13.708a.5.5 0 0 1 .708 0L8 4.793l3.646-3.647a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 0-.708zM1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8z"></path></svg>`), ChevronBarContract[FILENAME], [[1, 0, [[1, 181]]]]);
function ChevronBarContract($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronBarContract);
  var svg = root532();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-bar-contract", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronBarContract = hmr(ChevronBarContract, () => ChevronBarContract[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronBarContract[HMR].source;
    set(ChevronBarContract[HMR].source, module.default[HMR].original);
  });
}
var ChevronBarContract_default = ChevronBarContract;
mark_module_end(ChevronBarContract);

// node_modules/svelte-bootstrap-icons/lib/ChevronBarDown.svelte
mark_module_start();
ChevronBarDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronBarDown.svelte";
var root533 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.646 4.146a.5.5 0 0 1 .708 0L8 7.793l3.646-3.647a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 0-.708zM1 11.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5z"></path></svg>`), ChevronBarDown[FILENAME], [[1, 0, [[1, 177]]]]);
function ChevronBarDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronBarDown);
  var svg = root533();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-bar-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronBarDown = hmr(ChevronBarDown, () => ChevronBarDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronBarDown[HMR].source;
    set(ChevronBarDown[HMR].source, module.default[HMR].original);
  });
}
var ChevronBarDown_default = ChevronBarDown;
mark_module_end(ChevronBarDown);

// node_modules/svelte-bootstrap-icons/lib/ChevronBarExpand.svelte
mark_module_start();
ChevronBarExpand[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronBarExpand.svelte";
var root534 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.646 10.146a.5.5 0 0 1 .708 0L8 13.793l3.646-3.647a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 0-.708zm0-4.292a.5.5 0 0 0 .708 0L8 2.207l3.646 3.647a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 0 0 0 .708zM1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8z"></path></svg>`), ChevronBarExpand[FILENAME], [[1, 0, [[1, 179]]]]);
function ChevronBarExpand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronBarExpand);
  var svg = root534();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-bar-expand", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronBarExpand = hmr(ChevronBarExpand, () => ChevronBarExpand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronBarExpand[HMR].source;
    set(ChevronBarExpand[HMR].source, module.default[HMR].original);
  });
}
var ChevronBarExpand_default = ChevronBarExpand;
mark_module_end(ChevronBarExpand);

// node_modules/svelte-bootstrap-icons/lib/ChevronBarLeft.svelte
mark_module_start();
ChevronBarLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronBarLeft.svelte";
var root535 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11.854 3.646a.5.5 0 0 1 0 .708L8.207 8l3.647 3.646a.5.5 0 0 1-.708.708l-4-4a.5.5 0 0 1 0-.708l4-4a.5.5 0 0 1 .708 0zM4.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 1 0v-13a.5.5 0 0 0-.5-.5z"></path></svg>`), ChevronBarLeft[FILENAME], [[1, 0, [[1, 177]]]]);
function ChevronBarLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronBarLeft);
  var svg = root535();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-bar-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronBarLeft = hmr(ChevronBarLeft, () => ChevronBarLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronBarLeft[HMR].source;
    set(ChevronBarLeft[HMR].source, module.default[HMR].original);
  });
}
var ChevronBarLeft_default = ChevronBarLeft;
mark_module_end(ChevronBarLeft);

// node_modules/svelte-bootstrap-icons/lib/ChevronBarRight.svelte
mark_module_start();
ChevronBarRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronBarRight.svelte";
var root536 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4.146 3.646a.5.5 0 0 0 0 .708L7.793 8l-3.647 3.646a.5.5 0 0 0 .708.708l4-4a.5.5 0 0 0 0-.708l-4-4a.5.5 0 0 0-.708 0zM11.5 1a.5.5 0 0 1 .5.5v13a.5.5 0 0 1-1 0v-13a.5.5 0 0 1 .5-.5z"></path></svg>`), ChevronBarRight[FILENAME], [[1, 0, [[1, 178]]]]);
function ChevronBarRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronBarRight);
  var svg = root536();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-bar-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronBarRight = hmr(ChevronBarRight, () => ChevronBarRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronBarRight[HMR].source;
    set(ChevronBarRight[HMR].source, module.default[HMR].original);
  });
}
var ChevronBarRight_default = ChevronBarRight;
mark_module_end(ChevronBarRight);

// node_modules/svelte-bootstrap-icons/lib/ChevronBarUp.svelte
mark_module_start();
ChevronBarUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronBarUp.svelte";
var root537 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.646 11.854a.5.5 0 0 0 .708 0L8 8.207l3.646 3.647a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 0 0 0 .708zM2.4 5.2c0 .22.18.4.4.4h10.4a.4.4 0 0 0 0-.8H2.8a.4.4 0 0 0-.4.4z"></path></svg>`), ChevronBarUp[FILENAME], [[1, 0, [[1, 175]]]]);
function ChevronBarUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronBarUp);
  var svg = root537();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-bar-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronBarUp = hmr(ChevronBarUp, () => ChevronBarUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronBarUp[HMR].source;
    set(ChevronBarUp[HMR].source, module.default[HMR].original);
  });
}
var ChevronBarUp_default = ChevronBarUp;
mark_module_end(ChevronBarUp);

// node_modules/svelte-bootstrap-icons/lib/ChevronCompactDown.svelte
mark_module_start();
ChevronCompactDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronCompactDown.svelte";
var root538 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.553 6.776a.5.5 0 0 1 .67-.223L8 9.44l5.776-2.888a.5.5 0 1 1 .448.894l-6 3a.5.5 0 0 1-.448 0l-6-3a.5.5 0 0 1-.223-.67z"></path></svg>`), ChevronCompactDown[FILENAME], [[1, 0, [[1, 181]]]]);
function ChevronCompactDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronCompactDown);
  var svg = root538();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-compact-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronCompactDown = hmr(ChevronCompactDown, () => ChevronCompactDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronCompactDown[HMR].source;
    set(ChevronCompactDown[HMR].source, module.default[HMR].original);
  });
}
var ChevronCompactDown_default = ChevronCompactDown;
mark_module_end(ChevronCompactDown);

// node_modules/svelte-bootstrap-icons/lib/ChevronCompactLeft.svelte
mark_module_start();
ChevronCompactLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronCompactLeft.svelte";
var root539 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M9.224 1.553a.5.5 0 0 1 .223.67L6.56 8l2.888 5.776a.5.5 0 1 1-.894.448l-3-6a.5.5 0 0 1 0-.448l3-6a.5.5 0 0 1 .67-.223z"></path></svg>`), ChevronCompactLeft[FILENAME], [[1, 0, [[1, 181]]]]);
function ChevronCompactLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronCompactLeft);
  var svg = root539();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-compact-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronCompactLeft = hmr(ChevronCompactLeft, () => ChevronCompactLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronCompactLeft[HMR].source;
    set(ChevronCompactLeft[HMR].source, module.default[HMR].original);
  });
}
var ChevronCompactLeft_default = ChevronCompactLeft;
mark_module_end(ChevronCompactLeft);

// node_modules/svelte-bootstrap-icons/lib/ChevronCompactRight.svelte
mark_module_start();
ChevronCompactRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronCompactRight.svelte";
var root540 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.776 1.553a.5.5 0 0 1 .671.223l3 6a.5.5 0 0 1 0 .448l-3 6a.5.5 0 1 1-.894-.448L9.44 8 6.553 2.224a.5.5 0 0 1 .223-.671z"></path></svg>`), ChevronCompactRight[FILENAME], [[1, 0, [[1, 182]]]]);
function ChevronCompactRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronCompactRight);
  var svg = root540();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-compact-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronCompactRight = hmr(ChevronCompactRight, () => ChevronCompactRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronCompactRight[HMR].source;
    set(ChevronCompactRight[HMR].source, module.default[HMR].original);
  });
}
var ChevronCompactRight_default = ChevronCompactRight;
mark_module_end(ChevronCompactRight);

// node_modules/svelte-bootstrap-icons/lib/ChevronCompactUp.svelte
mark_module_start();
ChevronCompactUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronCompactUp.svelte";
var root541 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.776 5.553a.5.5 0 0 1 .448 0l6 3a.5.5 0 1 1-.448.894L8 6.56 2.224 9.447a.5.5 0 1 1-.448-.894l6-3z"></path></svg>`), ChevronCompactUp[FILENAME], [[1, 0, [[1, 179]]]]);
function ChevronCompactUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronCompactUp);
  var svg = root541();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-compact-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronCompactUp = hmr(ChevronCompactUp, () => ChevronCompactUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronCompactUp[HMR].source;
    set(ChevronCompactUp[HMR].source, module.default[HMR].original);
  });
}
var ChevronCompactUp_default = ChevronCompactUp;
mark_module_end(ChevronCompactUp);

// node_modules/svelte-bootstrap-icons/lib/ChevronContract.svelte
mark_module_start();
ChevronContract[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronContract.svelte";
var root542 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.646 13.854a.5.5 0 0 0 .708 0L8 10.207l3.646 3.647a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 0 0 0 .708zm0-11.708a.5.5 0 0 1 .708 0L8 5.793l3.646-3.647a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 0-.708z"></path></svg>`), ChevronContract[FILENAME], [[1, 0, [[1, 177]]]]);
function ChevronContract($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronContract);
  var svg = root542();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-contract", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronContract = hmr(ChevronContract, () => ChevronContract[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronContract[HMR].source;
    set(ChevronContract[HMR].source, module.default[HMR].original);
  });
}
var ChevronContract_default = ChevronContract;
mark_module_end(ChevronContract);

// node_modules/svelte-bootstrap-icons/lib/ChevronDoubleDown.svelte
mark_module_start();
ChevronDoubleDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronDoubleDown.svelte";
var root543 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.646 6.646a.5.5 0 0 1 .708 0L8 12.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"></path><path fill-rule="evenodd" d="M1.646 2.646a.5.5 0 0 1 .708 0L8 8.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"></path></svg>`), ChevronDoubleDown[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function ChevronDoubleDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronDoubleDown);
  var svg = root543();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-double-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronDoubleDown = hmr(ChevronDoubleDown, () => ChevronDoubleDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronDoubleDown[HMR].source;
    set(ChevronDoubleDown[HMR].source, module.default[HMR].original);
  });
}
var ChevronDoubleDown_default = ChevronDoubleDown;
mark_module_end(ChevronDoubleDown);

// node_modules/svelte-bootstrap-icons/lib/ChevronDoubleLeft.svelte
mark_module_start();
ChevronDoubleLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronDoubleLeft.svelte";
var root544 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"></path><path fill-rule="evenodd" d="M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"></path></svg>`), ChevronDoubleLeft[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function ChevronDoubleLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronDoubleLeft);
  var svg = root544();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-double-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronDoubleLeft = hmr(ChevronDoubleLeft, () => ChevronDoubleLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronDoubleLeft[HMR].source;
    set(ChevronDoubleLeft[HMR].source, module.default[HMR].original);
  });
}
var ChevronDoubleLeft_default = ChevronDoubleLeft;
mark_module_end(ChevronDoubleLeft);

// node_modules/svelte-bootstrap-icons/lib/ChevronDoubleRight.svelte
mark_module_start();
ChevronDoubleRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronDoubleRight.svelte";
var root545 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z"></path><path fill-rule="evenodd" d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z"></path></svg>`), ChevronDoubleRight[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function ChevronDoubleRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronDoubleRight);
  var svg = root545();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-double-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronDoubleRight = hmr(ChevronDoubleRight, () => ChevronDoubleRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronDoubleRight[HMR].source;
    set(ChevronDoubleRight[HMR].source, module.default[HMR].original);
  });
}
var ChevronDoubleRight_default = ChevronDoubleRight;
mark_module_end(ChevronDoubleRight);

// node_modules/svelte-bootstrap-icons/lib/ChevronDoubleUp.svelte
mark_module_start();
ChevronDoubleUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronDoubleUp.svelte";
var root546 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.646 2.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 3.707 2.354 9.354a.5.5 0 1 1-.708-.708l6-6z"></path><path fill-rule="evenodd" d="M7.646 6.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 7.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"></path></svg>`), ChevronDoubleUp[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function ChevronDoubleUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronDoubleUp);
  var svg = root546();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-double-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronDoubleUp = hmr(ChevronDoubleUp, () => ChevronDoubleUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronDoubleUp[HMR].source;
    set(ChevronDoubleUp[HMR].source, module.default[HMR].original);
  });
}
var ChevronDoubleUp_default = ChevronDoubleUp;
mark_module_end(ChevronDoubleUp);

// node_modules/svelte-bootstrap-icons/lib/ChevronDown.svelte
mark_module_start();
ChevronDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronDown.svelte";
var root547 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"></path></svg>`), ChevronDown[FILENAME], [[1, 0, [[1, 173]]]]);
function ChevronDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronDown);
  var svg = root547();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronDown = hmr(ChevronDown, () => ChevronDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronDown[HMR].source;
    set(ChevronDown[HMR].source, module.default[HMR].original);
  });
}
var ChevronDown_default = ChevronDown;
mark_module_end(ChevronDown);

// node_modules/svelte-bootstrap-icons/lib/ChevronExpand.svelte
mark_module_start();
ChevronExpand[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronExpand.svelte";
var root548 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.646 9.146a.5.5 0 0 1 .708 0L8 12.793l3.646-3.647a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 0-.708zm0-2.292a.5.5 0 0 0 .708 0L8 3.207l3.646 3.647a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 0 0 0 .708z"></path></svg>`), ChevronExpand[FILENAME], [[1, 0, [[1, 175]]]]);
function ChevronExpand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronExpand);
  var svg = root548();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-expand", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronExpand = hmr(ChevronExpand, () => ChevronExpand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronExpand[HMR].source;
    set(ChevronExpand[HMR].source, module.default[HMR].original);
  });
}
var ChevronExpand_default = ChevronExpand;
mark_module_end(ChevronExpand);

// node_modules/svelte-bootstrap-icons/lib/ChevronLeft.svelte
mark_module_start();
ChevronLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronLeft.svelte";
var root549 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"></path></svg>`), ChevronLeft[FILENAME], [[1, 0, [[1, 173]]]]);
function ChevronLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronLeft);
  var svg = root549();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronLeft = hmr(ChevronLeft, () => ChevronLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronLeft[HMR].source;
    set(ChevronLeft[HMR].source, module.default[HMR].original);
  });
}
var ChevronLeft_default = ChevronLeft;
mark_module_end(ChevronLeft);

// node_modules/svelte-bootstrap-icons/lib/ChevronRight.svelte
mark_module_start();
ChevronRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronRight.svelte";
var root550 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"></path></svg>`), ChevronRight[FILENAME], [[1, 0, [[1, 174]]]]);
function ChevronRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronRight);
  var svg = root550();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronRight = hmr(ChevronRight, () => ChevronRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronRight[HMR].source;
    set(ChevronRight[HMR].source, module.default[HMR].original);
  });
}
var ChevronRight_default = ChevronRight;
mark_module_end(ChevronRight);

// node_modules/svelte-bootstrap-icons/lib/ChevronUp.svelte
mark_module_start();
ChevronUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ChevronUp.svelte";
var root551 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"></path></svg>`), ChevronUp[FILENAME], [[1, 0, [[1, 171]]]]);
function ChevronUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ChevronUp);
  var svg = root551();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-chevron-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronUp = hmr(ChevronUp, () => ChevronUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronUp[HMR].source;
    set(ChevronUp[HMR].source, module.default[HMR].original);
  });
}
var ChevronUp_default = ChevronUp;
mark_module_end(ChevronUp);

// node_modules/svelte-bootstrap-icons/lib/CircleFill.svelte
mark_module_start();
CircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CircleFill.svelte";
var root552 = add_locations(ns_template(`<svg><!><circle cx="8" cy="8" r="8"></circle></svg>`), CircleFill[FILENAME], [[1, 0, [[1, 172]]]]);
function CircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CircleFill);
  var svg = root552();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CircleFill = hmr(CircleFill, () => CircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CircleFill[HMR].source;
    set(CircleFill[HMR].source, module.default[HMR].original);
  });
}
var CircleFill_default11 = CircleFill;
mark_module_end(CircleFill);

// node_modules/svelte-bootstrap-icons/lib/CircleHalf.svelte
mark_module_start();
CircleHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CircleHalf.svelte";
var root553 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 0 8 1v14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z"></path></svg>`), CircleHalf[FILENAME], [[1, 0, [[1, 172]]]]);
function CircleHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CircleHalf);
  var svg = root553();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-circle-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CircleHalf = hmr(CircleHalf, () => CircleHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CircleHalf[HMR].source;
    set(CircleHalf[HMR].source, module.default[HMR].original);
  });
}
var CircleHalf_default = CircleHalf;
mark_module_end(CircleHalf);

// node_modules/svelte-bootstrap-icons/lib/CircleSquare.svelte
mark_module_start();
CircleSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CircleSquare.svelte";
var root554 = add_locations(ns_template(`<svg><!><path d="M0 6a6 6 0 1 1 12 0A6 6 0 0 1 0 6z"></path><path d="M12.93 5h1.57a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-1.57a6.953 6.953 0 0 1-1-.22v1.79A1.5 1.5 0 0 0 5.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 4h-1.79c.097.324.17.658.22 1z"></path></svg>`), CircleSquare[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function CircleSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CircleSquare);
  var svg = root554();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-circle-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CircleSquare = hmr(CircleSquare, () => CircleSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CircleSquare[HMR].source;
    set(CircleSquare[HMR].source, module.default[HMR].original);
  });
}
var CircleSquare_default = CircleSquare;
mark_module_end(CircleSquare);

// node_modules/svelte-bootstrap-icons/lib/Circle.svelte
mark_module_start();
Circle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Circle.svelte";
var root555 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path></svg>`), Circle[FILENAME], [[1, 0, [[1, 167]]]]);
function Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Circle);
  var svg = root555();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle = hmr(Circle, () => Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle[HMR].source;
    set(Circle[HMR].source, module.default[HMR].original);
  });
}
var Circle_default11 = Circle;
mark_module_end(Circle);

// node_modules/svelte-bootstrap-icons/lib/ClipboardCheckFill.svelte
mark_module_start();
ClipboardCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardCheckFill.svelte";
var root556 = add_locations(ns_template(`<svg><!><path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3Zm3 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3Z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1A2.5 2.5 0 0 1 9.5 5h-3A2.5 2.5 0 0 1 4 2.5v-1Zm6.854 7.354-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708.708Z"></path></svg>`), ClipboardCheckFill[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function ClipboardCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardCheckFill);
  var svg = root556();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardCheckFill = hmr(ClipboardCheckFill, () => ClipboardCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardCheckFill[HMR].source;
    set(ClipboardCheckFill[HMR].source, module.default[HMR].original);
  });
}
var ClipboardCheckFill_default = ClipboardCheckFill;
mark_module_end(ClipboardCheckFill);

// node_modules/svelte-bootstrap-icons/lib/ClipboardCheck.svelte
mark_module_start();
ClipboardCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardCheck.svelte";
var root557 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.854 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"></path><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"></path></svg>`), ClipboardCheck[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function ClipboardCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardCheck);
  var svg = root557();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardCheck = hmr(ClipboardCheck, () => ClipboardCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardCheck[HMR].source;
    set(ClipboardCheck[HMR].source, module.default[HMR].original);
  });
}
var ClipboardCheck_default = ClipboardCheck;
mark_module_end(ClipboardCheck);

// node_modules/svelte-bootstrap-icons/lib/ClipboardDataFill.svelte
mark_module_start();
ClipboardDataFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardDataFill.svelte";
var root558 = add_locations(ns_template(`<svg><!><path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3Zm3 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3Z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1A2.5 2.5 0 0 1 9.5 5h-3A2.5 2.5 0 0 1 4 2.5v-1ZM10 8a1 1 0 1 1 2 0v5a1 1 0 1 1-2 0V8Zm-6 4a1 1 0 1 1 2 0v1a1 1 0 1 1-2 0v-1Zm4-3a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-3a1 1 0 0 1 1-1Z"></path></svg>`), ClipboardDataFill[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function ClipboardDataFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardDataFill);
  var svg = root558();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-data-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardDataFill = hmr(ClipboardDataFill, () => ClipboardDataFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardDataFill[HMR].source;
    set(ClipboardDataFill[HMR].source, module.default[HMR].original);
  });
}
var ClipboardDataFill_default = ClipboardDataFill;
mark_module_end(ClipboardDataFill);

// node_modules/svelte-bootstrap-icons/lib/ClipboardData.svelte
mark_module_start();
ClipboardData[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardData.svelte";
var root559 = add_locations(ns_template(`<svg><!><path d="M4 11a1 1 0 1 1 2 0v1a1 1 0 1 1-2 0v-1zm6-4a1 1 0 1 1 2 0v5a1 1 0 1 1-2 0V7zM7 9a1 1 0 0 1 2 0v3a1 1 0 1 1-2 0V9z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"></path><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"></path></svg>`), ClipboardData[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function ClipboardData($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardData);
  var svg = root559();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-data", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardData = hmr(ClipboardData, () => ClipboardData[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardData[HMR].source;
    set(ClipboardData[HMR].source, module.default[HMR].original);
  });
}
var ClipboardData_default = ClipboardData;
mark_module_end(ClipboardData);

// node_modules/svelte-bootstrap-icons/lib/ClipboardFill.svelte
mark_module_start();
ClipboardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardFill.svelte";
var root560 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10 1.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-1Zm-5 0A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5v1A1.5 1.5 0 0 1 9.5 4h-3A1.5 1.5 0 0 1 5 2.5v-1Zm-2 0h1v1A2.5 2.5 0 0 0 6.5 5h3A2.5 2.5 0 0 0 12 2.5v-1h1a2 2 0 0 1 2 2V14a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3.5a2 2 0 0 1 2-2Z"></path></svg>`), ClipboardFill[FILENAME], [[1, 0, [[1, 175]]]]);
function ClipboardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardFill);
  var svg = root560();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardFill = hmr(ClipboardFill, () => ClipboardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardFill[HMR].source;
    set(ClipboardFill[HMR].source, module.default[HMR].original);
  });
}
var ClipboardFill_default = ClipboardFill;
mark_module_end(ClipboardFill);

// node_modules/svelte-bootstrap-icons/lib/ClipboardHeartFill.svelte
mark_module_start();
ClipboardHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardHeartFill.svelte";
var root561 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.5 0A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3Zm3 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3Z"></path><path fill-rule="evenodd" d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1A2.5 2.5 0 0 1 9.5 5h-3A2.5 2.5 0 0 1 4 2.5v-1Zm4 5.982c1.664-1.673 5.825 1.254 0 5.018-5.825-3.764-1.664-6.69 0-5.018Z"></path></svg>`), ClipboardHeartFill[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function ClipboardHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardHeartFill);
  var svg = root561();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardHeartFill = hmr(ClipboardHeartFill, () => ClipboardHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardHeartFill[HMR].source;
    set(ClipboardHeartFill[HMR].source, module.default[HMR].original);
  });
}
var ClipboardHeartFill_default = ClipboardHeartFill;
mark_module_end(ClipboardHeartFill);

// node_modules/svelte-bootstrap-icons/lib/ClipboardHeart.svelte
mark_module_start();
ClipboardHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardHeart.svelte";
var root562 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5 1.5A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5v1A1.5 1.5 0 0 1 9.5 4h-3A1.5 1.5 0 0 1 5 2.5v-1Zm5 0a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-1Z"></path><path d="M3 1.5h1v1H3a1 1 0 0 0-1 1V14a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V3.5a1 1 0 0 0-1-1h-1v-1h1a2 2 0 0 1 2 2V14a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3.5a2 2 0 0 1 2-2Z"></path><path d="M8 6.982C9.664 5.309 13.825 8.236 8 12 2.175 8.236 6.336 5.31 8 6.982Z"></path></svg>`), ClipboardHeart[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function ClipboardHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardHeart);
  var svg = root562();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardHeart = hmr(ClipboardHeart, () => ClipboardHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardHeart[HMR].source;
    set(ClipboardHeart[HMR].source, module.default[HMR].original);
  });
}
var ClipboardHeart_default = ClipboardHeart;
mark_module_end(ClipboardHeart);

// node_modules/svelte-bootstrap-icons/lib/ClipboardMinusFill.svelte
mark_module_start();
ClipboardMinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardMinusFill.svelte";
var root563 = add_locations(ns_template(`<svg><!><path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3Zm3 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3Z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1A2.5 2.5 0 0 1 9.5 5h-3A2.5 2.5 0 0 1 4 2.5v-1ZM6 9h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1 0-1Z"></path></svg>`), ClipboardMinusFill[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function ClipboardMinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardMinusFill);
  var svg = root563();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardMinusFill = hmr(ClipboardMinusFill, () => ClipboardMinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardMinusFill[HMR].source;
    set(ClipboardMinusFill[HMR].source, module.default[HMR].original);
  });
}
var ClipboardMinusFill_default = ClipboardMinusFill;
mark_module_end(ClipboardMinusFill);

// node_modules/svelte-bootstrap-icons/lib/ClipboardMinus.svelte
mark_module_start();
ClipboardMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardMinus.svelte";
var root564 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5.5 9.5A.5.5 0 0 1 6 9h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"></path><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"></path></svg>`), ClipboardMinus[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function ClipboardMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardMinus);
  var svg = root564();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardMinus = hmr(ClipboardMinus, () => ClipboardMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardMinus[HMR].source;
    set(ClipboardMinus[HMR].source, module.default[HMR].original);
  });
}
var ClipboardMinus_default = ClipboardMinus;
mark_module_end(ClipboardMinus);

// node_modules/svelte-bootstrap-icons/lib/ClipboardPlusFill.svelte
mark_module_start();
ClipboardPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardPlusFill.svelte";
var root565 = add_locations(ns_template(`<svg><!><path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3Zm3 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3Z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1A2.5 2.5 0 0 1 9.5 5h-3A2.5 2.5 0 0 1 4 2.5v-1Zm4.5 6V9H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V10H6a.5.5 0 0 1 0-1h1.5V7.5a.5.5 0 0 1 1 0Z"></path></svg>`), ClipboardPlusFill[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function ClipboardPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardPlusFill);
  var svg = root565();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardPlusFill = hmr(ClipboardPlusFill, () => ClipboardPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardPlusFill[HMR].source;
    set(ClipboardPlusFill[HMR].source, module.default[HMR].original);
  });
}
var ClipboardPlusFill_default = ClipboardPlusFill;
mark_module_end(ClipboardPlusFill);

// node_modules/svelte-bootstrap-icons/lib/ClipboardPlus.svelte
mark_module_start();
ClipboardPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardPlus.svelte";
var root566 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 7a.5.5 0 0 1 .5.5V9H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V10H6a.5.5 0 0 1 0-1h1.5V7.5A.5.5 0 0 1 8 7z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"></path><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"></path></svg>`), ClipboardPlus[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function ClipboardPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardPlus);
  var svg = root566();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardPlus = hmr(ClipboardPlus, () => ClipboardPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardPlus[HMR].source;
    set(ClipboardPlus[HMR].source, module.default[HMR].original);
  });
}
var ClipboardPlus_default = ClipboardPlus;
mark_module_end(ClipboardPlus);

// node_modules/svelte-bootstrap-icons/lib/ClipboardPulse.svelte
mark_module_start();
ClipboardPulse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardPulse.svelte";
var root567 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10 1.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-1Zm-5 0A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5v1A1.5 1.5 0 0 1 9.5 4h-3A1.5 1.5 0 0 1 5 2.5v-1Zm-2 0h1v1H3a1 1 0 0 0-1 1V14a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V3.5a1 1 0 0 0-1-1h-1v-1h1a2 2 0 0 1 2 2V14a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3.5a2 2 0 0 1 2-2Zm6.979 3.856a.5.5 0 0 0-.968.04L7.92 10.49l-.94-3.135a.5.5 0 0 0-.895-.133L4.232 10H3.5a.5.5 0 0 0 0 1h1a.5.5 0 0 0 .416-.223l1.41-2.115 1.195 3.982a.5.5 0 0 0 .968-.04L9.58 7.51l.94 3.135A.5.5 0 0 0 11 11h1.5a.5.5 0 0 0 0-1h-1.128L9.979 5.356Z"></path></svg>`), ClipboardPulse[FILENAME], [[1, 0, [[1, 176]]]]);
function ClipboardPulse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardPulse);
  var svg = root567();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-pulse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardPulse = hmr(ClipboardPulse, () => ClipboardPulse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardPulse[HMR].source;
    set(ClipboardPulse[HMR].source, module.default[HMR].original);
  });
}
var ClipboardPulse_default = ClipboardPulse;
mark_module_end(ClipboardPulse);

// node_modules/svelte-bootstrap-icons/lib/ClipboardXFill.svelte
mark_module_start();
ClipboardXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardXFill.svelte";
var root568 = add_locations(ns_template(`<svg><!><path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3Zm3 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3Z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1A2.5 2.5 0 0 1 9.5 5h-3A2.5 2.5 0 0 1 4 2.5v-1Zm4 7.793 1.146-1.147a.5.5 0 1 1 .708.708L8.707 10l1.147 1.146a.5.5 0 0 1-.708.708L8 10.707l-1.146 1.147a.5.5 0 0 1-.708-.708L7.293 10 6.146 8.854a.5.5 0 1 1 .708-.708L8 9.293Z"></path></svg>`), ClipboardXFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function ClipboardXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardXFill);
  var svg = root568();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardXFill = hmr(ClipboardXFill, () => ClipboardXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardXFill[HMR].source;
    set(ClipboardXFill[HMR].source, module.default[HMR].original);
  });
}
var ClipboardXFill_default = ClipboardXFill;
mark_module_end(ClipboardXFill);

// node_modules/svelte-bootstrap-icons/lib/ClipboardX.svelte
mark_module_start();
ClipboardX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClipboardX.svelte";
var root569 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.146 7.146a.5.5 0 0 1 .708 0L8 8.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 9l1.147 1.146a.5.5 0 0 1-.708.708L8 9.707l-1.146 1.147a.5.5 0 0 1-.708-.708L7.293 9 6.146 7.854a.5.5 0 0 1 0-.708z"></path><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"></path><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"></path></svg>`), ClipboardX[FILENAME], [
  [
    1,
    0,
    [[1, 172], [2, 2], [3, 2]]
  ]
]);
function ClipboardX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClipboardX);
  var svg = root569();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardX = hmr(ClipboardX, () => ClipboardX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardX[HMR].source;
    set(ClipboardX[HMR].source, module.default[HMR].original);
  });
}
var ClipboardX_default = ClipboardX;
mark_module_end(ClipboardX);

// node_modules/svelte-bootstrap-icons/lib/Clipboard.svelte
mark_module_start();
Clipboard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard.svelte";
var root570 = add_locations(ns_template(`<svg><!><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"></path><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"></path></svg>`), Clipboard[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Clipboard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard);
  var svg = root570();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard = hmr(Clipboard, () => Clipboard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard[HMR].source;
    set(Clipboard[HMR].source, module.default[HMR].original);
  });
}
var Clipboard_default = Clipboard;
mark_module_end(Clipboard);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2CheckFill.svelte
mark_module_start();
Clipboard2CheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2CheckFill.svelte";
var root571 = add_locations(ns_template(`<svg><!><path d="M10 .5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V2a.5.5 0 0 0 .5.5h5A.5.5 0 0 0 11 2v-.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5Z"></path><path d="M4.085 1H3.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1h-.585c.055.156.085.325.085.5V2a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 4 2v-.5c0-.175.03-.344.085-.5Zm6.769 6.854-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708.708Z"></path></svg>`), Clipboard2CheckFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function Clipboard2CheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2CheckFill);
  var svg = root571();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2CheckFill = hmr(Clipboard2CheckFill, () => Clipboard2CheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2CheckFill[HMR].source;
    set(Clipboard2CheckFill[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2CheckFill_default = Clipboard2CheckFill;
mark_module_end(Clipboard2CheckFill);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2Check.svelte
mark_module_start();
Clipboard2Check[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2Check.svelte";
var root572 = add_locations(ns_template(`<svg><!><path d="M9.5 0a.5.5 0 0 1 .5.5.5.5 0 0 0 .5.5.5.5 0 0 1 .5.5V2a.5.5 0 0 1-.5.5h-5A.5.5 0 0 1 5 2v-.5a.5.5 0 0 1 .5-.5.5.5 0 0 0 .5-.5.5.5 0 0 1 .5-.5h3Z"></path><path d="M3 2.5a.5.5 0 0 1 .5-.5H4a.5.5 0 0 0 0-1h-.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1H12a.5.5 0 0 0 0 1h.5a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-12Z"></path><path d="M10.854 7.854a.5.5 0 0 0-.708-.708L7.5 9.793 6.354 8.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0l3-3Z"></path></svg>`), Clipboard2Check[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function Clipboard2Check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2Check);
  var svg = root572();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2Check = hmr(Clipboard2Check, () => Clipboard2Check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2Check[HMR].source;
    set(Clipboard2Check[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2Check_default = Clipboard2Check;
mark_module_end(Clipboard2Check);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2DataFill.svelte
mark_module_start();
Clipboard2DataFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2DataFill.svelte";
var root573 = add_locations(ns_template(`<svg><!><path d="M10 .5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V2a.5.5 0 0 0 .5.5h5A.5.5 0 0 0 11 2v-.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5Z"></path><path d="M4.085 1H3.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1h-.585c.055.156.085.325.085.5V2a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 4 2v-.5c0-.175.03-.344.085-.5ZM10 7a1 1 0 1 1 2 0v5a1 1 0 1 1-2 0V7Zm-6 4a1 1 0 1 1 2 0v1a1 1 0 1 1-2 0v-1Zm4-3a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0V9a1 1 0 0 1 1-1Z"></path></svg>`), Clipboard2DataFill[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function Clipboard2DataFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2DataFill);
  var svg = root573();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-data-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2DataFill = hmr(Clipboard2DataFill, () => Clipboard2DataFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2DataFill[HMR].source;
    set(Clipboard2DataFill[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2DataFill_default = Clipboard2DataFill;
mark_module_end(Clipboard2DataFill);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2Data.svelte
mark_module_start();
Clipboard2Data[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2Data.svelte";
var root574 = add_locations(ns_template(`<svg><!><path d="M9.5 0a.5.5 0 0 1 .5.5.5.5 0 0 0 .5.5.5.5 0 0 1 .5.5V2a.5.5 0 0 1-.5.5h-5A.5.5 0 0 1 5 2v-.5a.5.5 0 0 1 .5-.5.5.5 0 0 0 .5-.5.5.5 0 0 1 .5-.5h3Z"></path><path d="M3 2.5a.5.5 0 0 1 .5-.5H4a.5.5 0 0 0 0-1h-.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1H12a.5.5 0 0 0 0 1h.5a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-12Z"></path><path d="M10 7a1 1 0 1 1 2 0v5a1 1 0 1 1-2 0V7Zm-6 4a1 1 0 1 1 2 0v1a1 1 0 1 1-2 0v-1Zm4-3a1 1 0 0 0-1 1v3a1 1 0 1 0 2 0V9a1 1 0 0 0-1-1Z"></path></svg>`), Clipboard2Data[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function Clipboard2Data($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2Data);
  var svg = root574();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-data", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2Data = hmr(Clipboard2Data, () => Clipboard2Data[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2Data[HMR].source;
    set(Clipboard2Data[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2Data_default = Clipboard2Data;
mark_module_end(Clipboard2Data);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2Fill.svelte
mark_module_start();
Clipboard2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2Fill.svelte";
var root575 = add_locations(ns_template(`<svg><!><path d="M9.5 0a.5.5 0 0 1 .5.5.5.5 0 0 0 .5.5.5.5 0 0 1 .5.5V2a.5.5 0 0 1-.5.5h-5A.5.5 0 0 1 5 2v-.5a.5.5 0 0 1 .5-.5.5.5 0 0 0 .5-.5.5.5 0 0 1 .5-.5h3Z"></path><path d="M3.5 1h.585A1.498 1.498 0 0 0 4 1.5V2a1.5 1.5 0 0 0 1.5 1.5h5A1.5 1.5 0 0 0 12 2v-.5c0-.175-.03-.344-.085-.5h.585A1.5 1.5 0 0 1 14 2.5v12a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-12A1.5 1.5 0 0 1 3.5 1Z"></path></svg>`), Clipboard2Fill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function Clipboard2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2Fill);
  var svg = root575();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2Fill = hmr(Clipboard2Fill, () => Clipboard2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2Fill[HMR].source;
    set(Clipboard2Fill[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2Fill_default = Clipboard2Fill;
mark_module_end(Clipboard2Fill);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2HeartFill.svelte
mark_module_start();
Clipboard2HeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2HeartFill.svelte";
var root576 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.058.501a.501.501 0 0 0-.5-.501h-2.98c-.276 0-.5.225-.5.501A.499.499 0 0 1 5.582 1a.497.497 0 0 0-.497.497V2a.5.5 0 0 0 .5.5h4.968a.5.5 0 0 0 .5-.5v-.503A.497.497 0 0 0 10.555 1a.499.499 0 0 1-.497-.499Z"></path><path fill-rule="evenodd" d="M4.174 1h-.57a1.5 1.5 0 0 0-1.5 1.5v12a1.5 1.5 0 0 0 1.5 1.5h9a1.5 1.5 0 0 0 1.5-1.5v-12a1.5 1.5 0 0 0-1.5-1.5h-.642c.055.156.085.325.085.5V2c0 .828-.668 1.5-1.492 1.5H5.581A1.496 1.496 0 0 1 4.09 2v-.5c0-.175.03-.344.085-.5Zm3.894 5.482c1.656-1.673 5.795 1.254 0 5.018-5.795-3.764-1.656-6.69 0-5.018Z"></path></svg>`), Clipboard2HeartFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function Clipboard2HeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2HeartFill);
  var svg = root576();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2HeartFill = hmr(Clipboard2HeartFill, () => Clipboard2HeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2HeartFill[HMR].source;
    set(Clipboard2HeartFill[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2HeartFill_default = Clipboard2HeartFill;
mark_module_end(Clipboard2HeartFill);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2Heart.svelte
mark_module_start();
Clipboard2Heart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2Heart.svelte";
var root577 = add_locations(ns_template(`<svg><!><path d="M10.058.501a.501.501 0 0 0-.5-.501h-2.98c-.276 0-.5.225-.5.501A.499.499 0 0 1 5.582 1a.497.497 0 0 0-.497.497V2a.5.5 0 0 0 .5.5h4.968a.5.5 0 0 0 .5-.5v-.503A.497.497 0 0 0 10.555 1a.499.499 0 0 1-.497-.499Z"></path><path d="M3.605 2a.5.5 0 0 0-.5.5v12a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-12a.5.5 0 0 0-.5-.5h-.5a.5.5 0 0 1 0-1h.5a1.5 1.5 0 0 1 1.5 1.5v12a1.5 1.5 0 0 1-1.5 1.5h-9a1.5 1.5 0 0 1-1.5-1.5v-12a1.5 1.5 0 0 1 1.5-1.5h.5a.5.5 0 0 1 0 1h-.5Z"></path><path d="M8.068 6.482c1.656-1.673 5.795 1.254 0 5.018-5.795-3.764-1.656-6.69 0-5.018Z"></path></svg>`), Clipboard2Heart[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function Clipboard2Heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2Heart);
  var svg = root577();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2Heart = hmr(Clipboard2Heart, () => Clipboard2Heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2Heart[HMR].source;
    set(Clipboard2Heart[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2Heart_default = Clipboard2Heart;
mark_module_end(Clipboard2Heart);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2MinusFill.svelte
mark_module_start();
Clipboard2MinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2MinusFill.svelte";
var root578 = add_locations(ns_template(`<svg><!><path d="M10 .5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V2a.5.5 0 0 0 .5.5h5A.5.5 0 0 0 11 2v-.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5Z"></path><path d="M4.085 1H3.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1h-.585c.055.156.085.325.085.5V2a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 4 2v-.5c0-.175.03-.344.085-.5ZM6 8h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1 0-1Z"></path></svg>`), Clipboard2MinusFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function Clipboard2MinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2MinusFill);
  var svg = root578();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2MinusFill = hmr(Clipboard2MinusFill, () => Clipboard2MinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2MinusFill[HMR].source;
    set(Clipboard2MinusFill[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2MinusFill_default = Clipboard2MinusFill;
mark_module_end(Clipboard2MinusFill);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2Minus.svelte
mark_module_start();
Clipboard2Minus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2Minus.svelte";
var root579 = add_locations(ns_template(`<svg><!><path d="M9.5 0a.5.5 0 0 1 .5.5.5.5 0 0 0 .5.5.5.5 0 0 1 .5.5V2a.5.5 0 0 1-.5.5h-5A.5.5 0 0 1 5 2v-.5a.5.5 0 0 1 .5-.5.5.5 0 0 0 .5-.5.5.5 0 0 1 .5-.5h3Z"></path><path d="M3 2.5a.5.5 0 0 1 .5-.5H4a.5.5 0 0 0 0-1h-.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1H12a.5.5 0 0 0 0 1h.5a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-12Z"></path><path d="M6 8a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1H6Z"></path></svg>`), Clipboard2Minus[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function Clipboard2Minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2Minus);
  var svg = root579();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2Minus = hmr(Clipboard2Minus, () => Clipboard2Minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2Minus[HMR].source;
    set(Clipboard2Minus[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2Minus_default = Clipboard2Minus;
mark_module_end(Clipboard2Minus);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2PlusFill.svelte
mark_module_start();
Clipboard2PlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2PlusFill.svelte";
var root580 = add_locations(ns_template(`<svg><!><path d="M10 .5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V2a.5.5 0 0 0 .5.5h5A.5.5 0 0 0 11 2v-.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5Z"></path><path d="M4.085 1H3.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1h-.585c.055.156.085.325.085.5V2a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 4 2v-.5c0-.175.03-.344.085-.5ZM8.5 6.5V8H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V9H6a.5.5 0 0 1 0-1h1.5V6.5a.5.5 0 0 1 1 0Z"></path></svg>`), Clipboard2PlusFill[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function Clipboard2PlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2PlusFill);
  var svg = root580();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2PlusFill = hmr(Clipboard2PlusFill, () => Clipboard2PlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2PlusFill[HMR].source;
    set(Clipboard2PlusFill[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2PlusFill_default = Clipboard2PlusFill;
mark_module_end(Clipboard2PlusFill);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2Plus.svelte
mark_module_start();
Clipboard2Plus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2Plus.svelte";
var root581 = add_locations(ns_template(`<svg><!><path d="M9.5 0a.5.5 0 0 1 .5.5.5.5 0 0 0 .5.5.5.5 0 0 1 .5.5V2a.5.5 0 0 1-.5.5h-5A.5.5 0 0 1 5 2v-.5a.5.5 0 0 1 .5-.5.5.5 0 0 0 .5-.5.5.5 0 0 1 .5-.5h3Z"></path><path d="M3 2.5a.5.5 0 0 1 .5-.5H4a.5.5 0 0 0 0-1h-.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1H12a.5.5 0 0 0 0 1h.5a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-12Z"></path><path d="M8.5 6.5a.5.5 0 0 0-1 0V8H6a.5.5 0 0 0 0 1h1.5v1.5a.5.5 0 0 0 1 0V9H10a.5.5 0 0 0 0-1H8.5V6.5Z"></path></svg>`), Clipboard2Plus[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function Clipboard2Plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2Plus);
  var svg = root581();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2Plus = hmr(Clipboard2Plus, () => Clipboard2Plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2Plus[HMR].source;
    set(Clipboard2Plus[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2Plus_default = Clipboard2Plus;
mark_module_end(Clipboard2Plus);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2PulseFill.svelte
mark_module_start();
Clipboard2PulseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2PulseFill.svelte";
var root582 = add_locations(ns_template(`<svg><!><path d="M10 .5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V2a.5.5 0 0 0 .5.5h5A.5.5 0 0 0 11 2v-.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5Z"></path><path d="M4.085 1H3.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1h-.585c.055.156.085.325.085.5V2a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 4 2v-.5c0-.175.03-.344.085-.5ZM9.98 5.356 11.372 10h.128a.5.5 0 0 1 0 1H11a.5.5 0 0 1-.479-.356l-.94-3.135-1.092 5.096a.5.5 0 0 1-.968.039L6.383 8.85l-.936 1.873A.5.5 0 0 1 5 11h-.5a.5.5 0 0 1 0-1h.191l1.362-2.724a.5.5 0 0 1 .926.08l.94 3.135 1.092-5.096a.5.5 0 0 1 .968-.039Z"></path></svg>`), Clipboard2PulseFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function Clipboard2PulseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2PulseFill);
  var svg = root582();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-pulse-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2PulseFill = hmr(Clipboard2PulseFill, () => Clipboard2PulseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2PulseFill[HMR].source;
    set(Clipboard2PulseFill[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2PulseFill_default = Clipboard2PulseFill;
mark_module_end(Clipboard2PulseFill);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2Pulse.svelte
mark_module_start();
Clipboard2Pulse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2Pulse.svelte";
var root583 = add_locations(ns_template(`<svg><!><path d="M9.5 0a.5.5 0 0 1 .5.5.5.5 0 0 0 .5.5.5.5 0 0 1 .5.5V2a.5.5 0 0 1-.5.5h-5A.5.5 0 0 1 5 2v-.5a.5.5 0 0 1 .5-.5.5.5 0 0 0 .5-.5.5.5 0 0 1 .5-.5h3Z"></path><path d="M3 2.5a.5.5 0 0 1 .5-.5H4a.5.5 0 0 0 0-1h-.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1H12a.5.5 0 0 0 0 1h.5a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-12Z"></path><path d="M9.979 5.356a.5.5 0 0 0-.968.04L7.92 10.49l-.94-3.135a.5.5 0 0 0-.926-.08L4.69 10H4.5a.5.5 0 0 0 0 1H5a.5.5 0 0 0 .447-.276l.936-1.873 1.138 3.793a.5.5 0 0 0 .968-.04L9.58 7.51l.94 3.135A.5.5 0 0 0 11 11h.5a.5.5 0 0 0 0-1h-.128L9.979 5.356Z"></path></svg>`), Clipboard2Pulse[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function Clipboard2Pulse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2Pulse);
  var svg = root583();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-pulse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2Pulse = hmr(Clipboard2Pulse, () => Clipboard2Pulse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2Pulse[HMR].source;
    set(Clipboard2Pulse[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2Pulse_default = Clipboard2Pulse;
mark_module_end(Clipboard2Pulse);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2XFill.svelte
mark_module_start();
Clipboard2XFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2XFill.svelte";
var root584 = add_locations(ns_template(`<svg><!><path d="M10 .5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V2a.5.5 0 0 0 .5.5h5A.5.5 0 0 0 11 2v-.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5Z"></path><path d="M4.085 1H3.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1h-.585c.055.156.085.325.085.5V2a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 4 2v-.5c0-.175.03-.344.085-.5ZM8 8.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 9l1.147 1.146a.5.5 0 0 1-.708.708L8 9.707l-1.146 1.147a.5.5 0 0 1-.708-.708L7.293 9 6.146 7.854a.5.5 0 1 1 .708-.708L8 8.293Z"></path></svg>`), Clipboard2XFill[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function Clipboard2XFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2XFill);
  var svg = root584();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2XFill = hmr(Clipboard2XFill, () => Clipboard2XFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2XFill[HMR].source;
    set(Clipboard2XFill[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2XFill_default = Clipboard2XFill;
mark_module_end(Clipboard2XFill);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2X.svelte
mark_module_start();
Clipboard2X[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2X.svelte";
var root585 = add_locations(ns_template(`<svg><!><path d="M9.5 0a.5.5 0 0 1 .5.5.5.5 0 0 0 .5.5.5.5 0 0 1 .5.5V2a.5.5 0 0 1-.5.5h-5A.5.5 0 0 1 5 2v-.5a.5.5 0 0 1 .5-.5.5.5 0 0 0 .5-.5.5.5 0 0 1 .5-.5h3Z"></path><path d="M3 2.5a.5.5 0 0 1 .5-.5H4a.5.5 0 0 0 0-1h-.5A1.5 1.5 0 0 0 2 2.5v12A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 12.5 1H12a.5.5 0 0 0 0 1h.5a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-12Z"></path><path d="M8 8.293 6.854 7.146a.5.5 0 1 0-.708.708L7.293 9l-1.147 1.146a.5.5 0 0 0 .708.708L8 9.707l1.146 1.147a.5.5 0 0 0 .708-.708L8.707 9l1.147-1.146a.5.5 0 0 0-.708-.708L8 8.293Z"></path></svg>`), Clipboard2X[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function Clipboard2X($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2X);
  var svg = root585();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2X = hmr(Clipboard2X, () => Clipboard2X[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2X[HMR].source;
    set(Clipboard2X[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2X_default = Clipboard2X;
mark_module_end(Clipboard2X);

// node_modules/svelte-bootstrap-icons/lib/Clipboard2.svelte
mark_module_start();
Clipboard2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clipboard2.svelte";
var root586 = add_locations(ns_template(`<svg><!><path d="M3.5 2a.5.5 0 0 0-.5.5v12a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-12a.5.5 0 0 0-.5-.5H12a.5.5 0 0 1 0-1h.5A1.5 1.5 0 0 1 14 2.5v12a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-12A1.5 1.5 0 0 1 3.5 1H4a.5.5 0 0 1 0 1h-.5Z"></path><path d="M10 .5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V2a.5.5 0 0 0 .5.5h5A.5.5 0 0 0 11 2v-.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5Z"></path></svg>`), Clipboard2[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Clipboard2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clipboard2);
  var svg = root586();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clipboard2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard2 = hmr(Clipboard2, () => Clipboard2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard2[HMR].source;
    set(Clipboard2[HMR].source, module.default[HMR].original);
  });
}
var Clipboard2_default = Clipboard2;
mark_module_end(Clipboard2);

// node_modules/svelte-bootstrap-icons/lib/ClockFill.svelte
mark_module_start();
ClockFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClockFill.svelte";
var root587 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"></path></svg>`), ClockFill[FILENAME], [[1, 0, [[1, 171]]]]);
function ClockFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClockFill);
  var svg = root587();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clock-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClockFill = hmr(ClockFill, () => ClockFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClockFill[HMR].source;
    set(ClockFill[HMR].source, module.default[HMR].original);
  });
}
var ClockFill_default = ClockFill;
mark_module_end(ClockFill);

// node_modules/svelte-bootstrap-icons/lib/ClockHistory.svelte
mark_module_start();
ClockHistory[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ClockHistory.svelte";
var root588 = add_locations(ns_template(`<svg><!><path d="M8.515 1.019A7 7 0 0 0 8 1V0a8 8 0 0 1 .589.022l-.074.997zm2.004.45a7.003 7.003 0 0 0-.985-.299l.219-.976c.383.086.76.2 1.126.342l-.36.933zm1.37.71a7.01 7.01 0 0 0-.439-.27l.493-.87a8.025 8.025 0 0 1 .979.654l-.615.789a6.996 6.996 0 0 0-.418-.302zm1.834 1.79a6.99 6.99 0 0 0-.653-.796l.724-.69c.27.285.52.59.747.91l-.818.576zm.744 1.352a7.08 7.08 0 0 0-.214-.468l.893-.45a7.976 7.976 0 0 1 .45 1.088l-.95.313a7.023 7.023 0 0 0-.179-.483zm.53 2.507a6.991 6.991 0 0 0-.1-1.025l.985-.17c.067.386.106.778.116 1.17l-1 .025zm-.131 1.538c.033-.17.06-.339.081-.51l.993.123a7.957 7.957 0 0 1-.23 1.155l-.964-.267c.046-.165.086-.332.12-.501zm-.952 2.379c.184-.29.346-.594.486-.908l.914.405c-.16.36-.345.706-.555 1.038l-.845-.535zm-.964 1.205c.122-.122.239-.248.35-.378l.758.653a8.073 8.073 0 0 1-.401.432l-.707-.707z"></path><path d="M8 1a7 7 0 1 0 4.95 11.95l.707.707A8.001 8.001 0 1 1 8 0v1z"></path><path d="M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5z"></path></svg>`), ClockHistory[FILENAME], [
  [
    1,
    0,
    [[1, 174], [2, 2], [3, 2]]
  ]
]);
function ClockHistory($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ClockHistory);
  var svg = root588();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clock-history", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClockHistory = hmr(ClockHistory, () => ClockHistory[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClockHistory[HMR].source;
    set(ClockHistory[HMR].source, module.default[HMR].original);
  });
}
var ClockHistory_default = ClockHistory;
mark_module_end(ClockHistory);

// node_modules/svelte-bootstrap-icons/lib/Clock.svelte
mark_module_start();
Clock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clock.svelte";
var root589 = add_locations(ns_template(`<svg><!><path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"></path><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"></path></svg>`), Clock[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Clock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clock);
  var svg = root589();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock = hmr(Clock, () => Clock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock[HMR].source;
    set(Clock[HMR].source, module.default[HMR].original);
  });
}
var Clock_default = Clock;
mark_module_end(Clock);

// node_modules/svelte-bootstrap-icons/lib/CloudArrowDownFill.svelte
mark_module_start();
CloudArrowDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudArrowDownFill.svelte";
var root590 = add_locations(ns_template(`<svg><!><path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm2.354 6.854-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5a.5.5 0 0 1 1 0v3.793l1.146-1.147a.5.5 0 0 1 .708.708z"></path></svg>`), CloudArrowDownFill[FILENAME], [[1, 0, [[1, 182]]]]);
function CloudArrowDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudArrowDownFill);
  var svg = root590();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-arrow-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudArrowDownFill = hmr(CloudArrowDownFill, () => CloudArrowDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudArrowDownFill[HMR].source;
    set(CloudArrowDownFill[HMR].source, module.default[HMR].original);
  });
}
var CloudArrowDownFill_default = CloudArrowDownFill;
mark_module_end(CloudArrowDownFill);

// node_modules/svelte-bootstrap-icons/lib/CloudArrowDown.svelte
mark_module_start();
CloudArrowDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudArrowDown.svelte";
var root591 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.646 10.854a.5.5 0 0 0 .708 0l2-2a.5.5 0 0 0-.708-.708L8.5 9.293V5.5a.5.5 0 0 0-1 0v3.793L6.354 8.146a.5.5 0 1 0-.708.708l2 2z"></path><path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"></path></svg>`), CloudArrowDown[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function CloudArrowDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudArrowDown);
  var svg = root591();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-arrow-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudArrowDown = hmr(CloudArrowDown, () => CloudArrowDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudArrowDown[HMR].source;
    set(CloudArrowDown[HMR].source, module.default[HMR].original);
  });
}
var CloudArrowDown_default = CloudArrowDown;
mark_module_end(CloudArrowDown);

// node_modules/svelte-bootstrap-icons/lib/CloudArrowUpFill.svelte
mark_module_start();
CloudArrowUpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudArrowUpFill.svelte";
var root592 = add_locations(ns_template(`<svg><!><path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm2.354 5.146a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2z"></path></svg>`), CloudArrowUpFill[FILENAME], [[1, 0, [[1, 180]]]]);
function CloudArrowUpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudArrowUpFill);
  var svg = root592();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-arrow-up-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudArrowUpFill = hmr(CloudArrowUpFill, () => CloudArrowUpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudArrowUpFill[HMR].source;
    set(CloudArrowUpFill[HMR].source, module.default[HMR].original);
  });
}
var CloudArrowUpFill_default = CloudArrowUpFill;
mark_module_end(CloudArrowUpFill);

// node_modules/svelte-bootstrap-icons/lib/CloudArrowUp.svelte
mark_module_start();
CloudArrowUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudArrowUp.svelte";
var root593 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.646 5.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708l2-2z"></path><path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"></path></svg>`), CloudArrowUp[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function CloudArrowUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudArrowUp);
  var svg = root593();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-arrow-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudArrowUp = hmr(CloudArrowUp, () => CloudArrowUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudArrowUp[HMR].source;
    set(CloudArrowUp[HMR].source, module.default[HMR].original);
  });
}
var CloudArrowUp_default = CloudArrowUp;
mark_module_end(CloudArrowUp);

// node_modules/svelte-bootstrap-icons/lib/CloudCheckFill.svelte
mark_module_start();
CloudCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudCheckFill.svelte";
var root594 = add_locations(ns_template(`<svg><!><path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm2.354 4.854-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708.708z"></path></svg>`), CloudCheckFill[FILENAME], [[1, 0, [[1, 177]]]]);
function CloudCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudCheckFill);
  var svg = root594();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudCheckFill = hmr(CloudCheckFill, () => CloudCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudCheckFill[HMR].source;
    set(CloudCheckFill[HMR].source, module.default[HMR].original);
  });
}
var CloudCheckFill_default = CloudCheckFill;
mark_module_end(CloudCheckFill);

// node_modules/svelte-bootstrap-icons/lib/CloudCheck.svelte
mark_module_start();
CloudCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudCheck.svelte";
var root595 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.354 6.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"></path></svg>`), CloudCheck[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function CloudCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudCheck);
  var svg = root595();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudCheck = hmr(CloudCheck, () => CloudCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudCheck[HMR].source;
    set(CloudCheck[HMR].source, module.default[HMR].original);
  });
}
var CloudCheck_default = CloudCheck;
mark_module_end(CloudCheck);

// node_modules/svelte-bootstrap-icons/lib/CloudDownloadFill.svelte
mark_module_start();
CloudDownloadFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudDownloadFill.svelte";
var root596 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 4.095 0 5.555 0 7.318 0 9.366 1.708 11 3.781 11H7.5V5.5a.5.5 0 0 1 1 0V11h4.188C14.502 11 16 9.57 16 7.773c0-1.636-1.242-2.969-2.834-3.194C12.923 1.999 10.69 0 8 0zm-.354 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V11h-1v3.293l-2.146-2.147a.5.5 0 0 0-.708.708l3 3z"></path></svg>`), CloudDownloadFill[FILENAME], [[1, 0, [[1, 180]]]]);
function CloudDownloadFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudDownloadFill);
  var svg = root596();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-download-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudDownloadFill = hmr(CloudDownloadFill, () => CloudDownloadFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudDownloadFill[HMR].source;
    set(CloudDownloadFill[HMR].source, module.default[HMR].original);
  });
}
var CloudDownloadFill_default = CloudDownloadFill;
mark_module_end(CloudDownloadFill);

// node_modules/svelte-bootstrap-icons/lib/CloudDownload.svelte
mark_module_start();
CloudDownload[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudDownload.svelte";
var root597 = add_locations(ns_template(`<svg><!><path d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z"></path><path d="M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708l3 3z"></path></svg>`), CloudDownload[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function CloudDownload($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudDownload);
  var svg = root597();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-download", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudDownload = hmr(CloudDownload, () => CloudDownload[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudDownload[HMR].source;
    set(CloudDownload[HMR].source, module.default[HMR].original);
  });
}
var CloudDownload_default = CloudDownload;
mark_module_end(CloudDownload);

// node_modules/svelte-bootstrap-icons/lib/CloudDrizzleFill.svelte
mark_module_start();
CloudDrizzleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudDrizzleFill.svelte";
var root598 = add_locations(ns_template(`<svg><!><path d="M4.158 12.025a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm6 0a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm-3.5 1.5a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm6 0a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm.747-8.498a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 11H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudDrizzleFill[FILENAME], [[1, 0, [[1, 179]]]]);
function CloudDrizzleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudDrizzleFill);
  var svg = root598();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-drizzle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudDrizzleFill = hmr(CloudDrizzleFill, () => CloudDrizzleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudDrizzleFill[HMR].source;
    set(CloudDrizzleFill[HMR].source, module.default[HMR].original);
  });
}
var CloudDrizzleFill_default = CloudDrizzleFill;
mark_module_end(CloudDrizzleFill);

// node_modules/svelte-bootstrap-icons/lib/CloudDrizzle.svelte
mark_module_start();
CloudDrizzle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudDrizzle.svelte";
var root599 = add_locations(ns_template(`<svg><!><path d="M4.158 12.025a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm6 0a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm-3.5 1.5a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm6 0a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm.747-8.498a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 11H13a3 3 0 0 0 .405-5.973zM8.5 2a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1 0 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 2z"></path></svg>`), CloudDrizzle[FILENAME], [[1, 0, [[1, 174]]]]);
function CloudDrizzle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudDrizzle);
  var svg = root599();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-drizzle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudDrizzle = hmr(CloudDrizzle, () => CloudDrizzle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudDrizzle[HMR].source;
    set(CloudDrizzle[HMR].source, module.default[HMR].original);
  });
}
var CloudDrizzle_default = CloudDrizzle;
mark_module_end(CloudDrizzle);

// node_modules/svelte-bootstrap-icons/lib/CloudFill.svelte
mark_module_start();
CloudFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudFill.svelte";
var root600 = add_locations(ns_template(`<svg><!><path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z"></path></svg>`), CloudFill[FILENAME], [[1, 0, [[1, 171]]]]);
function CloudFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudFill);
  var svg = root600();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudFill = hmr(CloudFill, () => CloudFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudFill[HMR].source;
    set(CloudFill[HMR].source, module.default[HMR].original);
  });
}
var CloudFill_default = CloudFill;
mark_module_end(CloudFill);

// node_modules/svelte-bootstrap-icons/lib/CloudFogFill.svelte
mark_module_start();
CloudFogFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudFogFill.svelte";
var root601 = add_locations(ns_template(`<svg><!><path d="M3 13.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm10.405-9.473a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 12H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudFogFill[FILENAME], [[1, 0, [[1, 175]]]]);
function CloudFogFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudFogFill);
  var svg = root601();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-fog-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudFogFill = hmr(CloudFogFill, () => CloudFogFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudFogFill[HMR].source;
    set(CloudFogFill[HMR].source, module.default[HMR].original);
  });
}
var CloudFogFill_default = CloudFogFill;
mark_module_end(CloudFogFill);

// node_modules/svelte-bootstrap-icons/lib/CloudFog.svelte
mark_module_start();
CloudFog[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudFog.svelte";
var root602 = add_locations(ns_template(`<svg><!><path d="M3 13.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm10.405-9.473a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 12H13a3 3 0 0 0 .405-5.973zM8.5 3a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1 0 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 3z"></path></svg>`), CloudFog[FILENAME], [[1, 0, [[1, 170]]]]);
function CloudFog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudFog);
  var svg = root602();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-fog", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudFog = hmr(CloudFog, () => CloudFog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudFog[HMR].source;
    set(CloudFog[HMR].source, module.default[HMR].original);
  });
}
var CloudFog_default = CloudFog;
mark_module_end(CloudFog);

// node_modules/svelte-bootstrap-icons/lib/CloudFog2Fill.svelte
mark_module_start();
CloudFog2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudFog2Fill.svelte";
var root603 = add_locations(ns_template(`<svg><!><path d="M8.5 3a5.001 5.001 0 0 1 4.905 4.027A3 3 0 0 1 13 13h-1.5a.5.5 0 0 0 0-1H1.05a3.51 3.51 0 0 1-.713-1H9.5a.5.5 0 0 0 0-1H.035a3.53 3.53 0 0 1 0-1H7.5a.5.5 0 0 0 0-1H.337a3.5 3.5 0 0 1 3.57-1.977A5.001 5.001 0 0 1 8.5 3z"></path></svg>`), CloudFog2Fill[FILENAME], [[1, 0, [[1, 176]]]]);
function CloudFog2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudFog2Fill);
  var svg = root603();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-fog2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudFog2Fill = hmr(CloudFog2Fill, () => CloudFog2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudFog2Fill[HMR].source;
    set(CloudFog2Fill[HMR].source, module.default[HMR].original);
  });
}
var CloudFog2Fill_default = CloudFog2Fill;
mark_module_end(CloudFog2Fill);

// node_modules/svelte-bootstrap-icons/lib/CloudFog2.svelte
mark_module_start();
CloudFog2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudFog2.svelte";
var root604 = add_locations(ns_template(`<svg><!><path d="M8.5 4a4.002 4.002 0 0 0-3.8 2.745.5.5 0 1 1-.949-.313 5.002 5.002 0 0 1 9.654.595A3 3 0 0 1 13 13H.5a.5.5 0 0 1 0-1H13a2 2 0 0 0 .001-4h-.026a.5.5 0 0 1-.5-.445A4 4 0 0 0 8.5 4zM0 8.5A.5.5 0 0 1 .5 8h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z"></path></svg>`), CloudFog2[FILENAME], [[1, 0, [[1, 171]]]]);
function CloudFog2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudFog2);
  var svg = root604();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-fog2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudFog2 = hmr(CloudFog2, () => CloudFog2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudFog2[HMR].source;
    set(CloudFog2[HMR].source, module.default[HMR].original);
  });
}
var CloudFog2_default = CloudFog2;
mark_module_end(CloudFog2);

// node_modules/svelte-bootstrap-icons/lib/CloudHailFill.svelte
mark_module_start();
CloudHailFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudHailFill.svelte";
var root605 = add_locations(ns_template(`<svg><!><path d="M3.75 15.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm.408-3.724a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zM7.75 15.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm.408-3.724a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm3.592 3.724a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm.408-3.724a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm1.247-6.999a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10.5H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudHailFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CloudHailFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudHailFill);
  var svg = root605();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-hail-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudHailFill = hmr(CloudHailFill, () => CloudHailFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudHailFill[HMR].source;
    set(CloudHailFill[HMR].source, module.default[HMR].original);
  });
}
var CloudHailFill_default = CloudHailFill;
mark_module_end(CloudHailFill);

// node_modules/svelte-bootstrap-icons/lib/CloudHail.svelte
mark_module_start();
CloudHail[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudHail.svelte";
var root606 = add_locations(ns_template(`<svg><!><path d="M13.405 4.527a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10.5H13a3 3 0 0 0 .405-5.973zM8.5 1.5a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1-.001 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 1.5zM3.75 15.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm.408-3.724a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zM7.75 15.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm.408-3.724a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm3.592 3.724a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm.408-3.724a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316z"></path></svg>`), CloudHail[FILENAME], [[1, 0, [[1, 171]]]]);
function CloudHail($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudHail);
  var svg = root606();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-hail", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudHail = hmr(CloudHail, () => CloudHail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudHail[HMR].source;
    set(CloudHail[HMR].source, module.default[HMR].original);
  });
}
var CloudHail_default = CloudHail;
mark_module_end(CloudHail);

// node_modules/svelte-bootstrap-icons/lib/CloudHazeFill.svelte
mark_module_start();
CloudHazeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudHazeFill.svelte";
var root607 = add_locations(ns_template(`<svg><!><path d="M4 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm-3 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm2 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM13.405 4.027a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudHazeFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CloudHazeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudHazeFill);
  var svg = root607();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-haze-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudHazeFill = hmr(CloudHazeFill, () => CloudHazeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudHazeFill[HMR].source;
    set(CloudHazeFill[HMR].source, module.default[HMR].original);
  });
}
var CloudHazeFill_default = CloudHazeFill;
mark_module_end(CloudHazeFill);

// node_modules/svelte-bootstrap-icons/lib/CloudHaze.svelte
mark_module_start();
CloudHaze[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudHaze.svelte";
var root608 = add_locations(ns_template(`<svg><!><path d="M4 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm-3 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm2 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM13.405 4.027a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973zM8.5 1a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1 0 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 1z"></path></svg>`), CloudHaze[FILENAME], [[1, 0, [[1, 171]]]]);
function CloudHaze($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudHaze);
  var svg = root608();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-haze", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudHaze = hmr(CloudHaze, () => CloudHaze[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudHaze[HMR].source;
    set(CloudHaze[HMR].source, module.default[HMR].original);
  });
}
var CloudHaze_default = CloudHaze;
mark_module_end(CloudHaze);

// node_modules/svelte-bootstrap-icons/lib/CloudHaze2Fill.svelte
mark_module_start();
CloudHaze2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudHaze2Fill.svelte";
var root609 = add_locations(ns_template(`<svg><!><path d="M8.5 2a5.001 5.001 0 0 1 4.905 4.027A3 3 0 0 1 13 12H3.5A3.5 3.5 0 0 1 .035 9H5.5a.5.5 0 0 0 0-1H.035a3.5 3.5 0 0 1 3.871-2.977A5.001 5.001 0 0 1 8.5 2zm-6 8a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9zM0 13.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z"></path></svg>`), CloudHaze2Fill[FILENAME], [[1, 0, [[1, 177]]]]);
function CloudHaze2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudHaze2Fill);
  var svg = root609();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-haze2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudHaze2Fill = hmr(CloudHaze2Fill, () => CloudHaze2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudHaze2Fill[HMR].source;
    set(CloudHaze2Fill[HMR].source, module.default[HMR].original);
  });
}
var CloudHaze2Fill_default = CloudHaze2Fill;
mark_module_end(CloudHaze2Fill);

// node_modules/svelte-bootstrap-icons/lib/CloudHaze2.svelte
mark_module_start();
CloudHaze2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudHaze2.svelte";
var root610 = add_locations(ns_template(`<svg><!><path d="M8.5 3a4.002 4.002 0 0 0-3.8 2.745.5.5 0 1 1-.949-.313 5.002 5.002 0 0 1 9.654.595A3 3 0 0 1 13 12H4.5a.5.5 0 0 1 0-1H13a2 2 0 0 0 .001-4h-.026a.5.5 0 0 1-.5-.445A4 4 0 0 0 8.5 3zM0 7.5A.5.5 0 0 1 .5 7h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm2 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm-2 4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z"></path></svg>`), CloudHaze2[FILENAME], [[1, 0, [[1, 172]]]]);
function CloudHaze2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudHaze2);
  var svg = root610();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-haze2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudHaze2 = hmr(CloudHaze2, () => CloudHaze2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudHaze2[HMR].source;
    set(CloudHaze2[HMR].source, module.default[HMR].original);
  });
}
var CloudHaze2_default = CloudHaze2;
mark_module_end(CloudHaze2);

// node_modules/svelte-bootstrap-icons/lib/CloudLightningFill.svelte
mark_module_start();
CloudLightningFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudLightningFill.svelte";
var root611 = add_locations(ns_template(`<svg><!><path d="M7.053 11.276A.5.5 0 0 1 7.5 11h1a.5.5 0 0 1 .474.658l-.28.842H9.5a.5.5 0 0 1 .39.812l-2 2.5a.5.5 0 0 1-.875-.433L7.36 14H6.5a.5.5 0 0 1-.447-.724l1-2zm6.352-7.249a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudLightningFill[FILENAME], [[1, 0, [[1, 181]]]]);
function CloudLightningFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudLightningFill);
  var svg = root611();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-lightning-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudLightningFill = hmr(CloudLightningFill, () => CloudLightningFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudLightningFill[HMR].source;
    set(CloudLightningFill[HMR].source, module.default[HMR].original);
  });
}
var CloudLightningFill_default = CloudLightningFill;
mark_module_end(CloudLightningFill);

// node_modules/svelte-bootstrap-icons/lib/CloudLightningRainFill.svelte
mark_module_start();
CloudLightningRainFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudLightningRainFill.svelte";
var root612 = add_locations(ns_template(`<svg><!><path d="M2.658 11.026a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm9.5 0a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm-7.5 1.5a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm9.5 0a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm-7.105-1.25A.5.5 0 0 1 7.5 11h1a.5.5 0 0 1 .474.658l-.28.842H9.5a.5.5 0 0 1 .39.812l-2 2.5a.5.5 0 0 1-.875-.433L7.36 14H6.5a.5.5 0 0 1-.447-.724l1-2zm6.352-7.249a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudLightningRainFill[FILENAME], [[1, 0, [[1, 186]]]]);
function CloudLightningRainFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudLightningRainFill);
  var svg = root612();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-lightning-rain-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudLightningRainFill = hmr(CloudLightningRainFill, () => CloudLightningRainFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudLightningRainFill[HMR].source;
    set(CloudLightningRainFill[HMR].source, module.default[HMR].original);
  });
}
var CloudLightningRainFill_default = CloudLightningRainFill;
mark_module_end(CloudLightningRainFill);

// node_modules/svelte-bootstrap-icons/lib/CloudLightningRain.svelte
mark_module_start();
CloudLightningRain[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudLightningRain.svelte";
var root613 = add_locations(ns_template(`<svg><!><path d="M2.658 11.026a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm9.5 0a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm-7.5 1.5a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm9.5 0a.5.5 0 0 1 .316.632l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.316zm-.753-8.499a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973zM8.5 1a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1 0 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 1zM7.053 11.276A.5.5 0 0 1 7.5 11h1a.5.5 0 0 1 .474.658l-.28.842H9.5a.5.5 0 0 1 .39.812l-2 2.5a.5.5 0 0 1-.875-.433L7.36 14H6.5a.5.5 0 0 1-.447-.724l1-2z"></path></svg>`), CloudLightningRain[FILENAME], [[1, 0, [[1, 181]]]]);
function CloudLightningRain($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudLightningRain);
  var svg = root613();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-lightning-rain", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudLightningRain = hmr(CloudLightningRain, () => CloudLightningRain[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudLightningRain[HMR].source;
    set(CloudLightningRain[HMR].source, module.default[HMR].original);
  });
}
var CloudLightningRain_default = CloudLightningRain;
mark_module_end(CloudLightningRain);

// node_modules/svelte-bootstrap-icons/lib/CloudLightning.svelte
mark_module_start();
CloudLightning[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudLightning.svelte";
var root614 = add_locations(ns_template(`<svg><!><path d="M13.405 4.027a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973zM8.5 1a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1 0 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 1zM7.053 11.276A.5.5 0 0 1 7.5 11h1a.5.5 0 0 1 .474.658l-.28.842H9.5a.5.5 0 0 1 .39.812l-2 2.5a.5.5 0 0 1-.875-.433L7.36 14H6.5a.5.5 0 0 1-.447-.724l1-2z"></path></svg>`), CloudLightning[FILENAME], [[1, 0, [[1, 176]]]]);
function CloudLightning($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudLightning);
  var svg = root614();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-lightning", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudLightning = hmr(CloudLightning, () => CloudLightning[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudLightning[HMR].source;
    set(CloudLightning[HMR].source, module.default[HMR].original);
  });
}
var CloudLightning_default = CloudLightning;
mark_module_end(CloudLightning);

// node_modules/svelte-bootstrap-icons/lib/CloudMinusFill.svelte
mark_module_start();
CloudMinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudMinusFill.svelte";
var root615 = add_locations(ns_template(`<svg><!><path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zM6 7.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1 0-1z"></path></svg>`), CloudMinusFill[FILENAME], [[1, 0, [[1, 177]]]]);
function CloudMinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudMinusFill);
  var svg = root615();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudMinusFill = hmr(CloudMinusFill, () => CloudMinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudMinusFill[HMR].source;
    set(CloudMinusFill[HMR].source, module.default[HMR].original);
  });
}
var CloudMinusFill_default = CloudMinusFill;
mark_module_end(CloudMinusFill);

// node_modules/svelte-bootstrap-icons/lib/CloudMinus.svelte
mark_module_start();
CloudMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudMinus.svelte";
var root616 = add_locations(ns_template(`<svg><!><path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"></path><path d="M6 7.5a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1H6z"></path></svg>`), CloudMinus[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function CloudMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudMinus);
  var svg = root616();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudMinus = hmr(CloudMinus, () => CloudMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudMinus[HMR].source;
    set(CloudMinus[HMR].source, module.default[HMR].original);
  });
}
var CloudMinus_default = CloudMinus;
mark_module_end(CloudMinus);

// node_modules/svelte-bootstrap-icons/lib/CloudMoonFill.svelte
mark_module_start();
CloudMoonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudMoonFill.svelte";
var root617 = add_locations(ns_template(`<svg><!><path d="M11.473 11a4.5 4.5 0 0 0-8.72-.99A3 3 0 0 0 3 16h8.5a2.5 2.5 0 0 0 0-5h-.027z"></path><path d="M11.286 1.778a.5.5 0 0 0-.565-.755 4.595 4.595 0 0 0-3.18 5.003 5.46 5.46 0 0 1 1.055.209A3.603 3.603 0 0 1 9.83 2.617a4.593 4.593 0 0 0 4.31 5.744 3.576 3.576 0 0 1-2.241.634c.162.317.295.652.394 1a4.59 4.59 0 0 0 3.624-2.04.5.5 0 0 0-.565-.755 3.593 3.593 0 0 1-4.065-5.422z"></path></svg>`), CloudMoonFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function CloudMoonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudMoonFill);
  var svg = root617();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-moon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudMoonFill = hmr(CloudMoonFill, () => CloudMoonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudMoonFill[HMR].source;
    set(CloudMoonFill[HMR].source, module.default[HMR].original);
  });
}
var CloudMoonFill_default = CloudMoonFill;
mark_module_end(CloudMoonFill);

// node_modules/svelte-bootstrap-icons/lib/CloudMoon.svelte
mark_module_start();
CloudMoon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudMoon.svelte";
var root618 = add_locations(ns_template(`<svg><!><path d="M7 8a3.5 3.5 0 0 1 3.5 3.555.5.5 0 0 0 .625.492A1.503 1.503 0 0 1 13 13.5a1.5 1.5 0 0 1-1.5 1.5H3a2 2 0 1 1 .1-3.998.5.5 0 0 0 .509-.375A3.502 3.502 0 0 1 7 8zm4.473 3a4.5 4.5 0 0 0-8.72-.99A3 3 0 0 0 3 16h8.5a2.5 2.5 0 0 0 0-5h-.027z"></path><path d="M11.286 1.778a.5.5 0 0 0-.565-.755 4.595 4.595 0 0 0-3.18 5.003 5.46 5.46 0 0 1 1.055.209A3.603 3.603 0 0 1 9.83 2.617a4.593 4.593 0 0 0 4.31 5.744 3.576 3.576 0 0 1-2.241.634c.162.317.295.652.394 1a4.59 4.59 0 0 0 3.624-2.04.5.5 0 0 0-.565-.755 3.593 3.593 0 0 1-4.065-5.422z"></path></svg>`), CloudMoon[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function CloudMoon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudMoon);
  var svg = root618();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-moon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudMoon = hmr(CloudMoon, () => CloudMoon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudMoon[HMR].source;
    set(CloudMoon[HMR].source, module.default[HMR].original);
  });
}
var CloudMoon_default = CloudMoon;
mark_module_end(CloudMoon);

// node_modules/svelte-bootstrap-icons/lib/CloudPlusFill.svelte
mark_module_start();
CloudPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudPlusFill.svelte";
var root619 = add_locations(ns_template(`<svg><!><path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm.5 4v1.5H10a.5.5 0 0 1 0 1H8.5V10a.5.5 0 0 1-1 0V8.5H6a.5.5 0 0 1 0-1h1.5V6a.5.5 0 0 1 1 0z"></path></svg>`), CloudPlusFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CloudPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudPlusFill);
  var svg = root619();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudPlusFill = hmr(CloudPlusFill, () => CloudPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudPlusFill[HMR].source;
    set(CloudPlusFill[HMR].source, module.default[HMR].original);
  });
}
var CloudPlusFill_default = CloudPlusFill;
mark_module_end(CloudPlusFill);

// node_modules/svelte-bootstrap-icons/lib/CloudPlus.svelte
mark_module_start();
CloudPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudPlus.svelte";
var root620 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 5.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V10a.5.5 0 0 1-1 0V8.5H6a.5.5 0 0 1 0-1h1.5V6a.5.5 0 0 1 .5-.5z"></path><path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"></path></svg>`), CloudPlus[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function CloudPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudPlus);
  var svg = root620();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudPlus = hmr(CloudPlus, () => CloudPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudPlus[HMR].source;
    set(CloudPlus[HMR].source, module.default[HMR].original);
  });
}
var CloudPlus_default = CloudPlus;
mark_module_end(CloudPlus);

// node_modules/svelte-bootstrap-icons/lib/CloudRainFill.svelte
mark_module_start();
CloudRainFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudRainFill.svelte";
var root621 = add_locations(ns_template(`<svg><!><path d="M4.158 12.025a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm3 0a.5.5 0 0 1 .316.633l-1 3a.5.5 0 1 1-.948-.316l1-3a.5.5 0 0 1 .632-.317zm3 0a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 1 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm3 0a.5.5 0 0 1 .316.633l-1 3a.5.5 0 1 1-.948-.316l1-3a.5.5 0 0 1 .632-.317zm.247-6.998a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 11H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudRainFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CloudRainFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudRainFill);
  var svg = root621();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-rain-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudRainFill = hmr(CloudRainFill, () => CloudRainFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudRainFill[HMR].source;
    set(CloudRainFill[HMR].source, module.default[HMR].original);
  });
}
var CloudRainFill_default = CloudRainFill;
mark_module_end(CloudRainFill);

// node_modules/svelte-bootstrap-icons/lib/CloudRainHeavyFill.svelte
mark_module_start();
CloudRainHeavyFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudRainHeavyFill.svelte";
var root622 = add_locations(ns_template(`<svg><!><path d="M4.176 11.032a.5.5 0 0 1 .292.643l-1.5 4a.5.5 0 0 1-.936-.35l1.5-4a.5.5 0 0 1 .644-.293zm3 0a.5.5 0 0 1 .292.643l-1.5 4a.5.5 0 0 1-.936-.35l1.5-4a.5.5 0 0 1 .644-.293zm3 0a.5.5 0 0 1 .292.643l-1.5 4a.5.5 0 0 1-.936-.35l1.5-4a.5.5 0 0 1 .644-.293zm3 0a.5.5 0 0 1 .292.643l-1.5 4a.5.5 0 0 1-.936-.35l1.5-4a.5.5 0 0 1 .644-.293zm.229-7.005a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudRainHeavyFill[FILENAME], [[1, 0, [[1, 182]]]]);
function CloudRainHeavyFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudRainHeavyFill);
  var svg = root622();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-rain-heavy-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudRainHeavyFill = hmr(CloudRainHeavyFill, () => CloudRainHeavyFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudRainHeavyFill[HMR].source;
    set(CloudRainHeavyFill[HMR].source, module.default[HMR].original);
  });
}
var CloudRainHeavyFill_default = CloudRainHeavyFill;
mark_module_end(CloudRainHeavyFill);

// node_modules/svelte-bootstrap-icons/lib/CloudRainHeavy.svelte
mark_module_start();
CloudRainHeavy[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudRainHeavy.svelte";
var root623 = add_locations(ns_template(`<svg><!><path d="M4.176 11.032a.5.5 0 0 1 .292.643l-1.5 4a.5.5 0 1 1-.936-.35l1.5-4a.5.5 0 0 1 .644-.293zm3 0a.5.5 0 0 1 .292.643l-1.5 4a.5.5 0 1 1-.936-.35l1.5-4a.5.5 0 0 1 .644-.293zm3 0a.5.5 0 0 1 .292.643l-1.5 4a.5.5 0 1 1-.936-.35l1.5-4a.5.5 0 0 1 .644-.293zm3 0a.5.5 0 0 1 .292.643l-1.5 4a.5.5 0 0 1-.936-.35l1.5-4a.5.5 0 0 1 .644-.293zm.229-7.005a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973zM8.5 1a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1 0 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 1z"></path></svg>`), CloudRainHeavy[FILENAME], [[1, 0, [[1, 177]]]]);
function CloudRainHeavy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudRainHeavy);
  var svg = root623();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-rain-heavy", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudRainHeavy = hmr(CloudRainHeavy, () => CloudRainHeavy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudRainHeavy[HMR].source;
    set(CloudRainHeavy[HMR].source, module.default[HMR].original);
  });
}
var CloudRainHeavy_default = CloudRainHeavy;
mark_module_end(CloudRainHeavy);

// node_modules/svelte-bootstrap-icons/lib/CloudRain.svelte
mark_module_start();
CloudRain[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudRain.svelte";
var root624 = add_locations(ns_template(`<svg><!><path d="M4.158 12.025a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm3 0a.5.5 0 0 1 .316.633l-1 3a.5.5 0 0 1-.948-.316l1-3a.5.5 0 0 1 .632-.317zm3 0a.5.5 0 0 1 .316.633l-.5 1.5a.5.5 0 0 1-.948-.316l.5-1.5a.5.5 0 0 1 .632-.317zm3 0a.5.5 0 0 1 .316.633l-1 3a.5.5 0 1 1-.948-.316l1-3a.5.5 0 0 1 .632-.317zm.247-6.998a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 11H13a3 3 0 0 0 .405-5.973zM8.5 2a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1 0 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 2z"></path></svg>`), CloudRain[FILENAME], [[1, 0, [[1, 171]]]]);
function CloudRain($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudRain);
  var svg = root624();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-rain", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudRain = hmr(CloudRain, () => CloudRain[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudRain[HMR].source;
    set(CloudRain[HMR].source, module.default[HMR].original);
  });
}
var CloudRain_default = CloudRain;
mark_module_end(CloudRain);

// node_modules/svelte-bootstrap-icons/lib/CloudSlashFill.svelte
mark_module_start();
CloudSlashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudSlashFill.svelte";
var root625 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.112 5.112a3.125 3.125 0 0 0-.17.613C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13H11L3.112 5.112zm11.372 7.372L4.937 2.937A5.512 5.512 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773a3.2 3.2 0 0 1-1.516 2.711zm-.838 1.87-12-12 .708-.708 12 12-.707.707z"></path></svg>`), CloudSlashFill[FILENAME], [[1, 0, [[1, 177]]]]);
function CloudSlashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudSlashFill);
  var svg = root625();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-slash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudSlashFill = hmr(CloudSlashFill, () => CloudSlashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudSlashFill[HMR].source;
    set(CloudSlashFill[HMR].source, module.default[HMR].original);
  });
}
var CloudSlashFill_default = CloudSlashFill;
mark_module_end(CloudSlashFill);

// node_modules/svelte-bootstrap-icons/lib/CloudSlash.svelte
mark_module_start();
CloudSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudSlash.svelte";
var root626 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.112 5.112a3.125 3.125 0 0 0-.17.613C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13H11l-1-1H3.781C2.231 12 1 10.785 1 9.318c0-1.365 1.064-2.513 2.46-2.666l.446-.05v-.447c0-.075.006-.152.018-.231l-.812-.812zm2.55-1.45-.725-.725A5.512 5.512 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773a3.2 3.2 0 0 1-1.516 2.711l-.733-.733C14.498 11.378 15 10.626 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3c-.875 0-1.678.26-2.339.661z"></path><path d="m13.646 14.354-12-12 .708-.708 12 12-.707.707z"></path></svg>`), CloudSlash[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function CloudSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudSlash);
  var svg = root626();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudSlash = hmr(CloudSlash, () => CloudSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudSlash[HMR].source;
    set(CloudSlash[HMR].source, module.default[HMR].original);
  });
}
var CloudSlash_default = CloudSlash;
mark_module_end(CloudSlash);

// node_modules/svelte-bootstrap-icons/lib/CloudSleetFill.svelte
mark_module_start();
CloudSleetFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudSleetFill.svelte";
var root627 = add_locations(ns_template(`<svg><!><path d="M2.375 13.5a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 1 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 1 1-.248-.434l.495-.283-.495-.283a.25.25 0 1 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm1.849-2.447a.5.5 0 0 1 .223.67l-.5 1a.5.5 0 0 1-.894-.447l.5-1a.5.5 0 0 1 .67-.223zM6.375 13.5a.25.25 0 0 1 .25.25v.57l.5-.287a.25.25 0 0 1 .249.434l-.495.283.495.283a.25.25 0 1 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 1 1-.248-.434l.495-.283-.495-.283a.25.25 0 1 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm1.849-2.447a.5.5 0 0 1 .223.67l-.5 1a.5.5 0 0 1-.894-.447l.5-1a.5.5 0 0 1 .67-.223zm2.151 2.447a.25.25 0 0 1 .25.25v.57l.5-.287a.25.25 0 0 1 .249.434l-.495.283.495.283a.25.25 0 1 1-.248.434l-.501-.286v.569a.25.25 0 0 1-.5 0v-.57l-.501.287a.25.25 0 1 1-.248-.434l.495-.283-.495-.283a.25.25 0 1 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm1.849-2.447a.5.5 0 0 1 .223.67l-.5 1a.5.5 0 1 1-.894-.447l.5-1a.5.5 0 0 1 .67-.223zm1.181-7.026a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudSleetFill[FILENAME], [[1, 0, [[1, 177]]]]);
function CloudSleetFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudSleetFill);
  var svg = root627();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-sleet-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudSleetFill = hmr(CloudSleetFill, () => CloudSleetFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudSleetFill[HMR].source;
    set(CloudSleetFill[HMR].source, module.default[HMR].original);
  });
}
var CloudSleetFill_default = CloudSleetFill;
mark_module_end(CloudSleetFill);

// node_modules/svelte-bootstrap-icons/lib/CloudSleet.svelte
mark_module_start();
CloudSleet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudSleet.svelte";
var root628 = add_locations(ns_template(`<svg><!><path d="M13.405 4.027a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10H13a3 3 0 0 0 .405-5.973zM8.5 1a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1 0 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 1zM2.375 13.5a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm1.849-2.447a.5.5 0 0 1 .223.67l-.5 1a.5.5 0 1 1-.894-.447l.5-1a.5.5 0 0 1 .67-.223zM6.375 13.5a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm1.849-2.447a.5.5 0 0 1 .223.67l-.5 1a.5.5 0 1 1-.894-.447l.5-1a.5.5 0 0 1 .67-.223zm2.151 2.447a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm1.849-2.447a.5.5 0 0 1 .223.67l-.5 1a.5.5 0 1 1-.894-.447l.5-1a.5.5 0 0 1 .67-.223z"></path></svg>`), CloudSleet[FILENAME], [[1, 0, [[1, 172]]]]);
function CloudSleet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudSleet);
  var svg = root628();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-sleet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudSleet = hmr(CloudSleet, () => CloudSleet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudSleet[HMR].source;
    set(CloudSleet[HMR].source, module.default[HMR].original);
  });
}
var CloudSleet_default = CloudSleet;
mark_module_end(CloudSleet);

// node_modules/svelte-bootstrap-icons/lib/CloudSnowFill.svelte
mark_module_start();
CloudSnowFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudSnowFill.svelte";
var root629 = add_locations(ns_template(`<svg><!><path d="M2.625 11.5a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm2.75 2a.25.25 0 0 1 .25.25v.57l.5-.287a.25.25 0 0 1 .249.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm5.5 0a.25.25 0 0 1 .25.25v.57l.5-.287a.25.25 0 0 1 .249.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 0 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm-2.75-2a.25.25 0 0 1 .25.25v.57l.5-.287a.25.25 0 0 1 .249.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm5.5 0a.25.25 0 0 1 .25.25v.57l.5-.287a.25.25 0 0 1 .249.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 0 1-.5 0v-.57l-.501.287a.25.25 0 1 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm-.22-7.223a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10.25H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudSnowFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CloudSnowFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudSnowFill);
  var svg = root629();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-snow-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudSnowFill = hmr(CloudSnowFill, () => CloudSnowFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudSnowFill[HMR].source;
    set(CloudSnowFill[HMR].source, module.default[HMR].original);
  });
}
var CloudSnowFill_default = CloudSnowFill;
mark_module_end(CloudSnowFill);

// node_modules/svelte-bootstrap-icons/lib/CloudSnow.svelte
mark_module_start();
CloudSnow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudSnow.svelte";
var root630 = add_locations(ns_template(`<svg><!><path d="M13.405 4.277a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 10.25H13a3 3 0 0 0 .405-5.973zM8.5 1.25a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1-.001 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 1.25zM2.625 11.5a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm2.75 2a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm5.5 0a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm-2.75-2a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25zm5.5 0a.25.25 0 0 1 .25.25v.57l.501-.287a.25.25 0 0 1 .248.434l-.495.283.495.283a.25.25 0 0 1-.248.434l-.501-.286v.569a.25.25 0 1 1-.5 0v-.57l-.501.287a.25.25 0 0 1-.248-.434l.495-.283-.495-.283a.25.25 0 0 1 .248-.434l.501.286v-.569a.25.25 0 0 1 .25-.25z"></path></svg>`), CloudSnow[FILENAME], [[1, 0, [[1, 171]]]]);
function CloudSnow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudSnow);
  var svg = root630();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-snow", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudSnow = hmr(CloudSnow, () => CloudSnow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudSnow[HMR].source;
    set(CloudSnow[HMR].source, module.default[HMR].original);
  });
}
var CloudSnow_default = CloudSnow;
mark_module_end(CloudSnow);

// node_modules/svelte-bootstrap-icons/lib/CloudSunFill.svelte
mark_module_start();
CloudSunFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudSunFill.svelte";
var root631 = add_locations(ns_template(`<svg><!><path d="M11.473 11a4.5 4.5 0 0 0-8.72-.99A3 3 0 0 0 3 16h8.5a2.5 2.5 0 0 0 0-5h-.027z"></path><path d="M10.5 1.5a.5.5 0 0 0-1 0v1a.5.5 0 0 0 1 0v-1zm3.743 1.964a.5.5 0 1 0-.707-.707l-.708.707a.5.5 0 0 0 .708.708l.707-.708zm-7.779-.707a.5.5 0 0 0-.707.707l.707.708a.5.5 0 1 0 .708-.708l-.708-.707zm1.734 3.374a2 2 0 1 1 3.296 2.198c.199.281.372.582.516.898a3 3 0 1 0-4.84-3.225c.352.011.696.055 1.028.129zm4.484 4.074c.6.215 1.125.59 1.522 1.072a.5.5 0 0 0 .039-.742l-.707-.707a.5.5 0 0 0-.854.377zM14.5 6.5a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path></svg>`), CloudSunFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function CloudSunFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudSunFill);
  var svg = root631();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-sun-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudSunFill = hmr(CloudSunFill, () => CloudSunFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudSunFill[HMR].source;
    set(CloudSunFill[HMR].source, module.default[HMR].original);
  });
}
var CloudSunFill_default = CloudSunFill;
mark_module_end(CloudSunFill);

// node_modules/svelte-bootstrap-icons/lib/CloudSun.svelte
mark_module_start();
CloudSun[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudSun.svelte";
var root632 = add_locations(ns_template(`<svg><!><path d="M7 8a3.5 3.5 0 0 1 3.5 3.555.5.5 0 0 0 .624.492A1.503 1.503 0 0 1 13 13.5a1.5 1.5 0 0 1-1.5 1.5H3a2 2 0 1 1 .1-3.998.5.5 0 0 0 .51-.375A3.502 3.502 0 0 1 7 8zm4.473 3a4.5 4.5 0 0 0-8.72-.99A3 3 0 0 0 3 16h8.5a2.5 2.5 0 0 0 0-5h-.027z"></path><path d="M10.5 1.5a.5.5 0 0 0-1 0v1a.5.5 0 0 0 1 0v-1zm3.743 1.964a.5.5 0 1 0-.707-.707l-.708.707a.5.5 0 0 0 .708.708l.707-.708zm-7.779-.707a.5.5 0 0 0-.707.707l.707.708a.5.5 0 1 0 .708-.708l-.708-.707zm1.734 3.374a2 2 0 1 1 3.296 2.198c.199.281.372.582.516.898a3 3 0 1 0-4.84-3.225c.352.011.696.055 1.028.129zm4.484 4.074c.6.215 1.125.59 1.522 1.072a.5.5 0 0 0 .039-.742l-.707-.707a.5.5 0 0 0-.854.377zM14.5 6.5a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path></svg>`), CloudSun[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function CloudSun($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudSun);
  var svg = root632();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-sun", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudSun = hmr(CloudSun, () => CloudSun[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudSun[HMR].source;
    set(CloudSun[HMR].source, module.default[HMR].original);
  });
}
var CloudSun_default = CloudSun;
mark_module_end(CloudSun);

// node_modules/svelte-bootstrap-icons/lib/CloudUploadFill.svelte
mark_module_start();
CloudUploadFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudUploadFill.svelte";
var root633 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 4.095 0 5.555 0 7.318 0 9.366 1.708 11 3.781 11H7.5V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11h4.188C14.502 11 16 9.57 16 7.773c0-1.636-1.242-2.969-2.834-3.194C12.923 1.999 10.69 0 8 0zm-.5 14.5V11h1v3.5a.5.5 0 0 1-1 0z"></path></svg>`), CloudUploadFill[FILENAME], [[1, 0, [[1, 178]]]]);
function CloudUploadFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudUploadFill);
  var svg = root633();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-upload-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudUploadFill = hmr(CloudUploadFill, () => CloudUploadFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudUploadFill[HMR].source;
    set(CloudUploadFill[HMR].source, module.default[HMR].original);
  });
}
var CloudUploadFill_default = CloudUploadFill;
mark_module_end(CloudUploadFill);

// node_modules/svelte-bootstrap-icons/lib/CloudUpload.svelte
mark_module_start();
CloudUpload[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudUpload.svelte";
var root634 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z"></path><path fill-rule="evenodd" d="M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3z"></path></svg>`), CloudUpload[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function CloudUpload($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudUpload);
  var svg = root634();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud-upload", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudUpload = hmr(CloudUpload, () => CloudUpload[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudUpload[HMR].source;
    set(CloudUpload[HMR].source, module.default[HMR].original);
  });
}
var CloudUpload_default = CloudUpload;
mark_module_end(CloudUpload);

// node_modules/svelte-bootstrap-icons/lib/Cloud.svelte
mark_module_start();
Cloud[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cloud.svelte";
var root635 = add_locations(ns_template(`<svg><!><path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"></path></svg>`), Cloud[FILENAME], [[1, 0, [[1, 166]]]]);
function Cloud($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cloud);
  var svg = root635();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloud", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud = hmr(Cloud, () => Cloud[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud[HMR].source;
    set(Cloud[HMR].source, module.default[HMR].original);
  });
}
var Cloud_default = Cloud;
mark_module_end(Cloud);

// node_modules/svelte-bootstrap-icons/lib/CloudsFill.svelte
mark_module_start();
CloudsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudsFill.svelte";
var root636 = add_locations(ns_template(`<svg><!><path d="M11.473 9a4.5 4.5 0 0 0-8.72-.99A3 3 0 0 0 3 14h8.5a2.5 2.5 0 1 0-.027-5z"></path><path d="M14.544 9.772a3.506 3.506 0 0 0-2.225-1.676 5.502 5.502 0 0 0-6.337-4.002 4.002 4.002 0 0 1 7.392.91 2.5 2.5 0 0 1 1.17 4.769z"></path></svg>`), CloudsFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function CloudsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudsFill);
  var svg = root636();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clouds-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudsFill = hmr(CloudsFill, () => CloudsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudsFill[HMR].source;
    set(CloudsFill[HMR].source, module.default[HMR].original);
  });
}
var CloudsFill_default = CloudsFill;
mark_module_end(CloudsFill);

// node_modules/svelte-bootstrap-icons/lib/Clouds.svelte
mark_module_start();
Clouds[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Clouds.svelte";
var root637 = add_locations(ns_template(`<svg><!><path d="M16 7.5a2.5 2.5 0 0 1-1.456 2.272 3.513 3.513 0 0 0-.65-.824 1.5 1.5 0 0 0-.789-2.896.5.5 0 0 1-.627-.421 3 3 0 0 0-5.22-1.625 5.587 5.587 0 0 0-1.276.088 4.002 4.002 0 0 1 7.392.91A2.5 2.5 0 0 1 16 7.5z"></path><path d="M7 5a4.5 4.5 0 0 1 4.473 4h.027a2.5 2.5 0 0 1 0 5H3a3 3 0 0 1-.247-5.99A4.502 4.502 0 0 1 7 5zm3.5 4.5a3.5 3.5 0 0 0-6.89-.873.5.5 0 0 1-.51.375A2 2 0 1 0 3 13h8.5a1.5 1.5 0 1 0-.376-2.953.5.5 0 0 1-.624-.492V9.5z"></path></svg>`), Clouds[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Clouds($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Clouds);
  var svg = root637();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-clouds", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clouds = hmr(Clouds, () => Clouds[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clouds[HMR].source;
    set(Clouds[HMR].source, module.default[HMR].original);
  });
}
var Clouds_default = Clouds;
mark_module_end(Clouds);

// node_modules/svelte-bootstrap-icons/lib/CloudyFill.svelte
mark_module_start();
CloudyFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CloudyFill.svelte";
var root638 = add_locations(ns_template(`<svg><!><path d="M13.405 7.027a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 13H13a3 3 0 0 0 .405-5.973z"></path></svg>`), CloudyFill[FILENAME], [[1, 0, [[1, 172]]]]);
function CloudyFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CloudyFill);
  var svg = root638();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloudy-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudyFill = hmr(CloudyFill, () => CloudyFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudyFill[HMR].source;
    set(CloudyFill[HMR].source, module.default[HMR].original);
  });
}
var CloudyFill_default = CloudyFill;
mark_module_end(CloudyFill);

// node_modules/svelte-bootstrap-icons/lib/Cloudy.svelte
mark_module_start();
Cloudy[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cloudy.svelte";
var root639 = add_locations(ns_template(`<svg><!><path d="M13.405 8.527a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 14.5H13a3 3 0 0 0 .405-5.973zM8.5 5.5a4 4 0 0 1 3.976 3.555.5.5 0 0 0 .5.445H13a2 2 0 0 1-.001 4H3.5a2.5 2.5 0 1 1 .605-4.926.5.5 0 0 0 .596-.329A4.002 4.002 0 0 1 8.5 5.5z"></path></svg>`), Cloudy[FILENAME], [[1, 0, [[1, 167]]]]);
function Cloudy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cloudy);
  var svg = root639();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cloudy", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloudy = hmr(Cloudy, () => Cloudy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloudy[HMR].source;
    set(Cloudy[HMR].source, module.default[HMR].original);
  });
}
var Cloudy_default = Cloudy;
mark_module_end(Cloudy);

// node_modules/svelte-bootstrap-icons/lib/CodeSlash.svelte
mark_module_start();
CodeSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CodeSlash.svelte";
var root640 = add_locations(ns_template(`<svg><!><path d="M10.478 1.647a.5.5 0 1 0-.956-.294l-4 13a.5.5 0 0 0 .956.294l4-13zM4.854 4.146a.5.5 0 0 1 0 .708L1.707 8l3.147 3.146a.5.5 0 0 1-.708.708l-3.5-3.5a.5.5 0 0 1 0-.708l3.5-3.5a.5.5 0 0 1 .708 0zm6.292 0a.5.5 0 0 0 0 .708L14.293 8l-3.147 3.146a.5.5 0 0 0 .708.708l3.5-3.5a.5.5 0 0 0 0-.708l-3.5-3.5a.5.5 0 0 0-.708 0z"></path></svg>`), CodeSlash[FILENAME], [[1, 0, [[1, 171]]]]);
function CodeSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CodeSlash);
  var svg = root640();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-code-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CodeSlash = hmr(CodeSlash, () => CodeSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CodeSlash[HMR].source;
    set(CodeSlash[HMR].source, module.default[HMR].original);
  });
}
var CodeSlash_default = CodeSlash;
mark_module_end(CodeSlash);

// node_modules/svelte-bootstrap-icons/lib/CodeSquare.svelte
mark_module_start();
CodeSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CodeSquare.svelte";
var root641 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M6.854 4.646a.5.5 0 0 1 0 .708L4.207 8l2.647 2.646a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 0 1 .708 0zm2.292 0a.5.5 0 0 0 0 .708L11.793 8l-2.647 2.646a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708 0z"></path></svg>`), CodeSquare[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function CodeSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CodeSquare);
  var svg = root641();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-code-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CodeSquare = hmr(CodeSquare, () => CodeSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CodeSquare[HMR].source;
    set(CodeSquare[HMR].source, module.default[HMR].original);
  });
}
var CodeSquare_default = CodeSquare;
mark_module_end(CodeSquare);

// node_modules/svelte-bootstrap-icons/lib/Code.svelte
mark_module_start();
Code[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Code.svelte";
var root642 = add_locations(ns_template(`<svg><!><path d="M5.854 4.854a.5.5 0 1 0-.708-.708l-3.5 3.5a.5.5 0 0 0 0 .708l3.5 3.5a.5.5 0 0 0 .708-.708L2.707 8l3.147-3.146zm4.292 0a.5.5 0 0 1 .708-.708l3.5 3.5a.5.5 0 0 1 0 .708l-3.5 3.5a.5.5 0 0 1-.708-.708L13.293 8l-3.147-3.146z"></path></svg>`), Code[FILENAME], [[1, 0, [[1, 165]]]]);
function Code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Code);
  var svg = root642();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-code", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Code = hmr(Code, () => Code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Code[HMR].source;
    set(Code[HMR].source, module.default[HMR].original);
  });
}
var Code_default = Code;
mark_module_end(Code);

// node_modules/svelte-bootstrap-icons/lib/Coin.svelte
mark_module_start();
Coin[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Coin.svelte";
var root643 = add_locations(ns_template(`<svg><!><path d="M5.5 9.511c.076.954.83 1.697 2.182 1.785V12h.6v-.709c1.4-.098 2.218-.846 2.218-1.932 0-.987-.626-1.496-1.745-1.76l-.473-.112V5.57c.6.068.982.396 1.074.85h1.052c-.076-.919-.864-1.638-2.126-1.716V4h-.6v.719c-1.195.117-2.01.836-2.01 1.853 0 .9.606 1.472 1.613 1.707l.397.098v2.034c-.615-.093-1.022-.43-1.114-.9H5.5zm2.177-2.166c-.59-.137-.91-.416-.91-.836 0-.47.345-.822.915-.925v1.76h-.005zm.692 1.193c.717.166 1.048.435 1.048.91 0 .542-.412.914-1.135.982V8.518l.087.02z"></path><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M8 13.5a5.5 5.5 0 1 1 0-11 5.5 5.5 0 0 1 0 11zm0 .5A6 6 0 1 0 8 2a6 6 0 0 0 0 12z"></path></svg>`), Coin[FILENAME], [
  [
    1,
    0,
    [[1, 165], [2, 2], [3, 2]]
  ]
]);
function Coin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Coin);
  var svg = root643();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-coin", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Coin = hmr(Coin, () => Coin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Coin[HMR].source;
    set(Coin[HMR].source, module.default[HMR].original);
  });
}
var Coin_default = Coin;
mark_module_end(Coin);

// node_modules/svelte-bootstrap-icons/lib/CollectionFill.svelte
mark_module_start();
CollectionFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CollectionFill.svelte";
var root644 = add_locations(ns_template(`<svg><!><path d="M0 13a1.5 1.5 0 0 0 1.5 1.5h13A1.5 1.5 0 0 0 16 13V6a1.5 1.5 0 0 0-1.5-1.5h-13A1.5 1.5 0 0 0 0 6v7zM2 3a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 0-1h-11A.5.5 0 0 0 2 3zm2-2a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7A.5.5 0 0 0 4 1z"></path></svg>`), CollectionFill[FILENAME], [[1, 0, [[1, 176]]]]);
function CollectionFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CollectionFill);
  var svg = root644();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-collection-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CollectionFill = hmr(CollectionFill, () => CollectionFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CollectionFill[HMR].source;
    set(CollectionFill[HMR].source, module.default[HMR].original);
  });
}
var CollectionFill_default = CollectionFill;
mark_module_end(CollectionFill);

// node_modules/svelte-bootstrap-icons/lib/CollectionPlayFill.svelte
mark_module_start();
CollectionPlayFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CollectionPlayFill.svelte";
var root645 = add_locations(ns_template(`<svg><!><path d="M2.5 3.5a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-11zm2-2a.5.5 0 0 1 0-1h7a.5.5 0 0 1 0 1h-7zM0 13a1.5 1.5 0 0 0 1.5 1.5h13A1.5 1.5 0 0 0 16 13V6a1.5 1.5 0 0 0-1.5-1.5h-13A1.5 1.5 0 0 0 0 6v7zm6.258-6.437a.5.5 0 0 1 .507.013l4 2.5a.5.5 0 0 1 0 .848l-4 2.5A.5.5 0 0 1 6 12V7a.5.5 0 0 1 .258-.437z"></path></svg>`), CollectionPlayFill[FILENAME], [[1, 0, [[1, 181]]]]);
function CollectionPlayFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CollectionPlayFill);
  var svg = root645();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-collection-play-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CollectionPlayFill = hmr(CollectionPlayFill, () => CollectionPlayFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CollectionPlayFill[HMR].source;
    set(CollectionPlayFill[HMR].source, module.default[HMR].original);
  });
}
var CollectionPlayFill_default = CollectionPlayFill;
mark_module_end(CollectionPlayFill);

// node_modules/svelte-bootstrap-icons/lib/CollectionPlay.svelte
mark_module_start();
CollectionPlay[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CollectionPlay.svelte";
var root646 = add_locations(ns_template(`<svg><!><path d="M2 3a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 0-1h-11A.5.5 0 0 0 2 3zm2-2a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7A.5.5 0 0 0 4 1zm2.765 5.576A.5.5 0 0 0 6 7v5a.5.5 0 0 0 .765.424l4-2.5a.5.5 0 0 0 0-.848l-4-2.5z"></path><path d="M1.5 14.5A1.5 1.5 0 0 1 0 13V6a1.5 1.5 0 0 1 1.5-1.5h13A1.5 1.5 0 0 1 16 6v7a1.5 1.5 0 0 1-1.5 1.5h-13zm13-1a.5.5 0 0 0 .5-.5V6a.5.5 0 0 0-.5-.5h-13A.5.5 0 0 0 1 6v7a.5.5 0 0 0 .5.5h13z"></path></svg>`), CollectionPlay[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function CollectionPlay($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CollectionPlay);
  var svg = root646();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-collection-play", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CollectionPlay = hmr(CollectionPlay, () => CollectionPlay[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CollectionPlay[HMR].source;
    set(CollectionPlay[HMR].source, module.default[HMR].original);
  });
}
var CollectionPlay_default = CollectionPlay;
mark_module_end(CollectionPlay);

// node_modules/svelte-bootstrap-icons/lib/Collection.svelte
mark_module_start();
Collection[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Collection.svelte";
var root647 = add_locations(ns_template(`<svg><!><path d="M2.5 3.5a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-11zm2-2a.5.5 0 0 1 0-1h7a.5.5 0 0 1 0 1h-7zM0 13a1.5 1.5 0 0 0 1.5 1.5h13A1.5 1.5 0 0 0 16 13V6a1.5 1.5 0 0 0-1.5-1.5h-13A1.5 1.5 0 0 0 0 6v7zm1.5.5A.5.5 0 0 1 1 13V6a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-13z"></path></svg>`), Collection[FILENAME], [[1, 0, [[1, 171]]]]);
function Collection($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Collection);
  var svg = root647();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-collection", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Collection = hmr(Collection, () => Collection[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Collection[HMR].source;
    set(Collection[HMR].source, module.default[HMR].original);
  });
}
var Collection_default = Collection;
mark_module_end(Collection);

// node_modules/svelte-bootstrap-icons/lib/ColumnsGap.svelte
mark_module_start();
ColumnsGap[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ColumnsGap.svelte";
var root648 = add_locations(ns_template(`<svg><!><path d="M6 1v3H1V1h5zM1 0a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1H1zm14 12v3h-5v-3h5zm-5-1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-5zM6 8v7H1V8h5zM1 7a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1H1zm14-6v7h-5V1h5zm-5-1a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1h-5z"></path></svg>`), ColumnsGap[FILENAME], [[1, 0, [[1, 172]]]]);
function ColumnsGap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ColumnsGap);
  var svg = root648();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-columns-gap", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ColumnsGap = hmr(ColumnsGap, () => ColumnsGap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ColumnsGap[HMR].source;
    set(ColumnsGap[HMR].source, module.default[HMR].original);
  });
}
var ColumnsGap_default = ColumnsGap;
mark_module_end(ColumnsGap);

// node_modules/svelte-bootstrap-icons/lib/Columns.svelte
mark_module_start();
Columns[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Columns.svelte";
var root649 = add_locations(ns_template(`<svg><!><path d="M0 2a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V2zm8.5 0v8H15V2H8.5zm0 9v3H15v-3H8.5zm-1-9H1v3h6.5V2zM1 14h6.5V6H1v8z"></path></svg>`), Columns[FILENAME], [[1, 0, [[1, 168]]]]);
function Columns($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Columns);
  var svg = root649();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-columns", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Columns = hmr(Columns, () => Columns[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Columns[HMR].source;
    set(Columns[HMR].source, module.default[HMR].original);
  });
}
var Columns_default = Columns;
mark_module_end(Columns);

// node_modules/svelte-bootstrap-icons/lib/Command.svelte
mark_module_start();
Command[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Command.svelte";
var root650 = add_locations(ns_template(`<svg><!><path d="M3.5 2A1.5 1.5 0 0 1 5 3.5V5H3.5a1.5 1.5 0 1 1 0-3zM6 5V3.5A2.5 2.5 0 1 0 3.5 6H5v4H3.5A2.5 2.5 0 1 0 6 12.5V11h4v1.5a2.5 2.5 0 1 0 2.5-2.5H11V6h1.5A2.5 2.5 0 1 0 10 3.5V5H6zm4 1v4H6V6h4zm1-1V3.5A1.5 1.5 0 1 1 12.5 5H11zm0 6h1.5a1.5 1.5 0 1 1-1.5 1.5V11zm-6 0v1.5A1.5 1.5 0 1 1 3.5 11H5z"></path></svg>`), Command[FILENAME], [[1, 0, [[1, 168]]]]);
function Command($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Command);
  var svg = root650();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-command", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Command = hmr(Command, () => Command[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Command[HMR].source;
    set(Command[HMR].source, module.default[HMR].original);
  });
}
var Command_default = Command;
mark_module_end(Command);

// node_modules/svelte-bootstrap-icons/lib/CompassFill.svelte
mark_module_start();
CompassFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CompassFill.svelte";
var root651 = add_locations(ns_template(`<svg><!><path d="M15.5 8.516a7.5 7.5 0 1 1-9.462-7.24A1 1 0 0 1 7 0h2a1 1 0 0 1 .962 1.276 7.503 7.503 0 0 1 5.538 7.24zm-3.61-3.905L6.94 7.439 4.11 12.39l4.95-2.828 2.828-4.95z"></path></svg>`), CompassFill[FILENAME], [[1, 0, [[1, 173]]]]);
function CompassFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CompassFill);
  var svg = root651();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-compass-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CompassFill = hmr(CompassFill, () => CompassFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CompassFill[HMR].source;
    set(CompassFill[HMR].source, module.default[HMR].original);
  });
}
var CompassFill_default = CompassFill;
mark_module_end(CompassFill);

// node_modules/svelte-bootstrap-icons/lib/Compass.svelte
mark_module_start();
Compass[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Compass.svelte";
var root652 = add_locations(ns_template(`<svg><!><path d="M8 16.016a7.5 7.5 0 0 0 1.962-14.74A1 1 0 0 0 9 0H7a1 1 0 0 0-.962 1.276A7.5 7.5 0 0 0 8 16.016zm6.5-7.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z"></path><path d="m6.94 7.44 4.95-2.83-2.83 4.95-4.949 2.83 2.828-4.95z"></path></svg>`), Compass[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Compass($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Compass);
  var svg = root652();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-compass", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Compass = hmr(Compass, () => Compass[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Compass[HMR].source;
    set(Compass[HMR].source, module.default[HMR].original);
  });
}
var Compass_default = Compass;
mark_module_end(Compass);

// node_modules/svelte-bootstrap-icons/lib/ConeStriped.svelte
mark_module_start();
ConeStriped[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ConeStriped.svelte";
var root653 = add_locations(ns_template(`<svg><!><path d="m9.97 4.88.953 3.811C10.159 8.878 9.14 9 8 9c-1.14 0-2.158-.122-2.923-.309L6.03 4.88C6.635 4.957 7.3 5 8 5s1.365-.043 1.97-.12zm-.245-.978L8.97.88C8.718-.13 7.282-.13 7.03.88L6.275 3.9C6.8 3.965 7.382 4 8 4c.618 0 1.2-.036 1.725-.098zm4.396 8.613a.5.5 0 0 1 .037.96l-6 2a.5.5 0 0 1-.316 0l-6-2a.5.5 0 0 1 .037-.96l2.391-.598.565-2.257c.862.212 1.964.339 3.165.339s2.303-.127 3.165-.339l.565 2.257 2.391.598z"></path></svg>`), ConeStriped[FILENAME], [[1, 0, [[1, 173]]]]);
function ConeStriped($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ConeStriped);
  var svg = root653();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cone-striped", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ConeStriped = hmr(ConeStriped, () => ConeStriped[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ConeStriped[HMR].source;
    set(ConeStriped[HMR].source, module.default[HMR].original);
  });
}
var ConeStriped_default = ConeStriped;
mark_module_end(ConeStriped);

// node_modules/svelte-bootstrap-icons/lib/Cone.svelte
mark_module_start();
Cone[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cone.svelte";
var root654 = add_locations(ns_template(`<svg><!><path d="M7.03 1.88c.252-1.01 1.688-1.01 1.94 0l2.905 11.62H14a.5.5 0 0 1 0 1H2a.5.5 0 0 1 0-1h2.125L7.03 1.88z"></path></svg>`), Cone[FILENAME], [[1, 0, [[1, 165]]]]);
function Cone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cone);
  var svg = root654();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cone", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cone = hmr(Cone, () => Cone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cone[HMR].source;
    set(Cone[HMR].source, module.default[HMR].original);
  });
}
var Cone_default = Cone;
mark_module_end(Cone);

// node_modules/svelte-bootstrap-icons/lib/Controller.svelte
mark_module_start();
Controller[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Controller.svelte";
var root655 = add_locations(ns_template(`<svg><!><path d="M11.5 6.027a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1.5 1.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm2.5-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1.5 1.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm-6.5-3h1v1h1v1h-1v1h-1v-1h-1v-1h1v-1z"></path><path d="M3.051 3.26a.5.5 0 0 1 .354-.613l1.932-.518a.5.5 0 0 1 .62.39c.655-.079 1.35-.117 2.043-.117.72 0 1.443.041 2.12.126a.5.5 0 0 1 .622-.399l1.932.518a.5.5 0 0 1 .306.729c.14.09.266.19.373.297.408.408.78 1.05 1.095 1.772.32.733.599 1.591.805 2.466.206.875.34 1.78.364 2.606.024.816-.059 1.602-.328 2.21a1.42 1.42 0 0 1-1.445.83c-.636-.067-1.115-.394-1.513-.773-.245-.232-.496-.526-.739-.808-.126-.148-.25-.292-.368-.423-.728-.804-1.597-1.527-3.224-1.527-1.627 0-2.496.723-3.224 1.527-.119.131-.242.275-.368.423-.243.282-.494.575-.739.808-.398.38-.877.706-1.513.773a1.42 1.42 0 0 1-1.445-.83c-.27-.608-.352-1.395-.329-2.21.024-.826.16-1.73.365-2.606.206-.875.486-1.733.805-2.466.315-.722.687-1.364 1.094-1.772a2.34 2.34 0 0 1 .433-.335.504.504 0 0 1-.028-.079zm2.036.412c-.877.185-1.469.443-1.733.708-.276.276-.587.783-.885 1.465a13.748 13.748 0 0 0-.748 2.295 12.351 12.351 0 0 0-.339 2.406c-.022.755.062 1.368.243 1.776a.42.42 0 0 0 .426.24c.327-.034.61-.199.929-.502.212-.202.4-.423.615-.674.133-.156.276-.323.44-.504C4.861 9.969 5.978 9.027 8 9.027s3.139.942 3.965 1.855c.164.181.307.348.44.504.214.251.403.472.615.674.318.303.601.468.929.503a.42.42 0 0 0 .426-.241c.18-.408.265-1.02.243-1.776a12.354 12.354 0 0 0-.339-2.406 13.753 13.753 0 0 0-.748-2.295c-.298-.682-.61-1.19-.885-1.465-.264-.265-.856-.523-1.733-.708-.85-.179-1.877-.27-2.913-.27-1.036 0-2.063.091-2.913.27z"></path></svg>`), Controller[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Controller($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Controller);
  var svg = root655();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-controller", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Controller = hmr(Controller, () => Controller[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Controller[HMR].source;
    set(Controller[HMR].source, module.default[HMR].original);
  });
}
var Controller_default = Controller;
mark_module_end(Controller);

// node_modules/svelte-bootstrap-icons/lib/Cookie.svelte
mark_module_start();
Cookie[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cookie.svelte";
var root656 = add_locations(ns_template(`<svg><!><path d="M6 7.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Zm4.5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm-.5 3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"></path><path d="M8 0a7.963 7.963 0 0 0-4.075 1.114c-.162.067-.31.162-.437.28A8 8 0 1 0 8 0Zm3.25 14.201a1.5 1.5 0 0 0-2.13.71A7.014 7.014 0 0 1 8 15a6.967 6.967 0 0 1-3.845-1.15 1.5 1.5 0 1 0-2.005-2.005A6.967 6.967 0 0 1 1 8c0-1.953.8-3.719 2.09-4.989a1.5 1.5 0 1 0 2.469-1.574A6.985 6.985 0 0 1 8 1c1.42 0 2.742.423 3.845 1.15a1.5 1.5 0 1 0 2.005 2.005A6.967 6.967 0 0 1 15 8c0 .596-.074 1.174-.214 1.727a1.5 1.5 0 1 0-1.025 2.25 7.033 7.033 0 0 1-2.51 2.224Z"></path></svg>`), Cookie[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Cookie($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cookie);
  var svg = root656();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cookie", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cookie = hmr(Cookie, () => Cookie[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cookie[HMR].source;
    set(Cookie[HMR].source, module.default[HMR].original);
  });
}
var Cookie_default = Cookie;
mark_module_end(Cookie);

// node_modules/svelte-bootstrap-icons/lib/Copy.svelte
mark_module_start();
Copy[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Copy.svelte";
var root657 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V2Zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H6ZM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1H2Z"></path></svg>`), Copy[FILENAME], [[1, 0, [[1, 165]]]]);
function Copy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Copy);
  var svg = root657();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-copy", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Copy = hmr(Copy, () => Copy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Copy[HMR].source;
    set(Copy[HMR].source, module.default[HMR].original);
  });
}
var Copy_default = Copy;
mark_module_end(Copy);

// node_modules/svelte-bootstrap-icons/lib/CpuFill.svelte
mark_module_start();
CpuFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CpuFill.svelte";
var root658 = add_locations(ns_template(`<svg><!><path d="M6.5 6a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3z"></path><path d="M5.5.5a.5.5 0 0 0-1 0V2A2.5 2.5 0 0 0 2 4.5H.5a.5.5 0 0 0 0 1H2v1H.5a.5.5 0 0 0 0 1H2v1H.5a.5.5 0 0 0 0 1H2v1H.5a.5.5 0 0 0 0 1H2A2.5 2.5 0 0 0 4.5 14v1.5a.5.5 0 0 0 1 0V14h1v1.5a.5.5 0 0 0 1 0V14h1v1.5a.5.5 0 0 0 1 0V14h1v1.5a.5.5 0 0 0 1 0V14a2.5 2.5 0 0 0 2.5-2.5h1.5a.5.5 0 0 0 0-1H14v-1h1.5a.5.5 0 0 0 0-1H14v-1h1.5a.5.5 0 0 0 0-1H14v-1h1.5a.5.5 0 0 0 0-1H14A2.5 2.5 0 0 0 11.5 2V.5a.5.5 0 0 0-1 0V2h-1V.5a.5.5 0 0 0-1 0V2h-1V.5a.5.5 0 0 0-1 0V2h-1V.5zm1 4.5h3A1.5 1.5 0 0 1 11 6.5v3A1.5 1.5 0 0 1 9.5 11h-3A1.5 1.5 0 0 1 5 9.5v-3A1.5 1.5 0 0 1 6.5 5z"></path></svg>`), CpuFill[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function CpuFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CpuFill);
  var svg = root658();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cpu-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CpuFill = hmr(CpuFill, () => CpuFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CpuFill[HMR].source;
    set(CpuFill[HMR].source, module.default[HMR].original);
  });
}
var CpuFill_default = CpuFill;
mark_module_end(CpuFill);

// node_modules/svelte-bootstrap-icons/lib/Cpu.svelte
mark_module_start();
Cpu[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cpu.svelte";
var root659 = add_locations(ns_template(`<svg><!><path d="M5 0a.5.5 0 0 1 .5.5V2h1V.5a.5.5 0 0 1 1 0V2h1V.5a.5.5 0 0 1 1 0V2h1V.5a.5.5 0 0 1 1 0V2A2.5 2.5 0 0 1 14 4.5h1.5a.5.5 0 0 1 0 1H14v1h1.5a.5.5 0 0 1 0 1H14v1h1.5a.5.5 0 0 1 0 1H14v1h1.5a.5.5 0 0 1 0 1H14a2.5 2.5 0 0 1-2.5 2.5v1.5a.5.5 0 0 1-1 0V14h-1v1.5a.5.5 0 0 1-1 0V14h-1v1.5a.5.5 0 0 1-1 0V14h-1v1.5a.5.5 0 0 1-1 0V14A2.5 2.5 0 0 1 2 11.5H.5a.5.5 0 0 1 0-1H2v-1H.5a.5.5 0 0 1 0-1H2v-1H.5a.5.5 0 0 1 0-1H2v-1H.5a.5.5 0 0 1 0-1H2A2.5 2.5 0 0 1 4.5 2V.5A.5.5 0 0 1 5 0zm-.5 3A1.5 1.5 0 0 0 3 4.5v7A1.5 1.5 0 0 0 4.5 13h7a1.5 1.5 0 0 0 1.5-1.5v-7A1.5 1.5 0 0 0 11.5 3h-7zM5 6.5A1.5 1.5 0 0 1 6.5 5h3A1.5 1.5 0 0 1 11 6.5v3A1.5 1.5 0 0 1 9.5 11h-3A1.5 1.5 0 0 1 5 9.5v-3zM6.5 6a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3z"></path></svg>`), Cpu[FILENAME], [[1, 0, [[1, 164]]]]);
function Cpu($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cpu);
  var svg = root659();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cpu", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cpu = hmr(Cpu, () => Cpu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cpu[HMR].source;
    set(Cpu[HMR].source, module.default[HMR].original);
  });
}
var Cpu_default = Cpu;
mark_module_end(Cpu);

// node_modules/svelte-bootstrap-icons/lib/CreditCard2BackFill.svelte
mark_module_start();
CreditCard2BackFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CreditCard2BackFill.svelte";
var root660 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5H0V4zm11.5 1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-2zM0 11v1a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-1H0z"></path></svg>`), CreditCard2BackFill[FILENAME], [[1, 0, [[1, 184]]]]);
function CreditCard2BackFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CreditCard2BackFill);
  var svg = root660();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-credit-card-2-back-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CreditCard2BackFill = hmr(CreditCard2BackFill, () => CreditCard2BackFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CreditCard2BackFill[HMR].source;
    set(CreditCard2BackFill[HMR].source, module.default[HMR].original);
  });
}
var CreditCard2BackFill_default = CreditCard2BackFill;
mark_module_end(CreditCard2BackFill);

// node_modules/svelte-bootstrap-icons/lib/CreditCard2Back.svelte
mark_module_start();
CreditCard2Back[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CreditCard2Back.svelte";
var root661 = add_locations(ns_template(`<svg><!><path d="M11 5.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1z"></path><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm13 2v5H1V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1zm-1 9H2a1 1 0 0 1-1-1v-1h14v1a1 1 0 0 1-1 1z"></path></svg>`), CreditCard2Back[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function CreditCard2Back($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CreditCard2Back);
  var svg = root661();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-credit-card-2-back", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CreditCard2Back = hmr(CreditCard2Back, () => CreditCard2Back[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CreditCard2Back[HMR].source;
    set(CreditCard2Back[HMR].source, module.default[HMR].original);
  });
}
var CreditCard2Back_default = CreditCard2Back;
mark_module_end(CreditCard2Back);

// node_modules/svelte-bootstrap-icons/lib/CreditCard2FrontFill.svelte
mark_module_start();
CreditCard2FrontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CreditCard2FrontFill.svelte";
var root662 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2.5 1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-2zm0 3a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 2a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1zm3 0a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1zm3 0a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1zm3 0a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path></svg>`), CreditCard2FrontFill[FILENAME], [[1, 0, [[1, 185]]]]);
function CreditCard2FrontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CreditCard2FrontFill);
  var svg = root662();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-credit-card-2-front-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CreditCard2FrontFill = hmr(CreditCard2FrontFill, () => CreditCard2FrontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CreditCard2FrontFill[HMR].source;
    set(CreditCard2FrontFill[HMR].source, module.default[HMR].original);
  });
}
var CreditCard2FrontFill_default = CreditCard2FrontFill;
mark_module_end(CreditCard2FrontFill);

// node_modules/svelte-bootstrap-icons/lib/CreditCard2Front.svelte
mark_module_start();
CreditCard2Front[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CreditCard2Front.svelte";
var root663 = add_locations(ns_template(`<svg><!><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path><path d="M2 5.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5z"></path></svg>`), CreditCard2Front[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function CreditCard2Front($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CreditCard2Front);
  var svg = root663();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-credit-card-2-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CreditCard2Front = hmr(CreditCard2Front, () => CreditCard2Front[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CreditCard2Front[HMR].source;
    set(CreditCard2Front[HMR].source, module.default[HMR].original);
  });
}
var CreditCard2Front_default = CreditCard2Front;
mark_module_end(CreditCard2Front);

// node_modules/svelte-bootstrap-icons/lib/CreditCardFill.svelte
mark_module_start();
CreditCardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CreditCardFill.svelte";
var root664 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v1H0V4zm0 3v5a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7H0zm3 2h1a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1z"></path></svg>`), CreditCardFill[FILENAME], [[1, 0, [[1, 177]]]]);
function CreditCardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CreditCardFill);
  var svg = root664();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-credit-card-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CreditCardFill = hmr(CreditCardFill, () => CreditCardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CreditCardFill[HMR].source;
    set(CreditCardFill[HMR].source, module.default[HMR].original);
  });
}
var CreditCardFill_default = CreditCardFill;
mark_module_end(CreditCardFill);

// node_modules/svelte-bootstrap-icons/lib/CreditCard.svelte
mark_module_start();
CreditCard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CreditCard.svelte";
var root665 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v1h14V4a1 1 0 0 0-1-1H2zm13 4H1v5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V7z"></path><path d="M2 10a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-1z"></path></svg>`), CreditCard[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function CreditCard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CreditCard);
  var svg = root665();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-credit-card", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CreditCard = hmr(CreditCard, () => CreditCard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CreditCard[HMR].source;
    set(CreditCard[HMR].source, module.default[HMR].original);
  });
}
var CreditCard_default = CreditCard;
mark_module_end(CreditCard);

// node_modules/svelte-bootstrap-icons/lib/Crop.svelte
mark_module_start();
Crop[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Crop.svelte";
var root666 = add_locations(ns_template(`<svg><!><path d="M3.5.5A.5.5 0 0 1 4 1v13h13a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0v-2H3.5a.5.5 0 0 1-.5-.5V4H1a.5.5 0 0 1 0-1h2V1a.5.5 0 0 1 .5-.5zm2.5 3a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4H6.5a.5.5 0 0 1-.5-.5z"></path></svg>`), Crop[FILENAME], [[1, 0, [[1, 165]]]]);
function Crop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Crop);
  var svg = root666();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-crop", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Crop = hmr(Crop, () => Crop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Crop[HMR].source;
    set(Crop[HMR].source, module.default[HMR].original);
  });
}
var Crop_default = Crop;
mark_module_end(Crop);

// node_modules/svelte-bootstrap-icons/lib/Crosshair.svelte
mark_module_start();
Crosshair[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Crosshair.svelte";
var root667 = add_locations(ns_template(`<svg><!><path d="M8.5.5a.5.5 0 0 0-1 0v.518A7.001 7.001 0 0 0 1.018 7.5H.5a.5.5 0 0 0 0 1h.518A7.001 7.001 0 0 0 7.5 14.982v.518a.5.5 0 0 0 1 0v-.518A7.001 7.001 0 0 0 14.982 8.5h.518a.5.5 0 0 0 0-1h-.518A7.001 7.001 0 0 0 8.5 1.018V.5Zm-6.48 7A6.001 6.001 0 0 1 7.5 2.02v.48a.5.5 0 0 0 1 0v-.48a6.001 6.001 0 0 1 5.48 5.48h-.48a.5.5 0 0 0 0 1h.48a6.002 6.002 0 0 1-5.48 5.48v-.48a.5.5 0 0 0-1 0v.48A6.001 6.001 0 0 1 2.02 8.5h.48a.5.5 0 0 0 0-1h-.48ZM8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path></svg>`), Crosshair[FILENAME], [[1, 0, [[1, 170]]]]);
function Crosshair($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Crosshair);
  var svg = root667();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-crosshair", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Crosshair = hmr(Crosshair, () => Crosshair[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Crosshair[HMR].source;
    set(Crosshair[HMR].source, module.default[HMR].original);
  });
}
var Crosshair_default = Crosshair;
mark_module_end(Crosshair);

// node_modules/svelte-bootstrap-icons/lib/Crosshair2.svelte
mark_module_start();
Crosshair2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Crosshair2.svelte";
var root668 = add_locations(ns_template(`<svg><!><path d="M8 0a.5.5 0 0 1 .5.5v.518A7.001 7.001 0 0 1 14.982 7.5h.518a.5.5 0 0 1 0 1h-.518A7.001 7.001 0 0 1 8.5 14.982v.518a.5.5 0 0 1-1 0v-.518A7.001 7.001 0 0 1 1.018 8.5H.5a.5.5 0 0 1 0-1h.518A7.001 7.001 0 0 1 7.5 1.018V.5A.5.5 0 0 1 8 0Zm-.5 2.02A6.001 6.001 0 0 0 2.02 7.5h1.005A5.002 5.002 0 0 1 7.5 3.025V2.02Zm1 1.005A5.002 5.002 0 0 1 12.975 7.5h1.005A6.001 6.001 0 0 0 8.5 2.02v1.005ZM12.975 8.5A5.002 5.002 0 0 1 8.5 12.975v1.005a6.002 6.002 0 0 0 5.48-5.48h-1.005ZM7.5 12.975A5.002 5.002 0 0 1 3.025 8.5H2.02a6.001 6.001 0 0 0 5.48 5.48v-1.005ZM10 8a2 2 0 1 0-4 0 2 2 0 0 0 4 0Z"></path></svg>`), Crosshair2[FILENAME], [[1, 0, [[1, 171]]]]);
function Crosshair2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Crosshair2);
  var svg = root668();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-crosshair2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Crosshair2 = hmr(Crosshair2, () => Crosshair2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Crosshair2[HMR].source;
    set(Crosshair2[HMR].source, module.default[HMR].original);
  });
}
var Crosshair2_default = Crosshair2;
mark_module_end(Crosshair2);

// node_modules/svelte-bootstrap-icons/lib/CupFill.svelte
mark_module_start();
CupFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CupFill.svelte";
var root669 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M.11 3.187A.5.5 0 0 1 .5 3h13a.5.5 0 0 1 .488.608l-.22.991a3.001 3.001 0 0 1-1.3 5.854l-.132.59A2.5 2.5 0 0 1 9.896 13H4.104a2.5 2.5 0 0 1-2.44-1.958L.012 3.608a.5.5 0 0 1 .098-.42Zm12.574 6.288a2 2 0 0 0 .866-3.899l-.866 3.9Z"></path></svg>`), CupFill[FILENAME], [[1, 0, [[1, 169]]]]);
function CupFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CupFill);
  var svg = root669();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cup-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CupFill = hmr(CupFill, () => CupFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CupFill[HMR].source;
    set(CupFill[HMR].source, module.default[HMR].original);
  });
}
var CupFill_default = CupFill;
mark_module_end(CupFill);

// node_modules/svelte-bootstrap-icons/lib/CupHotFill.svelte
mark_module_start();
CupHotFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CupHotFill.svelte";
var root670 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M.5 6a.5.5 0 0 0-.488.608l1.652 7.434A2.5 2.5 0 0 0 4.104 16h5.792a2.5 2.5 0 0 0 2.44-1.958l.131-.59a3 3 0 0 0 1.3-5.854l.221-.99A.5.5 0 0 0 13.5 6H.5ZM13 12.5a2.01 2.01 0 0 1-.316-.025l.867-3.898A2.001 2.001 0 0 1 13 12.5Z"></path><path d="m4.4.8-.003.004-.014.019a4.167 4.167 0 0 0-.204.31 2.327 2.327 0 0 0-.141.267c-.026.06-.034.092-.037.103v.004a.593.593 0 0 0 .091.248c.075.133.178.272.308.445l.01.012c.118.158.26.347.37.543.112.2.22.455.22.745 0 .188-.065.368-.119.494a3.31 3.31 0 0 1-.202.388 5.444 5.444 0 0 1-.253.382l-.018.025-.005.008-.002.002A.5.5 0 0 1 3.6 4.2l.003-.004.014-.019a4.149 4.149 0 0 0 .204-.31 2.06 2.06 0 0 0 .141-.267c.026-.06.034-.092.037-.103a.593.593 0 0 0-.09-.252A4.334 4.334 0 0 0 3.6 2.8l-.01-.012a5.099 5.099 0 0 1-.37-.543A1.53 1.53 0 0 1 3 1.5c0-.188.065-.368.119-.494.059-.138.134-.274.202-.388a5.446 5.446 0 0 1 .253-.382l.025-.035A.5.5 0 0 1 4.4.8Zm3 0-.003.004-.014.019a4.167 4.167 0 0 0-.204.31 2.327 2.327 0 0 0-.141.267c-.026.06-.034.092-.037.103v.004a.593.593 0 0 0 .091.248c.075.133.178.272.308.445l.01.012c.118.158.26.347.37.543.112.2.22.455.22.745 0 .188-.065.368-.119.494a3.31 3.31 0 0 1-.202.388 5.444 5.444 0 0 1-.253.382l-.018.025-.005.008-.002.002A.5.5 0 0 1 6.6 4.2l.003-.004.014-.019a4.149 4.149 0 0 0 .204-.31 2.06 2.06 0 0 0 .141-.267c.026-.06.034-.092.037-.103a.593.593 0 0 0-.09-.252A4.334 4.334 0 0 0 6.6 2.8l-.01-.012a5.099 5.099 0 0 1-.37-.543A1.53 1.53 0 0 1 6 1.5c0-.188.065-.368.119-.494.059-.138.134-.274.202-.388a5.446 5.446 0 0 1 .253-.382l.025-.035A.5.5 0 0 1 7.4.8Zm3 0-.003.004-.014.019a4.077 4.077 0 0 0-.204.31 2.337 2.337 0 0 0-.141.267c-.026.06-.034.092-.037.103v.004a.593.593 0 0 0 .091.248c.075.133.178.272.308.445l.01.012c.118.158.26.347.37.543.112.2.22.455.22.745 0 .188-.065.368-.119.494a3.198 3.198 0 0 1-.202.388 5.385 5.385 0 0 1-.252.382l-.019.025-.005.008-.002.002A.5.5 0 0 1 9.6 4.2l.003-.004.014-.019a4.149 4.149 0 0 0 .204-.31 2.06 2.06 0 0 0 .141-.267c.026-.06.034-.092.037-.103a.593.593 0 0 0-.09-.252A4.334 4.334 0 0 0 9.6 2.8l-.01-.012a5.099 5.099 0 0 1-.37-.543A1.53 1.53 0 0 1 9 1.5c0-.188.065-.368.119-.494.059-.138.134-.274.202-.388a5.446 5.446 0 0 1 .253-.382l.025-.035A.5.5 0 0 1 10.4.8Z"></path></svg>`), CupHotFill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function CupHotFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CupHotFill);
  var svg = root670();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cup-hot-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CupHotFill = hmr(CupHotFill, () => CupHotFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CupHotFill[HMR].source;
    set(CupHotFill[HMR].source, module.default[HMR].original);
  });
}
var CupHotFill_default = CupHotFill;
mark_module_end(CupHotFill);

// node_modules/svelte-bootstrap-icons/lib/CupHot.svelte
mark_module_start();
CupHot[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CupHot.svelte";
var root671 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M.5 6a.5.5 0 0 0-.488.608l1.652 7.434A2.5 2.5 0 0 0 4.104 16h5.792a2.5 2.5 0 0 0 2.44-1.958l.131-.59a3 3 0 0 0 1.3-5.854l.221-.99A.5.5 0 0 0 13.5 6H.5ZM13 12.5a2.01 2.01 0 0 1-.316-.025l.867-3.898A2.001 2.001 0 0 1 13 12.5ZM2.64 13.825 1.123 7h11.754l-1.517 6.825A1.5 1.5 0 0 1 9.896 15H4.104a1.5 1.5 0 0 1-1.464-1.175Z"></path><path d="m4.4.8-.003.004-.014.019a4.167 4.167 0 0 0-.204.31 2.327 2.327 0 0 0-.141.267c-.026.06-.034.092-.037.103v.004a.593.593 0 0 0 .091.248c.075.133.178.272.308.445l.01.012c.118.158.26.347.37.543.112.2.22.455.22.745 0 .188-.065.368-.119.494a3.31 3.31 0 0 1-.202.388 5.444 5.444 0 0 1-.253.382l-.018.025-.005.008-.002.002A.5.5 0 0 1 3.6 4.2l.003-.004.014-.019a4.149 4.149 0 0 0 .204-.31 2.06 2.06 0 0 0 .141-.267c.026-.06.034-.092.037-.103a.593.593 0 0 0-.09-.252A4.334 4.334 0 0 0 3.6 2.8l-.01-.012a5.099 5.099 0 0 1-.37-.543A1.53 1.53 0 0 1 3 1.5c0-.188.065-.368.119-.494.059-.138.134-.274.202-.388a5.446 5.446 0 0 1 .253-.382l.025-.035A.5.5 0 0 1 4.4.8Zm3 0-.003.004-.014.019a4.167 4.167 0 0 0-.204.31 2.327 2.327 0 0 0-.141.267c-.026.06-.034.092-.037.103v.004a.593.593 0 0 0 .091.248c.075.133.178.272.308.445l.01.012c.118.158.26.347.37.543.112.2.22.455.22.745 0 .188-.065.368-.119.494a3.31 3.31 0 0 1-.202.388 5.444 5.444 0 0 1-.253.382l-.018.025-.005.008-.002.002A.5.5 0 0 1 6.6 4.2l.003-.004.014-.019a4.149 4.149 0 0 0 .204-.31 2.06 2.06 0 0 0 .141-.267c.026-.06.034-.092.037-.103a.593.593 0 0 0-.09-.252A4.334 4.334 0 0 0 6.6 2.8l-.01-.012a5.099 5.099 0 0 1-.37-.543A1.53 1.53 0 0 1 6 1.5c0-.188.065-.368.119-.494.059-.138.134-.274.202-.388a5.446 5.446 0 0 1 .253-.382l.025-.035A.5.5 0 0 1 7.4.8Zm3 0-.003.004-.014.019a4.077 4.077 0 0 0-.204.31 2.337 2.337 0 0 0-.141.267c-.026.06-.034.092-.037.103v.004a.593.593 0 0 0 .091.248c.075.133.178.272.308.445l.01.012c.118.158.26.347.37.543.112.2.22.455.22.745 0 .188-.065.368-.119.494a3.198 3.198 0 0 1-.202.388 5.385 5.385 0 0 1-.252.382l-.019.025-.005.008-.002.002A.5.5 0 0 1 9.6 4.2l.003-.004.014-.019a4.149 4.149 0 0 0 .204-.31 2.06 2.06 0 0 0 .141-.267c.026-.06.034-.092.037-.103a.593.593 0 0 0-.09-.252A4.334 4.334 0 0 0 9.6 2.8l-.01-.012a5.099 5.099 0 0 1-.37-.543A1.53 1.53 0 0 1 9 1.5c0-.188.065-.368.119-.494.059-.138.134-.274.202-.388a5.446 5.446 0 0 1 .253-.382l.025-.035A.5.5 0 0 1 10.4.8Z"></path></svg>`), CupHot[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function CupHot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CupHot);
  var svg = root671();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cup-hot", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CupHot = hmr(CupHot, () => CupHot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CupHot[HMR].source;
    set(CupHot[HMR].source, module.default[HMR].original);
  });
}
var CupHot_default = CupHot;
mark_module_end(CupHot);

// node_modules/svelte-bootstrap-icons/lib/CupStraw.svelte
mark_module_start();
CupStraw[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CupStraw.svelte";
var root672 = add_locations(ns_template(`<svg><!><path d="M13.902.334a.5.5 0 0 1-.28.65l-2.254.902-.4 1.927c.376.095.715.215.972.367.228.135.56.396.56.82 0 .046-.004.09-.011.132l-.962 9.068a1.28 1.28 0 0 1-.524.93c-.488.34-1.494.87-3.01.87-1.516 0-2.522-.53-3.01-.87a1.28 1.28 0 0 1-.524-.93L3.51 5.132A.78.78 0 0 1 3.5 5c0-.424.332-.685.56-.82.262-.154.607-.276.99-.372C5.824 3.614 6.867 3.5 8 3.5c.712 0 1.389.045 1.985.127l.464-2.215a.5.5 0 0 1 .303-.356l2.5-1a.5.5 0 0 1 .65.278zM9.768 4.607A13.991 13.991 0 0 0 8 4.5c-1.076 0-2.033.11-2.707.278A3.284 3.284 0 0 0 4.645 5c.146.073.362.15.648.222C5.967 5.39 6.924 5.5 8 5.5c.571 0 1.109-.03 1.588-.085l.18-.808zm.292 1.756C9.445 6.45 8.742 6.5 8 6.5c-1.133 0-2.176-.114-2.95-.308a5.514 5.514 0 0 1-.435-.127l.838 8.03c.013.121.06.186.102.215.357.249 1.168.69 2.438.69 1.27 0 2.081-.441 2.438-.69.042-.029.09-.094.102-.215l.852-8.03a5.517 5.517 0 0 1-.435.127 8.88 8.88 0 0 1-.89.17zM4.467 4.884s.003.002.005.006l-.005-.006zm7.066 0-.005.006c.002-.004.005-.006.005-.006zM11.354 5a3.174 3.174 0 0 0-.604-.21l-.099.445.055-.013c.286-.072.502-.149.648-.222z"></path></svg>`), CupStraw[FILENAME], [[1, 0, [[1, 170]]]]);
function CupStraw($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CupStraw);
  var svg = root672();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cup-straw", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CupStraw = hmr(CupStraw, () => CupStraw[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CupStraw[HMR].source;
    set(CupStraw[HMR].source, module.default[HMR].original);
  });
}
var CupStraw_default = CupStraw;
mark_module_end(CupStraw);

// node_modules/svelte-bootstrap-icons/lib/Cup.svelte
mark_module_start();
Cup[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cup.svelte";
var root673 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M.11 3.187A.5.5 0 0 1 .5 3h13a.5.5 0 0 1 .488.608l-.22.991a3.001 3.001 0 0 1-1.3 5.854l-.132.59A2.5 2.5 0 0 1 9.896 13H4.104a2.5 2.5 0 0 1-2.44-1.958L.012 3.608a.5.5 0 0 1 .098-.42Zm12.574 6.288a2 2 0 0 0 .866-3.899l-.866 3.9ZM1.124 4l1.516 6.825A1.5 1.5 0 0 0 4.104 12h5.792a1.5 1.5 0 0 0 1.464-1.175L12.877 4H1.123Z"></path></svg>`), Cup[FILENAME], [[1, 0, [[1, 164]]]]);
function Cup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cup);
  var svg = root673();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cup", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cup = hmr(Cup, () => Cup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cup[HMR].source;
    set(Cup[HMR].source, module.default[HMR].original);
  });
}
var Cup_default = Cup;
mark_module_end(Cup);

// node_modules/svelte-bootstrap-icons/lib/CurrencyBitcoin.svelte
mark_module_start();
CurrencyBitcoin[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CurrencyBitcoin.svelte";
var root674 = add_locations(ns_template(`<svg><!><path d="M5.5 13v1.25c0 .138.112.25.25.25h1a.25.25 0 0 0 .25-.25V13h.5v1.25c0 .138.112.25.25.25h1a.25.25 0 0 0 .25-.25V13h.084c1.992 0 3.416-1.033 3.416-2.82 0-1.502-1.007-2.323-2.186-2.44v-.088c.97-.242 1.683-.974 1.683-2.19C11.997 3.93 10.847 3 9.092 3H9V1.75a.25.25 0 0 0-.25-.25h-1a.25.25 0 0 0-.25.25V3h-.573V1.75a.25.25 0 0 0-.25-.25H5.75a.25.25 0 0 0-.25.25V3l-1.998.011a.25.25 0 0 0-.25.25v.989c0 .137.11.25.248.25l.755-.005a.75.75 0 0 1 .745.75v5.505a.75.75 0 0 1-.75.75l-.748.011a.25.25 0 0 0-.25.25v1c0 .138.112.25.25.25L5.5 13zm1.427-8.513h1.719c.906 0 1.438.498 1.438 1.312 0 .871-.575 1.362-1.877 1.362h-1.28V4.487zm0 4.051h1.84c1.137 0 1.756.58 1.756 1.524 0 .953-.626 1.45-2.158 1.45H6.927V8.539z"></path></svg>`), CurrencyBitcoin[FILENAME], [[1, 0, [[1, 177]]]]);
function CurrencyBitcoin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CurrencyBitcoin);
  var svg = root674();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-currency-bitcoin", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CurrencyBitcoin = hmr(CurrencyBitcoin, () => CurrencyBitcoin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CurrencyBitcoin[HMR].source;
    set(CurrencyBitcoin[HMR].source, module.default[HMR].original);
  });
}
var CurrencyBitcoin_default = CurrencyBitcoin;
mark_module_end(CurrencyBitcoin);

// node_modules/svelte-bootstrap-icons/lib/CurrencyDollar.svelte
mark_module_start();
CurrencyDollar[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CurrencyDollar.svelte";
var root675 = add_locations(ns_template(`<svg><!><path d="M4 10.781c.148 1.667 1.513 2.85 3.591 3.003V15h1.043v-1.216c2.27-.179 3.678-1.438 3.678-3.3 0-1.59-.947-2.51-2.956-3.028l-.722-.187V3.467c1.122.11 1.879.714 2.07 1.616h1.47c-.166-1.6-1.54-2.748-3.54-2.875V1H7.591v1.233c-1.939.23-3.27 1.472-3.27 3.156 0 1.454.966 2.483 2.661 2.917l.61.162v4.031c-1.149-.17-1.94-.8-2.131-1.718H4zm3.391-3.836c-1.043-.263-1.6-.825-1.6-1.616 0-.944.704-1.641 1.8-1.828v3.495l-.2-.05zm1.591 1.872c1.287.323 1.852.859 1.852 1.769 0 1.097-.826 1.828-2.2 1.939V8.73l.348.086z"></path></svg>`), CurrencyDollar[FILENAME], [[1, 0, [[1, 176]]]]);
function CurrencyDollar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CurrencyDollar);
  var svg = root675();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-currency-dollar", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CurrencyDollar = hmr(CurrencyDollar, () => CurrencyDollar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CurrencyDollar[HMR].source;
    set(CurrencyDollar[HMR].source, module.default[HMR].original);
  });
}
var CurrencyDollar_default = CurrencyDollar;
mark_module_end(CurrencyDollar);

// node_modules/svelte-bootstrap-icons/lib/CurrencyEuro.svelte
mark_module_start();
CurrencyEuro[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CurrencyEuro.svelte";
var root676 = add_locations(ns_template(`<svg><!><path d="M4 9.42h1.063C5.4 12.323 7.317 14 10.34 14c.622 0 1.167-.068 1.659-.185v-1.3c-.484.119-1.045.17-1.659.17-2.1 0-3.455-1.198-3.775-3.264h4.017v-.928H6.497v-.936c0-.11 0-.219.008-.329h4.078v-.927H6.618c.388-1.898 1.719-2.985 3.723-2.985.614 0 1.175.05 1.659.177V2.194A6.617 6.617 0 0 0 10.341 2c-2.928 0-4.82 1.569-5.244 4.3H4v.928h1.01v1.265H4v.928z"></path></svg>`), CurrencyEuro[FILENAME], [[1, 0, [[1, 174]]]]);
function CurrencyEuro($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CurrencyEuro);
  var svg = root676();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-currency-euro", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CurrencyEuro = hmr(CurrencyEuro, () => CurrencyEuro[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CurrencyEuro[HMR].source;
    set(CurrencyEuro[HMR].source, module.default[HMR].original);
  });
}
var CurrencyEuro_default = CurrencyEuro;
mark_module_end(CurrencyEuro);

// node_modules/svelte-bootstrap-icons/lib/CurrencyExchange.svelte
mark_module_start();
CurrencyExchange[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CurrencyExchange.svelte";
var root677 = add_locations(ns_template(`<svg><!><path d="M0 5a5.002 5.002 0 0 0 4.027 4.905 6.46 6.46 0 0 1 .544-2.073C3.695 7.536 3.132 6.864 3 5.91h-.5v-.426h.466V5.05c0-.046 0-.093.004-.135H2.5v-.427h.511C3.236 3.24 4.213 2.5 5.681 2.5c.316 0 .59.031.819.085v.733a3.46 3.46 0 0 0-.815-.082c-.919 0-1.538.466-1.734 1.252h1.917v.427h-1.98c-.003.046-.003.097-.003.147v.422h1.983v.427H3.93c.118.602.468 1.03 1.005 1.229a6.5 6.5 0 0 1 4.97-3.113A5.002 5.002 0 0 0 0 5zm16 5.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0zm-7.75 1.322c.069.835.746 1.485 1.964 1.562V14h.54v-.62c1.259-.086 1.996-.74 1.996-1.69 0-.865-.563-1.31-1.57-1.54l-.426-.1V8.374c.54.06.884.347.966.745h.948c-.07-.804-.779-1.433-1.914-1.502V7h-.54v.629c-1.076.103-1.808.732-1.808 1.622 0 .787.544 1.288 1.45 1.493l.358.085v1.78c-.554-.08-.92-.376-1.003-.787H8.25zm1.96-1.895c-.532-.12-.82-.364-.82-.732 0-.41.311-.719.824-.809v1.54h-.005zm.622 1.044c.645.145.943.38.943.796 0 .474-.37.8-1.02.86v-1.674l.077.018z"></path></svg>`), CurrencyExchange[FILENAME], [[1, 0, [[1, 178]]]]);
function CurrencyExchange($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CurrencyExchange);
  var svg = root677();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-currency-exchange", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CurrencyExchange = hmr(CurrencyExchange, () => CurrencyExchange[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CurrencyExchange[HMR].source;
    set(CurrencyExchange[HMR].source, module.default[HMR].original);
  });
}
var CurrencyExchange_default = CurrencyExchange;
mark_module_end(CurrencyExchange);

// node_modules/svelte-bootstrap-icons/lib/CurrencyPound.svelte
mark_module_start();
CurrencyPound[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CurrencyPound.svelte";
var root678 = add_locations(ns_template(`<svg><!><path d="M4 8.585h1.969c.115.465.186.939.186 1.43 0 1.385-.736 2.496-2.075 2.771V14H12v-1.24H6.492v-.129c.825-.525 1.135-1.446 1.135-2.694 0-.465-.07-.913-.168-1.352h3.29v-.972H7.22c-.186-.723-.372-1.455-.372-2.247 0-1.274 1.047-2.066 2.58-2.066a5.32 5.32 0 0 1 2.103.465V2.456A5.629 5.629 0 0 0 9.348 2C6.865 2 5.322 3.291 5.322 5.366c0 .775.195 1.515.399 2.247H4v.972z"></path></svg>`), CurrencyPound[FILENAME], [[1, 0, [[1, 175]]]]);
function CurrencyPound($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CurrencyPound);
  var svg = root678();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-currency-pound", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CurrencyPound = hmr(CurrencyPound, () => CurrencyPound[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CurrencyPound[HMR].source;
    set(CurrencyPound[HMR].source, module.default[HMR].original);
  });
}
var CurrencyPound_default = CurrencyPound;
mark_module_end(CurrencyPound);

// node_modules/svelte-bootstrap-icons/lib/CurrencyRupee.svelte
mark_module_start();
CurrencyRupee[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CurrencyRupee.svelte";
var root679 = add_locations(ns_template(`<svg><!><path d="M4 3.06h2.726c1.22 0 2.12.575 2.325 1.724H4v1.051h5.051C8.855 7.001 8 7.558 6.788 7.558H4v1.317L8.437 14h2.11L6.095 8.884h.855c2.316-.018 3.465-1.476 3.688-3.049H12V4.784h-1.345c-.08-.778-.357-1.335-.793-1.732H12V2H4v1.06Z"></path></svg>`), CurrencyRupee[FILENAME], [[1, 0, [[1, 175]]]]);
function CurrencyRupee($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CurrencyRupee);
  var svg = root679();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-currency-rupee", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CurrencyRupee = hmr(CurrencyRupee, () => CurrencyRupee[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CurrencyRupee[HMR].source;
    set(CurrencyRupee[HMR].source, module.default[HMR].original);
  });
}
var CurrencyRupee_default = CurrencyRupee;
mark_module_end(CurrencyRupee);

// node_modules/svelte-bootstrap-icons/lib/CurrencyYen.svelte
mark_module_start();
CurrencyYen[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CurrencyYen.svelte";
var root680 = add_locations(ns_template(`<svg><!><path d="M8.75 14v-2.629h2.446v-.967H8.75v-1.31h2.445v-.967H9.128L12.5 2h-1.699L8.047 7.327h-.086L5.207 2H3.5l3.363 6.127H4.778v.968H7.25v1.31H4.78v.966h2.47V14h1.502z"></path></svg>`), CurrencyYen[FILENAME], [[1, 0, [[1, 173]]]]);
function CurrencyYen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CurrencyYen);
  var svg = root680();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-currency-yen", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CurrencyYen = hmr(CurrencyYen, () => CurrencyYen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CurrencyYen[HMR].source;
    set(CurrencyYen[HMR].source, module.default[HMR].original);
  });
}
var CurrencyYen_default = CurrencyYen;
mark_module_end(CurrencyYen);

// node_modules/svelte-bootstrap-icons/lib/CursorFill.svelte
mark_module_start();
CursorFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CursorFill.svelte";
var root681 = add_locations(ns_template(`<svg><!><path d="M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z"></path></svg>`), CursorFill[FILENAME], [[1, 0, [[1, 172]]]]);
function CursorFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CursorFill);
  var svg = root681();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cursor-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CursorFill = hmr(CursorFill, () => CursorFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CursorFill[HMR].source;
    set(CursorFill[HMR].source, module.default[HMR].original);
  });
}
var CursorFill_default = CursorFill;
mark_module_end(CursorFill);

// node_modules/svelte-bootstrap-icons/lib/CursorText.svelte
mark_module_start();
CursorText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/CursorText.svelte";
var root682 = add_locations(ns_template(`<svg><!><path d="M5 2a.5.5 0 0 1 .5-.5c.862 0 1.573.287 2.06.566.174.099.321.198.44.286.119-.088.266-.187.44-.286A4.165 4.165 0 0 1 10.5 1.5a.5.5 0 0 1 0 1c-.638 0-1.177.213-1.564.434a3.49 3.49 0 0 0-.436.294V7.5H9a.5.5 0 0 1 0 1h-.5v4.272c.1.08.248.187.436.294.387.221.926.434 1.564.434a.5.5 0 0 1 0 1 4.165 4.165 0 0 1-2.06-.566A4.561 4.561 0 0 1 8 13.65a4.561 4.561 0 0 1-.44.285 4.165 4.165 0 0 1-2.06.566.5.5 0 0 1 0-1c.638 0 1.177-.213 1.564-.434.188-.107.335-.214.436-.294V8.5H7a.5.5 0 0 1 0-1h.5V3.228a3.49 3.49 0 0 0-.436-.294A3.166 3.166 0 0 0 5.5 2.5.5.5 0 0 1 5 2zm3.352 1.355zm-.704 9.29z"></path></svg>`), CursorText[FILENAME], [[1, 0, [[1, 172]]]]);
function CursorText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, CursorText);
  var svg = root682();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cursor-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CursorText = hmr(CursorText, () => CursorText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CursorText[HMR].source;
    set(CursorText[HMR].source, module.default[HMR].original);
  });
}
var CursorText_default = CursorText;
mark_module_end(CursorText);

// node_modules/svelte-bootstrap-icons/lib/Cursor.svelte
mark_module_start();
Cursor[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Cursor.svelte";
var root683 = add_locations(ns_template(`<svg><!><path d="M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103zM2.25 8.184l3.897 1.67a.5.5 0 0 1 .262.263l1.67 3.897L12.743 3.52 2.25 8.184z"></path></svg>`), Cursor[FILENAME], [[1, 0, [[1, 167]]]]);
function Cursor($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Cursor);
  var svg = root683();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-cursor", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cursor = hmr(Cursor, () => Cursor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cursor[HMR].source;
    set(Cursor[HMR].source, module.default[HMR].original);
  });
}
var Cursor_default = Cursor;
mark_module_end(Cursor);

// node_modules/svelte-bootstrap-icons/lib/DashCircleDotted.svelte
mark_module_start();
DashCircleDotted[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DashCircleDotted.svelte";
var root684 = add_locations(ns_template(`<svg><!><path d="M8 0c-.176 0-.35.006-.523.017l.064.998a7.117 7.117 0 0 1 .918 0l.064-.998A8.113 8.113 0 0 0 8 0zM6.44.152c-.346.069-.684.16-1.012.27l.321.948c.287-.098.582-.177.884-.237L6.44.153zm4.132.271a7.946 7.946 0 0 0-1.011-.27l-.194.98c.302.06.597.14.884.237l.321-.947zm1.873.925a8 8 0 0 0-.906-.524l-.443.896c.275.136.54.29.793.459l.556-.831zM4.46.824c-.314.155-.616.33-.905.524l.556.83a7.07 7.07 0 0 1 .793-.458L4.46.824zM2.725 1.985c-.262.23-.51.478-.74.74l.752.66c.202-.23.418-.446.648-.648l-.66-.752zm11.29.74a8.058 8.058 0 0 0-.74-.74l-.66.752c.23.202.447.418.648.648l.752-.66zm1.161 1.735a7.98 7.98 0 0 0-.524-.905l-.83.556c.169.253.322.518.458.793l.896-.443zM1.348 3.555c-.194.289-.37.591-.524.906l.896.443c.136-.275.29-.54.459-.793l-.831-.556zM.423 5.428a7.945 7.945 0 0 0-.27 1.011l.98.194c.06-.302.14-.597.237-.884l-.947-.321zM15.848 6.44a7.943 7.943 0 0 0-.27-1.012l-.948.321c.098.287.177.582.237.884l.98-.194zM.017 7.477a8.113 8.113 0 0 0 0 1.046l.998-.064a7.117 7.117 0 0 1 0-.918l-.998-.064zM16 8a8.1 8.1 0 0 0-.017-.523l-.998.064a7.11 7.11 0 0 1 0 .918l.998.064A8.1 8.1 0 0 0 16 8zM.152 9.56c.069.346.16.684.27 1.012l.948-.321a6.944 6.944 0 0 1-.237-.884l-.98.194zm15.425 1.012c.112-.328.202-.666.27-1.011l-.98-.194c-.06.302-.14.597-.237.884l.947.321zM.824 11.54a8 8 0 0 0 .524.905l.83-.556a6.999 6.999 0 0 1-.458-.793l-.896.443zm13.828.905c.194-.289.37-.591.524-.906l-.896-.443c-.136.275-.29.54-.459.793l.831.556zm-12.667.83c.23.262.478.51.74.74l.66-.752a7.047 7.047 0 0 1-.648-.648l-.752.66zm11.29.74c.262-.23.51-.478.74-.74l-.752-.66c-.201.23-.418.447-.648.648l.66.752zm-1.735 1.161c.314-.155.616-.33.905-.524l-.556-.83a7.07 7.07 0 0 1-.793.458l.443.896zm-7.985-.524c.289.194.591.37.906.524l.443-.896a6.998 6.998 0 0 1-.793-.459l-.556.831zm1.873.925c.328.112.666.202 1.011.27l.194-.98a6.953 6.953 0 0 1-.884-.237l-.321.947zm4.132.271a7.944 7.944 0 0 0 1.012-.27l-.321-.948a6.954 6.954 0 0 1-.884.237l.194.98zm-2.083.135a8.1 8.1 0 0 0 1.046 0l-.064-.998a7.11 7.11 0 0 1-.918 0l-.064.998zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z"></path></svg>`), DashCircleDotted[FILENAME], [[1, 0, [[1, 179]]]]);
function DashCircleDotted($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DashCircleDotted);
  var svg = root684();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dash-circle-dotted", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DashCircleDotted = hmr(DashCircleDotted, () => DashCircleDotted[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DashCircleDotted[HMR].source;
    set(DashCircleDotted[HMR].source, module.default[HMR].original);
  });
}
var DashCircleDotted_default = DashCircleDotted;
mark_module_end(DashCircleDotted);

// node_modules/svelte-bootstrap-icons/lib/DashCircleFill.svelte
mark_module_start();
DashCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DashCircleFill.svelte";
var root685 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z"></path></svg>`), DashCircleFill[FILENAME], [[1, 0, [[1, 177]]]]);
function DashCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DashCircleFill);
  var svg = root685();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dash-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DashCircleFill = hmr(DashCircleFill, () => DashCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DashCircleFill[HMR].source;
    set(DashCircleFill[HMR].source, module.default[HMR].original);
  });
}
var DashCircleFill_default = DashCircleFill;
mark_module_end(DashCircleFill);

// node_modules/svelte-bootstrap-icons/lib/DashCircle.svelte
mark_module_start();
DashCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DashCircle.svelte";
var root686 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z"></path></svg>`), DashCircle[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function DashCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DashCircle);
  var svg = root686();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dash-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DashCircle = hmr(DashCircle, () => DashCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DashCircle[HMR].source;
    set(DashCircle[HMR].source, module.default[HMR].original);
  });
}
var DashCircle_default = DashCircle;
mark_module_end(DashCircle);

// node_modules/svelte-bootstrap-icons/lib/DashLg.svelte
mark_module_start();
DashLg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DashLg.svelte";
var root687 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"></path></svg>`), DashLg[FILENAME], [[1, 0, [[1, 168]]]]);
function DashLg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DashLg);
  var svg = root687();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dash-lg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DashLg = hmr(DashLg, () => DashLg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DashLg[HMR].source;
    set(DashLg[HMR].source, module.default[HMR].original);
  });
}
var DashLg_default = DashLg;
mark_module_end(DashLg);

// node_modules/svelte-bootstrap-icons/lib/DashSquareDotted.svelte
mark_module_start();
DashSquareDotted[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DashSquareDotted.svelte";
var root688 = add_locations(ns_template(`<svg><!><path d="M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z"></path></svg>`), DashSquareDotted[FILENAME], [[1, 0, [[1, 179]]]]);
function DashSquareDotted($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DashSquareDotted);
  var svg = root688();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dash-square-dotted", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DashSquareDotted = hmr(DashSquareDotted, () => DashSquareDotted[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DashSquareDotted[HMR].source;
    set(DashSquareDotted[HMR].source, module.default[HMR].original);
  });
}
var DashSquareDotted_default = DashSquareDotted;
mark_module_end(DashSquareDotted);

// node_modules/svelte-bootstrap-icons/lib/DashSquareFill.svelte
mark_module_start();
DashSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DashSquareFill.svelte";
var root689 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm2.5 7.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1z"></path></svg>`), DashSquareFill[FILENAME], [[1, 0, [[1, 177]]]]);
function DashSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DashSquareFill);
  var svg = root689();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dash-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DashSquareFill = hmr(DashSquareFill, () => DashSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DashSquareFill[HMR].source;
    set(DashSquareFill[HMR].source, module.default[HMR].original);
  });
}
var DashSquareFill_default = DashSquareFill;
mark_module_end(DashSquareFill);

// node_modules/svelte-bootstrap-icons/lib/DashSquare.svelte
mark_module_start();
DashSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DashSquare.svelte";
var root690 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z"></path></svg>`), DashSquare[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function DashSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DashSquare);
  var svg = root690();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dash-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DashSquare = hmr(DashSquare, () => DashSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DashSquare[HMR].source;
    set(DashSquare[HMR].source, module.default[HMR].original);
  });
}
var DashSquare_default = DashSquare;
mark_module_end(DashSquare);

// node_modules/svelte-bootstrap-icons/lib/Dash.svelte
mark_module_start();
Dash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dash.svelte";
var root691 = add_locations(ns_template(`<svg><!><path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z"></path></svg>`), Dash[FILENAME], [[1, 0, [[1, 165]]]]);
function Dash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dash);
  var svg = root691();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dash = hmr(Dash, () => Dash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dash[HMR].source;
    set(Dash[HMR].source, module.default[HMR].original);
  });
}
var Dash_default = Dash;
mark_module_end(Dash);

// node_modules/svelte-bootstrap-icons/lib/DatabaseAdd.svelte
mark_module_start();
DatabaseAdd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseAdd.svelte";
var root692 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0Z"></path><path d="M12.096 6.223A4.92 4.92 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.493 4.493 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.525 4.525 0 0 1-.813-.927C8.5 14.992 8.252 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.552 4.552 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10c.262 0 .52-.008.774-.024a4.525 4.525 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777ZM3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4Z"></path></svg>`), DatabaseAdd[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function DatabaseAdd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseAdd);
  var svg = root692();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-add", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseAdd = hmr(DatabaseAdd, () => DatabaseAdd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseAdd[HMR].source;
    set(DatabaseAdd[HMR].source, module.default[HMR].original);
  });
}
var DatabaseAdd_default = DatabaseAdd;
mark_module_end(DatabaseAdd);

// node_modules/svelte-bootstrap-icons/lib/DatabaseCheck.svelte
mark_module_start();
DatabaseCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseCheck.svelte";
var root693 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.708l.547.548 1.17-1.951a.5.5 0 1 1 .858.514Z"></path><path d="M12.096 6.223A4.92 4.92 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.493 4.493 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.525 4.525 0 0 1-.813-.927C8.5 14.992 8.252 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.552 4.552 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10c.262 0 .52-.008.774-.024a4.525 4.525 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777ZM3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4Z"></path></svg>`), DatabaseCheck[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function DatabaseCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseCheck);
  var svg = root693();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseCheck = hmr(DatabaseCheck, () => DatabaseCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseCheck[HMR].source;
    set(DatabaseCheck[HMR].source, module.default[HMR].original);
  });
}
var DatabaseCheck_default = DatabaseCheck;
mark_module_end(DatabaseCheck);

// node_modules/svelte-bootstrap-icons/lib/DatabaseDash.svelte
mark_module_start();
DatabaseDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseDash.svelte";
var root694 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7ZM11 12h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1Z"></path><path d="M12.096 6.223A4.92 4.92 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.493 4.493 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.525 4.525 0 0 1-.813-.927C8.5 14.992 8.252 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.552 4.552 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10c.262 0 .52-.008.774-.024a4.525 4.525 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777ZM3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4Z"></path></svg>`), DatabaseDash[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function DatabaseDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseDash);
  var svg = root694();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseDash = hmr(DatabaseDash, () => DatabaseDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseDash[HMR].source;
    set(DatabaseDash[HMR].source, module.default[HMR].original);
  });
}
var DatabaseDash_default = DatabaseDash;
mark_module_end(DatabaseDash);

// node_modules/svelte-bootstrap-icons/lib/DatabaseDown.svelte
mark_module_start();
DatabaseDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseDown.svelte";
var root695 = add_locations(ns_template(`<svg><!><path d="M12.5 9a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7Zm.354 5.854 1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V10.5a.5.5 0 0 0-1 0v2.793l-.646-.647a.5.5 0 0 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0Z"></path><path d="M12.096 6.223A4.92 4.92 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.493 4.493 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.525 4.525 0 0 1-.813-.927C8.5 14.992 8.252 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.552 4.552 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10c.262 0 .52-.008.774-.024a4.525 4.525 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777ZM3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4Z"></path></svg>`), DatabaseDown[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function DatabaseDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseDown);
  var svg = root695();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseDown = hmr(DatabaseDown, () => DatabaseDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseDown[HMR].source;
    set(DatabaseDown[HMR].source, module.default[HMR].original);
  });
}
var DatabaseDown_default = DatabaseDown;
mark_module_end(DatabaseDown);

// node_modules/svelte-bootstrap-icons/lib/DatabaseExclamation.svelte
mark_module_start();
DatabaseExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseExclamation.svelte";
var root696 = add_locations(ns_template(`<svg><!><path d="M12.096 6.223A4.92 4.92 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.493 4.493 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.525 4.525 0 0 1-.813-.927C8.5 14.992 8.252 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.552 4.552 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10c.262 0 .52-.008.774-.024a4.525 4.525 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777ZM3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1.5a.5.5 0 0 0 1 0V11a.5.5 0 0 0-.5-.5Zm0 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path></svg>`), DatabaseExclamation[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function DatabaseExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseExclamation);
  var svg = root696();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseExclamation = hmr(DatabaseExclamation, () => DatabaseExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseExclamation[HMR].source;
    set(DatabaseExclamation[HMR].source, module.default[HMR].original);
  });
}
var DatabaseExclamation_default = DatabaseExclamation;
mark_module_end(DatabaseExclamation);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillAdd.svelte
mark_module_start();
DatabaseFillAdd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillAdd.svelte";
var root697 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0ZM8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Z"></path></svg>`), DatabaseFillAdd[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function DatabaseFillAdd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillAdd);
  var svg = root697();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-add", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillAdd = hmr(DatabaseFillAdd, () => DatabaseFillAdd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillAdd[HMR].source;
    set(DatabaseFillAdd[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillAdd_default = DatabaseFillAdd;
mark_module_end(DatabaseFillAdd);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillCheck.svelte
mark_module_start();
DatabaseFillCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillCheck.svelte";
var root698 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.708l.547.548 1.17-1.951a.5.5 0 1 1 .858.514ZM8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Z"></path></svg>`), DatabaseFillCheck[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function DatabaseFillCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillCheck);
  var svg = root698();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillCheck = hmr(DatabaseFillCheck, () => DatabaseFillCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillCheck[HMR].source;
    set(DatabaseFillCheck[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillCheck_default = DatabaseFillCheck;
mark_module_end(DatabaseFillCheck);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillDash.svelte
mark_module_start();
DatabaseFillDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillDash.svelte";
var root699 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7ZM11 12h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1ZM8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Z"></path></svg>`), DatabaseFillDash[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function DatabaseFillDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillDash);
  var svg = root699();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillDash = hmr(DatabaseFillDash, () => DatabaseFillDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillDash[HMR].source;
    set(DatabaseFillDash[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillDash_default = DatabaseFillDash;
mark_module_end(DatabaseFillDash);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillDown.svelte
mark_module_start();
DatabaseFillDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillDown.svelte";
var root700 = add_locations(ns_template(`<svg><!><path d="M12.5 9a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7Zm.354 5.854 1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V10.5a.5.5 0 0 0-1 0v2.793l-.646-.647a.5.5 0 0 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0ZM8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Z"></path></svg>`), DatabaseFillDown[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function DatabaseFillDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillDown);
  var svg = root700();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillDown = hmr(DatabaseFillDown, () => DatabaseFillDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillDown[HMR].source;
    set(DatabaseFillDown[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillDown_default = DatabaseFillDown;
mark_module_end(DatabaseFillDown);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillExclamation.svelte
mark_module_start();
DatabaseFillExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillExclamation.svelte";
var root701 = add_locations(ns_template(`<svg><!><path d="M8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1.5a.5.5 0 0 0 1 0V11a.5.5 0 0 0-.5-.5Zm0 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path></svg>`), DatabaseFillExclamation[FILENAME], [
  [
    1,
    0,
    [[1, 186], [2, 2], [3, 2]]
  ]
]);
function DatabaseFillExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillExclamation);
  var svg = root701();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillExclamation = hmr(DatabaseFillExclamation, () => DatabaseFillExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillExclamation[HMR].source;
    set(DatabaseFillExclamation[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillExclamation_default = DatabaseFillExclamation;
mark_module_end(DatabaseFillExclamation);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillGear.svelte
mark_module_start();
DatabaseFillGear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillGear.svelte";
var root702 = add_locations(ns_template(`<svg><!><path d="M8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Zm3.631-4.538c.18-.613 1.048-.613 1.229 0l.043.148a.64.64 0 0 0 .921.382l.136-.074c.561-.306 1.175.308.87.869l-.075.136a.64.64 0 0 0 .382.92l.149.045c.612.18.612 1.048 0 1.229l-.15.043a.64.64 0 0 0-.38.921l.074.136c.305.561-.309 1.175-.87.87l-.136-.075a.64.64 0 0 0-.92.382l-.045.149c-.18.612-1.048.612-1.229 0l-.043-.15a.64.64 0 0 0-.921-.38l-.136.074c-.561.305-1.175-.309-.87-.87l.075-.136a.64.64 0 0 0-.382-.92l-.148-.045c-.613-.18-.613-1.048 0-1.229l.148-.043a.64.64 0 0 0 .382-.921l-.074-.136c-.306-.561.308-1.175.869-.87l.136.075a.64.64 0 0 0 .92-.382l.045-.148ZM14 12.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0Z"></path></svg>`), DatabaseFillGear[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function DatabaseFillGear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillGear);
  var svg = root702();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-gear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillGear = hmr(DatabaseFillGear, () => DatabaseFillGear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillGear[HMR].source;
    set(DatabaseFillGear[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillGear_default = DatabaseFillGear;
mark_module_end(DatabaseFillGear);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillLock.svelte
mark_module_start();
DatabaseFillLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillLock.svelte";
var root703 = add_locations(ns_template(`<svg><!><path d="M8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M3.904 9.223C2.875 8.755 2 8.007 2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-1.364-.125 2.988 2.988 0 0 0-2.197.731 4.525 4.525 0 0 0-1.254 1.237A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777ZM8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.09 0 .178 0 .266-.003A1.99 1.99 0 0 1 8 15v-1Zm0-1.5c0 .1.003.201.01.3A1.9 1.9 0 0 0 8 13c-1.573 0-3.022-.289-4.096-.777C2.875 11.755 2 11.007 2 10v-.839c.457.432 1.004.751 1.49.972C4.722 10.693 6.318 11 8 11c.086 0 .172 0 .257-.002A4.5 4.5 0 0 0 8 12.5Z"></path><path d="M9 13a1 1 0 0 1 1-1v-1a2 2 0 1 1 4 0v1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2Zm3-3a1 1 0 0 0-1 1v1h2v-1a1 1 0 0 0-1-1Z"></path></svg>`), DatabaseFillLock[FILENAME], [
  [
    1,
    0,
    [[1, 179], [2, 2], [3, 2]]
  ]
]);
function DatabaseFillLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillLock);
  var svg = root703();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillLock = hmr(DatabaseFillLock, () => DatabaseFillLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillLock[HMR].source;
    set(DatabaseFillLock[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillLock_default = DatabaseFillLock;
mark_module_end(DatabaseFillLock);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillSlash.svelte
mark_module_start();
DatabaseFillSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillSlash.svelte";
var root704 = add_locations(ns_template(`<svg><!><path d="M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95ZM8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Z"></path></svg>`), DatabaseFillSlash[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function DatabaseFillSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillSlash);
  var svg = root704();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillSlash = hmr(DatabaseFillSlash, () => DatabaseFillSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillSlash[HMR].source;
    set(DatabaseFillSlash[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillSlash_default = DatabaseFillSlash;
mark_module_end(DatabaseFillSlash);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillUp.svelte
mark_module_start();
DatabaseFillUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillUp.svelte";
var root705 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.854 1.5 1.5a.5.5 0 0 1-.708.708L13 11.707V14.5a.5.5 0 0 1-1 0v-2.793l-.646.647a.5.5 0 0 1-.708-.708l1.5-1.5a.5.5 0 0 1 .708 0ZM8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Z"></path></svg>`), DatabaseFillUp[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function DatabaseFillUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillUp);
  var svg = root705();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillUp = hmr(DatabaseFillUp, () => DatabaseFillUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillUp[HMR].source;
    set(DatabaseFillUp[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillUp_default = DatabaseFillUp;
mark_module_end(DatabaseFillUp);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFillX.svelte
mark_module_start();
DatabaseFillX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFillX.svelte";
var root706 = add_locations(ns_template(`<svg><!><path d="M8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z"></path><path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm-.646-4.854.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 .708-.708Z"></path></svg>`), DatabaseFillX[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function DatabaseFillX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFillX);
  var svg = root706();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFillX = hmr(DatabaseFillX, () => DatabaseFillX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFillX[HMR].source;
    set(DatabaseFillX[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFillX_default = DatabaseFillX;
mark_module_end(DatabaseFillX);

// node_modules/svelte-bootstrap-icons/lib/DatabaseFill.svelte
mark_module_start();
DatabaseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseFill.svelte";
var root707 = add_locations(ns_template(`<svg><!><path d="M3.904 1.777C4.978 1.289 6.427 1 8 1s3.022.289 4.096.777C13.125 2.245 14 2.993 14 4s-.875 1.755-1.904 2.223C11.022 6.711 9.573 7 8 7s-3.022-.289-4.096-.777C2.875 5.755 2 5.007 2 4s.875-1.755 1.904-2.223Z"></path><path d="M2 6.161V7c0 1.007.875 1.755 1.904 2.223C4.978 9.71 6.427 10 8 10s3.022-.289 4.096-.777C13.125 8.755 14 8.007 14 7v-.839c-.457.432-1.004.751-1.49.972C11.278 7.693 9.682 8 8 8s-3.278-.307-4.51-.867c-.486-.22-1.033-.54-1.49-.972Z"></path><path d="M2 9.161V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13s3.022-.289 4.096-.777C13.125 11.755 14 11.007 14 10v-.839c-.457.432-1.004.751-1.49.972-1.232.56-2.828.867-4.51.867s-3.278-.307-4.51-.867c-.486-.22-1.033-.54-1.49-.972Z"></path><path d="M2 12.161V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16s3.022-.289 4.096-.777C13.125 14.755 14 14.007 14 13v-.839c-.457.432-1.004.751-1.49.972-1.232.56-2.828.867-4.51.867s-3.278-.307-4.51-.867c-.486-.22-1.033-.54-1.49-.972Z"></path></svg>`), DatabaseFill[FILENAME], [
  [
    1,
    0,
    [
      [1, 174],
      [2, 2],
      [3, 2],
      [4, 2]
    ]
  ]
]);
function DatabaseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseFill);
  var svg = root707();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(4);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseFill = hmr(DatabaseFill, () => DatabaseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseFill[HMR].source;
    set(DatabaseFill[HMR].source, module.default[HMR].original);
  });
}
var DatabaseFill_default = DatabaseFill;
mark_module_end(DatabaseFill);

// node_modules/svelte-bootstrap-icons/lib/DatabaseGear.svelte
mark_module_start();
DatabaseGear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseGear.svelte";
var root708 = add_locations(ns_template(`<svg><!><path d="M12.096 6.223A4.92 4.92 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.493 4.493 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.525 4.525 0 0 1-.813-.927C8.5 14.992 8.252 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.552 4.552 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10c.262 0 .52-.008.774-.024a4.525 4.525 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777ZM3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4Z"></path><path d="M11.886 9.46c.18-.613 1.048-.613 1.229 0l.043.148a.64.64 0 0 0 .921.382l.136-.074c.561-.306 1.175.308.87.869l-.075.136a.64.64 0 0 0 .382.92l.149.045c.612.18.612 1.048 0 1.229l-.15.043a.64.64 0 0 0-.38.921l.074.136c.305.561-.309 1.175-.87.87l-.136-.075a.64.64 0 0 0-.92.382l-.045.149c-.18.612-1.048.612-1.229 0l-.043-.15a.64.64 0 0 0-.921-.38l-.136.074c-.561.305-1.175-.309-.87-.87l.075-.136a.64.64 0 0 0-.382-.92l-.148-.045c-.613-.18-.613-1.048 0-1.229l.148-.043a.64.64 0 0 0 .382-.921l-.074-.136c-.306-.561.308-1.175.869-.87l.136.075a.64.64 0 0 0 .92-.382l.045-.148ZM14 12.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"></path></svg>`), DatabaseGear[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function DatabaseGear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseGear);
  var svg = root708();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-gear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseGear = hmr(DatabaseGear, () => DatabaseGear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseGear[HMR].source;
    set(DatabaseGear[HMR].source, module.default[HMR].original);
  });
}
var DatabaseGear_default = DatabaseGear;
mark_module_end(DatabaseGear);

// node_modules/svelte-bootstrap-icons/lib/DatabaseLock.svelte
mark_module_start();
DatabaseLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseLock.svelte";
var root709 = add_locations(ns_template(`<svg><!><path d="M13 5.698a4.92 4.92 0 0 1-.904.525C11.022 6.711 9.573 7 8 7s-3.022-.289-4.096-.777A4.92 4.92 0 0 1 3 5.698V7c0 .374.356.875 1.318 1.313C5.234 8.729 6.536 9 8 9c.666 0 1.298-.056 1.876-.156-.43.31-.804.693-1.102 1.132A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777A4.92 4.92 0 0 1 3 8.698V10c0 .374.356.875 1.318 1.313C5.234 11.729 6.536 12 8 12h.027a4.548 4.548 0 0 0-.017.8A1.9 1.9 0 0 0 8 13c-1.573 0-3.022-.289-4.096-.777A4.916 4.916 0 0 1 3 11.698V13c0 .374.356.875 1.318 1.313C5.234 14.729 6.536 15 8 15c0 .363.097.704.266.997C8.178 16 8.089 16 8 16c-1.573 0-3.022-.289-4.096-.777C2.875 14.755 2 14.007 2 13V4c0-1.007.875-1.755 1.904-2.223C4.978 1.289 6.427 1 8 1s3.022.289 4.096.777C13.125 2.245 14 2.993 14 4v4.256a4.493 4.493 0 0 0-1.753-.249C12.787 7.654 13 7.289 13 7V5.698Zm-8.682-3.01C3.356 3.124 3 3.625 3 4c0 .374.356.875 1.318 1.313C5.234 5.729 6.536 6 8 6s2.766-.27 3.682-.687C12.644 4.875 13 4.373 13 4c0-.374-.356-.875-1.318-1.313C10.766 2.271 9.464 2 8 2s-2.766.27-3.682.687Z"></path><path d="M9 13a1 1 0 0 1 1-1v-1a2 2 0 1 1 4 0v1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2Zm3-3a1 1 0 0 0-1 1v1h2v-1a1 1 0 0 0-1-1Z"></path></svg>`), DatabaseLock[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function DatabaseLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseLock);
  var svg = root709();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseLock = hmr(DatabaseLock, () => DatabaseLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseLock[HMR].source;
    set(DatabaseLock[HMR].source, module.default[HMR].original);
  });
}
var DatabaseLock_default = DatabaseLock;
mark_module_end(DatabaseLock);

// node_modules/svelte-bootstrap-icons/lib/DatabaseSlash.svelte
mark_module_start();
DatabaseSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseSlash.svelte";
var root710 = add_locations(ns_template(`<svg><!><path d="M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95Z"></path><path d="M12.096 6.223A4.92 4.92 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.493 4.493 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.525 4.525 0 0 1-.813-.927C8.5 14.992 8.252 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.552 4.552 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10c.262 0 .52-.008.774-.024a4.525 4.525 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777ZM3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4Z"></path></svg>`), DatabaseSlash[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function DatabaseSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseSlash);
  var svg = root710();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseSlash = hmr(DatabaseSlash, () => DatabaseSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseSlash[HMR].source;
    set(DatabaseSlash[HMR].source, module.default[HMR].original);
  });
}
var DatabaseSlash_default = DatabaseSlash;
mark_module_end(DatabaseSlash);

// node_modules/svelte-bootstrap-icons/lib/DatabaseUp.svelte
mark_module_start();
DatabaseUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseUp.svelte";
var root711 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.854 1.5 1.5a.5.5 0 0 1-.708.708L13 11.707V14.5a.5.5 0 0 1-1 0v-2.793l-.646.647a.5.5 0 0 1-.708-.708l1.5-1.5a.5.5 0 0 1 .708 0Z"></path><path d="M12.096 6.223A4.92 4.92 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.493 4.493 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.525 4.525 0 0 1-.813-.927C8.5 14.992 8.252 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.552 4.552 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10c.262 0 .52-.008.774-.024a4.525 4.525 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777ZM3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4Z"></path></svg>`), DatabaseUp[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function DatabaseUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseUp);
  var svg = root711();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseUp = hmr(DatabaseUp, () => DatabaseUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseUp[HMR].source;
    set(DatabaseUp[HMR].source, module.default[HMR].original);
  });
}
var DatabaseUp_default = DatabaseUp;
mark_module_end(DatabaseUp);

// node_modules/svelte-bootstrap-icons/lib/DatabaseX.svelte
mark_module_start();
DatabaseX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DatabaseX.svelte";
var root712 = add_locations(ns_template(`<svg><!><path d="M12.096 6.223A4.92 4.92 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.493 4.493 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.525 4.525 0 0 1-.813-.927C8.5 14.992 8.252 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.552 4.552 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10c.262 0 .52-.008.774-.024a4.525 4.525 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777ZM3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm-.646-4.854.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 .708-.708Z"></path></svg>`), DatabaseX[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function DatabaseX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DatabaseX);
  var svg = root712();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseX = hmr(DatabaseX, () => DatabaseX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseX[HMR].source;
    set(DatabaseX[HMR].source, module.default[HMR].original);
  });
}
var DatabaseX_default = DatabaseX;
mark_module_end(DatabaseX);

// node_modules/svelte-bootstrap-icons/lib/Database.svelte
mark_module_start();
Database[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Database.svelte";
var root713 = add_locations(ns_template(`<svg><!><path d="M4.318 2.687C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4c0-.374.356-.875 1.318-1.313ZM13 5.698V7c0 .374-.356.875-1.318 1.313C10.766 8.729 9.464 9 8 9s-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777A4.92 4.92 0 0 0 13 5.698ZM14 4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16s3.022-.289 4.096-.777C13.125 14.755 14 14.007 14 13V4Zm-1 4.698V10c0 .374-.356.875-1.318 1.313C10.766 11.729 9.464 12 8 12s-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10s3.022-.289 4.096-.777A4.92 4.92 0 0 0 13 8.698Zm0 3V13c0 .374-.356.875-1.318 1.313C10.766 14.729 9.464 15 8 15s-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13s3.022-.289 4.096-.777c.324-.147.633-.323.904-.525Z"></path></svg>`), Database[FILENAME], [[1, 0, [[1, 169]]]]);
function Database($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Database);
  var svg = root713();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-database", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Database = hmr(Database, () => Database[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Database[HMR].source;
    set(Database[HMR].source, module.default[HMR].original);
  });
}
var Database_default = Database;
mark_module_end(Database);

// node_modules/svelte-bootstrap-icons/lib/DeviceHddFill.svelte
mark_module_start();
DeviceHddFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DeviceHddFill.svelte";
var root714 = add_locations(ns_template(`<svg><!><path d="M8.785 9.896A3.001 3.001 0 0 0 8 4a3 3 0 0 0-.891 5.865c.667-.44 1.396-.91 1.955-1.268.224-.144.483.115.34.34l-.62.96ZM9 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4Zm9 1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 13a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-9.5.5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1ZM4 1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm2.882 11.177a1.102 1.102 0 0 1-1.56-1.559c.1-.098.396-.314.795-.588a4 4 0 1 1 1.946.47c-.537.813-1.02 1.515-1.181 1.677Z"></path></svg>`), DeviceHddFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function DeviceHddFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DeviceHddFill);
  var svg = root714();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-device-hdd-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DeviceHddFill = hmr(DeviceHddFill, () => DeviceHddFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DeviceHddFill[HMR].source;
    set(DeviceHddFill[HMR].source, module.default[HMR].original);
  });
}
var DeviceHddFill_default = DeviceHddFill;
mark_module_end(DeviceHddFill);

// node_modules/svelte-bootstrap-icons/lib/DeviceHdd.svelte
mark_module_start();
DeviceHdd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DeviceHdd.svelte";
var root715 = add_locations(ns_template(`<svg><!><path d="M12 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 11a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-7.5.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1ZM5 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM8 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"></path><path d="M12 7a4 4 0 0 1-3.937 4c-.537.813-1.02 1.515-1.181 1.677a1.102 1.102 0 0 1-1.56-1.559c.1-.098.396-.314.795-.588A4 4 0 0 1 8 3a4 4 0 0 1 4 4Zm-1 0a3 3 0 1 0-3.891 2.865c.667-.44 1.396-.91 1.955-1.268.224-.144.483.115.34.34l-.62.96A3.001 3.001 0 0 0 11 7Z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2Zm2-1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H4Z"></path></svg>`), DeviceHdd[FILENAME], [
  [
    1,
    0,
    [[1, 171], [2, 2], [3, 2]]
  ]
]);
function DeviceHdd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DeviceHdd);
  var svg = root715();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-device-hdd", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DeviceHdd = hmr(DeviceHdd, () => DeviceHdd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DeviceHdd[HMR].source;
    set(DeviceHdd[HMR].source, module.default[HMR].original);
  });
}
var DeviceHdd_default = DeviceHdd;
mark_module_end(DeviceHdd);

// node_modules/svelte-bootstrap-icons/lib/DeviceSsdFill.svelte
mark_module_start();
DeviceSsdFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DeviceSsdFill.svelte";
var root716 = add_locations(ns_template(`<svg><!><path d="M5 8V4h6v4H5Z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4Zm0 1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm9 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM3.5 11a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm9.5-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM4.75 3h6.5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-.75.75h-6.5A.75.75 0 0 1 4 8.25v-4.5A.75.75 0 0 1 4.75 3ZM5 12h6a1 1 0 0 1 1 1v2h-1v-2h-.75v2h-1v-2H8.5v2h-1v-2h-.75v2h-1v-2H5v2H4v-2a1 1 0 0 1 1-1Z"></path></svg>`), DeviceSsdFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function DeviceSsdFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DeviceSsdFill);
  var svg = root716();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-device-ssd-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DeviceSsdFill = hmr(DeviceSsdFill, () => DeviceSsdFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DeviceSsdFill[HMR].source;
    set(DeviceSsdFill[HMR].source, module.default[HMR].original);
  });
}
var DeviceSsdFill_default = DeviceSsdFill;
mark_module_end(DeviceSsdFill);

// node_modules/svelte-bootstrap-icons/lib/DeviceSsd.svelte
mark_module_start();
DeviceSsd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DeviceSsd.svelte";
var root717 = add_locations(ns_template(`<svg><!><path d="M4.75 4a.75.75 0 0 0-.75.75v3.5c0 .414.336.75.75.75h6.5a.75.75 0 0 0 .75-.75v-3.5a.75.75 0 0 0-.75-.75h-6.5ZM5 8V5h6v3H5Zm0-5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm7 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM4.5 11a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm7 0a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2Zm11 12V2a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1v-2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v2a1 1 0 0 0 1-1Zm-7.25 1v-2H5v2h.75Zm1.75 0v-2h-.75v2h.75Zm1.75 0v-2H8.5v2h.75ZM11 13h-.75v2H11v-2Z"></path></svg>`), DeviceSsd[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function DeviceSsd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DeviceSsd);
  var svg = root717();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-device-ssd", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DeviceSsd = hmr(DeviceSsd, () => DeviceSsd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DeviceSsd[HMR].source;
    set(DeviceSsd[HMR].source, module.default[HMR].original);
  });
}
var DeviceSsd_default = DeviceSsd;
mark_module_end(DeviceSsd);

// node_modules/svelte-bootstrap-icons/lib/Diagram2Fill.svelte
mark_module_start();
Diagram2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Diagram2Fill.svelte";
var root718 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 3.5A1.5 1.5 0 0 1 7.5 2h1A1.5 1.5 0 0 1 10 3.5v1A1.5 1.5 0 0 1 8.5 6v1H11a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0v-1A.5.5 0 0 1 5 7h2.5V6A1.5 1.5 0 0 1 6 4.5v-1zm-3 8A1.5 1.5 0 0 1 4.5 10h1A1.5 1.5 0 0 1 7 11.5v1A1.5 1.5 0 0 1 5.5 14h-1A1.5 1.5 0 0 1 3 12.5v-1zm6 0a1.5 1.5 0 0 1 1.5-1.5h1a1.5 1.5 0 0 1 1.5 1.5v1a1.5 1.5 0 0 1-1.5 1.5h-1A1.5 1.5 0 0 1 9 12.5v-1z"></path></svg>`), Diagram2Fill[FILENAME], [[1, 0, [[1, 175]]]]);
function Diagram2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Diagram2Fill);
  var svg = root718();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-diagram-2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diagram2Fill = hmr(Diagram2Fill, () => Diagram2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diagram2Fill[HMR].source;
    set(Diagram2Fill[HMR].source, module.default[HMR].original);
  });
}
var Diagram2Fill_default = Diagram2Fill;
mark_module_end(Diagram2Fill);

// node_modules/svelte-bootstrap-icons/lib/Diagram2.svelte
mark_module_start();
Diagram2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Diagram2.svelte";
var root719 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 3.5A1.5 1.5 0 0 1 7.5 2h1A1.5 1.5 0 0 1 10 3.5v1A1.5 1.5 0 0 1 8.5 6v1H11a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0v-1A.5.5 0 0 1 5 7h2.5V6A1.5 1.5 0 0 1 6 4.5v-1zM8.5 5a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1zM3 11.5A1.5 1.5 0 0 1 4.5 10h1A1.5 1.5 0 0 1 7 11.5v1A1.5 1.5 0 0 1 5.5 14h-1A1.5 1.5 0 0 1 3 12.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zm4.5.5a1.5 1.5 0 0 1 1.5-1.5h1a1.5 1.5 0 0 1 1.5 1.5v1a1.5 1.5 0 0 1-1.5 1.5h-1A1.5 1.5 0 0 1 9 12.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1z"></path></svg>`), Diagram2[FILENAME], [[1, 0, [[1, 170]]]]);
function Diagram2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Diagram2);
  var svg = root719();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-diagram-2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diagram2 = hmr(Diagram2, () => Diagram2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diagram2[HMR].source;
    set(Diagram2[HMR].source, module.default[HMR].original);
  });
}
var Diagram2_default = Diagram2;
mark_module_end(Diagram2);

// node_modules/svelte-bootstrap-icons/lib/Diagram3Fill.svelte
mark_module_start();
Diagram3Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Diagram3Fill.svelte";
var root720 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 3.5A1.5 1.5 0 0 1 7.5 2h1A1.5 1.5 0 0 1 10 3.5v1A1.5 1.5 0 0 1 8.5 6v1H14a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0v-1A.5.5 0 0 1 2 7h5.5V6A1.5 1.5 0 0 1 6 4.5v-1zm-6 8A1.5 1.5 0 0 1 1.5 10h1A1.5 1.5 0 0 1 4 11.5v1A1.5 1.5 0 0 1 2.5 14h-1A1.5 1.5 0 0 1 0 12.5v-1zm6 0A1.5 1.5 0 0 1 7.5 10h1a1.5 1.5 0 0 1 1.5 1.5v1A1.5 1.5 0 0 1 8.5 14h-1A1.5 1.5 0 0 1 6 12.5v-1zm6 0a1.5 1.5 0 0 1 1.5-1.5h1a1.5 1.5 0 0 1 1.5 1.5v1a1.5 1.5 0 0 1-1.5 1.5h-1a1.5 1.5 0 0 1-1.5-1.5v-1z"></path></svg>`), Diagram3Fill[FILENAME], [[1, 0, [[1, 175]]]]);
function Diagram3Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Diagram3Fill);
  var svg = root720();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-diagram-3-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diagram3Fill = hmr(Diagram3Fill, () => Diagram3Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diagram3Fill[HMR].source;
    set(Diagram3Fill[HMR].source, module.default[HMR].original);
  });
}
var Diagram3Fill_default = Diagram3Fill;
mark_module_end(Diagram3Fill);

// node_modules/svelte-bootstrap-icons/lib/Diagram3.svelte
mark_module_start();
Diagram3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Diagram3.svelte";
var root721 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 3.5A1.5 1.5 0 0 1 7.5 2h1A1.5 1.5 0 0 1 10 3.5v1A1.5 1.5 0 0 1 8.5 6v1H14a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0v-1A.5.5 0 0 1 2 7h5.5V6A1.5 1.5 0 0 1 6 4.5v-1zM8.5 5a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1zM0 11.5A1.5 1.5 0 0 1 1.5 10h1A1.5 1.5 0 0 1 4 11.5v1A1.5 1.5 0 0 1 2.5 14h-1A1.5 1.5 0 0 1 0 12.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zm4.5.5A1.5 1.5 0 0 1 7.5 10h1a1.5 1.5 0 0 1 1.5 1.5v1A1.5 1.5 0 0 1 8.5 14h-1A1.5 1.5 0 0 1 6 12.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zm4.5.5a1.5 1.5 0 0 1 1.5-1.5h1a1.5 1.5 0 0 1 1.5 1.5v1a1.5 1.5 0 0 1-1.5 1.5h-1a1.5 1.5 0 0 1-1.5-1.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1z"></path></svg>`), Diagram3[FILENAME], [[1, 0, [[1, 170]]]]);
function Diagram3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Diagram3);
  var svg = root721();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-diagram-3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diagram3 = hmr(Diagram3, () => Diagram3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diagram3[HMR].source;
    set(Diagram3[HMR].source, module.default[HMR].original);
  });
}
var Diagram3_default = Diagram3;
mark_module_end(Diagram3);

// node_modules/svelte-bootstrap-icons/lib/DiamondFill.svelte
mark_module_start();
DiamondFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DiamondFill.svelte";
var root722 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435z"></path></svg>`), DiamondFill[FILENAME], [[1, 0, [[1, 173]]]]);
function DiamondFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DiamondFill);
  var svg = root722();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-diamond-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DiamondFill = hmr(DiamondFill, () => DiamondFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DiamondFill[HMR].source;
    set(DiamondFill[HMR].source, module.default[HMR].original);
  });
}
var DiamondFill_default = DiamondFill;
mark_module_end(DiamondFill);

// node_modules/svelte-bootstrap-icons/lib/DiamondHalf.svelte
mark_module_start();
DiamondHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DiamondHalf.svelte";
var root723 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435zM8 .989c.127 0 .253.049.35.145l6.516 6.516a.495.495 0 0 1 0 .7L8.35 14.866a.493.493 0 0 1-.35.145V.989z"></path></svg>`), DiamondHalf[FILENAME], [[1, 0, [[1, 173]]]]);
function DiamondHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DiamondHalf);
  var svg = root723();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-diamond-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DiamondHalf = hmr(DiamondHalf, () => DiamondHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DiamondHalf[HMR].source;
    set(DiamondHalf[HMR].source, module.default[HMR].original);
  });
}
var DiamondHalf_default = DiamondHalf;
mark_module_end(DiamondHalf);

// node_modules/svelte-bootstrap-icons/lib/Diamond.svelte
mark_module_start();
Diamond[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Diamond.svelte";
var root724 = add_locations(ns_template(`<svg><!><path d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435zm1.4.7a.495.495 0 0 0-.7 0L1.134 7.65a.495.495 0 0 0 0 .7l6.516 6.516a.495.495 0 0 0 .7 0l6.516-6.516a.495.495 0 0 0 0-.7L8.35 1.134z"></path></svg>`), Diamond[FILENAME], [[1, 0, [[1, 168]]]]);
function Diamond($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Diamond);
  var svg = root724();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-diamond", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diamond = hmr(Diamond, () => Diamond[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diamond[HMR].source;
    set(Diamond[HMR].source, module.default[HMR].original);
  });
}
var Diamond_default = Diamond;
mark_module_end(Diamond);

// node_modules/svelte-bootstrap-icons/lib/Dice1Fill.svelte
mark_module_start();
Dice1Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice1Fill.svelte";
var root725 = add_locations(ns_template(`<svg><!><path d="M3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3zm5 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), Dice1Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Dice1Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice1Fill);
  var svg = root725();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-1-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice1Fill = hmr(Dice1Fill, () => Dice1Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice1Fill[HMR].source;
    set(Dice1Fill[HMR].source, module.default[HMR].original);
  });
}
var Dice1Fill_default = Dice1Fill;
mark_module_end(Dice1Fill);

// node_modules/svelte-bootstrap-icons/lib/Dice1.svelte
mark_module_start();
Dice1[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice1.svelte";
var root726 = add_locations(ns_template(`<svg><!><circle cx="8" cy="8" r="1.5"></circle><path d="M13 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h10zM3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3z"></path></svg>`), Dice1[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Dice1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice1);
  var svg = root726();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-1", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice1 = hmr(Dice1, () => Dice1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice1[HMR].source;
    set(Dice1[HMR].source, module.default[HMR].original);
  });
}
var Dice1_default = Dice1;
mark_module_end(Dice1);

// node_modules/svelte-bootstrap-icons/lib/Dice2Fill.svelte
mark_module_start();
Dice2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice2Fill.svelte";
var root727 = add_locations(ns_template(`<svg><!><path d="M0 3a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3H3a3 3 0 0 1-3-3V3zm5.5 1a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0zm6.5 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"></path></svg>`), Dice2Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Dice2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice2Fill);
  var svg = root727();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice2Fill = hmr(Dice2Fill, () => Dice2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice2Fill[HMR].source;
    set(Dice2Fill[HMR].source, module.default[HMR].original);
  });
}
var Dice2Fill_default = Dice2Fill;
mark_module_end(Dice2Fill);

// node_modules/svelte-bootstrap-icons/lib/Dice2.svelte
mark_module_start();
Dice2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice2.svelte";
var root728 = add_locations(ns_template(`<svg><!><path d="M13 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h10zM3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3z"></path><path d="M5.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm8 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path></svg>`), Dice2[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Dice2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice2);
  var svg = root728();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice2 = hmr(Dice2, () => Dice2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice2[HMR].source;
    set(Dice2[HMR].source, module.default[HMR].original);
  });
}
var Dice2_default = Dice2;
mark_module_end(Dice2);

// node_modules/svelte-bootstrap-icons/lib/Dice3Fill.svelte
mark_module_start();
Dice3Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice3Fill.svelte";
var root729 = add_locations(ns_template(`<svg><!><path d="M3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3zm2.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm8 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zM8 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), Dice3Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Dice3Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice3Fill);
  var svg = root729();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-3-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice3Fill = hmr(Dice3Fill, () => Dice3Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice3Fill[HMR].source;
    set(Dice3Fill[HMR].source, module.default[HMR].original);
  });
}
var Dice3Fill_default = Dice3Fill;
mark_module_end(Dice3Fill);

// node_modules/svelte-bootstrap-icons/lib/Dice3.svelte
mark_module_start();
Dice3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice3.svelte";
var root730 = add_locations(ns_template(`<svg><!><path d="M13 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h10zM3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3z"></path><path d="M5.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm8 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-4-4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path></svg>`), Dice3[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Dice3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice3);
  var svg = root730();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice3 = hmr(Dice3, () => Dice3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice3[HMR].source;
    set(Dice3[HMR].source, module.default[HMR].original);
  });
}
var Dice3_default = Dice3;
mark_module_end(Dice3);

// node_modules/svelte-bootstrap-icons/lib/Dice4Fill.svelte
mark_module_start();
Dice4Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice4Fill.svelte";
var root731 = add_locations(ns_template(`<svg><!><path d="M3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3zm1 5.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm8 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm1.5 6.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zM4 13.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), Dice4Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Dice4Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice4Fill);
  var svg = root731();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-4-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice4Fill = hmr(Dice4Fill, () => Dice4Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice4Fill[HMR].source;
    set(Dice4Fill[HMR].source, module.default[HMR].original);
  });
}
var Dice4Fill_default = Dice4Fill;
mark_module_end(Dice4Fill);

// node_modules/svelte-bootstrap-icons/lib/Dice4.svelte
mark_module_start();
Dice4[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice4.svelte";
var root732 = add_locations(ns_template(`<svg><!><path d="M13 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h10zM3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3z"></path><path d="M5.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm8 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-8 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path></svg>`), Dice4[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Dice4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice4);
  var svg = root732();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-4", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice4 = hmr(Dice4, () => Dice4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice4[HMR].source;
    set(Dice4[HMR].source, module.default[HMR].original);
  });
}
var Dice4_default = Dice4;
mark_module_end(Dice4);

// node_modules/svelte-bootstrap-icons/lib/Dice5Fill.svelte
mark_module_start();
Dice5Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice5Fill.svelte";
var root733 = add_locations(ns_template(`<svg><!><path d="M3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3zm2.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm8 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zM12 13.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM5.5 12a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zM8 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), Dice5Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Dice5Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice5Fill);
  var svg = root733();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-5-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice5Fill = hmr(Dice5Fill, () => Dice5Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice5Fill[HMR].source;
    set(Dice5Fill[HMR].source, module.default[HMR].original);
  });
}
var Dice5Fill_default = Dice5Fill;
mark_module_end(Dice5Fill);

// node_modules/svelte-bootstrap-icons/lib/Dice5.svelte
mark_module_start();
Dice5[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice5.svelte";
var root734 = add_locations(ns_template(`<svg><!><path d="M13 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h10zM3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3z"></path><path d="M5.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm8 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-8 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm4-4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path></svg>`), Dice5[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Dice5($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice5);
  var svg = root734();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-5", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice5 = hmr(Dice5, () => Dice5[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice5[HMR].source;
    set(Dice5[HMR].source, module.default[HMR].original);
  });
}
var Dice5_default = Dice5;
mark_module_end(Dice5);

// node_modules/svelte-bootstrap-icons/lib/Dice6Fill.svelte
mark_module_start();
Dice6Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice6Fill.svelte";
var root735 = add_locations(ns_template(`<svg><!><path d="M3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3zm1 5.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm8 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm1.5 6.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zM12 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM5.5 12a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zM4 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), Dice6Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Dice6Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice6Fill);
  var svg = root735();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-6-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice6Fill = hmr(Dice6Fill, () => Dice6Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice6Fill[HMR].source;
    set(Dice6Fill[HMR].source, module.default[HMR].original);
  });
}
var Dice6Fill_default = Dice6Fill;
mark_module_end(Dice6Fill);

// node_modules/svelte-bootstrap-icons/lib/Dice6.svelte
mark_module_start();
Dice6[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dice6.svelte";
var root736 = add_locations(ns_template(`<svg><!><path d="M13 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h10zM3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3H3z"></path><path d="M5.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm8 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-8 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path></svg>`), Dice6[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Dice6($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dice6);
  var svg = root736();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dice-6", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice6 = hmr(Dice6, () => Dice6[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice6[HMR].source;
    set(Dice6[HMR].source, module.default[HMR].original);
  });
}
var Dice6_default = Dice6;
mark_module_end(Dice6);

// node_modules/svelte-bootstrap-icons/lib/DiscFill.svelte
mark_module_start();
DiscFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DiscFill.svelte";
var root737 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-6 0a2 2 0 1 0-4 0 2 2 0 0 0 4 0zM4 8a4 4 0 0 1 4-4 .5.5 0 0 0 0-1 5 5 0 0 0-5 5 .5.5 0 0 0 1 0zm9 0a.5.5 0 1 0-1 0 4 4 0 0 1-4 4 .5.5 0 0 0 0 1 5 5 0 0 0 5-5z"></path></svg>`), DiscFill[FILENAME], [[1, 0, [[1, 170]]]]);
function DiscFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DiscFill);
  var svg = root737();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-disc-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DiscFill = hmr(DiscFill, () => DiscFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DiscFill[HMR].source;
    set(DiscFill[HMR].source, module.default[HMR].original);
  });
}
var DiscFill_default = DiscFill;
mark_module_end(DiscFill);

// node_modules/svelte-bootstrap-icons/lib/Disc.svelte
mark_module_start();
Disc[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Disc.svelte";
var root738 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0zM8 4a4 4 0 0 0-4 4 .5.5 0 0 1-1 0 5 5 0 0 1 5-5 .5.5 0 0 1 0 1zm4.5 3.5a.5.5 0 0 1 .5.5 5 5 0 0 1-5 5 .5.5 0 0 1 0-1 4 4 0 0 0 4-4 .5.5 0 0 1 .5-.5z"></path></svg>`), Disc[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Disc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Disc);
  var svg = root738();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-disc", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Disc = hmr(Disc, () => Disc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Disc[HMR].source;
    set(Disc[HMR].source, module.default[HMR].original);
  });
}
var Disc_default = Disc;
mark_module_end(Disc);

// node_modules/svelte-bootstrap-icons/lib/Discord.svelte
mark_module_start();
Discord[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Discord.svelte";
var root739 = add_locations(ns_template(`<svg><!><path d="M13.545 2.907a13.227 13.227 0 0 0-3.257-1.011.05.05 0 0 0-.052.025c-.141.25-.297.577-.406.833a12.19 12.19 0 0 0-3.658 0 8.258 8.258 0 0 0-.412-.833.051.051 0 0 0-.052-.025c-1.125.194-2.22.534-3.257 1.011a.041.041 0 0 0-.021.018C.356 6.024-.213 9.047.066 12.032c.001.014.01.028.021.037a13.276 13.276 0 0 0 3.995 2.02.05.05 0 0 0 .056-.019c.308-.42.582-.863.818-1.329a.05.05 0 0 0-.01-.059.051.051 0 0 0-.018-.011 8.875 8.875 0 0 1-1.248-.595.05.05 0 0 1-.02-.066.051.051 0 0 1 .015-.019c.084-.063.168-.129.248-.195a.05.05 0 0 1 .051-.007c2.619 1.196 5.454 1.196 8.041 0a.052.052 0 0 1 .053.007c.08.066.164.132.248.195a.051.051 0 0 1-.004.085 8.254 8.254 0 0 1-1.249.594.05.05 0 0 0-.03.03.052.052 0 0 0 .003.041c.24.465.515.909.817 1.329a.05.05 0 0 0 .056.019 13.235 13.235 0 0 0 4.001-2.02.049.049 0 0 0 .021-.037c.334-3.451-.559-6.449-2.366-9.106a.034.034 0 0 0-.02-.019Zm-8.198 7.307c-.789 0-1.438-.724-1.438-1.612 0-.889.637-1.613 1.438-1.613.807 0 1.45.73 1.438 1.613 0 .888-.637 1.612-1.438 1.612Zm5.316 0c-.788 0-1.438-.724-1.438-1.612 0-.889.637-1.613 1.438-1.613.807 0 1.451.73 1.438 1.613 0 .888-.631 1.612-1.438 1.612Z"></path></svg>`), Discord[FILENAME], [[1, 0, [[1, 168]]]]);
function Discord($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Discord);
  var svg = root739();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-discord", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Discord = hmr(Discord, () => Discord[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Discord[HMR].source;
    set(Discord[HMR].source, module.default[HMR].original);
  });
}
var Discord_default = Discord;
mark_module_end(Discord);

// node_modules/svelte-bootstrap-icons/lib/DisplayFill.svelte
mark_module_start();
DisplayFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DisplayFill.svelte";
var root740 = add_locations(ns_template(`<svg><!><path d="M6 12c0 .667-.083 1.167-.25 1.5H5a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-.75c-.167-.333-.25-.833-.25-1.5h4c2 0 2-2 2-2V4c0-2-2-2-2-2H2C0 2 0 4 0 4v6c0 2 2 2 2 2h4z"></path></svg>`), DisplayFill[FILENAME], [[1, 0, [[1, 173]]]]);
function DisplayFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DisplayFill);
  var svg = root740();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-display-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DisplayFill = hmr(DisplayFill, () => DisplayFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DisplayFill[HMR].source;
    set(DisplayFill[HMR].source, module.default[HMR].original);
  });
}
var DisplayFill_default = DisplayFill;
mark_module_end(DisplayFill);

// node_modules/svelte-bootstrap-icons/lib/Display.svelte
mark_module_start();
Display[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Display.svelte";
var root741 = add_locations(ns_template(`<svg><!><path d="M0 4s0-2 2-2h12s2 0 2 2v6s0 2-2 2h-4c0 .667.083 1.167.25 1.5H11a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1h.75c.167-.333.25-.833.25-1.5H2s-2 0-2-2V4zm1.398-.855a.758.758 0 0 0-.254.302A1.46 1.46 0 0 0 1 4.01V10c0 .325.078.502.145.602.07.105.17.188.302.254a1.464 1.464 0 0 0 .538.143L2.01 11H14c.325 0 .502-.078.602-.145a.758.758 0 0 0 .254-.302 1.464 1.464 0 0 0 .143-.538L15 9.99V4c0-.325-.078-.502-.145-.602a.757.757 0 0 0-.302-.254A1.46 1.46 0 0 0 13.99 3H2c-.325 0-.502.078-.602.145z"></path></svg>`), Display[FILENAME], [[1, 0, [[1, 168]]]]);
function Display($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Display);
  var svg = root741();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-display", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Display = hmr(Display, () => Display[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Display[HMR].source;
    set(Display[HMR].source, module.default[HMR].original);
  });
}
var Display_default = Display;
mark_module_end(Display);

// node_modules/svelte-bootstrap-icons/lib/DisplayportFill.svelte
mark_module_start();
DisplayportFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DisplayportFill.svelte";
var root742 = add_locations(ns_template(`<svg><!><path d="M1 5a1 1 0 0 0-1 1v3.191a1 1 0 0 0 .553.894l1.618.81a1 1 0 0 0 .447.105H15a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H1Zm1.5 2h11a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0V8H3v.5a.5.5 0 0 1-1 0v-1a.5.5 0 0 1 .5-.5Z"></path></svg>`), DisplayportFill[FILENAME], [[1, 0, [[1, 177]]]]);
function DisplayportFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DisplayportFill);
  var svg = root742();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-displayport-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DisplayportFill = hmr(DisplayportFill, () => DisplayportFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DisplayportFill[HMR].source;
    set(DisplayportFill[HMR].source, module.default[HMR].original);
  });
}
var DisplayportFill_default = DisplayportFill;
mark_module_end(DisplayportFill);

// node_modules/svelte-bootstrap-icons/lib/Displayport.svelte
mark_module_start();
Displayport[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Displayport.svelte";
var root743 = add_locations(ns_template(`<svg><!><path d="M2.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 1 0V8h10v.5a.5.5 0 0 0 1 0v-1a.5.5 0 0 0-.5-.5h-11Z"></path><path d="M1 5a1 1 0 0 0-1 1v3.191a1 1 0 0 0 .553.894l1.618.81a1 1 0 0 0 .447.105H15a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H1Zm0 1h14v4H2.618L1 9.191V6Z"></path></svg>`), Displayport[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Displayport($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Displayport);
  var svg = root743();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-displayport", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Displayport = hmr(Displayport, () => Displayport[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Displayport[HMR].source;
    set(Displayport[HMR].source, module.default[HMR].original);
  });
}
var Displayport_default = Displayport;
mark_module_end(Displayport);

// node_modules/svelte-bootstrap-icons/lib/DistributeHorizontal.svelte
mark_module_start();
DistributeHorizontal[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DistributeHorizontal.svelte";
var root744 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 1 0v-13a.5.5 0 0 0-.5-.5zm-13 0a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 1 0v-13a.5.5 0 0 0-.5-.5z"></path><path d="M6 13a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v10z"></path></svg>`), DistributeHorizontal[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function DistributeHorizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DistributeHorizontal);
  var svg = root744();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-distribute-horizontal", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DistributeHorizontal = hmr(DistributeHorizontal, () => DistributeHorizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DistributeHorizontal[HMR].source;
    set(DistributeHorizontal[HMR].source, module.default[HMR].original);
  });
}
var DistributeHorizontal_default = DistributeHorizontal;
mark_module_end(DistributeHorizontal);

// node_modules/svelte-bootstrap-icons/lib/DistributeVertical.svelte
mark_module_start();
DistributeVertical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DistributeVertical.svelte";
var root745 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 1.5a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 0-1h-13a.5.5 0 0 0-.5.5zm0 13a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 0-1h-13a.5.5 0 0 0-.5.5z"></path><path d="M2 7a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7z"></path></svg>`), DistributeVertical[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function DistributeVertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DistributeVertical);
  var svg = root745();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-distribute-vertical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DistributeVertical = hmr(DistributeVertical, () => DistributeVertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DistributeVertical[HMR].source;
    set(DistributeVertical[HMR].source, module.default[HMR].original);
  });
}
var DistributeVertical_default = DistributeVertical;
mark_module_end(DistributeVertical);

// node_modules/svelte-bootstrap-icons/lib/DoorClosedFill.svelte
mark_module_start();
DoorClosedFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DoorClosedFill.svelte";
var root746 = add_locations(ns_template(`<svg><!><path d="M12 1a1 1 0 0 1 1 1v13h1.5a.5.5 0 0 1 0 1h-13a.5.5 0 0 1 0-1H3V2a1 1 0 0 1 1-1h8zm-2 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), DoorClosedFill[FILENAME], [[1, 0, [[1, 177]]]]);
function DoorClosedFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DoorClosedFill);
  var svg = root746();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-door-closed-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DoorClosedFill = hmr(DoorClosedFill, () => DoorClosedFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DoorClosedFill[HMR].source;
    set(DoorClosedFill[HMR].source, module.default[HMR].original);
  });
}
var DoorClosedFill_default = DoorClosedFill;
mark_module_end(DoorClosedFill);

// node_modules/svelte-bootstrap-icons/lib/DoorClosed.svelte
mark_module_start();
DoorClosed[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DoorClosed.svelte";
var root747 = add_locations(ns_template(`<svg><!><path d="M3 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v13h1.5a.5.5 0 0 1 0 1h-13a.5.5 0 0 1 0-1H3V2zm1 13h8V2H4v13z"></path><path d="M9 9a1 1 0 1 0 2 0 1 1 0 0 0-2 0z"></path></svg>`), DoorClosed[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function DoorClosed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DoorClosed);
  var svg = root747();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-door-closed", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DoorClosed = hmr(DoorClosed, () => DoorClosed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DoorClosed[HMR].source;
    set(DoorClosed[HMR].source, module.default[HMR].original);
  });
}
var DoorClosed_default = DoorClosed;
mark_module_end(DoorClosed);

// node_modules/svelte-bootstrap-icons/lib/DoorOpenFill.svelte
mark_module_start();
DoorOpenFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DoorOpenFill.svelte";
var root748 = add_locations(ns_template(`<svg><!><path d="M1.5 15a.5.5 0 0 0 0 1h13a.5.5 0 0 0 0-1H13V2.5A1.5 1.5 0 0 0 11.5 1H11V.5a.5.5 0 0 0-.57-.495l-7 1A.5.5 0 0 0 3 1.5V15H1.5zM11 2h.5a.5.5 0 0 1 .5.5V15h-1V2zm-2.5 8c-.276 0-.5-.448-.5-1s.224-1 .5-1 .5.448.5 1-.224 1-.5 1z"></path></svg>`), DoorOpenFill[FILENAME], [[1, 0, [[1, 175]]]]);
function DoorOpenFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DoorOpenFill);
  var svg = root748();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-door-open-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DoorOpenFill = hmr(DoorOpenFill, () => DoorOpenFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DoorOpenFill[HMR].source;
    set(DoorOpenFill[HMR].source, module.default[HMR].original);
  });
}
var DoorOpenFill_default = DoorOpenFill;
mark_module_end(DoorOpenFill);

// node_modules/svelte-bootstrap-icons/lib/DoorOpen.svelte
mark_module_start();
DoorOpen[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DoorOpen.svelte";
var root749 = add_locations(ns_template(`<svg><!><path d="M8.5 10c-.276 0-.5-.448-.5-1s.224-1 .5-1 .5.448.5 1-.224 1-.5 1z"></path><path d="M10.828.122A.5.5 0 0 1 11 .5V1h.5A1.5 1.5 0 0 1 13 2.5V15h1.5a.5.5 0 0 1 0 1h-13a.5.5 0 0 1 0-1H3V1.5a.5.5 0 0 1 .43-.495l7-1a.5.5 0 0 1 .398.117zM11.5 2H11v13h1V2.5a.5.5 0 0 0-.5-.5zM4 1.934V15h6V1.077l-6 .857z"></path></svg>`), DoorOpen[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function DoorOpen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DoorOpen);
  var svg = root749();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-door-open", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DoorOpen = hmr(DoorOpen, () => DoorOpen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DoorOpen[HMR].source;
    set(DoorOpen[HMR].source, module.default[HMR].original);
  });
}
var DoorOpen_default = DoorOpen;
mark_module_end(DoorOpen);

// node_modules/svelte-bootstrap-icons/lib/Dot.svelte
mark_module_start();
Dot[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dot.svelte";
var root750 = add_locations(ns_template(`<svg><!><path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"></path></svg>`), Dot[FILENAME], [[1, 0, [[1, 164]]]]);
function Dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dot);
  var svg = root750();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dot", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dot = hmr(Dot, () => Dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dot[HMR].source;
    set(Dot[HMR].source, module.default[HMR].original);
  });
}
var Dot_default = Dot;
mark_module_end(Dot);

// node_modules/svelte-bootstrap-icons/lib/Download.svelte
mark_module_start();
Download[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Download.svelte";
var root751 = add_locations(ns_template(`<svg><!><path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"></path><path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"></path></svg>`), Download[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Download($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Download);
  var svg = root751();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-download", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Download = hmr(Download, () => Download[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Download[HMR].source;
    set(Download[HMR].source, module.default[HMR].original);
  });
}
var Download_default = Download;
mark_module_end(Download);

// node_modules/svelte-bootstrap-icons/lib/DpadFill.svelte
mark_module_start();
DpadFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DpadFill.svelte";
var root752 = add_locations(ns_template(`<svg><!><path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v3a.5.5 0 0 1-.5.5h-3A1.5 1.5 0 0 0 0 6.5v3A1.5 1.5 0 0 0 1.5 11h3a.5.5 0 0 1 .5.5v3A1.5 1.5 0 0 0 6.5 16h3a1.5 1.5 0 0 0 1.5-1.5v-3a.5.5 0 0 1 .5-.5h3A1.5 1.5 0 0 0 16 9.5v-3A1.5 1.5 0 0 0 14.5 5h-3a.5.5 0 0 1-.5-.5v-3A1.5 1.5 0 0 0 9.5 0h-3Zm1.288 2.34a.25.25 0 0 1 .424 0l.799 1.278A.25.25 0 0 1 8.799 4H7.201a.25.25 0 0 1-.212-.382l.799-1.279Zm0 11.32-.799-1.277A.25.25 0 0 1 7.201 12H8.8a.25.25 0 0 1 .212.383l-.799 1.278a.25.25 0 0 1-.424 0Zm-4.17-4.65-1.279-.798a.25.25 0 0 1 0-.424l1.279-.799A.25.25 0 0 1 4 7.201V8.8a.25.25 0 0 1-.382.212Zm10.043-.798-1.278.799A.25.25 0 0 1 12 8.799V7.2a.25.25 0 0 1 .383-.212l1.278.799a.25.25 0 0 1 0 .424Z"></path></svg>`), DpadFill[FILENAME], [[1, 0, [[1, 170]]]]);
function DpadFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DpadFill);
  var svg = root752();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dpad-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DpadFill = hmr(DpadFill, () => DpadFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DpadFill[HMR].source;
    set(DpadFill[HMR].source, module.default[HMR].original);
  });
}
var DpadFill_default = DpadFill;
mark_module_end(DpadFill);

// node_modules/svelte-bootstrap-icons/lib/Dpad.svelte
mark_module_start();
Dpad[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dpad.svelte";
var root753 = add_locations(ns_template(`<svg><!><path d="m7.788 2.34-.799 1.278A.25.25 0 0 0 7.201 4h1.598a.25.25 0 0 0 .212-.382l-.799-1.279a.25.25 0 0 0-.424 0Zm0 11.32-.799-1.277A.25.25 0 0 1 7.201 12h1.598a.25.25 0 0 1 .212.383l-.799 1.278a.25.25 0 0 1-.424 0ZM3.617 9.01 2.34 8.213a.25.25 0 0 1 0-.424l1.278-.799A.25.25 0 0 1 4 7.201V8.8a.25.25 0 0 1-.383.212Zm10.043-.798-1.277.799A.25.25 0 0 1 12 8.799V7.2a.25.25 0 0 1 .383-.212l1.278.799a.25.25 0 0 1 0 .424Z"></path><path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v3a.5.5 0 0 1-.5.5h-3A1.5 1.5 0 0 0 0 6.5v3A1.5 1.5 0 0 0 1.5 11h3a.5.5 0 0 1 .5.5v3A1.5 1.5 0 0 0 6.5 16h3a1.5 1.5 0 0 0 1.5-1.5v-3a.5.5 0 0 1 .5-.5h3A1.5 1.5 0 0 0 16 9.5v-3A1.5 1.5 0 0 0 14.5 5h-3a.5.5 0 0 1-.5-.5v-3A1.5 1.5 0 0 0 9.5 0h-3ZM6 1.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v3A1.5 1.5 0 0 0 11.5 6h3a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-3a1.5 1.5 0 0 0-1.5 1.5v3a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-3A1.5 1.5 0 0 0 4.5 10h-3a.5.5 0 0 1-.5-.5v-3a.5.5 0 0 1 .5-.5h3A1.5 1.5 0 0 0 6 4.5v-3Z"></path></svg>`), Dpad[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Dpad($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dpad);
  var svg = root753();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dpad", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dpad = hmr(Dpad, () => Dpad[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dpad[HMR].source;
    set(Dpad[HMR].source, module.default[HMR].original);
  });
}
var Dpad_default = Dpad;
mark_module_end(Dpad);

// node_modules/svelte-bootstrap-icons/lib/Dribbble.svelte
mark_module_start();
Dribbble[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dribbble.svelte";
var root754 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0C3.584 0 0 3.584 0 8s3.584 8 8 8c4.408 0 8-3.584 8-8s-3.592-8-8-8zm5.284 3.688a6.802 6.802 0 0 1 1.545 4.251c-.226-.043-2.482-.503-4.755-.217-.052-.112-.096-.234-.148-.355-.139-.33-.295-.668-.451-.99 2.516-1.023 3.662-2.498 3.81-2.69zM8 1.18c1.735 0 3.323.65 4.53 1.718-.122.174-1.155 1.553-3.584 2.464-1.12-2.056-2.36-3.74-2.551-4A6.95 6.95 0 0 1 8 1.18zm-2.907.642A43.123 43.123 0 0 1 7.627 5.77c-3.193.85-6.013.833-6.317.833a6.865 6.865 0 0 1 3.783-4.78zM1.163 8.01V7.8c.295.01 3.61.053 7.02-.971.199.381.381.772.555 1.162l-.27.078c-3.522 1.137-5.396 4.243-5.553 4.504a6.817 6.817 0 0 1-1.752-4.564zM8 14.837a6.785 6.785 0 0 1-4.19-1.44c.12-.252 1.509-2.924 5.361-4.269.018-.009.026-.009.044-.017a28.246 28.246 0 0 1 1.457 5.18A6.722 6.722 0 0 1 8 14.837zm3.81-1.171c-.07-.417-.435-2.412-1.328-4.868 2.143-.338 4.017.217 4.251.295a6.774 6.774 0 0 1-2.924 4.573z"></path></svg>`), Dribbble[FILENAME], [[1, 0, [[1, 169]]]]);
function Dribbble($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dribbble);
  var svg = root754();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dribbble", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dribbble = hmr(Dribbble, () => Dribbble[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dribbble[HMR].source;
    set(Dribbble[HMR].source, module.default[HMR].original);
  });
}
var Dribbble_default = Dribbble;
mark_module_end(Dribbble);

// node_modules/svelte-bootstrap-icons/lib/Dropbox.svelte
mark_module_start();
Dropbox[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Dropbox.svelte";
var root755 = add_locations(ns_template(`<svg><!><path d="M8.01 4.555 4.005 7.11 8.01 9.665 4.005 12.22 0 9.651l4.005-2.555L0 4.555 4.005 2 8.01 4.555Zm-4.026 8.487 4.006-2.555 4.005 2.555-4.005 2.555-4.006-2.555Zm4.026-3.39 4.005-2.556L8.01 4.555 11.995 2 16 4.555 11.995 7.11 16 9.665l-4.005 2.555L8.01 9.651Z"></path></svg>`), Dropbox[FILENAME], [[1, 0, [[1, 168]]]]);
function Dropbox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Dropbox);
  var svg = root755();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-dropbox", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dropbox = hmr(Dropbox, () => Dropbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dropbox[HMR].source;
    set(Dropbox[HMR].source, module.default[HMR].original);
  });
}
var Dropbox_default = Dropbox;
mark_module_end(Dropbox);

// node_modules/svelte-bootstrap-icons/lib/DropletFill.svelte
mark_module_start();
DropletFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DropletFill.svelte";
var root756 = add_locations(ns_template(`<svg><!><path d="M8 16a6 6 0 0 0 6-6c0-1.655-1.122-2.904-2.432-4.362C10.254 4.176 8.75 2.503 8 0c0 0-6 5.686-6 10a6 6 0 0 0 6 6ZM6.646 4.646l.708.708c-.29.29-1.128 1.311-1.907 2.87l-.894-.448c.82-1.641 1.717-2.753 2.093-3.13Z"></path></svg>`), DropletFill[FILENAME], [[1, 0, [[1, 173]]]]);
function DropletFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DropletFill);
  var svg = root756();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-droplet-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DropletFill = hmr(DropletFill, () => DropletFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropletFill[HMR].source;
    set(DropletFill[HMR].source, module.default[HMR].original);
  });
}
var DropletFill_default = DropletFill;
mark_module_end(DropletFill);

// node_modules/svelte-bootstrap-icons/lib/DropletHalf.svelte
mark_module_start();
DropletHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DropletHalf.svelte";
var root757 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.21.8C7.69.295 8 0 8 0c.109.363.234.708.371 1.038.812 1.946 2.073 3.35 3.197 4.6C12.878 7.096 14 8.345 14 10a6 6 0 0 1-12 0C2 6.668 5.58 2.517 7.21.8zm.413 1.021A31.25 31.25 0 0 0 5.794 3.99c-.726.95-1.436 2.008-1.96 3.07C3.304 8.133 3 9.138 3 10c0 0 2.5 1.5 5 .5s5-.5 5-.5c0-1.201-.796-2.157-2.181-3.7l-.03-.032C9.75 5.11 8.5 3.72 7.623 1.82z"></path><path fill-rule="evenodd" d="M4.553 7.776c.82-1.641 1.717-2.753 2.093-3.13l.708.708c-.29.29-1.128 1.311-1.907 2.87l-.894-.448z"></path></svg>`), DropletHalf[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function DropletHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DropletHalf);
  var svg = root757();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-droplet-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DropletHalf = hmr(DropletHalf, () => DropletHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropletHalf[HMR].source;
    set(DropletHalf[HMR].source, module.default[HMR].original);
  });
}
var DropletHalf_default = DropletHalf;
mark_module_end(DropletHalf);

// node_modules/svelte-bootstrap-icons/lib/Droplet.svelte
mark_module_start();
Droplet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Droplet.svelte";
var root758 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.21.8C7.69.295 8 0 8 0c.109.363.234.708.371 1.038.812 1.946 2.073 3.35 3.197 4.6C12.878 7.096 14 8.345 14 10a6 6 0 0 1-12 0C2 6.668 5.58 2.517 7.21.8zm.413 1.021A31.25 31.25 0 0 0 5.794 3.99c-.726.95-1.436 2.008-1.96 3.07C3.304 8.133 3 9.138 3 10a5 5 0 0 0 10 0c0-1.201-.796-2.157-2.181-3.7l-.03-.032C9.75 5.11 8.5 3.72 7.623 1.82z"></path><path fill-rule="evenodd" d="M4.553 7.776c.82-1.641 1.717-2.753 2.093-3.13l.708.708c-.29.29-1.128 1.311-1.907 2.87l-.894-.448z"></path></svg>`), Droplet[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Droplet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Droplet);
  var svg = root758();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-droplet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Droplet = hmr(Droplet, () => Droplet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Droplet[HMR].source;
    set(Droplet[HMR].source, module.default[HMR].original);
  });
}
var Droplet_default = Droplet;
mark_module_end(Droplet);

// node_modules/svelte-bootstrap-icons/lib/DuffleFill.svelte
mark_module_start();
DuffleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/DuffleFill.svelte";
var root759 = add_locations(ns_template(`<svg><!><path d="M5.007 4.097c.008-.097.016-.197.027-.298.05-.464.141-.979.313-1.45.169-.465.432-.933.853-1.249 1.115-.836 2.485-.836 3.6 0 .42.316.684.784.853 1.25.171.47.263.985.313 1.449.01.1.02.2.027.298 1.401.194 2.65.531 3.525 1.012 2.126 1.169 1.446 6.095 1.089 8.018a.954.954 0 0 1-.95.772H1.343a.954.954 0 0 1-.95-.772c-.357-1.923-1.037-6.85 1.09-8.018.873-.48 2.123-.818 3.524-1.012ZM4.05 5.633a21.876 21.876 0 0 0-1.565.352l-.091.026-.034.01a.5.5 0 0 0 .282.959l.005-.002.02-.005.08-.023a20.874 20.874 0 0 1 1.486-.334A20.942 20.942 0 0 1 8 6.25c1.439 0 2.781.183 3.767.367a20.854 20.854 0 0 1 1.567.356l.02.005.004.001a.5.5 0 0 0 .283-.959h-.003l-.006-.002-.025-.007a14.787 14.787 0 0 0-.43-.113 21.87 21.87 0 0 0-1.226-.265A21.939 21.939 0 0 0 8 5.25c-1.518 0-2.926.192-3.95.383ZM6.8 1.9c-.203.153-.377.42-.513.791a5.258 5.258 0 0 0-.265 1.292 34.54 34.54 0 0 1 1.374-.076c.866-.022 1.742.003 2.584.076a5.258 5.258 0 0 0-.266-1.292c-.135-.372-.309-.638-.513-.791-.76-.57-1.64-.57-2.4 0Z"></path></svg>`), DuffleFill[FILENAME], [[1, 0, [[1, 172]]]]);
function DuffleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, DuffleFill);
  var svg = root759();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-duffle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DuffleFill = hmr(DuffleFill, () => DuffleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DuffleFill[HMR].source;
    set(DuffleFill[HMR].source, module.default[HMR].original);
  });
}
var DuffleFill_default = DuffleFill;
mark_module_end(DuffleFill);

// node_modules/svelte-bootstrap-icons/lib/Duffle.svelte
mark_module_start();
Duffle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Duffle.svelte";
var root760 = add_locations(ns_template(`<svg><!><path d="M8 5.75c1.388 0 2.673.193 3.609.385a18.404 18.404 0 0 1 1.43.354l.112.034.002.001h.001a.5.5 0 0 1-.308.952l-.004-.002-.018-.005a17.416 17.416 0 0 0-1.417-.354A17.282 17.282 0 0 0 8 6.75a17.3 17.3 0 0 0-3.408.365 17.42 17.42 0 0 0-1.416.354l-.018.005-.003.001a.5.5 0 1 1-.308-.95A17.26 17.26 0 0 1 8 5.75Z"></path><path d="M5.229 2.722c-.126.461-.19.945-.222 1.375-1.401.194-2.65.531-3.525 1.012C-.644 6.278.036 11.204.393 13.127a.954.954 0 0 0 .95.772h13.314a.954.954 0 0 0 .95-.772c.357-1.923 1.037-6.85-1.09-8.018-.873-.48-2.123-.818-3.524-1.012a7.361 7.361 0 0 0-.222-1.375c-.162-.593-.445-1.228-.971-1.622-1.115-.836-2.485-.836-3.6 0-.526.394-.81 1.03-.971 1.622ZM9.2 1.9c.26.195.466.57.606 1.085.088.322.142.667.173.998a23.307 23.307 0 0 0-3.958 0 6.06 6.06 0 0 1 .173-.998c.14-.515.346-.89.606-1.085.76-.57 1.64-.57 2.4 0ZM8 4.9c2.475 0 4.793.402 6.036 1.085.238.13.472.406.655.93.183.522.28 1.195.303 1.952.047 1.486-.189 3.088-.362 4.032H1.368c-.173-.944-.409-2.545-.362-4.032.024-.757.12-1.43.303-1.952.183-.524.417-.8.655-.93C3.207 5.302 5.525 4.9 8 4.9Z"></path></svg>`), Duffle[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Duffle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Duffle);
  var svg = root760();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-duffle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Duffle = hmr(Duffle, () => Duffle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Duffle[HMR].source;
    set(Duffle[HMR].source, module.default[HMR].original);
  });
}
var Duffle_default = Duffle;
mark_module_end(Duffle);

// node_modules/svelte-bootstrap-icons/lib/EarFill.svelte
mark_module_start();
EarFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EarFill.svelte";
var root761 = add_locations(ns_template(`<svg><!><path d="M8.5 0A5.5 5.5 0 0 0 3 5.5v7.047a3.453 3.453 0 0 0 6.687 1.212l.51-1.363a4.59 4.59 0 0 1 .67-1.197l2.008-2.581A5.34 5.34 0 0 0 8.66 0H8.5ZM7 5.5v2.695c.112-.06.223-.123.332-.192.327-.208.577-.44.72-.727a.5.5 0 1 1 .895.448c-.256.513-.673.865-1.079 1.123A8.538 8.538 0 0 1 7 9.313V11.5a.5.5 0 0 1-1 0v-6a2.5 2.5 0 0 1 5 0V6a.5.5 0 0 1-1 0v-.5a1.5 1.5 0 1 0-3 0Z"></path></svg>`), EarFill[FILENAME], [[1, 0, [[1, 169]]]]);
function EarFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EarFill);
  var svg = root761();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ear-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EarFill = hmr(EarFill, () => EarFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EarFill[HMR].source;
    set(EarFill[HMR].source, module.default[HMR].original);
  });
}
var EarFill_default = EarFill;
mark_module_end(EarFill);

// node_modules/svelte-bootstrap-icons/lib/Ear.svelte
mark_module_start();
Ear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Ear.svelte";
var root762 = add_locations(ns_template(`<svg><!><path d="M8.5 1A4.5 4.5 0 0 0 4 5.5v7.047a2.453 2.453 0 0 0 4.75.861l.512-1.363a5.553 5.553 0 0 1 .816-1.46l2.008-2.581A4.34 4.34 0 0 0 8.66 1H8.5ZM3 5.5A5.5 5.5 0 0 1 8.5 0h.16a5.34 5.34 0 0 1 4.215 8.618l-2.008 2.581a4.555 4.555 0 0 0-.67 1.197l-.51 1.363A3.453 3.453 0 0 1 3 12.547V5.5ZM8.5 4A1.5 1.5 0 0 0 7 5.5v2.695c.112-.06.223-.123.332-.192.327-.208.577-.44.72-.727a.5.5 0 1 1 .895.448c-.256.513-.673.865-1.079 1.123A8.538 8.538 0 0 1 7 9.313V11.5a.5.5 0 0 1-1 0v-6a2.5 2.5 0 0 1 5 0V6a.5.5 0 0 1-1 0v-.5A1.5 1.5 0 0 0 8.5 4Z"></path></svg>`), Ear[FILENAME], [[1, 0, [[1, 164]]]]);
function Ear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Ear);
  var svg = root762();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ear = hmr(Ear, () => Ear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ear[HMR].source;
    set(Ear[HMR].source, module.default[HMR].original);
  });
}
var Ear_default = Ear;
mark_module_end(Ear);

// node_modules/svelte-bootstrap-icons/lib/Earbuds.svelte
mark_module_start();
Earbuds[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Earbuds.svelte";
var root763 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.825 4.138c.596 2.141-.36 3.593-2.389 4.117a4.432 4.432 0 0 1-2.018.054c-.048-.01.9 2.778 1.522 4.61l.41 1.205a.52.52 0 0 1-.346.659l-.593.19a.548.548 0 0 1-.69-.34L.184 6.99c-.696-2.137.662-4.309 2.564-4.8 2.029-.523 3.402 0 4.076 1.948zm-.868 2.221c.43-.112.561-.993.292-1.969-.269-.975-.836-1.675-1.266-1.563-.43.112-.561.994-.292 1.969.269.975.836 1.675 1.266 1.563zm3.218-2.221c-.596 2.141.36 3.593 2.389 4.117a4.434 4.434 0 0 0 2.018.054c.048-.01-.9 2.778-1.522 4.61l-.41 1.205a.52.52 0 0 0 .346.659l.593.19c.289.092.6-.06.69-.34l2.536-7.643c.696-2.137-.662-4.309-2.564-4.8-2.029-.523-3.402 0-4.076 1.948zm.868 2.221c-.43-.112-.561-.993-.292-1.969.269-.975.836-1.675 1.266-1.563.43.112.561.994.292 1.969-.269.975-.836 1.675-1.266 1.563z"></path></svg>`), Earbuds[FILENAME], [[1, 0, [[1, 168]]]]);
function Earbuds($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Earbuds);
  var svg = root763();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-earbuds", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Earbuds = hmr(Earbuds, () => Earbuds[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Earbuds[HMR].source;
    set(Earbuds[HMR].source, module.default[HMR].original);
  });
}
var Earbuds_default = Earbuds;
mark_module_end(Earbuds);

// node_modules/svelte-bootstrap-icons/lib/EaselFill.svelte
mark_module_start();
EaselFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EaselFill.svelte";
var root764 = add_locations(ns_template(`<svg><!><path d="M8.473.337a.5.5 0 0 0-.946 0L6.954 2H2a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h1.85l-1.323 3.837a.5.5 0 1 0 .946.326L4.908 11H7.5v2.5a.5.5 0 0 0 1 0V11h2.592l1.435 4.163a.5.5 0 0 0 .946-.326L12.15 11H14a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H9.046L8.473.337z"></path></svg>`), EaselFill[FILENAME], [[1, 0, [[1, 171]]]]);
function EaselFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EaselFill);
  var svg = root764();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-easel-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EaselFill = hmr(EaselFill, () => EaselFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EaselFill[HMR].source;
    set(EaselFill[HMR].source, module.default[HMR].original);
  });
}
var EaselFill_default = EaselFill;
mark_module_end(EaselFill);

// node_modules/svelte-bootstrap-icons/lib/Easel.svelte
mark_module_start();
Easel[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Easel.svelte";
var root765 = add_locations(ns_template(`<svg><!><path d="M8 0a.5.5 0 0 1 .473.337L9.046 2H14a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-1.85l1.323 3.837a.5.5 0 1 1-.946.326L11.092 11H8.5v3a.5.5 0 0 1-1 0v-3H4.908l-1.435 4.163a.5.5 0 1 1-.946-.326L3.85 11H2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h4.954L7.527.337A.5.5 0 0 1 8 0zM2 3v7h12V3H2z"></path></svg>`), Easel[FILENAME], [[1, 0, [[1, 166]]]]);
function Easel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Easel);
  var svg = root765();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-easel", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Easel = hmr(Easel, () => Easel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Easel[HMR].source;
    set(Easel[HMR].source, module.default[HMR].original);
  });
}
var Easel_default = Easel;
mark_module_end(Easel);

// node_modules/svelte-bootstrap-icons/lib/Easel2Fill.svelte
mark_module_start();
Easel2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Easel2Fill.svelte";
var root766 = add_locations(ns_template(`<svg><!><path d="M8.447.276a.5.5 0 0 0-.894 0L7.19 1H2.5A1.5 1.5 0 0 0 1 2.5V10h14V2.5A1.5 1.5 0 0 0 13.5 1H8.809L8.447.276Z"></path><path fill-rule="evenodd" d="M.5 11a.5.5 0 0 0 0 1h2.86l-.845 3.379a.5.5 0 0 0 .97.242L3.89 14h8.22l.405 1.621a.5.5 0 0 0 .97-.242L12.64 12h2.86a.5.5 0 0 0 0-1H.5Zm3.64 2 .25-1h7.22l.25 1H4.14Z"></path></svg>`), Easel2Fill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Easel2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Easel2Fill);
  var svg = root766();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-easel2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Easel2Fill = hmr(Easel2Fill, () => Easel2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Easel2Fill[HMR].source;
    set(Easel2Fill[HMR].source, module.default[HMR].original);
  });
}
var Easel2Fill_default = Easel2Fill;
mark_module_end(Easel2Fill);

// node_modules/svelte-bootstrap-icons/lib/Easel2.svelte
mark_module_start();
Easel2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Easel2.svelte";
var root767 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0a.5.5 0 0 1 .447.276L8.81 1h4.69A1.5 1.5 0 0 1 15 2.5V11h.5a.5.5 0 0 1 0 1h-2.86l.845 3.379a.5.5 0 0 1-.97.242L12.11 14H3.89l-.405 1.621a.5.5 0 0 1-.97-.242L3.36 12H.5a.5.5 0 0 1 0-1H1V2.5A1.5 1.5 0 0 1 2.5 1h4.691l.362-.724A.5.5 0 0 1 8 0ZM2 11h12V2.5a.5.5 0 0 0-.5-.5h-11a.5.5 0 0 0-.5.5V11Zm9.61 1H4.39l-.25 1h7.72l-.25-1Z"></path></svg>`), Easel2[FILENAME], [[1, 0, [[1, 167]]]]);
function Easel2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Easel2);
  var svg = root767();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-easel2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Easel2 = hmr(Easel2, () => Easel2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Easel2[HMR].source;
    set(Easel2[HMR].source, module.default[HMR].original);
  });
}
var Easel2_default = Easel2;
mark_module_end(Easel2);

// node_modules/svelte-bootstrap-icons/lib/Easel3Fill.svelte
mark_module_start();
Easel3Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Easel3Fill.svelte";
var root768 = add_locations(ns_template(`<svg><!><path d="M8.5 12v1.134a1 1 0 1 1-1 0V12h-5A1.5 1.5 0 0 1 1 10.5V3h14v7.5a1.5 1.5 0 0 1-1.5 1.5h-5Zm7-10a.5.5 0 0 0 0-1H.5a.5.5 0 0 0 0 1h15Z"></path></svg>`), Easel3Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Easel3Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Easel3Fill);
  var svg = root768();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-easel3-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Easel3Fill = hmr(Easel3Fill, () => Easel3Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Easel3Fill[HMR].source;
    set(Easel3Fill[HMR].source, module.default[HMR].original);
  });
}
var Easel3Fill_default = Easel3Fill;
mark_module_end(Easel3Fill);

// node_modules/svelte-bootstrap-icons/lib/Easel3.svelte
mark_module_start();
Easel3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Easel3.svelte";
var root769 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.5 13.134V12h5a1.5 1.5 0 0 0 1.5-1.5V2h.5a.5.5 0 0 0 0-1H.5a.5.5 0 0 0 0 1H1v8.5A1.5 1.5 0 0 0 2.5 12h5v1.134a1 1 0 1 0 1 0ZM2 2v8.5a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5V2H2Z"></path></svg>`), Easel3[FILENAME], [[1, 0, [[1, 167]]]]);
function Easel3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Easel3);
  var svg = root769();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-easel3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Easel3 = hmr(Easel3, () => Easel3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Easel3[HMR].source;
    set(Easel3[HMR].source, module.default[HMR].original);
  });
}
var Easel3_default = Easel3;
mark_module_end(Easel3);

// node_modules/svelte-bootstrap-icons/lib/EggFill.svelte
mark_module_start();
EggFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EggFill.svelte";
var root770 = add_locations(ns_template(`<svg><!><path d="M14 10a6 6 0 0 1-12 0C2 5.686 5 0 8 0s6 5.686 6 10z"></path></svg>`), EggFill[FILENAME], [[1, 0, [[1, 169]]]]);
function EggFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EggFill);
  var svg = root770();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-egg-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EggFill = hmr(EggFill, () => EggFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EggFill[HMR].source;
    set(EggFill[HMR].source, module.default[HMR].original);
  });
}
var EggFill_default = EggFill;
mark_module_end(EggFill);

// node_modules/svelte-bootstrap-icons/lib/EggFried.svelte
mark_module_start();
EggFried[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EggFried.svelte";
var root771 = add_locations(ns_template(`<svg><!><path d="M8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path><path d="M13.997 5.17a5 5 0 0 0-8.101-4.09A5 5 0 0 0 1.28 9.342a5 5 0 0 0 8.336 5.109 3.5 3.5 0 0 0 5.201-4.065 3.001 3.001 0 0 0-.822-5.216zm-1-.034a1 1 0 0 0 .668.977 2.001 2.001 0 0 1 .547 3.478 1 1 0 0 0-.341 1.113 2.5 2.5 0 0 1-3.715 2.905 1 1 0 0 0-1.262.152 4 4 0 0 1-6.67-4.087 1 1 0 0 0-.2-1 4 4 0 0 1 3.693-6.61 1 1 0 0 0 .8-.2 4 4 0 0 1 6.48 3.273z"></path></svg>`), EggFried[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function EggFried($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EggFried);
  var svg = root771();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-egg-fried", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EggFried = hmr(EggFried, () => EggFried[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EggFried[HMR].source;
    set(EggFried[HMR].source, module.default[HMR].original);
  });
}
var EggFried_default = EggFried;
mark_module_end(EggFried);

// node_modules/svelte-bootstrap-icons/lib/Egg.svelte
mark_module_start();
Egg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Egg.svelte";
var root772 = add_locations(ns_template(`<svg><!><path d="M8 15a5 5 0 0 1-5-5c0-1.956.69-4.286 1.742-6.12.524-.913 1.112-1.658 1.704-2.164C7.044 1.206 7.572 1 8 1c.428 0 .956.206 1.554.716.592.506 1.18 1.251 1.704 2.164C12.31 5.714 13 8.044 13 10a5 5 0 0 1-5 5zm0 1a6 6 0 0 0 6-6c0-4.314-3-10-6-10S2 5.686 2 10a6 6 0 0 0 6 6z"></path></svg>`), Egg[FILENAME], [[1, 0, [[1, 164]]]]);
function Egg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Egg);
  var svg = root772();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-egg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Egg = hmr(Egg, () => Egg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Egg[HMR].source;
    set(Egg[HMR].source, module.default[HMR].original);
  });
}
var Egg_default = Egg;
mark_module_end(Egg);

// node_modules/svelte-bootstrap-icons/lib/EjectFill.svelte
mark_module_start();
EjectFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EjectFill.svelte";
var root773 = add_locations(ns_template(`<svg><!><path d="M7.27 1.047a1 1 0 0 1 1.46 0l6.345 6.77c.6.638.146 1.683-.73 1.683H1.656C.78 9.5.326 8.455.926 7.816L7.27 1.047zM.5 11.5a1 1 0 0 1 1-1h13a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1h-13a1 1 0 0 1-1-1v-1z"></path></svg>`), EjectFill[FILENAME], [[1, 0, [[1, 171]]]]);
function EjectFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EjectFill);
  var svg = root773();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eject-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EjectFill = hmr(EjectFill, () => EjectFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EjectFill[HMR].source;
    set(EjectFill[HMR].source, module.default[HMR].original);
  });
}
var EjectFill_default = EjectFill;
mark_module_end(EjectFill);

// node_modules/svelte-bootstrap-icons/lib/Eject.svelte
mark_module_start();
Eject[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Eject.svelte";
var root774 = add_locations(ns_template(`<svg><!><path d="M7.27 1.047a1 1 0 0 1 1.46 0l6.345 6.77c.6.638.146 1.683-.73 1.683H1.656C.78 9.5.326 8.455.926 7.816L7.27 1.047zM14.346 8.5 8 1.731 1.654 8.5h12.692zM.5 11.5a1 1 0 0 1 1-1h13a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1h-13a1 1 0 0 1-1-1v-1zm14 0h-13v1h13v-1z"></path></svg>`), Eject[FILENAME], [[1, 0, [[1, 166]]]]);
function Eject($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Eject);
  var svg = root774();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eject", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eject = hmr(Eject, () => Eject[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eject[HMR].source;
    set(Eject[HMR].source, module.default[HMR].original);
  });
}
var Eject_default = Eject;
mark_module_end(Eject);

// node_modules/svelte-bootstrap-icons/lib/EmojiAngryFill.svelte
mark_module_start();
EmojiAngryFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiAngryFill.svelte";
var root775 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM4.053 4.276a.5.5 0 0 1 .67-.223l2 1a.5.5 0 0 1 .166.76c.071.206.111.44.111.687C7 7.328 6.552 8 6 8s-1-.672-1-1.5c0-.408.109-.778.285-1.049l-1.009-.504a.5.5 0 0 1-.223-.67zm.232 8.157a.5.5 0 0 1-.183-.683A4.498 4.498 0 0 1 8 9.5a4.5 4.5 0 0 1 3.898 2.25.5.5 0 1 1-.866.5A3.498 3.498 0 0 0 8 10.5a3.498 3.498 0 0 0-3.032 1.75.5.5 0 0 1-.683.183zM10 8c-.552 0-1-.672-1-1.5 0-.247.04-.48.11-.686a.502.502 0 0 1 .166-.761l2-1a.5.5 0 1 1 .448.894l-1.009.504c.176.27.285.64.285 1.049 0 .828-.448 1.5-1 1.5z"></path></svg>`), EmojiAngryFill[FILENAME], [[1, 0, [[1, 177]]]]);
function EmojiAngryFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiAngryFill);
  var svg = root775();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-angry-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiAngryFill = hmr(EmojiAngryFill, () => EmojiAngryFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiAngryFill[HMR].source;
    set(EmojiAngryFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiAngryFill_default = EmojiAngryFill;
mark_module_end(EmojiAngryFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiAngry.svelte
mark_module_start();
EmojiAngry[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiAngry.svelte";
var root776 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M4.285 12.433a.5.5 0 0 0 .683-.183A3.498 3.498 0 0 1 8 10.5c1.295 0 2.426.703 3.032 1.75a.5.5 0 0 0 .866-.5A4.498 4.498 0 0 0 8 9.5a4.5 4.5 0 0 0-3.898 2.25.5.5 0 0 0 .183.683zm6.991-8.38a.5.5 0 1 1 .448.894l-1.009.504c.176.27.285.64.285 1.049 0 .828-.448 1.5-1 1.5s-1-.672-1-1.5c0-.247.04-.48.11-.686a.502.502 0 0 1 .166-.761l2-1zm-6.552 0a.5.5 0 0 0-.448.894l1.009.504A1.94 1.94 0 0 0 5 6.5C5 7.328 5.448 8 6 8s1-.672 1-1.5c0-.247-.04-.48-.11-.686a.502.502 0 0 0-.166-.761l-2-1z"></path></svg>`), EmojiAngry[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function EmojiAngry($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiAngry);
  var svg = root776();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-angry", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiAngry = hmr(EmojiAngry, () => EmojiAngry[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiAngry[HMR].source;
    set(EmojiAngry[HMR].source, module.default[HMR].original);
  });
}
var EmojiAngry_default = EmojiAngry;
mark_module_end(EmojiAngry);

// node_modules/svelte-bootstrap-icons/lib/EmojiAstonishedFill.svelte
mark_module_start();
EmojiAstonishedFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiAstonishedFill.svelte";
var root777 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-4.884-3.978a2.092 2.092 0 0 1 .53.332.5.5 0 0 0 .708-.708h-.001v-.001a1.885 1.885 0 0 0-.237-.197 3.087 3.087 0 0 0-.606-.345 2.996 2.996 0 0 0-2.168-.077.5.5 0 1 0 .316.948 1.997 1.997 0 0 1 1.458.048Zm-4.774-.048a.5.5 0 0 0 .316-.948 2.996 2.996 0 0 0-2.167.077 3.091 3.091 0 0 0-.773.478c-.024.02-.047.042-.07.064l-.002.001a.5.5 0 1 0 .728.689 2.09 2.09 0 0 1 .51-.313 2 2 0 0 1 1.458-.048ZM7 6.5C7 5.672 6.552 5 6 5s-1 .672-1 1.5S5.448 8 6 8s1-.672 1-1.5Zm4 0c0-.828-.448-1.5-1-1.5s-1 .672-1 1.5S9.448 8 10 8s1-.672 1-1.5Zm-5.247 4.746c-.383.478.08 1.06.687.98 1.04-.135 2.08-.135 3.12 0 .606.08 1.07-.502.687-.98C9.747 10.623 8.998 10 8 10c-.998 0-1.747.623-2.247 1.246Z"></path></svg>`), EmojiAstonishedFill[FILENAME], [[1, 0, [[1, 182]]]]);
function EmojiAstonishedFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiAstonishedFill);
  var svg = root777();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-astonished-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiAstonishedFill = hmr(EmojiAstonishedFill, () => EmojiAstonishedFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiAstonishedFill[HMR].source;
    set(EmojiAstonishedFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiAstonishedFill_default = EmojiAstonishedFill;
mark_module_end(EmojiAstonishedFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiAstonished.svelte
mark_module_start();
EmojiAstonished[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiAstonished.svelte";
var root778 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14Zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z"></path><path d="M7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5Zm4 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5ZM4.884 4.022a2 2 0 0 1 1.458-.048.5.5 0 0 0 .316-.948 2.996 2.996 0 0 0-2.167.077 3.091 3.091 0 0 0-.773.478c-.024.02-.047.042-.07.064l-.002.001a.5.5 0 0 0 .707.708l-.001.002.001-.002a1.558 1.558 0 0 1 .122-.1 2.09 2.09 0 0 1 .41-.232Zm6.232 0a1.997 1.997 0 0 0-1.458-.048.5.5 0 1 1-.316-.948 2.996 2.996 0 0 1 2.168.077 3.087 3.087 0 0 1 .773.478l.07.064v.001a.5.5 0 0 1-.706.708l.002.002-.002-.002a1.556 1.556 0 0 0-.122-.1 2.092 2.092 0 0 0-.41-.232ZM8 10c-.998 0-1.747.623-2.247 1.246-.383.478.08 1.06.687.98 1.04-.135 2.08-.135 3.12 0 .606.08 1.07-.502.687-.98C9.747 10.623 8.998 10 8 10Z"></path></svg>`), EmojiAstonished[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function EmojiAstonished($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiAstonished);
  var svg = root778();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-astonished", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiAstonished = hmr(EmojiAstonished, () => EmojiAstonished[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiAstonished[HMR].source;
    set(EmojiAstonished[HMR].source, module.default[HMR].original);
  });
}
var EmojiAstonished_default = EmojiAstonished;
mark_module_end(EmojiAstonished);

// node_modules/svelte-bootstrap-icons/lib/EmojiDizzyFill.svelte
mark_module_start();
EmojiDizzyFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiDizzyFill.svelte";
var root779 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM4.146 5.146a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 1 1 .708.708l-.647.646.647.646a.5.5 0 1 1-.708.708L5.5 7.207l-.646.647a.5.5 0 1 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 0-.708zm5 0a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 1 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 0-.708zM8 13a2 2 0 1 1 0-4 2 2 0 0 1 0 4z"></path></svg>`), EmojiDizzyFill[FILENAME], [[1, 0, [[1, 177]]]]);
function EmojiDizzyFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiDizzyFill);
  var svg = root779();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-dizzy-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiDizzyFill = hmr(EmojiDizzyFill, () => EmojiDizzyFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiDizzyFill[HMR].source;
    set(EmojiDizzyFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiDizzyFill_default = EmojiDizzyFill;
mark_module_end(EmojiDizzyFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiDizzy.svelte
mark_module_start();
EmojiDizzy[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiDizzy.svelte";
var root780 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M9.146 5.146a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 1 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 0-.708zm-5 0a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 1 1 .708.708l-.647.646.647.646a.5.5 0 1 1-.708.708L5.5 7.207l-.646.647a.5.5 0 1 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 0-.708zM10 11a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"></path></svg>`), EmojiDizzy[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function EmojiDizzy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiDizzy);
  var svg = root780();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-dizzy", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiDizzy = hmr(EmojiDizzy, () => EmojiDizzy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiDizzy[HMR].source;
    set(EmojiDizzy[HMR].source, module.default[HMR].original);
  });
}
var EmojiDizzy_default = EmojiDizzy;
mark_module_end(EmojiDizzy);

// node_modules/svelte-bootstrap-icons/lib/EmojiExpressionlessFill.svelte
mark_module_start();
EmojiExpressionlessFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiExpressionlessFill.svelte";
var root781 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM4.5 6h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1zm5 0h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1zm-5 4h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1z"></path></svg>`), EmojiExpressionlessFill[FILENAME], [[1, 0, [[1, 186]]]]);
function EmojiExpressionlessFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiExpressionlessFill);
  var svg = root781();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-expressionless-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiExpressionlessFill = hmr(EmojiExpressionlessFill, () => EmojiExpressionlessFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiExpressionlessFill[HMR].source;
    set(EmojiExpressionlessFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiExpressionlessFill_default = EmojiExpressionlessFill;
mark_module_end(EmojiExpressionlessFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiExpressionless.svelte
mark_module_start();
EmojiExpressionless[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiExpressionless.svelte";
var root782 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M4 10.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm5 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path></svg>`), EmojiExpressionless[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function EmojiExpressionless($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiExpressionless);
  var svg = root782();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-expressionless", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiExpressionless = hmr(EmojiExpressionless, () => EmojiExpressionless[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiExpressionless[HMR].source;
    set(EmojiExpressionless[HMR].source, module.default[HMR].original);
  });
}
var EmojiExpressionless_default = EmojiExpressionless;
mark_module_end(EmojiExpressionless);

// node_modules/svelte-bootstrap-icons/lib/EmojiFrownFill.svelte
mark_module_start();
EmojiFrownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiFrownFill.svelte";
var root783 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zm-2.715 5.933a.5.5 0 0 1-.183-.683A4.498 4.498 0 0 1 8 9.5a4.5 4.5 0 0 1 3.898 2.25.5.5 0 0 1-.866.5A3.498 3.498 0 0 0 8 10.5a3.498 3.498 0 0 0-3.032 1.75.5.5 0 0 1-.683.183zM10 8c-.552 0-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5S10.552 8 10 8z"></path></svg>`), EmojiFrownFill[FILENAME], [[1, 0, [[1, 177]]]]);
function EmojiFrownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiFrownFill);
  var svg = root783();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-frown-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiFrownFill = hmr(EmojiFrownFill, () => EmojiFrownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiFrownFill[HMR].source;
    set(EmojiFrownFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiFrownFill_default = EmojiFrownFill;
mark_module_end(EmojiFrownFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiFrown.svelte
mark_module_start();
EmojiFrown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiFrown.svelte";
var root784 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M4.285 12.433a.5.5 0 0 0 .683-.183A3.498 3.498 0 0 1 8 10.5c1.295 0 2.426.703 3.032 1.75a.5.5 0 0 0 .866-.5A4.498 4.498 0 0 0 8 9.5a4.5 4.5 0 0 0-3.898 2.25.5.5 0 0 0 .183.683zM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zm4 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5z"></path></svg>`), EmojiFrown[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function EmojiFrown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiFrown);
  var svg = root784();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-frown", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiFrown = hmr(EmojiFrown, () => EmojiFrown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiFrown[HMR].source;
    set(EmojiFrown[HMR].source, module.default[HMR].original);
  });
}
var EmojiFrown_default = EmojiFrown;
mark_module_end(EmojiFrown);

// node_modules/svelte-bootstrap-icons/lib/EmojiGrimaceFill.svelte
mark_module_start();
EmojiGrimaceFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiGrimaceFill.svelte";
var root785 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM7 6.25C7 5.56 6.552 5 6 5s-1 .56-1 1.25.448 1.25 1 1.25 1-.56 1-1.25Zm3 1.25c.552 0 1-.56 1-1.25S10.552 5 10 5s-1 .56-1 1.25.448 1.25 1 1.25Zm1.5 4.5a1.5 1.5 0 0 0 1.48-1.25v-.003a1.512 1.512 0 0 0 0-.497A1.5 1.5 0 0 0 11.5 9h-7a1.5 1.5 0 0 0-1.48 1.25v.003a1.51 1.51 0 0 0 0 .497A1.5 1.5 0 0 0 4.5 12h7Zm-7.969-1.25a1 1 0 0 0 .969.75h.25v-.75H3.531Zm8.938 0a1 1 0 0 1-.969.75h-.25v-.75h1.219ZM11.5 9.5a1 1 0 0 1 .969.75H11.25V9.5h.25Zm-7.969.75A1 1 0 0 1 4.5 9.5h.25v.75H3.531ZM5.25 11.5h1v-.75h-1v.75Zm2.5 0h-1v-.75h1v.75Zm1.5 0h-1v-.75h1v.75Zm1.5 0h-1v-.75h1v.75Zm-1-2h1v.75h-1V9.5Zm-1.5 0h1v.75h-1V9.5Zm-1.5 0h1v.75h-1V9.5Zm-1.5 0h1v.75h-1V9.5Z"></path></svg>`), EmojiGrimaceFill[FILENAME], [[1, 0, [[1, 179]]]]);
function EmojiGrimaceFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiGrimaceFill);
  var svg = root785();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-grimace-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiGrimaceFill = hmr(EmojiGrimaceFill, () => EmojiGrimaceFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiGrimaceFill[HMR].source;
    set(EmojiGrimaceFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiGrimaceFill_default = EmojiGrimaceFill;
mark_module_end(EmojiGrimaceFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiGrimace.svelte
mark_module_start();
EmojiGrimace[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiGrimace.svelte";
var root786 = add_locations(ns_template(`<svg><!><path d="M7 6.25c0 .69-.448 1.25-1 1.25s-1-.56-1-1.25S5.448 5 6 5s1 .56 1 1.25Zm3 1.25c.552 0 1-.56 1-1.25S10.552 5 10 5s-1 .56-1 1.25.448 1.25 1 1.25Zm2.98 3.25A1.5 1.5 0 0 1 11.5 12h-7a1.5 1.5 0 0 1-1.48-1.747v-.003A1.5 1.5 0 0 1 4.5 9h7a1.5 1.5 0 0 1 1.48 1.747v.003Zm-8.48.75h.25v-.75H3.531a1 1 0 0 0 .969.75Zm7 0a1 1 0 0 0 .969-.75H11.25v.75h.25Zm.969-1.25a1 1 0 0 0-.969-.75h-.25v.75h1.219ZM4.5 9.5a1 1 0 0 0-.969.75H4.75V9.5H4.5Zm1.75 2v-.75h-1v.75h1Zm.5 0h1v-.75h-1v.75Zm1.5 0h1v-.75h-1v.75Zm1.5 0h1v-.75h-1v.75Zm1-2h-1v.75h1V9.5Zm-1.5 0h-1v.75h1V9.5Zm-1.5 0h-1v.75h1V9.5Zm-1.5 0h-1v.75h1V9.5Z"></path><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm0-1A7 7 0 1 1 8 1a7 7 0 0 1 0 14Z"></path></svg>`), EmojiGrimace[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function EmojiGrimace($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiGrimace);
  var svg = root786();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-grimace", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiGrimace = hmr(EmojiGrimace, () => EmojiGrimace[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiGrimace[HMR].source;
    set(EmojiGrimace[HMR].source, module.default[HMR].original);
  });
}
var EmojiGrimace_default = EmojiGrimace;
mark_module_end(EmojiGrimace);

// node_modules/svelte-bootstrap-icons/lib/EmojiGrinFill.svelte
mark_module_start();
EmojiGrinFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiGrinFill.svelte";
var root787 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16ZM6.488 7c-.23-.598-.661-1-1.155-1-.493 0-.924.402-1.155 1A2.794 2.794 0 0 1 4 6c0-1.105.597-2 1.333-2 .737 0 1.334.895 1.334 2 0 .364-.065.706-.179 1Zm5.334 0c-.23-.598-.662-1-1.155-1-.494 0-.925.402-1.155 1a2.793 2.793 0 0 1-.179-1c0-1.105.597-2 1.334-2C11.403 4 12 4.895 12 6c0 .364-.065.706-.178 1ZM2.696 8.756a.48.48 0 0 1 .382-.118C4.348 8.786 6.448 9 8 9c1.553 0 3.653-.214 4.922-.362a.48.48 0 0 1 .383.118.3.3 0 0 1 .096.29c-.09.47-.242.921-.445 1.342-.263.035-.576.075-.929.115A36.798 36.798 0 0 1 8 10.75c-1.475 0-2.934-.123-4.027-.247-.353-.04-.666-.08-.93-.115A5.457 5.457 0 0 1 2.6 9.045a.3.3 0 0 1 .097-.29ZM8 13.5a5.49 5.49 0 0 1-4.256-2.017l.116.014c1.115.126 2.615.253 4.14.253 1.525 0 3.025-.127 4.14-.253l.117-.014A5.49 5.49 0 0 1 8 13.5Z"></path></svg>`), EmojiGrinFill[FILENAME], [[1, 0, [[1, 176]]]]);
function EmojiGrinFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiGrinFill);
  var svg = root787();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-grin-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiGrinFill = hmr(EmojiGrinFill, () => EmojiGrinFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiGrinFill[HMR].source;
    set(EmojiGrinFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiGrinFill_default = EmojiGrinFill;
mark_module_end(EmojiGrinFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiGrin.svelte
mark_module_start();
EmojiGrin[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiGrin.svelte";
var root788 = add_locations(ns_template(`<svg><!><path d="M12.946 11.398A6.002 6.002 0 0 1 2.108 9.14c-.114-.595.426-1.068 1.028-.997C4.405 8.289 6.48 8.5 8 8.5s3.595-.21 4.864-.358c.602-.07 1.142.402 1.028.998a5.953 5.953 0 0 1-.946 2.258Zm-.078-2.25C11.588 9.295 9.539 9.5 8 9.5c-1.54 0-3.589-.205-4.868-.352.11.468.286.91.517 1.317A36.797 36.797 0 0 0 8 10.75a36.796 36.796 0 0 0 4.351-.285c.231-.407.407-.85.517-1.317Zm-1.36 2.416c-1.02.1-2.255.186-3.508.186-1.253 0-2.488-.086-3.507-.186A4.985 4.985 0 0 0 8 13a4.986 4.986 0 0 0 3.507-1.436ZM6.488 7c.114-.294.179-.636.179-1 0-1.105-.597-2-1.334-2C4.597 4 4 4.895 4 6c0 .364.065.706.178 1 .23-.598.662-1 1.155-1 .494 0 .925.402 1.155 1ZM12 6c0 .364-.065.706-.178 1-.23-.598-.662-1-1.155-1-.494 0-.925.402-1.155 1a2.793 2.793 0 0 1-.179-1c0-1.105.597-2 1.334-2C11.403 4 12 4.895 12 6Z"></path><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm0-1A7 7 0 1 1 8 1a7 7 0 0 1 0 14Z"></path></svg>`), EmojiGrin[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function EmojiGrin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiGrin);
  var svg = root788();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-grin", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiGrin = hmr(EmojiGrin, () => EmojiGrin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiGrin[HMR].source;
    set(EmojiGrin[HMR].source, module.default[HMR].original);
  });
}
var EmojiGrin_default = EmojiGrin;
mark_module_end(EmojiGrin);

// node_modules/svelte-bootstrap-icons/lib/EmojiHeartEyesFill.svelte
mark_module_start();
EmojiHeartEyesFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiHeartEyesFill.svelte";
var root789 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zM4.756 4.566c.763-1.424 4.02-.12.952 3.434-4.496-1.596-2.35-4.298-.952-3.434zm6.559 5.448a.5.5 0 0 1 .548.736A4.498 4.498 0 0 1 7.965 13a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .548-.736h.005l.017.005.067.015.252.055c.215.046.515.108.857.169.693.124 1.522.242 2.152.242.63 0 1.46-.118 2.152-.242a26.58 26.58 0 0 0 1.109-.224l.067-.015.017-.004.005-.002zm-.07-5.448c1.397-.864 3.543 1.838-.953 3.434-3.067-3.554.19-4.858.952-3.434z"></path></svg>`), EmojiHeartEyesFill[FILENAME], [[1, 0, [[1, 182]]]]);
function EmojiHeartEyesFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiHeartEyesFill);
  var svg = root789();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-heart-eyes-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiHeartEyesFill = hmr(EmojiHeartEyesFill, () => EmojiHeartEyesFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiHeartEyesFill[HMR].source;
    set(EmojiHeartEyesFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiHeartEyesFill_default = EmojiHeartEyesFill;
mark_module_end(EmojiHeartEyesFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiHeartEyes.svelte
mark_module_start();
EmojiHeartEyes[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiHeartEyes.svelte";
var root790 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M11.315 10.014a.5.5 0 0 1 .548.736A4.498 4.498 0 0 1 7.965 13a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .548-.736h.005l.017.005.067.015.252.055c.215.046.515.108.857.169.693.124 1.522.242 2.152.242.63 0 1.46-.118 2.152-.242a26.58 26.58 0 0 0 1.109-.224l.067-.015.017-.004.005-.002zM4.756 4.566c.763-1.424 4.02-.12.952 3.434-4.496-1.596-2.35-4.298-.952-3.434zm6.488 0c1.398-.864 3.544 1.838-.952 3.434-3.067-3.554.19-4.858.952-3.434z"></path></svg>`), EmojiHeartEyes[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function EmojiHeartEyes($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiHeartEyes);
  var svg = root790();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-heart-eyes", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiHeartEyes = hmr(EmojiHeartEyes, () => EmojiHeartEyes[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiHeartEyes[HMR].source;
    set(EmojiHeartEyes[HMR].source, module.default[HMR].original);
  });
}
var EmojiHeartEyes_default = EmojiHeartEyes;
mark_module_end(EmojiHeartEyes);

// node_modules/svelte-bootstrap-icons/lib/EmojiKissFill.svelte
mark_module_start();
EmojiKissFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiKissFill.svelte";
var root791 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M16 8a8 8 0 1 0-2.697 5.99c-.972-.665-1.632-1.356-1.99-2.062-.388-.766-.419-1.561-.075-2.23.496-.97 1.73-1.466 2.762-1.05.65-.262 1.38-.162 1.957.19.028-.275.043-.555.043-.838ZM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5Zm1.512 3.647c-.347.08-.737.198-1.107.319a.5.5 0 1 1-.31-.95c.38-.125.802-.254 1.192-.343.37-.086.78-.153 1.103-.108.16.022.394.085.561.286.188.226.187.497.131.705a1.894 1.894 0 0 1-.31.593c-.077.107-.168.22-.275.343.107.124.199.24.276.347.142.197.256.397.31.595.055.208.056.479-.132.706-.168.2-.404.262-.563.284-.323.043-.733-.027-1.102-.113a14.87 14.87 0 0 1-1.191-.345.5.5 0 1 1 .31-.95c.371.12.761.24 1.109.321.176.041.325.069.446.084a5.609 5.609 0 0 0-.502-.584.5.5 0 0 1 .002-.695 5.52 5.52 0 0 0 .5-.577 4.465 4.465 0 0 0-.448.082Zm.766-.086-.006-.002c.004 0 .006.002.006.002Zm.002 1.867h-.001l-.005.001a.038.038 0 0 1 .006-.002Zm.157-4.685a.5.5 0 0 1-.874-.486A1.934 1.934 0 0 1 10.25 5.75c.73 0 1.356.412 1.687 1.007a.5.5 0 1 1-.874.486.934.934 0 0 0-.813-.493.934.934 0 0 0-.813.493ZM14 9.828c1.11-1.14 3.884.856 0 3.422-3.884-2.566-1.11-4.562 0-3.421Z"></path></svg>`), EmojiKissFill[FILENAME], [[1, 0, [[1, 176]]]]);
function EmojiKissFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiKissFill);
  var svg = root791();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-kiss-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiKissFill = hmr(EmojiKissFill, () => EmojiKissFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiKissFill[HMR].source;
    set(EmojiKissFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiKissFill_default = EmojiKissFill;
mark_module_end(EmojiKissFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiKiss.svelte
mark_module_start();
EmojiKiss[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiKiss.svelte";
var root792 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M12.493 13.368a7 7 0 1 1 2.489-4.858c.344.033.68.147.975.328a8 8 0 1 0-2.654 5.152 8.58 8.58 0 0 1-.81-.622Zm-3.731-3.22a13 13 0 0 0-1.107.318.5.5 0 1 1-.31-.95c.38-.125.802-.254 1.192-.343.37-.086.78-.153 1.103-.108.16.022.394.085.561.286.188.226.187.497.131.705a1.892 1.892 0 0 1-.31.593c-.077.107-.168.22-.275.343.107.124.199.24.276.347.142.197.256.397.31.595.055.208.056.479-.132.706-.168.2-.404.262-.563.284-.323.043-.733-.027-1.102-.113a14.87 14.87 0 0 1-1.191-.345.5.5 0 1 1 .31-.95c.371.12.761.24 1.109.321.176.041.325.069.446.084a5.609 5.609 0 0 0-.502-.584.5.5 0 0 1 .002-.695 5.52 5.52 0 0 0 .5-.577 4.465 4.465 0 0 0-.448.082Zm.766-.087-.003-.001-.003-.001c.004 0 .006.002.006.002Zm.002 1.867-.006.001a.038.038 0 0 1 .006-.002ZM6 8c.552 0 1-.672 1-1.5S6.552 5 6 5s-1 .672-1 1.5S5.448 8 6 8Zm2.757-.563a.5.5 0 0 0 .68-.194.934.934 0 0 1 .813-.493c.339 0 .645.19.813.493a.5.5 0 0 0 .874-.486A1.934 1.934 0 0 0 10.25 5.75c-.73 0-1.356.412-1.687 1.007a.5.5 0 0 0 .194.68ZM14 9.828c1.11-1.14 3.884.856 0 3.422-3.884-2.566-1.11-4.562 0-3.421Z"></path></svg>`), EmojiKiss[FILENAME], [[1, 0, [[1, 171]]]]);
function EmojiKiss($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiKiss);
  var svg = root792();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-kiss", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiKiss = hmr(EmojiKiss, () => EmojiKiss[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiKiss[HMR].source;
    set(EmojiKiss[HMR].source, module.default[HMR].original);
  });
}
var EmojiKiss_default = EmojiKiss;
mark_module_end(EmojiKiss);

// node_modules/svelte-bootstrap-icons/lib/EmojiLaughingFill.svelte
mark_module_start();
EmojiLaughingFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiLaughingFill.svelte";
var root793 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM7 6.5c0 .501-.164.396-.415.235C6.42 6.629 6.218 6.5 6 6.5c-.218 0-.42.13-.585.235C5.164 6.896 5 7 5 6.5 5 5.672 5.448 5 6 5s1 .672 1 1.5zm5.331 3a1 1 0 0 1 0 1A4.998 4.998 0 0 1 8 13a4.998 4.998 0 0 1-4.33-2.5A1 1 0 0 1 4.535 9h6.93a1 1 0 0 1 .866.5zm-1.746-2.765C10.42 6.629 10.218 6.5 10 6.5c-.218 0-.42.13-.585.235C9.164 6.896 9 7 9 6.5c0-.828.448-1.5 1-1.5s1 .672 1 1.5c0 .501-.164.396-.415.235z"></path></svg>`), EmojiLaughingFill[FILENAME], [[1, 0, [[1, 180]]]]);
function EmojiLaughingFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiLaughingFill);
  var svg = root793();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-laughing-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiLaughingFill = hmr(EmojiLaughingFill, () => EmojiLaughingFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiLaughingFill[HMR].source;
    set(EmojiLaughingFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiLaughingFill_default = EmojiLaughingFill;
mark_module_end(EmojiLaughingFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiLaughing.svelte
mark_module_start();
EmojiLaughing[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiLaughing.svelte";
var root794 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M12.331 9.5a1 1 0 0 1 0 1A4.998 4.998 0 0 1 8 13a4.998 4.998 0 0 1-4.33-2.5A1 1 0 0 1 4.535 9h6.93a1 1 0 0 1 .866.5zM7 6.5c0 .828-.448 0-1 0s-1 .828-1 0S5.448 5 6 5s1 .672 1 1.5zm4 0c0 .828-.448 0-1 0s-1 .828-1 0S9.448 5 10 5s1 .672 1 1.5z"></path></svg>`), EmojiLaughing[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function EmojiLaughing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiLaughing);
  var svg = root794();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-laughing", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiLaughing = hmr(EmojiLaughing, () => EmojiLaughing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiLaughing[HMR].source;
    set(EmojiLaughing[HMR].source, module.default[HMR].original);
  });
}
var EmojiLaughing_default = EmojiLaughing;
mark_module_end(EmojiLaughing);

// node_modules/svelte-bootstrap-icons/lib/EmojiNeutralFill.svelte
mark_module_start();
EmojiNeutralFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiNeutralFill.svelte";
var root795 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zm-3 4a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM10 8c-.552 0-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5S10.552 8 10 8z"></path></svg>`), EmojiNeutralFill[FILENAME], [[1, 0, [[1, 179]]]]);
function EmojiNeutralFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiNeutralFill);
  var svg = root795();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-neutral-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiNeutralFill = hmr(EmojiNeutralFill, () => EmojiNeutralFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiNeutralFill[HMR].source;
    set(EmojiNeutralFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiNeutralFill_default = EmojiNeutralFill;
mark_module_end(EmojiNeutralFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiNeutral.svelte
mark_module_start();
EmojiNeutral[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiNeutral.svelte";
var root796 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M4 10.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7a.5.5 0 0 0-.5.5zm3-4C7 5.672 6.552 5 6 5s-1 .672-1 1.5S5.448 8 6 8s1-.672 1-1.5zm4 0c0-.828-.448-1.5-1-1.5s-1 .672-1 1.5S9.448 8 10 8s1-.672 1-1.5z"></path></svg>`), EmojiNeutral[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function EmojiNeutral($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiNeutral);
  var svg = root796();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-neutral", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiNeutral = hmr(EmojiNeutral, () => EmojiNeutral[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiNeutral[HMR].source;
    set(EmojiNeutral[HMR].source, module.default[HMR].original);
  });
}
var EmojiNeutral_default = EmojiNeutral;
mark_module_end(EmojiNeutral);

// node_modules/svelte-bootstrap-icons/lib/EmojiSmileFill.svelte
mark_module_start();
EmojiSmileFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiSmileFill.svelte";
var root797 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zM4.285 9.567a.5.5 0 0 1 .683.183A3.498 3.498 0 0 0 8 11.5a3.498 3.498 0 0 0 3.032-1.75.5.5 0 1 1 .866.5A4.498 4.498 0 0 1 8 12.5a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .183-.683zM10 8c-.552 0-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5S10.552 8 10 8z"></path></svg>`), EmojiSmileFill[FILENAME], [[1, 0, [[1, 177]]]]);
function EmojiSmileFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiSmileFill);
  var svg = root797();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-smile-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiSmileFill = hmr(EmojiSmileFill, () => EmojiSmileFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiSmileFill[HMR].source;
    set(EmojiSmileFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiSmileFill_default = EmojiSmileFill;
mark_module_end(EmojiSmileFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiSmileUpsideDownFill.svelte
mark_module_start();
EmojiSmileUpsideDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiSmileUpsideDownFill.svelte";
var root798 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM7 9.5C7 8.672 6.552 8 6 8s-1 .672-1 1.5.448 1.5 1 1.5 1-.672 1-1.5zM4.285 6.433a.5.5 0 0 0 .683-.183A3.498 3.498 0 0 1 8 4.5c1.295 0 2.426.703 3.032 1.75a.5.5 0 0 0 .866-.5A4.498 4.498 0 0 0 8 3.5a4.5 4.5 0 0 0-3.898 2.25.5.5 0 0 0 .183.683zM10 8c-.552 0-1 .672-1 1.5s.448 1.5 1 1.5 1-.672 1-1.5S10.552 8 10 8z"></path></svg>`), EmojiSmileUpsideDownFill[FILENAME], [[1, 0, [[1, 189]]]]);
function EmojiSmileUpsideDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiSmileUpsideDownFill);
  var svg = root798();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-smile-upside-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiSmileUpsideDownFill = hmr(EmojiSmileUpsideDownFill, () => EmojiSmileUpsideDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiSmileUpsideDownFill[HMR].source;
    set(EmojiSmileUpsideDownFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiSmileUpsideDownFill_default = EmojiSmileUpsideDownFill;
mark_module_end(EmojiSmileUpsideDownFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiSmileUpsideDown.svelte
mark_module_start();
EmojiSmileUpsideDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiSmileUpsideDown.svelte";
var root799 = add_locations(ns_template(`<svg><!><path d="M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zm0-1a8 8 0 1 1 0 16A8 8 0 0 1 8 0z"></path><path d="M4.285 6.433a.5.5 0 0 0 .683-.183A3.498 3.498 0 0 1 8 4.5c1.295 0 2.426.703 3.032 1.75a.5.5 0 0 0 .866-.5A4.498 4.498 0 0 0 8 3.5a4.5 4.5 0 0 0-3.898 2.25.5.5 0 0 0 .183.683zM7 9.5C7 8.672 6.552 8 6 8s-1 .672-1 1.5.448 1.5 1 1.5 1-.672 1-1.5zm4 0c0-.828-.448-1.5-1-1.5s-1 .672-1 1.5.448 1.5 1 1.5 1-.672 1-1.5z"></path></svg>`), EmojiSmileUpsideDown[FILENAME], [
  [1, 0, [[1, 184], [2, 2]]]
]);
function EmojiSmileUpsideDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiSmileUpsideDown);
  var svg = root799();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-smile-upside-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiSmileUpsideDown = hmr(EmojiSmileUpsideDown, () => EmojiSmileUpsideDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiSmileUpsideDown[HMR].source;
    set(EmojiSmileUpsideDown[HMR].source, module.default[HMR].original);
  });
}
var EmojiSmileUpsideDown_default = EmojiSmileUpsideDown;
mark_module_end(EmojiSmileUpsideDown);

// node_modules/svelte-bootstrap-icons/lib/EmojiSmile.svelte
mark_module_start();
EmojiSmile[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiSmile.svelte";
var root800 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M4.285 9.567a.5.5 0 0 1 .683.183A3.498 3.498 0 0 0 8 11.5a3.498 3.498 0 0 0 3.032-1.75.5.5 0 1 1 .866.5A4.498 4.498 0 0 1 8 12.5a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .183-.683zM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zm4 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5z"></path></svg>`), EmojiSmile[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function EmojiSmile($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiSmile);
  var svg = root800();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-smile", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiSmile = hmr(EmojiSmile, () => EmojiSmile[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiSmile[HMR].source;
    set(EmojiSmile[HMR].source, module.default[HMR].original);
  });
}
var EmojiSmile_default = EmojiSmile;
mark_module_end(EmojiSmile);

// node_modules/svelte-bootstrap-icons/lib/EmojiSunglassesFill.svelte
mark_module_start();
EmojiSunglassesFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiSunglassesFill.svelte";
var root801 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM2.31 5.243A1 1 0 0 1 3.28 4H6a1 1 0 0 1 1 1v.116A4.22 4.22 0 0 1 8 5c.35 0 .69.04 1 .116V5a1 1 0 0 1 1-1h2.72a1 1 0 0 1 .97 1.243l-.311 1.242A2 2 0 0 1 11.439 8H11a2 2 0 0 1-1.994-1.839A2.99 2.99 0 0 0 8 6c-.393 0-.74.064-1.006.161A2 2 0 0 1 5 8h-.438a2 2 0 0 1-1.94-1.515L2.31 5.243zM4.969 9.75A3.498 3.498 0 0 0 8 11.5a3.498 3.498 0 0 0 3.032-1.75.5.5 0 1 1 .866.5A4.498 4.498 0 0 1 8 12.5a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .866-.5z"></path></svg>`), EmojiSunglassesFill[FILENAME], [[1, 0, [[1, 182]]]]);
function EmojiSunglassesFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiSunglassesFill);
  var svg = root801();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-sunglasses-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiSunglassesFill = hmr(EmojiSunglassesFill, () => EmojiSunglassesFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiSunglassesFill[HMR].source;
    set(EmojiSunglassesFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiSunglassesFill_default = EmojiSunglassesFill;
mark_module_end(EmojiSunglassesFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiSunglasses.svelte
mark_module_start();
EmojiSunglasses[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiSunglasses.svelte";
var root802 = add_locations(ns_template(`<svg><!><path d="M4.968 9.75a.5.5 0 1 0-.866.5A4.498 4.498 0 0 0 8 12.5a4.5 4.5 0 0 0 3.898-2.25.5.5 0 1 0-.866-.5A3.498 3.498 0 0 1 8 11.5a3.498 3.498 0 0 1-3.032-1.75zM7 5.116V5a1 1 0 0 0-1-1H3.28a1 1 0 0 0-.97 1.243l.311 1.242A2 2 0 0 0 4.561 8H5a2 2 0 0 0 1.994-1.839A2.99 2.99 0 0 1 8 6c.393 0 .74.064 1.006.161A2 2 0 0 0 11 8h.438a2 2 0 0 0 1.94-1.515l.311-1.242A1 1 0 0 0 12.72 4H10a1 1 0 0 0-1 1v.116A4.22 4.22 0 0 0 8 5c-.35 0-.69.04-1 .116z"></path><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-1 0A7 7 0 1 0 1 8a7 7 0 0 0 14 0z"></path></svg>`), EmojiSunglasses[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function EmojiSunglasses($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiSunglasses);
  var svg = root802();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-sunglasses", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiSunglasses = hmr(EmojiSunglasses, () => EmojiSunglasses[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiSunglasses[HMR].source;
    set(EmojiSunglasses[HMR].source, module.default[HMR].original);
  });
}
var EmojiSunglasses_default = EmojiSunglasses;
mark_module_end(EmojiSunglasses);

// node_modules/svelte-bootstrap-icons/lib/EmojiSurpriseFill.svelte
mark_module_start();
EmojiSurpriseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiSurpriseFill.svelte";
var root803 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM7 5.5C7 4.672 6.552 4 6 4s-1 .672-1 1.5S5.448 7 6 7s1-.672 1-1.5Zm4 0c0-.828-.448-1.5-1-1.5s-1 .672-1 1.5S9.448 7 10 7s1-.672 1-1.5ZM8 13a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path></svg>`), EmojiSurpriseFill[FILENAME], [[1, 0, [[1, 180]]]]);
function EmojiSurpriseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiSurpriseFill);
  var svg = root803();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-surprise-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiSurpriseFill = hmr(EmojiSurpriseFill, () => EmojiSurpriseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiSurpriseFill[HMR].source;
    set(EmojiSurpriseFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiSurpriseFill_default = EmojiSurpriseFill;
mark_module_end(EmojiSurpriseFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiSurprise.svelte
mark_module_start();
EmojiSurprise[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiSurprise.svelte";
var root804 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14Zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z"></path><path d="M7 5.5C7 6.328 6.552 7 6 7s-1-.672-1-1.5S5.448 4 6 4s1 .672 1 1.5Zm4 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S9.448 4 10 4s1 .672 1 1.5ZM10 11a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`), EmojiSurprise[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function EmojiSurprise($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiSurprise);
  var svg = root804();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-surprise", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiSurprise = hmr(EmojiSurprise, () => EmojiSurprise[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiSurprise[HMR].source;
    set(EmojiSurprise[HMR].source, module.default[HMR].original);
  });
}
var EmojiSurprise_default = EmojiSurprise;
mark_module_end(EmojiSurprise);

// node_modules/svelte-bootstrap-icons/lib/EmojiTearFill.svelte
mark_module_start();
EmojiTearFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiTearFill.svelte";
var root805 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM9.5 3.5a.5.5 0 0 0 .5.5c.838 0 1.65.416 2.053 1.224a.5.5 0 1 0 .894-.448C12.351 3.584 11.162 3 10 3a.5.5 0 0 0-.5.5ZM7 6.5C7 5.672 6.552 5 6 5s-1 .672-1 1.5S5.448 8 6 8s1-.672 1-1.5ZM4.5 13c.828 0 1.5-.746 1.5-1.667 0-.706-.882-2.29-1.294-2.99a.238.238 0 0 0-.412 0C3.882 9.044 3 10.628 3 11.334 3 12.253 3.672 13 4.5 13ZM8 11.197c.916 0 1.607.408 2.25.826.212.138.424-.069.282-.277-.564-.83-1.558-2.049-2.532-2.049-.53 0-1.066.361-1.536.824.083.179.162.36.232.535.045.115.092.241.135.373A3.1 3.1 0 0 1 8 11.197ZM10 8c.552 0 1-.672 1-1.5S10.552 5 10 5s-1 .672-1 1.5S9.448 8 10 8ZM6.5 3c-1.162 0-2.35.584-2.947 1.776a.5.5 0 1 0 .894.448C4.851 4.416 5.662 4 6.5 4a.5.5 0 0 0 0-1Z"></path></svg>`), EmojiTearFill[FILENAME], [[1, 0, [[1, 176]]]]);
function EmojiTearFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiTearFill);
  var svg = root805();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-tear-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiTearFill = hmr(EmojiTearFill, () => EmojiTearFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiTearFill[HMR].source;
    set(EmojiTearFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiTearFill_default = EmojiTearFill;
mark_module_end(EmojiTearFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiTear.svelte
mark_module_start();
EmojiTear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiTear.svelte";
var root806 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14Zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z"></path><path d="M6.831 11.43A3.1 3.1 0 0 1 8 11.196c.916 0 1.607.408 2.25.826.212.138.424-.069.282-.277-.564-.83-1.558-2.049-2.532-2.049-.53 0-1.066.361-1.536.824.083.179.162.36.232.535.045.115.092.241.135.373ZM6 11.333C6 12.253 5.328 13 4.5 13S3 12.254 3 11.333c0-.706.882-2.29 1.294-2.99a.238.238 0 0 1 .412 0c.412.7 1.294 2.284 1.294 2.99ZM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5Zm4 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5Zm-1.5-3A.5.5 0 0 1 10 3c1.162 0 2.35.584 2.947 1.776a.5.5 0 1 1-.894.448C11.649 4.416 10.838 4 10 4a.5.5 0 0 1-.5-.5ZM7 3.5a.5.5 0 0 0-.5-.5c-1.162 0-2.35.584-2.947 1.776a.5.5 0 1 0 .894.448C4.851 4.416 5.662 4 6.5 4a.5.5 0 0 0 .5-.5Z"></path></svg>`), EmojiTear[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function EmojiTear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiTear);
  var svg = root806();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-tear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiTear = hmr(EmojiTear, () => EmojiTear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiTear[HMR].source;
    set(EmojiTear[HMR].source, module.default[HMR].original);
  });
}
var EmojiTear_default = EmojiTear;
mark_module_end(EmojiTear);

// node_modules/svelte-bootstrap-icons/lib/EmojiWinkFill.svelte
mark_module_start();
EmojiWinkFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiWinkFill.svelte";
var root807 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM7 6.5C7 5.672 6.552 5 6 5s-1 .672-1 1.5S5.448 8 6 8s1-.672 1-1.5zM4.285 9.567a.5.5 0 0 0-.183.683A4.498 4.498 0 0 0 8 12.5a4.5 4.5 0 0 0 3.898-2.25.5.5 0 1 0-.866-.5A3.498 3.498 0 0 1 8 11.5a3.498 3.498 0 0 1-3.032-1.75.5.5 0 0 0-.683-.183zm5.152-3.31a.5.5 0 0 0-.874.486c.33.595.958 1.007 1.687 1.007.73 0 1.356-.412 1.687-1.007a.5.5 0 0 0-.874-.486.934.934 0 0 1-.813.493.934.934 0 0 1-.813-.493z"></path></svg>`), EmojiWinkFill[FILENAME], [[1, 0, [[1, 176]]]]);
function EmojiWinkFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiWinkFill);
  var svg = root807();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-wink-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiWinkFill = hmr(EmojiWinkFill, () => EmojiWinkFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiWinkFill[HMR].source;
    set(EmojiWinkFill[HMR].source, module.default[HMR].original);
  });
}
var EmojiWinkFill_default = EmojiWinkFill;
mark_module_end(EmojiWinkFill);

// node_modules/svelte-bootstrap-icons/lib/EmojiWink.svelte
mark_module_start();
EmojiWink[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EmojiWink.svelte";
var root808 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M4.285 9.567a.5.5 0 0 1 .683.183A3.498 3.498 0 0 0 8 11.5a3.498 3.498 0 0 0 3.032-1.75.5.5 0 1 1 .866.5A4.498 4.498 0 0 1 8 12.5a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .183-.683zM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zm1.757-.437a.5.5 0 0 1 .68.194.934.934 0 0 0 .813.493c.339 0 .645-.19.813-.493a.5.5 0 1 1 .874.486A1.934 1.934 0 0 1 10.25 7.75c-.73 0-1.356-.412-1.687-1.007a.5.5 0 0 1 .194-.68z"></path></svg>`), EmojiWink[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function EmojiWink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EmojiWink);
  var svg = root808();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-emoji-wink", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EmojiWink = hmr(EmojiWink, () => EmojiWink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EmojiWink[HMR].source;
    set(EmojiWink[HMR].source, module.default[HMR].original);
  });
}
var EmojiWink_default = EmojiWink;
mark_module_end(EmojiWink);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeArrowDownFill.svelte
mark_module_start();
EnvelopeArrowDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeArrowDownFill.svelte";
var root809 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697Zm.192 8.159 6.57-4.027L8 9.586l1.239-.757.367.225A4.49 4.49 0 0 0 8 12.5c0 .526.09 1.03.256 1.5H2a2 2 0 0 1-1.808-1.144ZM16 4.697v4.974A4.491 4.491 0 0 0 12.5 8a4.49 4.49 0 0 0-1.965.45l-.338-.207L16 4.697Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-1.646a.5.5 0 0 1-.722-.016l-1.149-1.25a.5.5 0 1 1 .737-.676l.28.305V11a.5.5 0 0 1 1 0v1.793l.396-.397a.5.5 0 0 1 .708.708l-1.25 1.25Z"></path></svg>`), EnvelopeArrowDownFill[FILENAME], [
  [1, 0, [[1, 185], [2, 2]]]
]);
function EnvelopeArrowDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeArrowDownFill);
  var svg = root809();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-arrow-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeArrowDownFill = hmr(EnvelopeArrowDownFill, () => EnvelopeArrowDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeArrowDownFill[HMR].source;
    set(EnvelopeArrowDownFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeArrowDownFill_default = EnvelopeArrowDownFill;
mark_module_end(EnvelopeArrowDownFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeArrowDown.svelte
mark_module_start();
EnvelopeArrowDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeArrowDown.svelte";
var root810 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4.5a.5.5 0 0 1-1 0V5.383l-7 4.2-1.326-.795-5.64 3.47A1 1 0 0 0 2 13h5.5a.5.5 0 0 1 0 1H2a2 2 0 0 1-2-1.99V4Zm1 7.105 4.708-2.897L1 5.383v5.722ZM1 4v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-1.646a.5.5 0 0 1-.722-.016l-1.149-1.25a.5.5 0 1 1 .737-.676l.28.305V11a.5.5 0 0 1 1 0v1.793l.396-.397a.5.5 0 0 1 .708.708l-1.25 1.25Z"></path></svg>`), EnvelopeArrowDown[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function EnvelopeArrowDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeArrowDown);
  var svg = root810();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-arrow-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeArrowDown = hmr(EnvelopeArrowDown, () => EnvelopeArrowDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeArrowDown[HMR].source;
    set(EnvelopeArrowDown[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeArrowDown_default = EnvelopeArrowDown;
mark_module_end(EnvelopeArrowDown);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeArrowUpFill.svelte
mark_module_start();
EnvelopeArrowUpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeArrowUpFill.svelte";
var root811 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697Zm.192 8.159 6.57-4.027L8 9.586l1.239-.757.367.225A4.49 4.49 0 0 0 8 12.5c0 .526.09 1.03.256 1.5H2a2 2 0 0 1-1.808-1.144ZM16 4.697v4.974A4.491 4.491 0 0 0 12.5 8a4.49 4.49 0 0 0-1.965.45l-.338-.207L16 4.697Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.354 1.25 1.25a.5.5 0 0 1-.708.708L13 12.207V14a.5.5 0 0 1-1 0v-1.717l-.28.305a.5.5 0 0 1-.737-.676l1.149-1.25a.5.5 0 0 1 .722-.016Z"></path></svg>`), EnvelopeArrowUpFill[FILENAME], [
  [1, 0, [[1, 183], [2, 2]]]
]);
function EnvelopeArrowUpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeArrowUpFill);
  var svg = root811();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-arrow-up-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeArrowUpFill = hmr(EnvelopeArrowUpFill, () => EnvelopeArrowUpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeArrowUpFill[HMR].source;
    set(EnvelopeArrowUpFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeArrowUpFill_default = EnvelopeArrowUpFill;
mark_module_end(EnvelopeArrowUpFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeArrowUp.svelte
mark_module_start();
EnvelopeArrowUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeArrowUp.svelte";
var root812 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4.5a.5.5 0 0 1-1 0V5.383l-7 4.2-1.326-.795-5.64 3.47A1 1 0 0 0 2 13h5.5a.5.5 0 0 1 0 1H2a2 2 0 0 1-2-1.99V4Zm1 7.105 4.708-2.897L1 5.383v5.722ZM1 4v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.354 1.25 1.25a.5.5 0 0 1-.708.708L13 12.207V14a.5.5 0 0 1-1 0v-1.717l-.28.305a.5.5 0 0 1-.737-.676l1.149-1.25a.5.5 0 0 1 .722-.016Z"></path></svg>`), EnvelopeArrowUp[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function EnvelopeArrowUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeArrowUp);
  var svg = root812();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-arrow-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeArrowUp = hmr(EnvelopeArrowUp, () => EnvelopeArrowUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeArrowUp[HMR].source;
    set(EnvelopeArrowUp[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeArrowUp_default = EnvelopeArrowUp;
mark_module_end(EnvelopeArrowUp);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeAtFill.svelte
mark_module_start();
EnvelopeAtFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeAtFill.svelte";
var root813 = add_locations(ns_template(`<svg><!><path d="M2 2A2 2 0 0 0 .05 3.555L8 8.414l7.95-4.859A2 2 0 0 0 14 2H2Zm-2 9.8V4.698l5.803 3.546L0 11.801Zm6.761-2.97-6.57 4.026A2 2 0 0 0 2 14h6.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.606-3.446l-.367-.225L8 9.586l-1.239-.757ZM16 9.671V4.697l-5.803 3.546.338.208A4.482 4.482 0 0 1 12.5 8c1.414 0 2.675.652 3.5 1.671Z"></path><path d="M15.834 12.244c0 1.168-.577 2.025-1.587 2.025-.503 0-1.002-.228-1.12-.648h-.043c-.118.416-.543.643-1.015.643-.77 0-1.259-.542-1.259-1.434v-.529c0-.844.481-1.4 1.26-1.4.585 0 .87.333.953.63h.03v-.568h.905v2.19c0 .272.18.42.411.42.315 0 .639-.415.639-1.39v-.118c0-1.277-.95-2.326-2.484-2.326h-.04c-1.582 0-2.64 1.067-2.64 2.724v.157c0 1.867 1.237 2.654 2.57 2.654h.045c.507 0 .935-.07 1.18-.18v.731c-.219.1-.643.175-1.237.175h-.044C10.438 16 9 14.82 9 12.646v-.214C9 10.36 10.421 9 12.485 9h.035c2.12 0 3.314 1.43 3.314 3.034v.21Zm-4.04.21v.227c0 .586.227.8.581.8.31 0 .564-.17.564-.743v-.367c0-.516-.275-.708-.572-.708-.346 0-.573.245-.573.791Z"></path></svg>`), EnvelopeAtFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function EnvelopeAtFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeAtFill);
  var svg = root813();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-at-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeAtFill = hmr(EnvelopeAtFill, () => EnvelopeAtFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeAtFill[HMR].source;
    set(EnvelopeAtFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeAtFill_default = EnvelopeAtFill;
mark_module_end(EnvelopeAtFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeAt.svelte
mark_module_start();
EnvelopeAt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeAt.svelte";
var root814 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8.01A2 2 0 0 0 2 14h5.5a.5.5 0 0 0 0-1H2a1 1 0 0 1-.966-.741l5.64-3.471L8 9.583l7-4.2V8.5a.5.5 0 0 0 1 0V4a2 2 0 0 0-2-2H2Zm3.708 6.208L1 11.105V5.383l4.708 2.825ZM1 4.217V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v.217l-7 4.2-7-4.2Z"></path><path d="M14.247 14.269c1.01 0 1.587-.857 1.587-2.025v-.21C15.834 10.43 14.64 9 12.52 9h-.035C10.42 9 9 10.36 9 12.432v.214C9 14.82 10.438 16 12.358 16h.044c.594 0 1.018-.074 1.237-.175v-.73c-.245.11-.673.18-1.18.18h-.044c-1.334 0-2.571-.788-2.571-2.655v-.157c0-1.657 1.058-2.724 2.64-2.724h.04c1.535 0 2.484 1.05 2.484 2.326v.118c0 .975-.324 1.39-.639 1.39-.232 0-.41-.148-.41-.42v-2.19h-.906v.569h-.03c-.084-.298-.368-.63-.954-.63-.778 0-1.259.555-1.259 1.4v.528c0 .892.49 1.434 1.26 1.434.471 0 .896-.227 1.014-.643h.043c.118.42.617.648 1.12.648Zm-2.453-1.588v-.227c0-.546.227-.791.573-.791.297 0 .572.192.572.708v.367c0 .573-.253.744-.564.744-.354 0-.581-.215-.581-.8Z"></path></svg>`), EnvelopeAt[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function EnvelopeAt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeAt);
  var svg = root814();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-at", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeAt = hmr(EnvelopeAt, () => EnvelopeAt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeAt[HMR].source;
    set(EnvelopeAt[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeAt_default = EnvelopeAt;
mark_module_end(EnvelopeAt);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeCheckFill.svelte
mark_module_start();
EnvelopeCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeCheckFill.svelte";
var root815 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.026A2 2 0 0 0 2 14h6.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.606-3.446l-.367-.225L8 9.586l-1.239-.757ZM16 4.697v4.974A4.491 4.491 0 0 0 12.5 8a4.49 4.49 0 0 0-1.965.45l-.338-.207L16 4.697Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-1.993-1.679a.5.5 0 0 0-.686.172l-1.17 1.95-.547-.547a.5.5 0 0 0-.708.708l.774.773a.75.75 0 0 0 1.174-.144l1.335-2.226a.5.5 0 0 0-.172-.686Z"></path></svg>`), EnvelopeCheckFill[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function EnvelopeCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeCheckFill);
  var svg = root815();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeCheckFill = hmr(EnvelopeCheckFill, () => EnvelopeCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeCheckFill[HMR].source;
    set(EnvelopeCheckFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeCheckFill_default = EnvelopeCheckFill;
mark_module_end(EnvelopeCheckFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeCheck.svelte
mark_module_start();
EnvelopeCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeCheck.svelte";
var root816 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8.01A2 2 0 0 0 2 14h5.5a.5.5 0 0 0 0-1H2a1 1 0 0 1-.966-.741l5.64-3.471L8 9.583l7-4.2V8.5a.5.5 0 0 0 1 0V4a2 2 0 0 0-2-2H2Zm3.708 6.208L1 11.105V5.383l4.708 2.825ZM1 4.217V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v.217l-7 4.2-7-4.2Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-1.993-1.679a.5.5 0 0 0-.686.172l-1.17 1.95-.547-.547a.5.5 0 0 0-.708.708l.774.773a.75.75 0 0 0 1.174-.144l1.335-2.226a.5.5 0 0 0-.172-.686Z"></path></svg>`), EnvelopeCheck[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function EnvelopeCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeCheck);
  var svg = root816();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeCheck = hmr(EnvelopeCheck, () => EnvelopeCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeCheck[HMR].source;
    set(EnvelopeCheck[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeCheck_default = EnvelopeCheck;
mark_module_end(EnvelopeCheck);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeDashFill.svelte
mark_module_start();
EnvelopeDashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeDashFill.svelte";
var root817 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.026A2 2 0 0 0 2 14h6.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.606-3.446l-.367-.225L8 9.586l-1.239-.757ZM16 4.697v4.974A4.491 4.491 0 0 0 12.5 8a4.49 4.49 0 0 0-1.965.45l-.338-.207L16 4.697Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-5.5 0a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 0-1h-3a.5.5 0 0 0-.5.5Z"></path></svg>`), EnvelopeDashFill[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function EnvelopeDashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeDashFill);
  var svg = root817();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-dash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeDashFill = hmr(EnvelopeDashFill, () => EnvelopeDashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeDashFill[HMR].source;
    set(EnvelopeDashFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeDashFill_default = EnvelopeDashFill;
mark_module_end(EnvelopeDashFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeDash.svelte
mark_module_start();
EnvelopeDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeDash.svelte";
var root818 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8.01A2 2 0 0 0 2 14h5.5a.5.5 0 0 0 0-1H2a1 1 0 0 1-.966-.741l5.64-3.471L8 9.583l7-4.2V8.5a.5.5 0 0 0 1 0V4a2 2 0 0 0-2-2H2Zm3.708 6.208L1 11.105V5.383l4.708 2.825ZM1 4.217V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v.217l-7 4.2-7-4.2Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-5.5 0a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 0-1h-3a.5.5 0 0 0-.5.5Z"></path></svg>`), EnvelopeDash[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function EnvelopeDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeDash);
  var svg = root818();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeDash = hmr(EnvelopeDash, () => EnvelopeDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeDash[HMR].source;
    set(EnvelopeDash[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeDash_default = EnvelopeDash;
mark_module_end(EnvelopeDash);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeExclamationFill.svelte
mark_module_start();
EnvelopeExclamationFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeExclamationFill.svelte";
var root819 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.026A2 2 0 0 0 2 14h6.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.606-3.446l-.367-.225L8 9.586l-1.239-.757ZM16 4.697v4.974A4.491 4.491 0 0 0 12.5 8a4.49 4.49 0 0 0-1.965.45l-.338-.207L16 4.697Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1.5a.5.5 0 0 1-1 0V11a.5.5 0 0 1 1 0Zm0 3a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`), EnvelopeExclamationFill[FILENAME], [
  [1, 0, [[1, 186], [2, 2]]]
]);
function EnvelopeExclamationFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeExclamationFill);
  var svg = root819();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-exclamation-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeExclamationFill = hmr(EnvelopeExclamationFill, () => EnvelopeExclamationFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeExclamationFill[HMR].source;
    set(EnvelopeExclamationFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeExclamationFill_default = EnvelopeExclamationFill;
mark_module_end(EnvelopeExclamationFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeExclamation.svelte
mark_module_start();
EnvelopeExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeExclamation.svelte";
var root820 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8.01A2 2 0 0 0 2 14h5.5a.5.5 0 0 0 0-1H2a1 1 0 0 1-.966-.741l5.64-3.471L8 9.583l7-4.2V8.5a.5.5 0 0 0 1 0V4a2 2 0 0 0-2-2H2Zm3.708 6.208L1 11.105V5.383l4.708 2.825ZM1 4.217V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v.217l-7 4.2-7-4.2Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1.5a.5.5 0 0 1-1 0V11a.5.5 0 0 1 1 0Zm0 3a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`), EnvelopeExclamation[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function EnvelopeExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeExclamation);
  var svg = root820();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeExclamation = hmr(EnvelopeExclamation, () => EnvelopeExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeExclamation[HMR].source;
    set(EnvelopeExclamation[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeExclamation_default = EnvelopeExclamation;
mark_module_end(EnvelopeExclamation);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeFill.svelte
mark_module_start();
EnvelopeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeFill.svelte";
var root821 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757Zm3.436-.586L16 11.801V4.697l-5.803 3.546Z"></path></svg>`), EnvelopeFill[FILENAME], [[1, 0, [[1, 174]]]]);
function EnvelopeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeFill);
  var svg = root821();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeFill = hmr(EnvelopeFill, () => EnvelopeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeFill[HMR].source;
    set(EnvelopeFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeFill_default = EnvelopeFill;
mark_module_end(EnvelopeFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeHeartFill.svelte
mark_module_start();
EnvelopeHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeHeartFill.svelte";
var root822 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555l-4.2 2.568a2.785 2.785 0 0 0-.051-.105c-.666-1.3-2.363-1.917-3.699-1.25-1.336-.667-3.033-.05-3.699 1.25l-.05.105L.05 3.555ZM11.584 8.91a4.694 4.694 0 0 1-.073.139L16 11.8V4.697l-4.003 2.447c.027.562-.107 1.163-.413 1.767Zm-4.135 3.05c-1.048-.693-1.84-1.39-2.398-2.082L.19 12.856A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144L10.95 9.878c-.559.692-1.35 1.389-2.398 2.081L8 12.324l-.551-.365ZM4.416 8.91c-.306-.603-.44-1.204-.413-1.766L0 4.697v7.104l4.49-2.752a4.742 4.742 0 0 1-.074-.138Z"></path><path d="M8 5.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), EnvelopeHeartFill[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function EnvelopeHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeHeartFill);
  var svg = root822();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeHeartFill = hmr(EnvelopeHeartFill, () => EnvelopeHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeHeartFill[HMR].source;
    set(EnvelopeHeartFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeHeartFill_default = EnvelopeHeartFill;
mark_module_end(EnvelopeHeartFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeHeart.svelte
mark_module_start();
EnvelopeHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeHeart.svelte";
var root823 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm2-1a1 1 0 0 0-1 1v.217l3.235 1.94a2.76 2.76 0 0 0-.233 1.027L1 5.384v5.721l3.453-2.124c.146.277.329.556.55.835l-3.97 2.443A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.741l-3.968-2.442c.22-.28.403-.56.55-.836L15 11.105V5.383l-3.002 1.801a2.76 2.76 0 0 0-.233-1.026L15 4.217V4a1 1 0 0 0-1-1H2Zm6 2.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), EnvelopeHeart[FILENAME], [[1, 0, [[1, 175]]]]);
function EnvelopeHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeHeart);
  var svg = root823();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeHeart = hmr(EnvelopeHeart, () => EnvelopeHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeHeart[HMR].source;
    set(EnvelopeHeart[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeHeart_default = EnvelopeHeart;
mark_module_end(EnvelopeHeart);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeOpenFill.svelte
mark_module_start();
EnvelopeOpenFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeOpenFill.svelte";
var root824 = add_locations(ns_template(`<svg><!><path d="M8.941.435a2 2 0 0 0-1.882 0l-6 3.2A2 2 0 0 0 0 5.4v.314l6.709 3.932L8 8.928l1.291.718L16 5.714V5.4a2 2 0 0 0-1.059-1.765l-6-3.2ZM16 6.873l-5.693 3.337L16 13.372v-6.5Zm-.059 7.611L8 10.072.059 14.484A2 2 0 0 0 2 16h12a2 2 0 0 0 1.941-1.516ZM0 13.373l5.693-3.163L0 6.873v6.5Z"></path></svg>`), EnvelopeOpenFill[FILENAME], [[1, 0, [[1, 179]]]]);
function EnvelopeOpenFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeOpenFill);
  var svg = root824();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-open-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeOpenFill = hmr(EnvelopeOpenFill, () => EnvelopeOpenFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeOpenFill[HMR].source;
    set(EnvelopeOpenFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeOpenFill_default = EnvelopeOpenFill;
mark_module_end(EnvelopeOpenFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeOpenHeartFill.svelte
mark_module_start();
EnvelopeOpenHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeOpenHeartFill.svelte";
var root825 = add_locations(ns_template(`<svg><!><path d="M8.941.435a2 2 0 0 0-1.882 0l-6 3.2A2 2 0 0 0 0 5.4v.313l4.222 2.475c.024-.058.05-.114.08-.17.665-1.3 2.362-1.917 3.698-1.25 1.336-.667 3.033-.05 3.699 1.25a3.3 3.3 0 0 1 .08.17L16 5.713V5.4a2 2 0 0 0-1.059-1.765l-6-3.2ZM0 6.873l4 2.344c-.012.542.124 1.117.416 1.694l.004.006L0 13.372v-6.5Zm.059 7.611 4.9-2.723c.563.73 1.383 1.467 2.49 2.198l.551.365.551-.365c1.107-.73 1.927-1.467 2.49-2.198l4.9 2.723A2 2 0 0 1 14 16H2a2 2 0 0 1-1.941-1.516ZM16 13.372l-4.42-2.455.004-.006c.292-.577.428-1.152.415-1.694L16 6.873v6.5Z"></path><path d="M8 7.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), EnvelopeOpenHeartFill[FILENAME], [
  [1, 0, [[1, 185], [2, 2]]]
]);
function EnvelopeOpenHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeOpenHeartFill);
  var svg = root825();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-open-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeOpenHeartFill = hmr(EnvelopeOpenHeartFill, () => EnvelopeOpenHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeOpenHeartFill[HMR].source;
    set(EnvelopeOpenHeartFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeOpenHeartFill_default = EnvelopeOpenHeartFill;
mark_module_end(EnvelopeOpenHeartFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeOpenHeart.svelte
mark_module_start();
EnvelopeOpenHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeOpenHeart.svelte";
var root826 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.47 1.318a1 1 0 0 0-.94 0l-6 3.2A1 1 0 0 0 1 5.4v.817l3.235 1.94a2.76 2.76 0 0 0-.233 1.027L1 7.384v5.733l3.479-2.087c.15.275.335.553.558.83l-4.002 2.402A1 1 0 0 0 2 15h12a1 1 0 0 0 .965-.738l-4.002-2.401c.223-.278.408-.556.558-.831L15 13.117V7.383l-3.002 1.801a2.76 2.76 0 0 0-.233-1.026L15 6.217V5.4a1 1 0 0 0-.53-.882l-6-3.2ZM7.06.435a2 2 0 0 1 1.882 0l6 3.2A2 2 0 0 1 16 5.4V14a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V5.4a2 2 0 0 1 1.059-1.765l6-3.2ZM8 7.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132Z"></path></svg>`), EnvelopeOpenHeart[FILENAME], [[1, 0, [[1, 180]]]]);
function EnvelopeOpenHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeOpenHeart);
  var svg = root826();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-open-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeOpenHeart = hmr(EnvelopeOpenHeart, () => EnvelopeOpenHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeOpenHeart[HMR].source;
    set(EnvelopeOpenHeart[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeOpenHeart_default = EnvelopeOpenHeart;
mark_module_end(EnvelopeOpenHeart);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeOpen.svelte
mark_module_start();
EnvelopeOpen[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeOpen.svelte";
var root827 = add_locations(ns_template(`<svg><!><path d="M8.47 1.318a1 1 0 0 0-.94 0l-6 3.2A1 1 0 0 0 1 5.4v.817l5.75 3.45L8 8.917l1.25.75L15 6.217V5.4a1 1 0 0 0-.53-.882l-6-3.2ZM15 7.383l-4.778 2.867L15 13.117V7.383Zm-.035 6.88L8 10.082l-6.965 4.18A1 1 0 0 0 2 15h12a1 1 0 0 0 .965-.738ZM1 13.116l4.778-2.867L1 7.383v5.734ZM7.059.435a2 2 0 0 1 1.882 0l6 3.2A2 2 0 0 1 16 5.4V14a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V5.4a2 2 0 0 1 1.059-1.765l6-3.2Z"></path></svg>`), EnvelopeOpen[FILENAME], [[1, 0, [[1, 174]]]]);
function EnvelopeOpen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeOpen);
  var svg = root827();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-open", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeOpen = hmr(EnvelopeOpen, () => EnvelopeOpen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeOpen[HMR].source;
    set(EnvelopeOpen[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeOpen_default = EnvelopeOpen;
mark_module_end(EnvelopeOpen);

// node_modules/svelte-bootstrap-icons/lib/EnvelopePaperFill.svelte
mark_module_start();
EnvelopePaperFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopePaperFill.svelte";
var root828 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.5 9.5 3 7.5v-6A1.5 1.5 0 0 1 4.5 0h7A1.5 1.5 0 0 1 13 1.5v6l-3.5 2L8 8.75l-1.5.75ZM1.059 3.635 2 3.133v3.753L0 5.713V5.4a2 2 0 0 1 1.059-1.765ZM16 5.713l-2 1.173V3.133l.941.502A2 2 0 0 1 16 5.4v.313Zm0 1.16-5.693 3.337L16 13.372v-6.5Zm-8 3.199 7.941 4.412A2 2 0 0 1 14 16H2a2 2 0 0 1-1.941-1.516L8 10.072Zm-8 3.3 5.693-3.162L0 6.873v6.5Z"></path></svg>`), EnvelopePaperFill[FILENAME], [[1, 0, [[1, 180]]]]);
function EnvelopePaperFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopePaperFill);
  var svg = root828();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-paper-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopePaperFill = hmr(EnvelopePaperFill, () => EnvelopePaperFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopePaperFill[HMR].source;
    set(EnvelopePaperFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopePaperFill_default = EnvelopePaperFill;
mark_module_end(EnvelopePaperFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopePaperHeartFill.svelte
mark_module_start();
EnvelopePaperHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopePaperHeartFill.svelte";
var root829 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="m3 7.5 3.5 2L8 8.75l1.5.75 3.5-2v-6A1.5 1.5 0 0 0 11.5 0h-7A1.5 1.5 0 0 0 3 1.5v6ZM2 3.133l-.941.502A2 2 0 0 0 0 5.4v.313l2 1.173V3.133Zm12 3.753 2-1.173V5.4a2 2 0 0 0-1.059-1.765L14 3.133v3.753Zm-3.693 3.324L16 6.873v6.5l-5.693-3.163Zm5.634 4.274L8 10.072.059 14.484A2 2 0 0 0 2 16h12a2 2 0 0 0 1.941-1.516ZM5.693 10.21 0 13.372v-6.5l5.693 3.338ZM8 1.982C9.664.309 13.825 3.236 8 7 2.175 3.236 6.336.31 8 1.982Z"></path></svg>`), EnvelopePaperHeartFill[FILENAME], [[1, 0, [[1, 186]]]]);
function EnvelopePaperHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopePaperHeartFill);
  var svg = root829();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-paper-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopePaperHeartFill = hmr(EnvelopePaperHeartFill, () => EnvelopePaperHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopePaperHeartFill[HMR].source;
    set(EnvelopePaperHeartFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopePaperHeartFill_default = EnvelopePaperHeartFill;
mark_module_end(EnvelopePaperHeartFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopePaperHeart.svelte
mark_module_start();
EnvelopePaperHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopePaperHeart.svelte";
var root830 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v1.133l.941.502A2 2 0 0 1 16 5.4V14a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V5.4a2 2 0 0 1 1.059-1.765L2 3.133V2Zm0 2.267-.47.25A1 1 0 0 0 1 5.4v.817l1 .6v-2.55Zm1 3.15 3.75 2.25L8 8.917l1.25.75L13 7.417V2a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v5.417Zm11-.6 1-.6V5.4a1 1 0 0 0-.53-.882L14 4.267v2.55ZM8 2.982C9.664 1.309 13.825 4.236 8 8 2.175 4.236 6.336 1.31 8 2.982Zm7 4.401-4.778 2.867L15 13.117V7.383Zm-.035 6.88L8 10.082l-6.965 4.18A1 1 0 0 0 2 15h12a1 1 0 0 0 .965-.738ZM1 13.116l4.778-2.867L1 7.383v5.734Z"></path></svg>`), EnvelopePaperHeart[FILENAME], [[1, 0, [[1, 181]]]]);
function EnvelopePaperHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopePaperHeart);
  var svg = root830();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-paper-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopePaperHeart = hmr(EnvelopePaperHeart, () => EnvelopePaperHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopePaperHeart[HMR].source;
    set(EnvelopePaperHeart[HMR].source, module.default[HMR].original);
  });
}
var EnvelopePaperHeart_default = EnvelopePaperHeart;
mark_module_end(EnvelopePaperHeart);

// node_modules/svelte-bootstrap-icons/lib/EnvelopePaper.svelte
mark_module_start();
EnvelopePaper[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopePaper.svelte";
var root831 = add_locations(ns_template(`<svg><!><path d="M4 0a2 2 0 0 0-2 2v1.133l-.941.502A2 2 0 0 0 0 5.4V14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V5.4a2 2 0 0 0-1.059-1.765L14 3.133V2a2 2 0 0 0-2-2H4Zm10 4.267.47.25A1 1 0 0 1 15 5.4v.817l-1 .6v-2.55Zm-1 3.15-3.75 2.25L8 8.917l-1.25.75L3 7.417V2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v5.417Zm-11-.6-1-.6V5.4a1 1 0 0 1 .53-.882L2 4.267v2.55Zm13 .566v5.734l-4.778-2.867L15 7.383Zm-.035 6.88A1 1 0 0 1 14 15H2a1 1 0 0 1-.965-.738L8 10.083l6.965 4.18ZM1 13.116V7.383l4.778 2.867L1 13.117Z"></path></svg>`), EnvelopePaper[FILENAME], [[1, 0, [[1, 175]]]]);
function EnvelopePaper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopePaper);
  var svg = root831();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-paper", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopePaper = hmr(EnvelopePaper, () => EnvelopePaper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopePaper[HMR].source;
    set(EnvelopePaper[HMR].source, module.default[HMR].original);
  });
}
var EnvelopePaper_default = EnvelopePaper;
mark_module_end(EnvelopePaper);

// node_modules/svelte-bootstrap-icons/lib/EnvelopePlusFill.svelte
mark_module_start();
EnvelopePlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopePlusFill.svelte";
var root832 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.026A2 2 0 0 0 2 14h6.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.606-3.446l-.367-.225L8 9.586l-1.239-.757ZM16 4.697v4.974A4.491 4.491 0 0 0 12.5 8a4.49 4.49 0 0 0-1.965.45l-.338-.207L16 4.697Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5Z"></path></svg>`), EnvelopePlusFill[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function EnvelopePlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopePlusFill);
  var svg = root832();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopePlusFill = hmr(EnvelopePlusFill, () => EnvelopePlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopePlusFill[HMR].source;
    set(EnvelopePlusFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopePlusFill_default = EnvelopePlusFill;
mark_module_end(EnvelopePlusFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopePlus.svelte
mark_module_start();
EnvelopePlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopePlus.svelte";
var root833 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8.01A2 2 0 0 0 2 14h5.5a.5.5 0 0 0 0-1H2a1 1 0 0 1-.966-.741l5.64-3.471L8 9.583l7-4.2V8.5a.5.5 0 0 0 1 0V4a2 2 0 0 0-2-2H2Zm3.708 6.208L1 11.105V5.383l4.708 2.825ZM1 4.217V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v.217l-7 4.2-7-4.2Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5Z"></path></svg>`), EnvelopePlus[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function EnvelopePlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopePlus);
  var svg = root833();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopePlus = hmr(EnvelopePlus, () => EnvelopePlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopePlus[HMR].source;
    set(EnvelopePlus[HMR].source, module.default[HMR].original);
  });
}
var EnvelopePlus_default = EnvelopePlus;
mark_module_end(EnvelopePlus);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeSlashFill.svelte
mark_module_start();
EnvelopeSlashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeSlashFill.svelte";
var root834 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.026A2 2 0 0 0 2 14h6.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.606-3.446l-.367-.225L8 9.586l-1.239-.757ZM16 4.697v4.974A4.491 4.491 0 0 0 12.5 8a4.49 4.49 0 0 0-1.965.45l-.338-.207L16 4.697Z"></path><path d="M14.975 10.025a3.5 3.5 0 1 0-4.95 4.95 3.5 3.5 0 0 0 4.95-4.95Zm-4.243.707a2.501 2.501 0 0 1 3.147-.318l-3.465 3.465a2.501 2.501 0 0 1 .318-3.147Zm.39 3.854 3.464-3.465a2.501 2.501 0 0 1-3.465 3.465Z"></path></svg>`), EnvelopeSlashFill[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function EnvelopeSlashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeSlashFill);
  var svg = root834();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-slash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeSlashFill = hmr(EnvelopeSlashFill, () => EnvelopeSlashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeSlashFill[HMR].source;
    set(EnvelopeSlashFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeSlashFill_default = EnvelopeSlashFill;
mark_module_end(EnvelopeSlashFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeSlash.svelte
mark_module_start();
EnvelopeSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeSlash.svelte";
var root835 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8.01A2 2 0 0 0 2 14h5.5a.5.5 0 0 0 0-1H2a1 1 0 0 1-.966-.741l5.64-3.471L8 9.583l7-4.2V8.5a.5.5 0 0 0 1 0V4a2 2 0 0 0-2-2H2Zm3.708 6.208L1 11.105V5.383l4.708 2.825ZM1 4.217V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v.217l-7 4.2-7-4.2Z"></path><path d="M14.975 10.025a3.5 3.5 0 1 0-4.95 4.95 3.5 3.5 0 0 0 4.95-4.95Zm-4.243.707a2.501 2.501 0 0 1 3.147-.318l-3.465 3.465a2.501 2.501 0 0 1 .318-3.147Zm.39 3.854 3.464-3.465a2.501 2.501 0 0 1-3.465 3.465Z"></path></svg>`), EnvelopeSlash[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function EnvelopeSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeSlash);
  var svg = root835();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeSlash = hmr(EnvelopeSlash, () => EnvelopeSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeSlash[HMR].source;
    set(EnvelopeSlash[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeSlash_default = EnvelopeSlash;
mark_module_end(EnvelopeSlash);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeXFill.svelte
mark_module_start();
EnvelopeXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeXFill.svelte";
var root836 = add_locations(ns_template(`<svg><!><path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.026A2 2 0 0 0 2 14h6.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.606-3.446l-.367-.225L8 9.586l-1.239-.757ZM16 4.697v4.974A4.491 4.491 0 0 0 12.5 8a4.49 4.49 0 0 0-1.965.45l-.338-.207L16 4.697Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-4.854-1.354a.5.5 0 0 0 0 .708l.647.646-.647.646a.5.5 0 0 0 .708.708l.646-.647.646.647a.5.5 0 0 0 .708-.708l-.647-.646.647-.646a.5.5 0 0 0-.708-.708l-.646.647-.646-.647a.5.5 0 0 0-.708 0Z"></path></svg>`), EnvelopeXFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function EnvelopeXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeXFill);
  var svg = root836();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeXFill = hmr(EnvelopeXFill, () => EnvelopeXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeXFill[HMR].source;
    set(EnvelopeXFill[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeXFill_default = EnvelopeXFill;
mark_module_end(EnvelopeXFill);

// node_modules/svelte-bootstrap-icons/lib/EnvelopeX.svelte
mark_module_start();
EnvelopeX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EnvelopeX.svelte";
var root837 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8.01A2 2 0 0 0 2 14h5.5a.5.5 0 0 0 0-1H2a1 1 0 0 1-.966-.741l5.64-3.471L8 9.583l7-4.2V8.5a.5.5 0 0 0 1 0V4a2 2 0 0 0-2-2H2Zm3.708 6.208L1 11.105V5.383l4.708 2.825ZM1 4.217V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v.217l-7 4.2-7-4.2Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-4.854-1.354a.5.5 0 0 0 0 .708l.647.646-.647.646a.5.5 0 0 0 .708.708l.646-.647.646.647a.5.5 0 0 0 .708-.708l-.647-.646.647-.646a.5.5 0 0 0-.708-.708l-.646.647-.646-.647a.5.5 0 0 0-.708 0Z"></path></svg>`), EnvelopeX[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function EnvelopeX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EnvelopeX);
  var svg = root837();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnvelopeX = hmr(EnvelopeX, () => EnvelopeX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnvelopeX[HMR].source;
    set(EnvelopeX[HMR].source, module.default[HMR].original);
  });
}
var EnvelopeX_default = EnvelopeX;
mark_module_end(EnvelopeX);

// node_modules/svelte-bootstrap-icons/lib/Envelope.svelte
mark_module_start();
Envelope[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Envelope.svelte";
var root838 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2Zm13 2.383-4.708 2.825L15 11.105V5.383Zm-.034 6.876-5.64-3.471L8 9.583l-1.326-.795-5.64 3.47A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.741ZM1 11.105l4.708-2.897L1 5.383v5.722Z"></path></svg>`), Envelope[FILENAME], [[1, 0, [[1, 169]]]]);
function Envelope($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Envelope);
  var svg = root838();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-envelope", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Envelope = hmr(Envelope, () => Envelope[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Envelope[HMR].source;
    set(Envelope[HMR].source, module.default[HMR].original);
  });
}
var Envelope_default = Envelope;
mark_module_end(Envelope);

// node_modules/svelte-bootstrap-icons/lib/EraserFill.svelte
mark_module_start();
EraserFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EraserFill.svelte";
var root839 = add_locations(ns_template(`<svg><!><path d="M8.086 2.207a2 2 0 0 1 2.828 0l3.879 3.879a2 2 0 0 1 0 2.828l-5.5 5.5A2 2 0 0 1 7.879 15H5.12a2 2 0 0 1-1.414-.586l-2.5-2.5a2 2 0 0 1 0-2.828l6.879-6.879zm.66 11.34L3.453 8.254 1.914 9.793a1 1 0 0 0 0 1.414l2.5 2.5a1 1 0 0 0 .707.293H7.88a1 1 0 0 0 .707-.293l.16-.16z"></path></svg>`), EraserFill[FILENAME], [[1, 0, [[1, 172]]]]);
function EraserFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EraserFill);
  var svg = root839();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eraser-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EraserFill = hmr(EraserFill, () => EraserFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EraserFill[HMR].source;
    set(EraserFill[HMR].source, module.default[HMR].original);
  });
}
var EraserFill_default = EraserFill;
mark_module_end(EraserFill);

// node_modules/svelte-bootstrap-icons/lib/Eraser.svelte
mark_module_start();
Eraser[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Eraser.svelte";
var root840 = add_locations(ns_template(`<svg><!><path d="M8.086 2.207a2 2 0 0 1 2.828 0l3.879 3.879a2 2 0 0 1 0 2.828l-5.5 5.5A2 2 0 0 1 7.879 15H5.12a2 2 0 0 1-1.414-.586l-2.5-2.5a2 2 0 0 1 0-2.828l6.879-6.879zm2.121.707a1 1 0 0 0-1.414 0L4.16 7.547l5.293 5.293 4.633-4.633a1 1 0 0 0 0-1.414l-3.879-3.879zM8.746 13.547 3.453 8.254 1.914 9.793a1 1 0 0 0 0 1.414l2.5 2.5a1 1 0 0 0 .707.293H7.88a1 1 0 0 0 .707-.293l.16-.16z"></path></svg>`), Eraser[FILENAME], [[1, 0, [[1, 167]]]]);
function Eraser($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Eraser);
  var svg = root840();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eraser", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eraser = hmr(Eraser, () => Eraser[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eraser[HMR].source;
    set(Eraser[HMR].source, module.default[HMR].original);
  });
}
var Eraser_default = Eraser;
mark_module_end(Eraser);

// node_modules/svelte-bootstrap-icons/lib/Escape.svelte
mark_module_start();
Escape[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Escape.svelte";
var root841 = add_locations(ns_template(`<svg><!><path d="M8.538 1.02a.5.5 0 1 0-.076.998 6 6 0 1 1-6.445 6.444.5.5 0 0 0-.997.076A7 7 0 1 0 8.538 1.02Z"></path><path d="M7.096 7.828a.5.5 0 0 0 .707-.707L2.707 2.025h2.768a.5.5 0 1 0 0-1H1.5a.5.5 0 0 0-.5.5V5.5a.5.5 0 0 0 1 0V2.732l5.096 5.096Z"></path></svg>`), Escape[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Escape($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Escape);
  var svg = root841();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-escape", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Escape = hmr(Escape, () => Escape[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Escape[HMR].source;
    set(Escape[HMR].source, module.default[HMR].original);
  });
}
var Escape_default = Escape;
mark_module_end(Escape);

// node_modules/svelte-bootstrap-icons/lib/Ethernet.svelte
mark_module_start();
Ethernet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Ethernet.svelte";
var root842 = add_locations(ns_template(`<svg><!><path d="M14 13.5v-7a.5.5 0 0 0-.5-.5H12V4.5a.5.5 0 0 0-.5-.5h-1v-.5A.5.5 0 0 0 10 3H6a.5.5 0 0 0-.5.5V4h-1a.5.5 0 0 0-.5.5V6H2.5a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5ZM3.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm2 0h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5ZM9.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5Z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2ZM1 2a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2Z"></path></svg>`), Ethernet[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Ethernet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Ethernet);
  var svg = root842();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ethernet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ethernet = hmr(Ethernet, () => Ethernet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ethernet[HMR].source;
    set(Ethernet[HMR].source, module.default[HMR].original);
  });
}
var Ethernet_default = Ethernet;
mark_module_end(Ethernet);

// node_modules/svelte-bootstrap-icons/lib/EvFrontFill.svelte
mark_module_start();
EvFrontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EvFrontFill.svelte";
var root843 = add_locations(ns_template(`<svg><!><path d="M2.52 3.515A2.5 2.5 0 0 1 4.82 2h6.362c1 0 1.904.596 2.298 1.515l.792 1.848c.075.175.21.319.38.404.5.25.855.715.965 1.262l.335 1.679c.033.161.049.325.049.49v.413c0 .814-.39 1.543-1 1.997V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.338c-1.292.048-2.745.088-4 .088s-2.708-.04-4-.088V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.892c-.61-.454-1-1.183-1-1.997v-.413a2.5 2.5 0 0 1 .049-.49l.335-1.68c.11-.546.465-1.012.964-1.261a.807.807 0 0 0 .381-.404l.792-1.848Zm6.75.51a.186.186 0 0 0-.23.034L6.05 7.246a.188.188 0 0 0 .137.316h1.241l-.673 2.195a.188.188 0 0 0 .085.218c.075.043.17.03.23-.034l2.88-3.187a.188.188 0 0 0-.137-.316H8.572l.782-2.195a.188.188 0 0 0-.085-.218Z"></path></svg>`), EvFrontFill[FILENAME], [[1, 0, [[1, 174]]]]);
function EvFrontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EvFrontFill);
  var svg = root843();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ev-front-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EvFrontFill = hmr(EvFrontFill, () => EvFrontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EvFrontFill[HMR].source;
    set(EvFrontFill[HMR].source, module.default[HMR].original);
  });
}
var EvFrontFill_default = EvFrontFill;
mark_module_end(EvFrontFill);

// node_modules/svelte-bootstrap-icons/lib/EvFront.svelte
mark_module_start();
EvFront[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EvFront.svelte";
var root844 = add_locations(ns_template(`<svg><!><path d="M9.354 4.243a.188.188 0 0 0-.085-.218.186.186 0 0 0-.23.034L6.051 7.246a.188.188 0 0 0 .136.316h1.241l-.673 2.195a.188.188 0 0 0 .085.218c.075.043.17.03.23-.034l2.88-3.187a.188.188 0 0 0-.137-.316H8.572l.782-2.195Z"></path><path d="M4.819 2A2.5 2.5 0 0 0 2.52 3.515l-.792 1.848a.807.807 0 0 1-.38.404c-.5.25-.855.715-.965 1.262L.05 8.708a2.5 2.5 0 0 0-.049.49v.413c0 .814.39 1.543 1 1.997V13.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1.338c1.292.048 2.745.088 4 .088s2.708-.04 4-.088V13.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1.892c.61-.454 1-1.183 1-1.997v-.413c0-.165-.016-.329-.049-.49l-.335-1.68a1.807 1.807 0 0 0-.964-1.261.807.807 0 0 1-.381-.404l-.792-1.848A2.5 2.5 0 0 0 11.181 2H4.82ZM3.44 3.91A1.5 1.5 0 0 1 4.82 3h6.362a1.5 1.5 0 0 1 1.379.91l.792 1.847a1.8 1.8 0 0 0 .853.904c.222.112.381.32.43.564l.336 1.679c.02.097.029.195.029.294v.413a1.48 1.48 0 0 1-1.408 1.484c-1.555.07-3.786.155-5.592.155-1.806 0-4.037-.084-5.592-.155A1.479 1.479 0 0 1 1 9.611v-.413c0-.099.01-.197.03-.294l.335-1.68a.807.807 0 0 1 .43-.563c.383-.19.685-.511.853-.904l.792-1.848Z"></path></svg>`), EvFront[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function EvFront($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EvFront);
  var svg = root844();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ev-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EvFront = hmr(EvFront, () => EvFront[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EvFront[HMR].source;
    set(EvFront[HMR].source, module.default[HMR].original);
  });
}
var EvFront_default = EvFront;
mark_module_end(EvFront);

// node_modules/svelte-bootstrap-icons/lib/EvStationFill.svelte
mark_module_start();
EvStationFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EvStationFill.svelte";
var root845 = add_locations(ns_template(`<svg><!><path d="M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V9c0-.258-.104-.377-.357-.635l-.007-.008C13.379 8.096 13 7.71 13 7V4a.5.5 0 0 1 .146-.354l.5-.5a.5.5 0 0 1 .708 0l.5.5A.5.5 0 0 1 15 4v8.5a1.5 1.5 0 1 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1V2Zm2 .5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0-.5.5Zm2.631 9.96H4.14v-.893h1.403v-.505H4.14v-.855h1.49v-.54H3.485V13h2.146v-.54Zm1.316.54h.794l1.106-3.333h-.733l-.74 2.615h-.031l-.747-2.615h-.764L6.947 13Z"></path></svg>`), EvStationFill[FILENAME], [[1, 0, [[1, 176]]]]);
function EvStationFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EvStationFill);
  var svg = root845();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ev-station-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EvStationFill = hmr(EvStationFill, () => EvStationFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EvStationFill[HMR].source;
    set(EvStationFill[HMR].source, module.default[HMR].original);
  });
}
var EvStationFill_default = EvStationFill;
mark_module_end(EvStationFill);

// node_modules/svelte-bootstrap-icons/lib/EvStation.svelte
mark_module_start();
EvStation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EvStation.svelte";
var root846 = add_locations(ns_template(`<svg><!><path d="M3.5 2a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5h-5Zm2.131 10.46H4.14v-.893h1.403v-.505H4.14v-.855h1.49v-.54H3.485V13h2.146v-.54Zm1.316.54h.794l1.106-3.333h-.733l-.74 2.615h-.031l-.747-2.615h-.764L6.947 13Z"></path><path d="M3 0a2 2 0 0 0-2 2v13H.5a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1H11v-4a1 1 0 0 1 1 1v.5a1.5 1.5 0 0 0 3 0V4a.5.5 0 0 0-.146-.354l-.5-.5a.5.5 0 0 0-.707 0l-.5.5A.5.5 0 0 0 13 4v3c0 .71.38 1.096.636 1.357l.007.008c.253.258.357.377.357.635v3.5a.5.5 0 1 1-1 0V12a2 2 0 0 0-2-2V2a2 2 0 0 0-2-2H3Zm7 2v13H2V2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1Z"></path></svg>`), EvStation[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function EvStation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EvStation);
  var svg = root846();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ev-station", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EvStation = hmr(EvStation, () => EvStation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EvStation[HMR].source;
    set(EvStation[HMR].source, module.default[HMR].original);
  });
}
var EvStation_default = EvStation;
mark_module_end(EvStation);

// node_modules/svelte-bootstrap-icons/lib/ExclamationCircleFill.svelte
mark_module_start();
ExclamationCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationCircleFill.svelte";
var root847 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"></path></svg>`), ExclamationCircleFill[FILENAME], [[1, 0, [[1, 184]]]]);
function ExclamationCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationCircleFill);
  var svg = root847();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationCircleFill = hmr(ExclamationCircleFill, () => ExclamationCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationCircleFill[HMR].source;
    set(ExclamationCircleFill[HMR].source, module.default[HMR].original);
  });
}
var ExclamationCircleFill_default = ExclamationCircleFill;
mark_module_end(ExclamationCircleFill);

// node_modules/svelte-bootstrap-icons/lib/ExclamationCircle.svelte
mark_module_start();
ExclamationCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationCircle.svelte";
var root848 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"></path></svg>`), ExclamationCircle[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function ExclamationCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationCircle);
  var svg = root848();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationCircle = hmr(ExclamationCircle, () => ExclamationCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationCircle[HMR].source;
    set(ExclamationCircle[HMR].source, module.default[HMR].original);
  });
}
var ExclamationCircle_default = ExclamationCircle;
mark_module_end(ExclamationCircle);

// node_modules/svelte-bootstrap-icons/lib/ExclamationDiamondFill.svelte
mark_module_start();
ExclamationDiamondFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationDiamondFill.svelte";
var root849 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435zM8 4c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995A.905.905 0 0 1 8 4zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path></svg>`), ExclamationDiamondFill[FILENAME], [[1, 0, [[1, 185]]]]);
function ExclamationDiamondFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationDiamondFill);
  var svg = root849();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-diamond-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationDiamondFill = hmr(ExclamationDiamondFill, () => ExclamationDiamondFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationDiamondFill[HMR].source;
    set(ExclamationDiamondFill[HMR].source, module.default[HMR].original);
  });
}
var ExclamationDiamondFill_default = ExclamationDiamondFill;
mark_module_end(ExclamationDiamondFill);

// node_modules/svelte-bootstrap-icons/lib/ExclamationDiamond.svelte
mark_module_start();
ExclamationDiamond[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationDiamond.svelte";
var root850 = add_locations(ns_template(`<svg><!><path d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435zm1.4.7a.495.495 0 0 0-.7 0L1.134 7.65a.495.495 0 0 0 0 .7l6.516 6.516a.495.495 0 0 0 .7 0l6.516-6.516a.495.495 0 0 0 0-.7L8.35 1.134z"></path><path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"></path></svg>`), ExclamationDiamond[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function ExclamationDiamond($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationDiamond);
  var svg = root850();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-diamond", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationDiamond = hmr(ExclamationDiamond, () => ExclamationDiamond[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationDiamond[HMR].source;
    set(ExclamationDiamond[HMR].source, module.default[HMR].original);
  });
}
var ExclamationDiamond_default = ExclamationDiamond;
mark_module_end(ExclamationDiamond);

// node_modules/svelte-bootstrap-icons/lib/ExclamationLg.svelte
mark_module_start();
ExclamationLg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationLg.svelte";
var root851 = add_locations(ns_template(`<svg><!><path d="M7.005 3.1a1 1 0 1 1 1.99 0l-.388 6.35a.61.61 0 0 1-1.214 0L7.005 3.1ZM7 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z"></path></svg>`), ExclamationLg[FILENAME], [[1, 0, [[1, 175]]]]);
function ExclamationLg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationLg);
  var svg = root851();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-lg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationLg = hmr(ExclamationLg, () => ExclamationLg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationLg[HMR].source;
    set(ExclamationLg[HMR].source, module.default[HMR].original);
  });
}
var ExclamationLg_default = ExclamationLg;
mark_module_end(ExclamationLg);

// node_modules/svelte-bootstrap-icons/lib/ExclamationOctagonFill.svelte
mark_module_start();
ExclamationOctagonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationOctagonFill.svelte";
var root852 = add_locations(ns_template(`<svg><!><path d="M11.46.146A.5.5 0 0 0 11.107 0H4.893a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146zM8 4c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995A.905.905 0 0 1 8 4zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path></svg>`), ExclamationOctagonFill[FILENAME], [[1, 0, [[1, 185]]]]);
function ExclamationOctagonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationOctagonFill);
  var svg = root852();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-octagon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationOctagonFill = hmr(ExclamationOctagonFill, () => ExclamationOctagonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationOctagonFill[HMR].source;
    set(ExclamationOctagonFill[HMR].source, module.default[HMR].original);
  });
}
var ExclamationOctagonFill_default = ExclamationOctagonFill;
mark_module_end(ExclamationOctagonFill);

// node_modules/svelte-bootstrap-icons/lib/ExclamationOctagon.svelte
mark_module_start();
ExclamationOctagon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationOctagon.svelte";
var root853 = add_locations(ns_template(`<svg><!><path d="M4.54.146A.5.5 0 0 1 4.893 0h6.214a.5.5 0 0 1 .353.146l4.394 4.394a.5.5 0 0 1 .146.353v6.214a.5.5 0 0 1-.146.353l-4.394 4.394a.5.5 0 0 1-.353.146H4.893a.5.5 0 0 1-.353-.146L.146 11.46A.5.5 0 0 1 0 11.107V4.893a.5.5 0 0 1 .146-.353L4.54.146zM5.1 1 1 5.1v5.8L5.1 15h5.8l4.1-4.1V5.1L10.9 1H5.1z"></path><path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"></path></svg>`), ExclamationOctagon[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function ExclamationOctagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationOctagon);
  var svg = root853();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-octagon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationOctagon = hmr(ExclamationOctagon, () => ExclamationOctagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationOctagon[HMR].source;
    set(ExclamationOctagon[HMR].source, module.default[HMR].original);
  });
}
var ExclamationOctagon_default = ExclamationOctagon;
mark_module_end(ExclamationOctagon);

// node_modules/svelte-bootstrap-icons/lib/ExclamationSquareFill.svelte
mark_module_start();
ExclamationSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationSquareFill.svelte";
var root854 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6 4c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995A.905.905 0 0 1 8 4zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path></svg>`), ExclamationSquareFill[FILENAME], [[1, 0, [[1, 184]]]]);
function ExclamationSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationSquareFill);
  var svg = root854();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationSquareFill = hmr(ExclamationSquareFill, () => ExclamationSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationSquareFill[HMR].source;
    set(ExclamationSquareFill[HMR].source, module.default[HMR].original);
  });
}
var ExclamationSquareFill_default = ExclamationSquareFill;
mark_module_end(ExclamationSquareFill);

// node_modules/svelte-bootstrap-icons/lib/ExclamationSquare.svelte
mark_module_start();
ExclamationSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationSquare.svelte";
var root855 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"></path></svg>`), ExclamationSquare[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function ExclamationSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationSquare);
  var svg = root855();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationSquare = hmr(ExclamationSquare, () => ExclamationSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationSquare[HMR].source;
    set(ExclamationSquare[HMR].source, module.default[HMR].original);
  });
}
var ExclamationSquare_default = ExclamationSquare;
mark_module_end(ExclamationSquare);

// node_modules/svelte-bootstrap-icons/lib/ExclamationTriangleFill.svelte
mark_module_start();
ExclamationTriangleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationTriangleFill.svelte";
var root856 = add_locations(ns_template(`<svg><!><path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path></svg>`), ExclamationTriangleFill[FILENAME], [[1, 0, [[1, 186]]]]);
function ExclamationTriangleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationTriangleFill);
  var svg = root856();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-triangle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationTriangleFill = hmr(ExclamationTriangleFill, () => ExclamationTriangleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationTriangleFill[HMR].source;
    set(ExclamationTriangleFill[HMR].source, module.default[HMR].original);
  });
}
var ExclamationTriangleFill_default = ExclamationTriangleFill;
mark_module_end(ExclamationTriangleFill);

// node_modules/svelte-bootstrap-icons/lib/ExclamationTriangle.svelte
mark_module_start();
ExclamationTriangle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExclamationTriangle.svelte";
var root857 = add_locations(ns_template(`<svg><!><path d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.06.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z"></path><path d="M7.002 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 5.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995z"></path></svg>`), ExclamationTriangle[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function ExclamationTriangle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExclamationTriangle);
  var svg = root857();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation-triangle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExclamationTriangle = hmr(ExclamationTriangle, () => ExclamationTriangle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExclamationTriangle[HMR].source;
    set(ExclamationTriangle[HMR].source, module.default[HMR].original);
  });
}
var ExclamationTriangle_default = ExclamationTriangle;
mark_module_end(ExclamationTriangle);

// node_modules/svelte-bootstrap-icons/lib/Exclamation.svelte
mark_module_start();
Exclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Exclamation.svelte";
var root858 = add_locations(ns_template(`<svg><!><path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.553.553 0 0 1-1.1 0L7.1 4.995z"></path></svg>`), Exclamation[FILENAME], [[1, 0, [[1, 172]]]]);
function Exclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Exclamation);
  var svg = root858();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Exclamation = hmr(Exclamation, () => Exclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Exclamation[HMR].source;
    set(Exclamation[HMR].source, module.default[HMR].original);
  });
}
var Exclamation_default = Exclamation;
mark_module_end(Exclamation);

// node_modules/svelte-bootstrap-icons/lib/Exclude.svelte
mark_module_start();
Exclude[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Exclude.svelte";
var root859 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm12 2H5a1 1 0 0 0-1 1v7h7a1 1 0 0 0 1-1V4z"></path></svg>`), Exclude[FILENAME], [[1, 0, [[1, 168]]]]);
function Exclude($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Exclude);
  var svg = root859();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exclude", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Exclude = hmr(Exclude, () => Exclude[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Exclude[HMR].source;
    set(Exclude[HMR].source, module.default[HMR].original);
  });
}
var Exclude_default = Exclude;
mark_module_end(Exclude);

// node_modules/svelte-bootstrap-icons/lib/ExplicitFill.svelte
mark_module_start();
ExplicitFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ExplicitFill.svelte";
var root860 = add_locations(ns_template(`<svg><!><path d="M2.5 0A2.5 2.5 0 0 0 0 2.5v11A2.5 2.5 0 0 0 2.5 16h11a2.5 2.5 0 0 0 2.5-2.5v-11A2.5 2.5 0 0 0 13.5 0h-11Zm4.326 10.88H10.5V12h-5V4.002h5v1.12H6.826V7.4h3.457v1.073H6.826v2.408Z"></path></svg>`), ExplicitFill[FILENAME], [[1, 0, [[1, 174]]]]);
function ExplicitFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ExplicitFill);
  var svg = root860();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-explicit-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExplicitFill = hmr(ExplicitFill, () => ExplicitFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExplicitFill[HMR].source;
    set(ExplicitFill[HMR].source, module.default[HMR].original);
  });
}
var ExplicitFill_default = ExplicitFill;
mark_module_end(ExplicitFill);

// node_modules/svelte-bootstrap-icons/lib/Explicit.svelte
mark_module_start();
Explicit[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Explicit.svelte";
var root861 = add_locations(ns_template(`<svg><!><path d="M6.826 10.88H10.5V12h-5V4.002h5v1.12H6.826V7.4h3.457v1.073H6.826v2.408Z"></path><path d="M2.5 0A2.5 2.5 0 0 0 0 2.5v11A2.5 2.5 0 0 0 2.5 16h11a2.5 2.5 0 0 0 2.5-2.5v-11A2.5 2.5 0 0 0 13.5 0h-11ZM1 2.5A1.5 1.5 0 0 1 2.5 1h11A1.5 1.5 0 0 1 15 2.5v11a1.5 1.5 0 0 1-1.5 1.5h-11A1.5 1.5 0 0 1 1 13.5v-11Z"></path></svg>`), Explicit[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Explicit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Explicit);
  var svg = root861();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-explicit", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Explicit = hmr(Explicit, () => Explicit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Explicit[HMR].source;
    set(Explicit[HMR].source, module.default[HMR].original);
  });
}
var Explicit_default = Explicit;
mark_module_end(Explicit);

// node_modules/svelte-bootstrap-icons/lib/Exposure.svelte
mark_module_start();
Exposure[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Exposure.svelte";
var root862 = add_locations(ns_template(`<svg><!><path d="M8.5 4a.5.5 0 0 0-1 0v2h-2a.5.5 0 0 0 0 1h2v2a.5.5 0 0 0 1 0V7h2a.5.5 0 0 0 0-1h-2V4Zm-3 7a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5Z"></path><path fill-rule="evenodd" d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM1 8a7 7 0 1 1 14 0A7 7 0 0 1 1 8Z"></path></svg>`), Exposure[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Exposure($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Exposure);
  var svg = root862();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-exposure", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Exposure = hmr(Exposure, () => Exposure[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Exposure[HMR].source;
    set(Exposure[HMR].source, module.default[HMR].original);
  });
}
var Exposure_default = Exposure;
mark_module_end(Exposure);

// node_modules/svelte-bootstrap-icons/lib/EyeFill.svelte
mark_module_start();
EyeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EyeFill.svelte";
var root863 = add_locations(ns_template(`<svg><!><path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"></path><path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"></path></svg>`), EyeFill[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function EyeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EyeFill);
  var svg = root863();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eye-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EyeFill = hmr(EyeFill, () => EyeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EyeFill[HMR].source;
    set(EyeFill[HMR].source, module.default[HMR].original);
  });
}
var EyeFill_default = EyeFill;
mark_module_end(EyeFill);

// node_modules/svelte-bootstrap-icons/lib/EyeSlashFill.svelte
mark_module_start();
EyeSlashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EyeSlashFill.svelte";
var root864 = add_locations(ns_template(`<svg><!><path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588zM5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z"></path><path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12-.708.708z"></path></svg>`), EyeSlashFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function EyeSlashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EyeSlashFill);
  var svg = root864();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eye-slash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EyeSlashFill = hmr(EyeSlashFill, () => EyeSlashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EyeSlashFill[HMR].source;
    set(EyeSlashFill[HMR].source, module.default[HMR].original);
  });
}
var EyeSlashFill_default = EyeSlashFill;
mark_module_end(EyeSlashFill);

// node_modules/svelte-bootstrap-icons/lib/EyeSlash.svelte
mark_module_start();
EyeSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/EyeSlash.svelte";
var root865 = add_locations(ns_template(`<svg><!><path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"></path><path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"></path><path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"></path></svg>`), EyeSlash[FILENAME], [
  [
    1,
    0,
    [[1, 170], [2, 2], [3, 2]]
  ]
]);
function EyeSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, EyeSlash);
  var svg = root865();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eye-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EyeSlash = hmr(EyeSlash, () => EyeSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EyeSlash[HMR].source;
    set(EyeSlash[HMR].source, module.default[HMR].original);
  });
}
var EyeSlash_default = EyeSlash;
mark_module_end(EyeSlash);

// node_modules/svelte-bootstrap-icons/lib/Eye.svelte
mark_module_start();
Eye[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Eye.svelte";
var root866 = add_locations(ns_template(`<svg><!><path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"></path><path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"></path></svg>`), Eye[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Eye($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Eye);
  var svg = root866();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eye", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eye = hmr(Eye, () => Eye[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eye[HMR].source;
    set(Eye[HMR].source, module.default[HMR].original);
  });
}
var Eye_default = Eye;
mark_module_end(Eye);

// node_modules/svelte-bootstrap-icons/lib/Eyedropper.svelte
mark_module_start();
Eyedropper[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Eyedropper.svelte";
var root867 = add_locations(ns_template(`<svg><!><path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708l-2-2zM2 12.707l7-7L10.293 7l-7 7H2v-1.293z"></path></svg>`), Eyedropper[FILENAME], [[1, 0, [[1, 171]]]]);
function Eyedropper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Eyedropper);
  var svg = root867();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eyedropper", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eyedropper = hmr(Eyedropper, () => Eyedropper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eyedropper[HMR].source;
    set(Eyedropper[HMR].source, module.default[HMR].original);
  });
}
var Eyedropper_default = Eyedropper;
mark_module_end(Eyedropper);

// node_modules/svelte-bootstrap-icons/lib/Eyeglasses.svelte
mark_module_start();
Eyeglasses[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Eyeglasses.svelte";
var root868 = add_locations(ns_template(`<svg><!><path d="M4 6a2 2 0 1 1 0 4 2 2 0 0 1 0-4zm2.625.547a3 3 0 0 0-5.584.953H.5a.5.5 0 0 0 0 1h.541A3 3 0 0 0 7 8a1 1 0 0 1 2 0 3 3 0 0 0 5.959.5h.541a.5.5 0 0 0 0-1h-.541a3 3 0 0 0-5.584-.953A1.993 1.993 0 0 0 8 6c-.532 0-1.016.208-1.375.547zM14 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"></path></svg>`), Eyeglasses[FILENAME], [[1, 0, [[1, 171]]]]);
function Eyeglasses($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Eyeglasses);
  var svg = root868();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-eyeglasses", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eyeglasses = hmr(Eyeglasses, () => Eyeglasses[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eyeglasses[HMR].source;
    set(Eyeglasses[HMR].source, module.default[HMR].original);
  });
}
var Eyeglasses_default = Eyeglasses;
mark_module_end(Eyeglasses);

// node_modules/svelte-bootstrap-icons/lib/Facebook.svelte
mark_module_start();
Facebook[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Facebook.svelte";
var root869 = add_locations(ns_template(`<svg><!><path d="M16 8.049c0-4.446-3.582-8.05-8-8.05C3.58 0-.002 3.603-.002 8.05c0 4.017 2.926 7.347 6.75 7.951v-5.625h-2.03V8.05H6.75V6.275c0-2.017 1.195-3.131 3.022-3.131.876 0 1.791.157 1.791.157v1.98h-1.009c-.993 0-1.303.621-1.303 1.258v1.51h2.218l-.354 2.326H9.25V16c3.824-.604 6.75-3.934 6.75-7.951z"></path></svg>`), Facebook[FILENAME], [[1, 0, [[1, 169]]]]);
function Facebook($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Facebook);
  var svg = root869();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-facebook", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Facebook = hmr(Facebook, () => Facebook[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Facebook[HMR].source;
    set(Facebook[HMR].source, module.default[HMR].original);
  });
}
var Facebook_default = Facebook;
mark_module_end(Facebook);

// node_modules/svelte-bootstrap-icons/lib/Fan.svelte
mark_module_start();
Fan[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Fan.svelte";
var root870 = add_locations(ns_template(`<svg><!><path d="M10 3c0 1.313-.304 2.508-.8 3.4a1.991 1.991 0 0 0-1.484-.38c-.28-.982-.91-2.04-1.838-2.969a8.368 8.368 0 0 0-.491-.454A5.976 5.976 0 0 1 8 2c.691 0 1.355.117 1.973.332.018.219.027.442.027.668Zm0 5c0 .073-.004.146-.012.217 1.018-.019 2.2-.353 3.331-1.006a8.39 8.39 0 0 0 .57-.361 6.004 6.004 0 0 0-2.53-3.823 9.02 9.02 0 0 1-.145.64c-.34 1.269-.944 2.346-1.656 3.079.277.343.442.78.442 1.254Zm-.137.728a2.007 2.007 0 0 1-1.07 1.109c.525.87 1.405 1.725 2.535 2.377.2.116.402.222.605.317a5.986 5.986 0 0 0 2.053-4.111c-.208.073-.421.14-.641.199-1.264.339-2.493.356-3.482.11ZM8 10c-.45 0-.866-.149-1.2-.4-.494.89-.796 2.082-.796 3.391 0 .23.01.457.027.678A5.99 5.99 0 0 0 8 14c.94 0 1.83-.216 2.623-.602a8.359 8.359 0 0 1-.497-.458c-.925-.926-1.555-1.981-1.836-2.96-.094.013-.191.02-.29.02ZM6 8c0-.08.005-.16.014-.239-1.02.017-2.205.351-3.34 1.007a8.366 8.366 0 0 0-.568.359 6.003 6.003 0 0 0 2.525 3.839 8.37 8.37 0 0 1 .148-.653c.34-1.267.94-2.342 1.65-3.075A1.988 1.988 0 0 1 6 8Zm-3.347-.632c1.267-.34 2.498-.355 3.488-.107.196-.494.583-.89 1.07-1.1-.524-.874-1.406-1.733-2.541-2.388a8.363 8.363 0 0 0-.594-.312 5.987 5.987 0 0 0-2.06 4.106c.206-.074.418-.14.637-.199ZM8 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"></path><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14Zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z"></path></svg>`), Fan[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Fan($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Fan);
  var svg = root870();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fan", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fan = hmr(Fan, () => Fan[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fan[HMR].source;
    set(Fan[HMR].source, module.default[HMR].original);
  });
}
var Fan_default = Fan;
mark_module_end(Fan);

// node_modules/svelte-bootstrap-icons/lib/FastForwardBtnFill.svelte
mark_module_start();
FastForwardBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FastForwardBtnFill.svelte";
var root871 = add_locations(ns_template(`<svg><!><path d="M0 4v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2Zm4.271 1.055a.5.5 0 0 1 .52.038L8 7.386V5.5a.5.5 0 0 1 .79-.407l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 8 10.5V8.614l-3.21 2.293A.5.5 0 0 1 4 10.5v-5a.5.5 0 0 1 .271-.445Z"></path></svg>`), FastForwardBtnFill[FILENAME], [[1, 0, [[1, 182]]]]);
function FastForwardBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FastForwardBtnFill);
  var svg = root871();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fast-forward-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FastForwardBtnFill = hmr(FastForwardBtnFill, () => FastForwardBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FastForwardBtnFill[HMR].source;
    set(FastForwardBtnFill[HMR].source, module.default[HMR].original);
  });
}
var FastForwardBtnFill_default = FastForwardBtnFill;
mark_module_end(FastForwardBtnFill);

// node_modules/svelte-bootstrap-icons/lib/FastForwardBtn.svelte
mark_module_start();
FastForwardBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FastForwardBtn.svelte";
var root872 = add_locations(ns_template(`<svg><!><path d="M8.79 5.093A.5.5 0 0 0 8 5.5v1.886L4.79 5.093A.5.5 0 0 0 4 5.5v5a.5.5 0 0 0 .79.407L8 8.614V10.5a.5.5 0 0 0 .79.407l3.5-2.5a.5.5 0 0 0 0-.814l-3.5-2.5Z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4Z"></path></svg>`), FastForwardBtn[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function FastForwardBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FastForwardBtn);
  var svg = root872();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fast-forward-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FastForwardBtn = hmr(FastForwardBtn, () => FastForwardBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FastForwardBtn[HMR].source;
    set(FastForwardBtn[HMR].source, module.default[HMR].original);
  });
}
var FastForwardBtn_default = FastForwardBtn;
mark_module_end(FastForwardBtn);

// node_modules/svelte-bootstrap-icons/lib/FastForwardCircleFill.svelte
mark_module_start();
FastForwardCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FastForwardCircleFill.svelte";
var root873 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16ZM4.79 5.093 8 7.386V5.5a.5.5 0 0 1 .79-.407l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 8 10.5V8.614l-3.21 2.293A.5.5 0 0 1 4 10.5v-5a.5.5 0 0 1 .79-.407Z"></path></svg>`), FastForwardCircleFill[FILENAME], [[1, 0, [[1, 185]]]]);
function FastForwardCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FastForwardCircleFill);
  var svg = root873();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fast-forward-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FastForwardCircleFill = hmr(FastForwardCircleFill, () => FastForwardCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FastForwardCircleFill[HMR].source;
    set(FastForwardCircleFill[HMR].source, module.default[HMR].original);
  });
}
var FastForwardCircleFill_default = FastForwardCircleFill;
mark_module_end(FastForwardCircleFill);

// node_modules/svelte-bootstrap-icons/lib/FastForwardCircle.svelte
mark_module_start();
FastForwardCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FastForwardCircle.svelte";
var root874 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14Zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z"></path><path d="M4.271 5.055a.5.5 0 0 1 .52.038L8 7.386V5.5a.5.5 0 0 1 .79-.407l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 8 10.5V8.614l-3.21 2.293A.5.5 0 0 1 4 10.5v-5a.5.5 0 0 1 .271-.445Z"></path></svg>`), FastForwardCircle[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function FastForwardCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FastForwardCircle);
  var svg = root874();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fast-forward-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FastForwardCircle = hmr(FastForwardCircle, () => FastForwardCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FastForwardCircle[HMR].source;
    set(FastForwardCircle[HMR].source, module.default[HMR].original);
  });
}
var FastForwardCircle_default = FastForwardCircle;
mark_module_end(FastForwardCircle);

// node_modules/svelte-bootstrap-icons/lib/FastForwardFill.svelte
mark_module_start();
FastForwardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FastForwardFill.svelte";
var root875 = add_locations(ns_template(`<svg><!><path d="M7.596 7.304a.802.802 0 0 1 0 1.392l-6.363 3.692C.713 12.69 0 12.345 0 11.692V4.308c0-.653.713-.998 1.233-.696l6.363 3.692Z"></path><path d="M15.596 7.304a.802.802 0 0 1 0 1.392l-6.363 3.692C8.713 12.69 8 12.345 8 11.692V4.308c0-.653.713-.998 1.233-.696l6.363 3.692Z"></path></svg>`), FastForwardFill[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FastForwardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FastForwardFill);
  var svg = root875();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fast-forward-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FastForwardFill = hmr(FastForwardFill, () => FastForwardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FastForwardFill[HMR].source;
    set(FastForwardFill[HMR].source, module.default[HMR].original);
  });
}
var FastForwardFill_default = FastForwardFill;
mark_module_end(FastForwardFill);

// node_modules/svelte-bootstrap-icons/lib/FastForward.svelte
mark_module_start();
FastForward[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FastForward.svelte";
var root876 = add_locations(ns_template(`<svg><!><path d="M6.804 8 1 4.633v6.734L6.804 8Zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C.713 12.69 0 12.345 0 11.692V4.308c0-.653.713-.998 1.233-.696l6.363 3.692Z"></path><path d="M14.804 8 9 4.633v6.734L14.804 8Zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C8.713 12.69 8 12.345 8 11.692V4.308c0-.653.713-.998 1.233-.696l6.363 3.692Z"></path></svg>`), FastForward[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function FastForward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FastForward);
  var svg = root876();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fast-forward", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FastForward = hmr(FastForward, () => FastForward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FastForward[HMR].source;
    set(FastForward[HMR].source, module.default[HMR].original);
  });
}
var FastForward_default = FastForward;
mark_module_end(FastForward);

// node_modules/svelte-bootstrap-icons/lib/Feather.svelte
mark_module_start();
Feather[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Feather.svelte";
var root877 = add_locations(ns_template(`<svg><!><path d="M15.807.531c-.174-.177-.41-.289-.64-.363a3.765 3.765 0 0 0-.833-.15c-.62-.049-1.394 0-2.252.175C10.365.545 8.264 1.415 6.315 3.1c-1.95 1.686-3.168 3.724-3.758 5.423-.294.847-.44 1.634-.429 2.268.005.316.05.62.154.88.017.04.035.082.056.122A68.362 68.362 0 0 0 .08 15.198a.528.528 0 0 0 .157.72.504.504 0 0 0 .705-.16 67.606 67.606 0 0 1 2.158-3.26c.285.141.616.195.958.182.513-.02 1.098-.188 1.723-.49 1.25-.605 2.744-1.787 4.303-3.642l1.518-1.55a.528.528 0 0 0 0-.739l-.729-.744 1.311.209a.504.504 0 0 0 .443-.15c.222-.23.444-.46.663-.684.663-.68 1.292-1.325 1.763-1.892.314-.378.585-.752.754-1.107.163-.345.278-.773.112-1.188a.524.524 0 0 0-.112-.172ZM3.733 11.62C5.385 9.374 7.24 7.215 9.309 5.394l1.21 1.234-1.171 1.196a.526.526 0 0 0-.027.03c-1.5 1.789-2.891 2.867-3.977 3.393-.544.263-.99.378-1.324.39a1.282 1.282 0 0 1-.287-.018Zm6.769-7.22c1.31-1.028 2.7-1.914 4.172-2.6a6.85 6.85 0 0 1-.4.523c-.442.533-1.028 1.134-1.681 1.804l-.51.524-1.581-.25Zm3.346-3.357C9.594 3.147 6.045 6.8 3.149 10.678c.007-.464.121-1.086.37-1.806.533-1.535 1.65-3.415 3.455-4.976 1.807-1.561 3.746-2.36 5.31-2.68a7.97 7.97 0 0 1 1.564-.173Z"></path></svg>`), Feather[FILENAME], [[1, 0, [[1, 168]]]]);
function Feather($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Feather);
  var svg = root877();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-feather", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Feather = hmr(Feather, () => Feather[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Feather[HMR].source;
    set(Feather[HMR].source, module.default[HMR].original);
  });
}
var Feather_default = Feather;
mark_module_end(Feather);

// node_modules/svelte-bootstrap-icons/lib/Feather2.svelte
mark_module_start();
Feather2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Feather2.svelte";
var root878 = add_locations(ns_template(`<svg><!><path d="M7.5 1.063v9.556L6 8.819V3a2 2 0 0 1 1.5-1.937ZM8 0a3 3 0 0 0-3 3v6a.5.5 0 0 0 .116.32L7.5 12.181V15.5a.5.5 0 0 0 1 0v-3.319l2.384-2.86A.5.5 0 0 0 11 9V3a3 3 0 0 0-3-3Zm.5 1.063A2 2 0 0 1 10 3v.293l-1.5 1.5v-3.73ZM10 4.707V8.82l-1.5 1.8V6.207l1.5-1.5Z"></path></svg>`), Feather2[FILENAME], [[1, 0, [[1, 169]]]]);
function Feather2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Feather2);
  var svg = root878();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-feather2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Feather2 = hmr(Feather2, () => Feather2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Feather2[HMR].source;
    set(Feather2[HMR].source, module.default[HMR].original);
  });
}
var Feather2_default = Feather2;
mark_module_end(Feather2);

// node_modules/svelte-bootstrap-icons/lib/FileArrowDownFill.svelte
mark_module_start();
FileArrowDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileArrowDownFill.svelte";
var root879 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM8 5a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5A.5.5 0 0 1 8 5z"></path></svg>`), FileArrowDownFill[FILENAME], [[1, 0, [[1, 181]]]]);
function FileArrowDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileArrowDownFill);
  var svg = root879();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-arrow-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileArrowDownFill = hmr(FileArrowDownFill, () => FileArrowDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileArrowDownFill[HMR].source;
    set(FileArrowDownFill[HMR].source, module.default[HMR].original);
  });
}
var FileArrowDownFill_default = FileArrowDownFill;
mark_module_end(FileArrowDownFill);

// node_modules/svelte-bootstrap-icons/lib/FileArrowDown.svelte
mark_module_start();
FileArrowDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileArrowDown.svelte";
var root880 = add_locations(ns_template(`<svg><!><path d="M8 5a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5A.5.5 0 0 1 8 5z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileArrowDown[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function FileArrowDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileArrowDown);
  var svg = root880();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-arrow-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileArrowDown = hmr(FileArrowDown, () => FileArrowDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileArrowDown[HMR].source;
    set(FileArrowDown[HMR].source, module.default[HMR].original);
  });
}
var FileArrowDown_default = FileArrowDown;
mark_module_end(FileArrowDown);

// node_modules/svelte-bootstrap-icons/lib/FileArrowUpFill.svelte
mark_module_start();
FileArrowUpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileArrowUpFill.svelte";
var root881 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM7.5 6.707 6.354 7.854a.5.5 0 1 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707z"></path></svg>`), FileArrowUpFill[FILENAME], [[1, 0, [[1, 179]]]]);
function FileArrowUpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileArrowUpFill);
  var svg = root881();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-arrow-up-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileArrowUpFill = hmr(FileArrowUpFill, () => FileArrowUpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileArrowUpFill[HMR].source;
    set(FileArrowUpFill[HMR].source, module.default[HMR].original);
  });
}
var FileArrowUpFill_default = FileArrowUpFill;
mark_module_end(FileArrowUpFill);

// node_modules/svelte-bootstrap-icons/lib/FileArrowUp.svelte
mark_module_start();
FileArrowUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileArrowUp.svelte";
var root882 = add_locations(ns_template(`<svg><!><path d="M8 11a.5.5 0 0 0 .5-.5V6.707l1.146 1.147a.5.5 0 0 0 .708-.708l-2-2a.5.5 0 0 0-.708 0l-2 2a.5.5 0 1 0 .708.708L7.5 6.707V10.5a.5.5 0 0 0 .5.5z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileArrowUp[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function FileArrowUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileArrowUp);
  var svg = root882();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-arrow-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileArrowUp = hmr(FileArrowUp, () => FileArrowUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileArrowUp[HMR].source;
    set(FileArrowUp[HMR].source, module.default[HMR].original);
  });
}
var FileArrowUp_default = FileArrowUp;
mark_module_end(FileArrowUp);

// node_modules/svelte-bootstrap-icons/lib/FileBarGraphFill.svelte
mark_module_start();
FileBarGraphFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileBarGraphFill.svelte";
var root883 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm-2 11.5v-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm-2.5.5a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-1zm-3 0a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-1z"></path></svg>`), FileBarGraphFill[FILENAME], [[1, 0, [[1, 180]]]]);
function FileBarGraphFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileBarGraphFill);
  var svg = root883();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-bar-graph-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileBarGraphFill = hmr(FileBarGraphFill, () => FileBarGraphFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileBarGraphFill[HMR].source;
    set(FileBarGraphFill[HMR].source, module.default[HMR].original);
  });
}
var FileBarGraphFill_default = FileBarGraphFill;
mark_module_end(FileBarGraphFill);

// node_modules/svelte-bootstrap-icons/lib/FileBarGraph.svelte
mark_module_start();
FileBarGraph[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileBarGraph.svelte";
var root884 = add_locations(ns_template(`<svg><!><path d="M4.5 12a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-1zm3 0a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-1zm3 0a.5.5 0 0 1-.5-.5v-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5h-1z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileBarGraph[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function FileBarGraph($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileBarGraph);
  var svg = root884();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-bar-graph", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileBarGraph = hmr(FileBarGraph, () => FileBarGraph[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileBarGraph[HMR].source;
    set(FileBarGraph[HMR].source, module.default[HMR].original);
  });
}
var FileBarGraph_default = FileBarGraph;
mark_module_end(FileBarGraph);

// node_modules/svelte-bootstrap-icons/lib/FileBinaryFill.svelte
mark_module_start();
FileBinaryFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileBinaryFill.svelte";
var root885 = add_locations(ns_template(`<svg><!><path d="M5.526 9.273c-.542 0-.832.563-.832 1.612 0 .088.003.173.006.252l1.56-1.143c-.126-.474-.375-.72-.733-.72zm-.732 2.508c.126.472.372.718.732.718.54 0 .83-.563.83-1.614 0-.085-.003-.17-.006-.25l-1.556 1.146z"></path><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM7.05 10.885c0 1.415-.548 2.206-1.524 2.206C4.548 13.09 4 12.3 4 10.885c0-1.412.548-2.203 1.526-2.203.976 0 1.524.79 1.524 2.203zm3.805 1.52V13h-3v-.595h1.181V9.5h-.05l-1.136.747v-.688l1.19-.786h.69v3.633h1.125z"></path></svg>`), FileBinaryFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function FileBinaryFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileBinaryFill);
  var svg = root885();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-binary-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileBinaryFill = hmr(FileBinaryFill, () => FileBinaryFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileBinaryFill[HMR].source;
    set(FileBinaryFill[HMR].source, module.default[HMR].original);
  });
}
var FileBinaryFill_default = FileBinaryFill;
mark_module_end(FileBinaryFill);

// node_modules/svelte-bootstrap-icons/lib/FileBinary.svelte
mark_module_start();
FileBinary[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileBinary.svelte";
var root886 = add_locations(ns_template(`<svg><!><path d="M5.526 13.09c.976 0 1.524-.79 1.524-2.205 0-1.412-.548-2.203-1.524-2.203-.978 0-1.526.79-1.526 2.203 0 1.415.548 2.206 1.526 2.206zm-.832-2.205c0-1.05.29-1.612.832-1.612.358 0 .607.247.733.721L4.7 11.137a6.749 6.749 0 0 1-.006-.252zm.832 1.614c-.36 0-.606-.246-.732-.718l1.556-1.145c.003.079.005.164.005.249 0 1.052-.29 1.614-.829 1.614zm5.329.501v-.595H9.73V8.772h-.69l-1.19.786v.688L8.986 9.5h.05v2.906h-1.18V13h3z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileBinary[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function FileBinary($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileBinary);
  var svg = root886();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-binary", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileBinary = hmr(FileBinary, () => FileBinary[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileBinary[HMR].source;
    set(FileBinary[HMR].source, module.default[HMR].original);
  });
}
var FileBinary_default = FileBinary;
mark_module_end(FileBinary);

// node_modules/svelte-bootstrap-icons/lib/FileBreakFill.svelte
mark_module_start();
FileBreakFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileBreakFill.svelte";
var root887 = add_locations(ns_template(`<svg><!><path d="M4 0h8a2 2 0 0 1 2 2v7H2V2a2 2 0 0 1 2-2zM2 12h12v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-2zM.5 10a.5.5 0 0 0 0 1h15a.5.5 0 0 0 0-1H.5z"></path></svg>`), FileBreakFill[FILENAME], [[1, 0, [[1, 176]]]]);
function FileBreakFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileBreakFill);
  var svg = root887();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-break-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileBreakFill = hmr(FileBreakFill, () => FileBreakFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileBreakFill[HMR].source;
    set(FileBreakFill[HMR].source, module.default[HMR].original);
  });
}
var FileBreakFill_default = FileBreakFill;
mark_module_end(FileBreakFill);

// node_modules/svelte-bootstrap-icons/lib/FileBreak.svelte
mark_module_start();
FileBreak[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileBreak.svelte";
var root888 = add_locations(ns_template(`<svg><!><path d="M0 10.5a.5.5 0 0 1 .5-.5h15a.5.5 0 0 1 0 1H.5a.5.5 0 0 1-.5-.5zM12 0H4a2 2 0 0 0-2 2v7h1V2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v7h1V2a2 2 0 0 0-2-2zm2 12h-1v2a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-2H2v2a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-2z"></path></svg>`), FileBreak[FILENAME], [[1, 0, [[1, 171]]]]);
function FileBreak($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileBreak);
  var svg = root888();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-break", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileBreak = hmr(FileBreak, () => FileBreak[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileBreak[HMR].source;
    set(FileBreak[HMR].source, module.default[HMR].original);
  });
}
var FileBreak_default = FileBreak;
mark_module_end(FileBreak);

// node_modules/svelte-bootstrap-icons/lib/FileCheckFill.svelte
mark_module_start();
FileCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileCheckFill.svelte";
var root889 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm-1.146 6.854-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 8.793l2.646-2.647a.5.5 0 0 1 .708.708z"></path></svg>`), FileCheckFill[FILENAME], [[1, 0, [[1, 176]]]]);
function FileCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileCheckFill);
  var svg = root889();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileCheckFill = hmr(FileCheckFill, () => FileCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileCheckFill[HMR].source;
    set(FileCheckFill[HMR].source, module.default[HMR].original);
  });
}
var FileCheckFill_default = FileCheckFill;
mark_module_end(FileCheckFill);

// node_modules/svelte-bootstrap-icons/lib/FileCheck.svelte
mark_module_start();
FileCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileCheck.svelte";
var root890 = add_locations(ns_template(`<svg><!><path d="M10.854 6.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 8.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileCheck[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function FileCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileCheck);
  var svg = root890();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileCheck = hmr(FileCheck, () => FileCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileCheck[HMR].source;
    set(FileCheck[HMR].source, module.default[HMR].original);
  });
}
var FileCheck_default = FileCheck;
mark_module_end(FileCheck);

// node_modules/svelte-bootstrap-icons/lib/FileCodeFill.svelte
mark_module_start();
FileCodeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileCodeFill.svelte";
var root891 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM6.646 5.646a.5.5 0 1 1 .708.708L5.707 8l1.647 1.646a.5.5 0 0 1-.708.708l-2-2a.5.5 0 0 1 0-.708l2-2zm2.708 0 2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L10.293 8 8.646 6.354a.5.5 0 1 1 .708-.708z"></path></svg>`), FileCodeFill[FILENAME], [[1, 0, [[1, 175]]]]);
function FileCodeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileCodeFill);
  var svg = root891();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-code-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileCodeFill = hmr(FileCodeFill, () => FileCodeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileCodeFill[HMR].source;
    set(FileCodeFill[HMR].source, module.default[HMR].original);
  });
}
var FileCodeFill_default = FileCodeFill;
mark_module_end(FileCodeFill);

// node_modules/svelte-bootstrap-icons/lib/FileCode.svelte
mark_module_start();
FileCode[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileCode.svelte";
var root892 = add_locations(ns_template(`<svg><!><path d="M6.646 5.646a.5.5 0 1 1 .708.708L5.707 8l1.647 1.646a.5.5 0 0 1-.708.708l-2-2a.5.5 0 0 1 0-.708l2-2zm2.708 0a.5.5 0 1 0-.708.708L10.293 8 8.646 9.646a.5.5 0 0 0 .708.708l2-2a.5.5 0 0 0 0-.708l-2-2z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path></svg>`), FileCode[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FileCode($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileCode);
  var svg = root892();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-code", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileCode = hmr(FileCode, () => FileCode[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileCode[HMR].source;
    set(FileCode[HMR].source, module.default[HMR].original);
  });
}
var FileCode_default = FileCode;
mark_module_end(FileCode);

// node_modules/svelte-bootstrap-icons/lib/FileDiffFill.svelte
mark_module_start();
FileDiffFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileDiffFill.svelte";
var root893 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM8.5 4.5V6H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V7H6a.5.5 0 0 1 0-1h1.5V4.5a.5.5 0 0 1 1 0zM6 10h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1 0-1z"></path></svg>`), FileDiffFill[FILENAME], [[1, 0, [[1, 175]]]]);
function FileDiffFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileDiffFill);
  var svg = root893();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-diff-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileDiffFill = hmr(FileDiffFill, () => FileDiffFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileDiffFill[HMR].source;
    set(FileDiffFill[HMR].source, module.default[HMR].original);
  });
}
var FileDiffFill_default = FileDiffFill;
mark_module_end(FileDiffFill);

// node_modules/svelte-bootstrap-icons/lib/FileDiff.svelte
mark_module_start();
FileDiff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileDiff.svelte";
var root894 = add_locations(ns_template(`<svg><!><path d="M8 4a.5.5 0 0 1 .5.5V6H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V7H6a.5.5 0 0 1 0-1h1.5V4.5A.5.5 0 0 1 8 4zm-2.5 6.5A.5.5 0 0 1 6 10h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path></svg>`), FileDiff[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FileDiff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileDiff);
  var svg = root894();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-diff", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileDiff = hmr(FileDiff, () => FileDiff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileDiff[HMR].source;
    set(FileDiff[HMR].source, module.default[HMR].original);
  });
}
var FileDiff_default = FileDiff;
mark_module_end(FileDiff);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkArrowDownFill.svelte
mark_module_start();
FileEarmarkArrowDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkArrowDownFill.svelte";
var root895 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zm-1 4v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 11.293V7.5a.5.5 0 0 1 1 0z"></path></svg>`), FileEarmarkArrowDownFill[FILENAME], [[1, 0, [[1, 189]]]]);
function FileEarmarkArrowDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkArrowDownFill);
  var svg = root895();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-arrow-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkArrowDownFill = hmr(FileEarmarkArrowDownFill, () => FileEarmarkArrowDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkArrowDownFill[HMR].source;
    set(FileEarmarkArrowDownFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkArrowDownFill_default = FileEarmarkArrowDownFill;
mark_module_end(FileEarmarkArrowDownFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkArrowDown.svelte
mark_module_start();
FileEarmarkArrowDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkArrowDown.svelte";
var root896 = add_locations(ns_template(`<svg><!><path d="M8.5 6.5a.5.5 0 0 0-1 0v3.793L6.354 9.146a.5.5 0 1 0-.708.708l2 2a.5.5 0 0 0 .708 0l2-2a.5.5 0 0 0-.708-.708L8.5 10.293V6.5z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkArrowDown[FILENAME], [
  [1, 0, [[1, 184], [2, 2]]]
]);
function FileEarmarkArrowDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkArrowDown);
  var svg = root896();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-arrow-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkArrowDown = hmr(FileEarmarkArrowDown, () => FileEarmarkArrowDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkArrowDown[HMR].source;
    set(FileEarmarkArrowDown[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkArrowDown_default = FileEarmarkArrowDown;
mark_module_end(FileEarmarkArrowDown);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkArrowUpFill.svelte
mark_module_start();
FileEarmarkArrowUpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkArrowUpFill.svelte";
var root897 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM6.354 9.854a.5.5 0 0 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 8.707V12.5a.5.5 0 0 1-1 0V8.707L6.354 9.854z"></path></svg>`), FileEarmarkArrowUpFill[FILENAME], [[1, 0, [[1, 187]]]]);
function FileEarmarkArrowUpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkArrowUpFill);
  var svg = root897();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-arrow-up-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkArrowUpFill = hmr(FileEarmarkArrowUpFill, () => FileEarmarkArrowUpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkArrowUpFill[HMR].source;
    set(FileEarmarkArrowUpFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkArrowUpFill_default = FileEarmarkArrowUpFill;
mark_module_end(FileEarmarkArrowUpFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkArrowUp.svelte
mark_module_start();
FileEarmarkArrowUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkArrowUp.svelte";
var root898 = add_locations(ns_template(`<svg><!><path d="M8.5 11.5a.5.5 0 0 1-1 0V7.707L6.354 8.854a.5.5 0 1 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 7.707V11.5z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkArrowUp[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function FileEarmarkArrowUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkArrowUp);
  var svg = root898();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-arrow-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkArrowUp = hmr(FileEarmarkArrowUp, () => FileEarmarkArrowUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkArrowUp[HMR].source;
    set(FileEarmarkArrowUp[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkArrowUp_default = FileEarmarkArrowUp;
mark_module_end(FileEarmarkArrowUp);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkBarGraphFill.svelte
mark_module_start();
FileEarmarkBarGraphFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkBarGraphFill.svelte";
var root899 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zm.5 10v-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm-2.5.5a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-1zm-3 0a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-1z"></path></svg>`), FileEarmarkBarGraphFill[FILENAME], [[1, 0, [[1, 188]]]]);
function FileEarmarkBarGraphFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkBarGraphFill);
  var svg = root899();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-bar-graph-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkBarGraphFill = hmr(FileEarmarkBarGraphFill, () => FileEarmarkBarGraphFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkBarGraphFill[HMR].source;
    set(FileEarmarkBarGraphFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkBarGraphFill_default = FileEarmarkBarGraphFill;
mark_module_end(FileEarmarkBarGraphFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkBarGraph.svelte
mark_module_start();
FileEarmarkBarGraph[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkBarGraph.svelte";
var root900 = add_locations(ns_template(`<svg><!><path d="M10 13.5a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-6a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v6zm-2.5.5a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-1zm-3 0a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-1z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkBarGraph[FILENAME], [
  [1, 0, [[1, 183], [2, 2]]]
]);
function FileEarmarkBarGraph($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkBarGraph);
  var svg = root900();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-bar-graph", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkBarGraph = hmr(FileEarmarkBarGraph, () => FileEarmarkBarGraph[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkBarGraph[HMR].source;
    set(FileEarmarkBarGraph[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkBarGraph_default = FileEarmarkBarGraph;
mark_module_end(FileEarmarkBarGraph);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkBinaryFill.svelte
mark_module_start();
FileEarmarkBinaryFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkBinaryFill.svelte";
var root901 = add_locations(ns_template(`<svg><!><path d="M5.526 10.273c-.542 0-.832.563-.832 1.612 0 .088.003.173.006.252l1.559-1.143c-.126-.474-.375-.72-.733-.72zm-.732 2.508c.126.472.372.718.732.718.54 0 .83-.563.83-1.614 0-.085-.003-.17-.006-.25l-1.556 1.146z"></path><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zm-2.45 8.385c0 1.415-.548 2.206-1.524 2.206C4.548 14.09 4 13.3 4 11.885c0-1.412.548-2.203 1.526-2.203.976 0 1.524.79 1.524 2.203zm3.805 1.52V14h-3v-.595h1.181V10.5h-.05l-1.136.747v-.688l1.19-.786h.69v3.633h1.125z"></path></svg>`), FileEarmarkBinaryFill[FILENAME], [
  [1, 0, [[1, 185], [2, 2]]]
]);
function FileEarmarkBinaryFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkBinaryFill);
  var svg = root901();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-binary-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkBinaryFill = hmr(FileEarmarkBinaryFill, () => FileEarmarkBinaryFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkBinaryFill[HMR].source;
    set(FileEarmarkBinaryFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkBinaryFill_default = FileEarmarkBinaryFill;
mark_module_end(FileEarmarkBinaryFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkBinary.svelte
mark_module_start();
FileEarmarkBinary[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkBinary.svelte";
var root902 = add_locations(ns_template(`<svg><!><path d="M7.05 11.885c0 1.415-.548 2.206-1.524 2.206C4.548 14.09 4 13.3 4 11.885c0-1.412.548-2.203 1.526-2.203.976 0 1.524.79 1.524 2.203zm-1.524-1.612c-.542 0-.832.563-.832 1.612 0 .088.003.173.006.252l1.559-1.143c-.126-.474-.375-.72-.733-.72zm-.732 2.508c.126.472.372.718.732.718.54 0 .83-.563.83-1.614 0-.085-.003-.17-.006-.25l-1.556 1.146zm6.061.624V14h-3v-.595h1.181V10.5h-.05l-1.136.747v-.688l1.19-.786h.69v3.633h1.125z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkBinary[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function FileEarmarkBinary($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkBinary);
  var svg = root902();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-binary", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkBinary = hmr(FileEarmarkBinary, () => FileEarmarkBinary[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkBinary[HMR].source;
    set(FileEarmarkBinary[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkBinary_default = FileEarmarkBinary;
mark_module_end(FileEarmarkBinary);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkBreakFill.svelte
mark_module_start();
FileEarmarkBreakFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkBreakFill.svelte";
var root903 = add_locations(ns_template(`<svg><!><path d="M4 0h5.293A1 1 0 0 1 10 .293L13.707 4a1 1 0 0 1 .293.707V9H2V2a2 2 0 0 1 2-2zm5.5 1.5v2a1 1 0 0 0 1 1h2l-3-3zM2 12h12v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-2zM.5 10a.5.5 0 0 0 0 1h15a.5.5 0 0 0 0-1H.5z"></path></svg>`), FileEarmarkBreakFill[FILENAME], [[1, 0, [[1, 184]]]]);
function FileEarmarkBreakFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkBreakFill);
  var svg = root903();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-break-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkBreakFill = hmr(FileEarmarkBreakFill, () => FileEarmarkBreakFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkBreakFill[HMR].source;
    set(FileEarmarkBreakFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkBreakFill_default = FileEarmarkBreakFill;
mark_module_end(FileEarmarkBreakFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkBreak.svelte
mark_module_start();
FileEarmarkBreak[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkBreak.svelte";
var root904 = add_locations(ns_template(`<svg><!><path d="M14 4.5V9h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v7H2V2a2 2 0 0 1 2-2h5.5L14 4.5zM13 12h1v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-2h1v2a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-2zM.5 10a.5.5 0 0 0 0 1h15a.5.5 0 0 0 0-1H.5z"></path></svg>`), FileEarmarkBreak[FILENAME], [[1, 0, [[1, 179]]]]);
function FileEarmarkBreak($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkBreak);
  var svg = root904();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-break", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkBreak = hmr(FileEarmarkBreak, () => FileEarmarkBreak[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkBreak[HMR].source;
    set(FileEarmarkBreak[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkBreak_default = FileEarmarkBreak;
mark_module_end(FileEarmarkBreak);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkCheckFill.svelte
mark_module_start();
FileEarmarkCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkCheckFill.svelte";
var root905 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zm1.354 4.354-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708.708z"></path></svg>`), FileEarmarkCheckFill[FILENAME], [[1, 0, [[1, 184]]]]);
function FileEarmarkCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkCheckFill);
  var svg = root905();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkCheckFill = hmr(FileEarmarkCheckFill, () => FileEarmarkCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkCheckFill[HMR].source;
    set(FileEarmarkCheckFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkCheckFill_default = FileEarmarkCheckFill;
mark_module_end(FileEarmarkCheckFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkCheck.svelte
mark_module_start();
FileEarmarkCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkCheck.svelte";
var root906 = add_locations(ns_template(`<svg><!><path d="M10.854 7.854a.5.5 0 0 0-.708-.708L7.5 9.793 6.354 8.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0l3-3z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkCheck[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function FileEarmarkCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkCheck);
  var svg = root906();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkCheck = hmr(FileEarmarkCheck, () => FileEarmarkCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkCheck[HMR].source;
    set(FileEarmarkCheck[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkCheck_default = FileEarmarkCheck;
mark_module_end(FileEarmarkCheck);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkCodeFill.svelte
mark_module_start();
FileEarmarkCodeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkCodeFill.svelte";
var root907 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM6.646 7.646a.5.5 0 1 1 .708.708L5.707 10l1.647 1.646a.5.5 0 0 1-.708.708l-2-2a.5.5 0 0 1 0-.708l2-2zm2.708 0 2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L10.293 10 8.646 8.354a.5.5 0 1 1 .708-.708z"></path></svg>`), FileEarmarkCodeFill[FILENAME], [[1, 0, [[1, 183]]]]);
function FileEarmarkCodeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkCodeFill);
  var svg = root907();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-code-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkCodeFill = hmr(FileEarmarkCodeFill, () => FileEarmarkCodeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkCodeFill[HMR].source;
    set(FileEarmarkCodeFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkCodeFill_default = FileEarmarkCodeFill;
mark_module_end(FileEarmarkCodeFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkCode.svelte
mark_module_start();
FileEarmarkCode[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkCode.svelte";
var root908 = add_locations(ns_template(`<svg><!><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"></path><path d="M8.646 6.646a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L10.293 9 8.646 7.354a.5.5 0 0 1 0-.708zm-1.292 0a.5.5 0 0 0-.708 0l-2 2a.5.5 0 0 0 0 .708l2 2a.5.5 0 0 0 .708-.708L5.707 9l1.647-1.646a.5.5 0 0 0 0-.708z"></path></svg>`), FileEarmarkCode[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FileEarmarkCode($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkCode);
  var svg = root908();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-code", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkCode = hmr(FileEarmarkCode, () => FileEarmarkCode[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkCode[HMR].source;
    set(FileEarmarkCode[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkCode_default = FileEarmarkCode;
mark_module_end(FileEarmarkCode);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkDiffFill.svelte
mark_module_start();
FileEarmarkDiffFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkDiffFill.svelte";
var root909 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM8 6a.5.5 0 0 1 .5.5V8H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V9H6a.5.5 0 0 1 0-1h1.5V6.5A.5.5 0 0 1 8 6zm-2.5 6.5A.5.5 0 0 1 6 12h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path></svg>`), FileEarmarkDiffFill[FILENAME], [[1, 0, [[1, 183]]]]);
function FileEarmarkDiffFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkDiffFill);
  var svg = root909();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-diff-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkDiffFill = hmr(FileEarmarkDiffFill, () => FileEarmarkDiffFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkDiffFill[HMR].source;
    set(FileEarmarkDiffFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkDiffFill_default = FileEarmarkDiffFill;
mark_module_end(FileEarmarkDiffFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkDiff.svelte
mark_module_start();
FileEarmarkDiff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkDiff.svelte";
var root910 = add_locations(ns_template(`<svg><!><path d="M8 5a.5.5 0 0 1 .5.5V7H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V8H6a.5.5 0 0 1 0-1h1.5V5.5A.5.5 0 0 1 8 5zm-2.5 6.5A.5.5 0 0 1 6 11h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkDiff[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FileEarmarkDiff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkDiff);
  var svg = root910();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-diff", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkDiff = hmr(FileEarmarkDiff, () => FileEarmarkDiff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkDiff[HMR].source;
    set(FileEarmarkDiff[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkDiff_default = FileEarmarkDiff;
mark_module_end(FileEarmarkDiff);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkEaselFill.svelte
mark_module_start();
FileEarmarkEaselFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkEaselFill.svelte";
var root911 = add_locations(ns_template(`<svg><!><path d="M5 7.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-2z"></path><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM8.5 6h2A1.5 1.5 0 0 1 12 7.5v2a1.5 1.5 0 0 1-1.5 1.5h-.473l.447 1.342a.5.5 0 0 1-.948.316L8.973 11H8.5v1a.5.5 0 0 1-1 0v-1h-.473l-.553 1.658a.5.5 0 1 1-.948-.316L5.973 11H5.5A1.5 1.5 0 0 1 4 9.5v-2A1.5 1.5 0 0 1 5.5 6h2a.5.5 0 0 1 1 0z"></path></svg>`), FileEarmarkEaselFill[FILENAME], [
  [1, 0, [[1, 184], [2, 2]]]
]);
function FileEarmarkEaselFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkEaselFill);
  var svg = root911();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-easel-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkEaselFill = hmr(FileEarmarkEaselFill, () => FileEarmarkEaselFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkEaselFill[HMR].source;
    set(FileEarmarkEaselFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkEaselFill_default = FileEarmarkEaselFill;
mark_module_end(FileEarmarkEaselFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkEasel.svelte
mark_module_start();
FileEarmarkEasel[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkEasel.svelte";
var root912 = add_locations(ns_template(`<svg><!><path d="M8.5 6a.5.5 0 1 0-1 0h-2A1.5 1.5 0 0 0 4 7.5v2A1.5 1.5 0 0 0 5.5 11h.473l-.447 1.342a.5.5 0 1 0 .948.316L7.027 11H7.5v1a.5.5 0 0 0 1 0v-1h.473l.553 1.658a.5.5 0 1 0 .948-.316L10.027 11h.473A1.5 1.5 0 0 0 12 9.5v-2A1.5 1.5 0 0 0 10.5 6h-2zM5 7.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-2z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkEasel[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function FileEarmarkEasel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkEasel);
  var svg = root912();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-easel", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkEasel = hmr(FileEarmarkEasel, () => FileEarmarkEasel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkEasel[HMR].source;
    set(FileEarmarkEasel[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkEasel_default = FileEarmarkEasel;
mark_module_end(FileEarmarkEasel);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkExcelFill.svelte
mark_module_start();
FileEarmarkExcelFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkExcelFill.svelte";
var root913 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM5.884 6.68 8 9.219l2.116-2.54a.5.5 0 1 1 .768.641L8.651 10l2.233 2.68a.5.5 0 0 1-.768.64L8 10.781l-2.116 2.54a.5.5 0 0 1-.768-.641L7.349 10 5.116 7.32a.5.5 0 1 1 .768-.64z"></path></svg>`), FileEarmarkExcelFill[FILENAME], [[1, 0, [[1, 184]]]]);
function FileEarmarkExcelFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkExcelFill);
  var svg = root913();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-excel-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkExcelFill = hmr(FileEarmarkExcelFill, () => FileEarmarkExcelFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkExcelFill[HMR].source;
    set(FileEarmarkExcelFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkExcelFill_default = FileEarmarkExcelFill;
mark_module_end(FileEarmarkExcelFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkExcel.svelte
mark_module_start();
FileEarmarkExcel[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkExcel.svelte";
var root914 = add_locations(ns_template(`<svg><!><path d="M5.884 6.68a.5.5 0 1 0-.768.64L7.349 10l-2.233 2.68a.5.5 0 0 0 .768.64L8 10.781l2.116 2.54a.5.5 0 0 0 .768-.641L8.651 10l2.233-2.68a.5.5 0 0 0-.768-.64L8 9.219l-2.116-2.54z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkExcel[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function FileEarmarkExcel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkExcel);
  var svg = root914();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-excel", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkExcel = hmr(FileEarmarkExcel, () => FileEarmarkExcel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkExcel[HMR].source;
    set(FileEarmarkExcel[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkExcel_default = FileEarmarkExcel;
mark_module_end(FileEarmarkExcel);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkFill.svelte
mark_module_start();
FileEarmarkFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkFill.svelte";
var root915 = add_locations(ns_template(`<svg><!><path d="M4 0h5.293A1 1 0 0 1 10 .293L13.707 4a1 1 0 0 1 .293.707V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm5.5 1.5v2a1 1 0 0 0 1 1h2l-3-3z"></path></svg>`), FileEarmarkFill[FILENAME], [[1, 0, [[1, 178]]]]);
function FileEarmarkFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkFill);
  var svg = root915();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkFill = hmr(FileEarmarkFill, () => FileEarmarkFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkFill[HMR].source;
    set(FileEarmarkFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkFill_default = FileEarmarkFill;
mark_module_end(FileEarmarkFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkFontFill.svelte
mark_module_start();
FileEarmarkFontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkFontFill.svelte";
var root916 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM5.057 6h5.886L11 8h-.5c-.18-1.096-.356-1.192-1.694-1.235l-.298-.01v5.09c0 .47.1.582.903.655v.5H6.59v-.5c.799-.073.898-.184.898-.654V6.755l-.293.01C5.856 6.808 5.68 6.905 5.5 8H5l.057-2z"></path></svg>`), FileEarmarkFontFill[FILENAME], [[1, 0, [[1, 183]]]]);
function FileEarmarkFontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkFontFill);
  var svg = root916();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-font-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkFontFill = hmr(FileEarmarkFontFill, () => FileEarmarkFontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkFontFill[HMR].source;
    set(FileEarmarkFontFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkFontFill_default = FileEarmarkFontFill;
mark_module_end(FileEarmarkFontFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkFont.svelte
mark_module_start();
FileEarmarkFont[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkFont.svelte";
var root917 = add_locations(ns_template(`<svg><!><path d="M10.943 6H5.057L5 8h.5c.18-1.096.356-1.192 1.694-1.235l.293-.01v5.09c0 .47-.1.582-.898.655v.5H9.41v-.5c-.803-.073-.903-.184-.903-.654V6.755l.298.01c1.338.043 1.514.14 1.694 1.235h.5l-.057-2z"></path><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"></path></svg>`), FileEarmarkFont[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FileEarmarkFont($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkFont);
  var svg = root917();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-font", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkFont = hmr(FileEarmarkFont, () => FileEarmarkFont[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkFont[HMR].source;
    set(FileEarmarkFont[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkFont_default = FileEarmarkFont;
mark_module_end(FileEarmarkFont);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkImageFill.svelte
mark_module_start();
FileEarmarkImageFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkImageFill.svelte";
var root918 = add_locations(ns_template(`<svg><!><path d="M4 0h5.293A1 1 0 0 1 10 .293L13.707 4a1 1 0 0 1 .293.707v5.586l-2.73-2.73a1 1 0 0 0-1.52.127l-1.889 2.644-1.769-1.062a1 1 0 0 0-1.222.15L2 12.292V2a2 2 0 0 1 2-2zm5.5 1.5v2a1 1 0 0 0 1 1h2l-3-3zm-1.498 4a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0z"></path><path d="M10.564 8.27 14 11.708V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-.293l3.578-3.577 2.56 1.536 2.426-3.395z"></path></svg>`), FileEarmarkImageFill[FILENAME], [
  [1, 0, [[1, 184], [2, 2]]]
]);
function FileEarmarkImageFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkImageFill);
  var svg = root918();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-image-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkImageFill = hmr(FileEarmarkImageFill, () => FileEarmarkImageFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkImageFill[HMR].source;
    set(FileEarmarkImageFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkImageFill_default = FileEarmarkImageFill;
mark_module_end(FileEarmarkImageFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkImage.svelte
mark_module_start();
FileEarmarkImage[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkImage.svelte";
var root919 = add_locations(ns_template(`<svg><!><path d="M6.502 7a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"></path><path d="M14 14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5V14zM4 1a1 1 0 0 0-1 1v10l2.224-2.224a.5.5 0 0 1 .61-.075L8 11l2.157-3.02a.5.5 0 0 1 .76-.063L13 10V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4z"></path></svg>`), FileEarmarkImage[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function FileEarmarkImage($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkImage);
  var svg = root919();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-image", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkImage = hmr(FileEarmarkImage, () => FileEarmarkImage[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkImage[HMR].source;
    set(FileEarmarkImage[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkImage_default = FileEarmarkImage;
mark_module_end(FileEarmarkImage);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkLockFill.svelte
mark_module_start();
FileEarmarkLockFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkLockFill.svelte";
var root920 = add_locations(ns_template(`<svg><!><path d="M7 7a1 1 0 0 1 2 0v1H7V7zM6 9.3c0-.042.02-.107.105-.175A.637.637 0 0 1 6.5 9h3a.64.64 0 0 1 .395.125c.085.068.105.133.105.175v2.4c0 .042-.02.107-.105.175A.637.637 0 0 1 9.5 12h-3a.637.637 0 0 1-.395-.125C6.02 11.807 6 11.742 6 11.7V9.3z"></path><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM10 7v1.076c.54.166 1 .597 1 1.224v2.4c0 .816-.781 1.3-1.5 1.3h-3c-.719 0-1.5-.484-1.5-1.3V9.3c0-.627.46-1.058 1-1.224V7a2 2 0 1 1 4 0z"></path></svg>`), FileEarmarkLockFill[FILENAME], [
  [1, 0, [[1, 183], [2, 2]]]
]);
function FileEarmarkLockFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkLockFill);
  var svg = root920();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-lock-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkLockFill = hmr(FileEarmarkLockFill, () => FileEarmarkLockFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkLockFill[HMR].source;
    set(FileEarmarkLockFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkLockFill_default = FileEarmarkLockFill;
mark_module_end(FileEarmarkLockFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkLock.svelte
mark_module_start();
FileEarmarkLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkLock.svelte";
var root921 = add_locations(ns_template(`<svg><!><path d="M10 7v1.076c.54.166 1 .597 1 1.224v2.4c0 .816-.781 1.3-1.5 1.3h-3c-.719 0-1.5-.484-1.5-1.3V9.3c0-.627.46-1.058 1-1.224V7a2 2 0 1 1 4 0zM7 7v1h2V7a1 1 0 0 0-2 0zM6 9.3v2.4c0 .042.02.107.105.175A.637.637 0 0 0 6.5 12h3a.64.64 0 0 0 .395-.125c.085-.068.105-.133.105-.175V9.3c0-.042-.02-.107-.105-.175A.637.637 0 0 0 9.5 9h-3a.637.637 0 0 0-.395.125C6.02 9.193 6 9.258 6 9.3z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkLock[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FileEarmarkLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkLock);
  var svg = root921();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkLock = hmr(FileEarmarkLock, () => FileEarmarkLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkLock[HMR].source;
    set(FileEarmarkLock[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkLock_default = FileEarmarkLock;
mark_module_end(FileEarmarkLock);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkLock2Fill.svelte
mark_module_start();
FileEarmarkLock2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkLock2Fill.svelte";
var root922 = add_locations(ns_template(`<svg><!><path d="M7 7a1 1 0 0 1 2 0v1H7V7z"></path><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM10 7v1.076c.54.166 1 .597 1 1.224v2.4c0 .816-.781 1.3-1.5 1.3h-3c-.719 0-1.5-.484-1.5-1.3V9.3c0-.627.46-1.058 1-1.224V7a2 2 0 1 1 4 0z"></path></svg>`), FileEarmarkLock2Fill[FILENAME], [
  [1, 0, [[1, 184], [2, 2]]]
]);
function FileEarmarkLock2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkLock2Fill);
  var svg = root922();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-lock2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkLock2Fill = hmr(FileEarmarkLock2Fill, () => FileEarmarkLock2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkLock2Fill[HMR].source;
    set(FileEarmarkLock2Fill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkLock2Fill_default = FileEarmarkLock2Fill;
mark_module_end(FileEarmarkLock2Fill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkLock2.svelte
mark_module_start();
FileEarmarkLock2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkLock2.svelte";
var root923 = add_locations(ns_template(`<svg><!><path d="M10 7v1.076c.54.166 1 .597 1 1.224v2.4c0 .816-.781 1.3-1.5 1.3h-3c-.719 0-1.5-.484-1.5-1.3V9.3c0-.627.46-1.058 1-1.224V7a2 2 0 1 1 4 0zM7 7v1h2V7a1 1 0 0 0-2 0z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkLock2[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function FileEarmarkLock2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkLock2);
  var svg = root923();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-lock2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkLock2 = hmr(FileEarmarkLock2, () => FileEarmarkLock2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkLock2[HMR].source;
    set(FileEarmarkLock2[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkLock2_default = FileEarmarkLock2;
mark_module_end(FileEarmarkLock2);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkMedicalFill.svelte
mark_module_start();
FileEarmarkMedicalFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkMedicalFill.svelte";
var root924 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zm-3 2v.634l.549-.317a.5.5 0 1 1 .5.866L7 7l.549.317a.5.5 0 1 1-.5.866L6.5 7.866V8.5a.5.5 0 0 1-1 0v-.634l-.549.317a.5.5 0 1 1-.5-.866L5 7l-.549-.317a.5.5 0 0 1 .5-.866l.549.317V5.5a.5.5 0 1 1 1 0zm-2 4.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1zm0 2h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1z"></path></svg>`), FileEarmarkMedicalFill[FILENAME], [[1, 0, [[1, 186]]]]);
function FileEarmarkMedicalFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkMedicalFill);
  var svg = root924();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-medical-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkMedicalFill = hmr(FileEarmarkMedicalFill, () => FileEarmarkMedicalFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkMedicalFill[HMR].source;
    set(FileEarmarkMedicalFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkMedicalFill_default = FileEarmarkMedicalFill;
mark_module_end(FileEarmarkMedicalFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkMedical.svelte
mark_module_start();
FileEarmarkMedical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkMedical.svelte";
var root925 = add_locations(ns_template(`<svg><!><path d="M7.5 5.5a.5.5 0 0 0-1 0v.634l-.549-.317a.5.5 0 1 0-.5.866L6 7l-.549.317a.5.5 0 1 0 .5.866l.549-.317V8.5a.5.5 0 1 0 1 0v-.634l.549.317a.5.5 0 1 0 .5-.866L8 7l.549-.317a.5.5 0 1 0-.5-.866l-.549.317V5.5zm-2 4.5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 2a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkMedical[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function FileEarmarkMedical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkMedical);
  var svg = root925();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-medical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkMedical = hmr(FileEarmarkMedical, () => FileEarmarkMedical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkMedical[HMR].source;
    set(FileEarmarkMedical[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkMedical_default = FileEarmarkMedical;
mark_module_end(FileEarmarkMedical);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkMinusFill.svelte
mark_module_start();
FileEarmarkMinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkMinusFill.svelte";
var root926 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM6 8.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1 0-1z"></path></svg>`), FileEarmarkMinusFill[FILENAME], [[1, 0, [[1, 184]]]]);
function FileEarmarkMinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkMinusFill);
  var svg = root926();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkMinusFill = hmr(FileEarmarkMinusFill, () => FileEarmarkMinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkMinusFill[HMR].source;
    set(FileEarmarkMinusFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkMinusFill_default = FileEarmarkMinusFill;
mark_module_end(FileEarmarkMinusFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkMinus.svelte
mark_module_start();
FileEarmarkMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkMinus.svelte";
var root927 = add_locations(ns_template(`<svg><!><path d="M5.5 9a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"></path></svg>`), FileEarmarkMinus[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function FileEarmarkMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkMinus);
  var svg = root927();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkMinus = hmr(FileEarmarkMinus, () => FileEarmarkMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkMinus[HMR].source;
    set(FileEarmarkMinus[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkMinus_default = FileEarmarkMinus;
mark_module_end(FileEarmarkMinus);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkMusicFill.svelte
mark_module_start();
FileEarmarkMusicFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkMusicFill.svelte";
var root928 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM11 6.64v1.75l-2 .5v3.61c0 .495-.301.883-.662 1.123C7.974 13.866 7.499 14 7 14c-.5 0-.974-.134-1.338-.377-.36-.24-.662-.628-.662-1.123s.301-.883.662-1.123C6.026 11.134 6.501 11 7 11c.356 0 .7.068 1 .196V6.89a1 1 0 0 1 .757-.97l1-.25A1 1 0 0 1 11 6.64z"></path></svg>`), FileEarmarkMusicFill[FILENAME], [[1, 0, [[1, 184]]]]);
function FileEarmarkMusicFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkMusicFill);
  var svg = root928();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-music-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkMusicFill = hmr(FileEarmarkMusicFill, () => FileEarmarkMusicFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkMusicFill[HMR].source;
    set(FileEarmarkMusicFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkMusicFill_default = FileEarmarkMusicFill;
mark_module_end(FileEarmarkMusicFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkMusic.svelte
mark_module_start();
FileEarmarkMusic[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkMusic.svelte";
var root929 = add_locations(ns_template(`<svg><!><path d="M11 6.64a1 1 0 0 0-1.243-.97l-1 .25A1 1 0 0 0 8 6.89v4.306A2.572 2.572 0 0 0 7 11c-.5 0-.974.134-1.338.377-.36.24-.662.628-.662 1.123s.301.883.662 1.123c.364.243.839.377 1.338.377.5 0 .974-.134 1.338-.377.36-.24.662-.628.662-1.123V8.89l2-.5V6.64z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkMusic[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function FileEarmarkMusic($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkMusic);
  var svg = root929();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-music", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkMusic = hmr(FileEarmarkMusic, () => FileEarmarkMusic[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkMusic[HMR].source;
    set(FileEarmarkMusic[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkMusic_default = FileEarmarkMusic;
mark_module_end(FileEarmarkMusic);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPdfFill.svelte
mark_module_start();
FileEarmarkPdfFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPdfFill.svelte";
var root930 = add_locations(ns_template(`<svg><!><path d="M5.523 12.424c.14-.082.293-.162.459-.238a7.878 7.878 0 0 1-.45.606c-.28.337-.498.516-.635.572a.266.266 0 0 1-.035.012.282.282 0 0 1-.026-.044c-.056-.11-.054-.216.04-.36.106-.165.319-.354.647-.548zm2.455-1.647c-.119.025-.237.05-.356.078a21.148 21.148 0 0 0 .5-1.05 12.045 12.045 0 0 0 .51.858c-.217.032-.436.07-.654.114zm2.525.939a3.881 3.881 0 0 1-.435-.41c.228.005.434.022.612.054.317.057.466.147.518.209a.095.095 0 0 1 .026.064.436.436 0 0 1-.06.2.307.307 0 0 1-.094.124.107.107 0 0 1-.069.015c-.09-.003-.258-.066-.498-.256zM8.278 6.97c-.04.244-.108.524-.2.829a4.86 4.86 0 0 1-.089-.346c-.076-.353-.087-.63-.046-.822.038-.177.11-.248.196-.283a.517.517 0 0 1 .145-.04c.013.03.028.092.032.198.005.122-.007.277-.038.465z"></path><path fill-rule="evenodd" d="M4 0h5.293A1 1 0 0 1 10 .293L13.707 4a1 1 0 0 1 .293.707V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm5.5 1.5v2a1 1 0 0 0 1 1h2l-3-3zM4.165 13.668c.09.18.23.343.438.419.207.075.412.04.58-.03.318-.13.635-.436.926-.786.333-.401.683-.927 1.021-1.51a11.651 11.651 0 0 1 1.997-.406c.3.383.61.713.91.95.28.22.603.403.934.417a.856.856 0 0 0 .51-.138c.155-.101.27-.247.354-.416.09-.181.145-.37.138-.563a.844.844 0 0 0-.2-.518c-.226-.27-.596-.4-.96-.465a5.76 5.76 0 0 0-1.335-.05 10.954 10.954 0 0 1-.98-1.686c.25-.66.437-1.284.52-1.794.036-.218.055-.426.048-.614a1.238 1.238 0 0 0-.127-.538.7.7 0 0 0-.477-.365c-.202-.043-.41 0-.601.077-.377.15-.576.47-.651.823-.073.34-.04.736.046 1.136.088.406.238.848.43 1.295a19.697 19.697 0 0 1-1.062 2.227 7.662 7.662 0 0 0-1.482.645c-.37.22-.699.48-.897.787-.21.326-.275.714-.08 1.103z"></path></svg>`), FileEarmarkPdfFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function FileEarmarkPdfFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPdfFill);
  var svg = root930();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-pdf-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPdfFill = hmr(FileEarmarkPdfFill, () => FileEarmarkPdfFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPdfFill[HMR].source;
    set(FileEarmarkPdfFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPdfFill_default = FileEarmarkPdfFill;
mark_module_end(FileEarmarkPdfFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPdf.svelte
mark_module_start();
FileEarmarkPdf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPdf.svelte";
var root931 = add_locations(ns_template(`<svg><!><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path><path d="M4.603 14.087a.81.81 0 0 1-.438-.42c-.195-.388-.13-.776.08-1.102.198-.307.526-.568.897-.787a7.68 7.68 0 0 1 1.482-.645 19.697 19.697 0 0 0 1.062-2.227 7.269 7.269 0 0 1-.43-1.295c-.086-.4-.119-.796-.046-1.136.075-.354.274-.672.65-.823.192-.077.4-.12.602-.077a.7.7 0 0 1 .477.365c.088.164.12.356.127.538.007.188-.012.396-.047.614-.084.51-.27 1.134-.52 1.794a10.954 10.954 0 0 0 .98 1.686 5.753 5.753 0 0 1 1.334.05c.364.066.734.195.96.465.12.144.193.32.2.518.007.192-.047.382-.138.563a1.04 1.04 0 0 1-.354.416.856.856 0 0 1-.51.138c-.331-.014-.654-.196-.933-.417a5.712 5.712 0 0 1-.911-.95 11.651 11.651 0 0 0-1.997.406 11.307 11.307 0 0 1-1.02 1.51c-.292.35-.609.656-.927.787a.793.793 0 0 1-.58.029zm1.379-1.901c-.166.076-.32.156-.459.238-.328.194-.541.383-.647.547-.094.145-.096.25-.04.361.01.022.02.036.026.044a.266.266 0 0 0 .035-.012c.137-.056.355-.235.635-.572a8.18 8.18 0 0 0 .45-.606zm1.64-1.33a12.71 12.71 0 0 1 1.01-.193 11.744 11.744 0 0 1-.51-.858 20.801 20.801 0 0 1-.5 1.05zm2.446.45c.15.163.296.3.435.41.24.19.407.253.498.256a.107.107 0 0 0 .07-.015.307.307 0 0 0 .094-.125.436.436 0 0 0 .059-.2.095.095 0 0 0-.026-.063c-.052-.062-.2-.152-.518-.209a3.876 3.876 0 0 0-.612-.053zM8.078 7.8a6.7 6.7 0 0 0 .2-.828c.031-.188.043-.343.038-.465a.613.613 0 0 0-.032-.198.517.517 0 0 0-.145.04c-.087.035-.158.106-.196.283-.04.192-.03.469.046.822.024.111.054.227.09.346z"></path></svg>`), FileEarmarkPdf[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function FileEarmarkPdf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPdf);
  var svg = root931();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-pdf", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPdf = hmr(FileEarmarkPdf, () => FileEarmarkPdf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPdf[HMR].source;
    set(FileEarmarkPdf[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPdf_default = FileEarmarkPdf;
mark_module_end(FileEarmarkPdf);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPersonFill.svelte
mark_module_start();
FileEarmarkPersonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPersonFill.svelte";
var root932 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0zm2 5.755V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-.245S4 12 8 12s5 1.755 5 1.755z"></path></svg>`), FileEarmarkPersonFill[FILENAME], [[1, 0, [[1, 185]]]]);
function FileEarmarkPersonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPersonFill);
  var svg = root932();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-person-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPersonFill = hmr(FileEarmarkPersonFill, () => FileEarmarkPersonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPersonFill[HMR].source;
    set(FileEarmarkPersonFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPersonFill_default = FileEarmarkPersonFill;
mark_module_end(FileEarmarkPersonFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPerson.svelte
mark_module_start();
FileEarmarkPerson[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPerson.svelte";
var root933 = add_locations(ns_template(`<svg><!><path d="M11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2v9.255S12 12 8 12s-5 1.755-5 1.755V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkPerson[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function FileEarmarkPerson($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPerson);
  var svg = root933();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-person", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPerson = hmr(FileEarmarkPerson, () => FileEarmarkPerson[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPerson[HMR].source;
    set(FileEarmarkPerson[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPerson_default = FileEarmarkPerson;
mark_module_end(FileEarmarkPerson);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPlayFill.svelte
mark_module_start();
FileEarmarkPlayFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPlayFill.svelte";
var root934 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM6 6.883a.5.5 0 0 1 .757-.429l3.528 2.117a.5.5 0 0 1 0 .858l-3.528 2.117a.5.5 0 0 1-.757-.43V6.884z"></path></svg>`), FileEarmarkPlayFill[FILENAME], [[1, 0, [[1, 183]]]]);
function FileEarmarkPlayFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPlayFill);
  var svg = root934();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-play-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPlayFill = hmr(FileEarmarkPlayFill, () => FileEarmarkPlayFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPlayFill[HMR].source;
    set(FileEarmarkPlayFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPlayFill_default = FileEarmarkPlayFill;
mark_module_end(FileEarmarkPlayFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPlay.svelte
mark_module_start();
FileEarmarkPlay[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPlay.svelte";
var root935 = add_locations(ns_template(`<svg><!><path d="M6 6.883v4.234a.5.5 0 0 0 .757.429l3.528-2.117a.5.5 0 0 0 0-.858L6.757 6.454a.5.5 0 0 0-.757.43z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkPlay[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FileEarmarkPlay($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPlay);
  var svg = root935();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-play", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPlay = hmr(FileEarmarkPlay, () => FileEarmarkPlay[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPlay[HMR].source;
    set(FileEarmarkPlay[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPlay_default = FileEarmarkPlay;
mark_module_end(FileEarmarkPlay);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPlusFill.svelte
mark_module_start();
FileEarmarkPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPlusFill.svelte";
var root936 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM8.5 7v1.5H10a.5.5 0 0 1 0 1H8.5V11a.5.5 0 0 1-1 0V9.5H6a.5.5 0 0 1 0-1h1.5V7a.5.5 0 0 1 1 0z"></path></svg>`), FileEarmarkPlusFill[FILENAME], [[1, 0, [[1, 183]]]]);
function FileEarmarkPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPlusFill);
  var svg = root936();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPlusFill = hmr(FileEarmarkPlusFill, () => FileEarmarkPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPlusFill[HMR].source;
    set(FileEarmarkPlusFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPlusFill_default = FileEarmarkPlusFill;
mark_module_end(FileEarmarkPlusFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPlus.svelte
mark_module_start();
FileEarmarkPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPlus.svelte";
var root937 = add_locations(ns_template(`<svg><!><path d="M8 6.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V11a.5.5 0 0 1-1 0V9.5H6a.5.5 0 0 1 0-1h1.5V7a.5.5 0 0 1 .5-.5z"></path><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"></path></svg>`), FileEarmarkPlus[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FileEarmarkPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPlus);
  var svg = root937();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPlus = hmr(FileEarmarkPlus, () => FileEarmarkPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPlus[HMR].source;
    set(FileEarmarkPlus[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPlus_default = FileEarmarkPlus;
mark_module_end(FileEarmarkPlus);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPostFill.svelte
mark_module_start();
FileEarmarkPostFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPostFill.svelte";
var root938 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zm-5-.5H7a.5.5 0 0 1 0 1H4.5a.5.5 0 0 1 0-1zm0 3h7a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-7a.5.5 0 0 1 .5-.5z"></path></svg>`), FileEarmarkPostFill[FILENAME], [[1, 0, [[1, 183]]]]);
function FileEarmarkPostFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPostFill);
  var svg = root938();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-post-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPostFill = hmr(FileEarmarkPostFill, () => FileEarmarkPostFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPostFill[HMR].source;
    set(FileEarmarkPostFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPostFill_default = FileEarmarkPostFill;
mark_module_end(FileEarmarkPostFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPost.svelte
mark_module_start();
FileEarmarkPost[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPost.svelte";
var root939 = add_locations(ns_template(`<svg><!><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"></path><path d="M4 6.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-7zm0-3a.5.5 0 0 1 .5-.5H7a.5.5 0 0 1 0 1H4.5a.5.5 0 0 1-.5-.5z"></path></svg>`), FileEarmarkPost[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FileEarmarkPost($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPost);
  var svg = root939();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-post", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPost = hmr(FileEarmarkPost, () => FileEarmarkPost[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPost[HMR].source;
    set(FileEarmarkPost[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPost_default = FileEarmarkPost;
mark_module_end(FileEarmarkPost);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPptFill.svelte
mark_module_start();
FileEarmarkPptFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPptFill.svelte";
var root940 = add_locations(ns_template(`<svg><!><path d="M8.188 10H7V6.5h1.188a1.75 1.75 0 1 1 0 3.5z"></path><path d="M4 0h5.293A1 1 0 0 1 10 .293L13.707 4a1 1 0 0 1 .293.707V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm5.5 1.5v2a1 1 0 0 0 1 1h2l-3-3zM7 5.5a1 1 0 0 0-1 1V13a.5.5 0 0 0 1 0v-2h1.188a2.75 2.75 0 0 0 0-5.5H7z"></path></svg>`), FileEarmarkPptFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function FileEarmarkPptFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPptFill);
  var svg = root940();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-ppt-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPptFill = hmr(FileEarmarkPptFill, () => FileEarmarkPptFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPptFill[HMR].source;
    set(FileEarmarkPptFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPptFill_default = FileEarmarkPptFill;
mark_module_end(FileEarmarkPptFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkPpt.svelte
mark_module_start();
FileEarmarkPpt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkPpt.svelte";
var root941 = add_locations(ns_template(`<svg><!><path d="M7 5.5a1 1 0 0 0-1 1V13a.5.5 0 0 0 1 0v-2h1.188a2.75 2.75 0 0 0 0-5.5H7zM8.188 10H7V6.5h1.188a1.75 1.75 0 1 1 0 3.5z"></path><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"></path></svg>`), FileEarmarkPpt[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function FileEarmarkPpt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkPpt);
  var svg = root941();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-ppt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkPpt = hmr(FileEarmarkPpt, () => FileEarmarkPpt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkPpt[HMR].source;
    set(FileEarmarkPpt[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkPpt_default = FileEarmarkPpt;
mark_module_end(FileEarmarkPpt);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkRichtextFill.svelte
mark_module_start();
FileEarmarkRichtextFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkRichtextFill.svelte";
var root942 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM7 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm-.861 1.542 1.33.886 1.854-1.855a.25.25 0 0 1 .289-.047l1.888.974V9.5a.5.5 0 0 1-.5.5H5a.5.5 0 0 1-.5-.5V9s1.54-1.274 1.639-1.208zM5 11h6a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1zm0 2h3a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1z"></path></svg>`), FileEarmarkRichtextFill[FILENAME], [[1, 0, [[1, 187]]]]);
function FileEarmarkRichtextFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkRichtextFill);
  var svg = root942();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-richtext-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkRichtextFill = hmr(FileEarmarkRichtextFill, () => FileEarmarkRichtextFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkRichtextFill[HMR].source;
    set(FileEarmarkRichtextFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkRichtextFill_default = FileEarmarkRichtextFill;
mark_module_end(FileEarmarkRichtextFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkRichtext.svelte
mark_module_start();
FileEarmarkRichtext[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkRichtext.svelte";
var root943 = add_locations(ns_template(`<svg><!><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"></path><path d="M4.5 12.5A.5.5 0 0 1 5 12h3a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm0-2A.5.5 0 0 1 5 10h6a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm1.639-3.708 1.33.886 1.854-1.855a.25.25 0 0 1 .289-.047l1.888.974V8.5a.5.5 0 0 1-.5.5H5a.5.5 0 0 1-.5-.5V8s1.54-1.274 1.639-1.208zM6.25 6a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5z"></path></svg>`), FileEarmarkRichtext[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function FileEarmarkRichtext($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkRichtext);
  var svg = root943();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-richtext", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkRichtext = hmr(FileEarmarkRichtext, () => FileEarmarkRichtext[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkRichtext[HMR].source;
    set(FileEarmarkRichtext[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkRichtext_default = FileEarmarkRichtext;
mark_module_end(FileEarmarkRichtext);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkRuledFill.svelte
mark_module_start();
FileEarmarkRuledFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkRuledFill.svelte";
var root944 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM3 9h10v1H6v2h7v1H6v2H5v-2H3v-1h2v-2H3V9z"></path></svg>`), FileEarmarkRuledFill[FILENAME], [[1, 0, [[1, 184]]]]);
function FileEarmarkRuledFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkRuledFill);
  var svg = root944();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-ruled-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkRuledFill = hmr(FileEarmarkRuledFill, () => FileEarmarkRuledFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkRuledFill[HMR].source;
    set(FileEarmarkRuledFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkRuledFill_default = FileEarmarkRuledFill;
mark_module_end(FileEarmarkRuledFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkRuled.svelte
mark_module_start();
FileEarmarkRuled[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkRuled.svelte";
var root945 = add_locations(ns_template(`<svg><!><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V9H3V2a1 1 0 0 1 1-1h5.5v2zM3 12v-2h2v2H3zm0 1h2v2H4a1 1 0 0 1-1-1v-1zm3 2v-2h7v1a1 1 0 0 1-1 1H6zm7-3H6v-2h7v2z"></path></svg>`), FileEarmarkRuled[FILENAME], [[1, 0, [[1, 179]]]]);
function FileEarmarkRuled($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkRuled);
  var svg = root945();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-ruled", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkRuled = hmr(FileEarmarkRuled, () => FileEarmarkRuled[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkRuled[HMR].source;
    set(FileEarmarkRuled[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkRuled_default = FileEarmarkRuled;
mark_module_end(FileEarmarkRuled);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkSlidesFill.svelte
mark_module_start();
FileEarmarkSlidesFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkSlidesFill.svelte";
var root946 = add_locations(ns_template(`<svg><!><path d="M7 9.78V7.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 9.778z"></path><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM5 6h6a.5.5 0 0 1 .496.438l.5 4A.5.5 0 0 1 11.5 11h-3v2.016c.863.055 1.5.251 1.5.484 0 .276-.895.5-2 .5s-2-.224-2-.5c0-.233.637-.429 1.5-.484V11h-3a.5.5 0 0 1-.496-.562l.5-4A.5.5 0 0 1 5 6z"></path></svg>`), FileEarmarkSlidesFill[FILENAME], [
  [1, 0, [[1, 185], [2, 2]]]
]);
function FileEarmarkSlidesFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkSlidesFill);
  var svg = root946();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-slides-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkSlidesFill = hmr(FileEarmarkSlidesFill, () => FileEarmarkSlidesFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkSlidesFill[HMR].source;
    set(FileEarmarkSlidesFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkSlidesFill_default = FileEarmarkSlidesFill;
mark_module_end(FileEarmarkSlidesFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkSlides.svelte
mark_module_start();
FileEarmarkSlides[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkSlides.svelte";
var root947 = add_locations(ns_template(`<svg><!><path d="M5 6a.5.5 0 0 0-.496.438l-.5 4A.5.5 0 0 0 4.5 11h3v2.016c-.863.055-1.5.251-1.5.484 0 .276.895.5 2 .5s2-.224 2-.5c0-.233-.637-.429-1.5-.484V11h3a.5.5 0 0 0 .496-.562l-.5-4A.5.5 0 0 0 11 6H5zm2 3.78V7.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 9.778z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkSlides[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function FileEarmarkSlides($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkSlides);
  var svg = root947();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-slides", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkSlides = hmr(FileEarmarkSlides, () => FileEarmarkSlides[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkSlides[HMR].source;
    set(FileEarmarkSlides[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkSlides_default = FileEarmarkSlides;
mark_module_end(FileEarmarkSlides);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkSpreadsheetFill.svelte
mark_module_start();
FileEarmarkSpreadsheetFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkSpreadsheetFill.svelte";
var root948 = add_locations(ns_template(`<svg><!><path d="M6 12v-2h3v2H6z"></path><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM3 9h10v1h-3v2h3v1h-3v2H9v-2H6v2H5v-2H3v-1h2v-2H3V9z"></path></svg>`), FileEarmarkSpreadsheetFill[FILENAME], [
  [1, 0, [[1, 190], [2, 2]]]
]);
function FileEarmarkSpreadsheetFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkSpreadsheetFill);
  var svg = root948();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-spreadsheet-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkSpreadsheetFill = hmr(FileEarmarkSpreadsheetFill, () => FileEarmarkSpreadsheetFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkSpreadsheetFill[HMR].source;
    set(FileEarmarkSpreadsheetFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkSpreadsheetFill_default = FileEarmarkSpreadsheetFill;
mark_module_end(FileEarmarkSpreadsheetFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkSpreadsheet.svelte
mark_module_start();
FileEarmarkSpreadsheet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkSpreadsheet.svelte";
var root949 = add_locations(ns_template(`<svg><!><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V9H3V2a1 1 0 0 1 1-1h5.5v2zM3 12v-2h2v2H3zm0 1h2v2H4a1 1 0 0 1-1-1v-1zm3 2v-2h3v2H6zm4 0v-2h3v1a1 1 0 0 1-1 1h-2zm3-3h-3v-2h3v2zm-7 0v-2h3v2H6z"></path></svg>`), FileEarmarkSpreadsheet[FILENAME], [[1, 0, [[1, 185]]]]);
function FileEarmarkSpreadsheet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkSpreadsheet);
  var svg = root949();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-spreadsheet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkSpreadsheet = hmr(FileEarmarkSpreadsheet, () => FileEarmarkSpreadsheet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkSpreadsheet[HMR].source;
    set(FileEarmarkSpreadsheet[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkSpreadsheet_default = FileEarmarkSpreadsheet;
mark_module_end(FileEarmarkSpreadsheet);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkTextFill.svelte
mark_module_start();
FileEarmarkTextFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkTextFill.svelte";
var root950 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM4.5 9a.5.5 0 0 1 0-1h7a.5.5 0 0 1 0 1h-7zM4 10.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm.5 2.5a.5.5 0 0 1 0-1h4a.5.5 0 0 1 0 1h-4z"></path></svg>`), FileEarmarkTextFill[FILENAME], [[1, 0, [[1, 183]]]]);
function FileEarmarkTextFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkTextFill);
  var svg = root950();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-text-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkTextFill = hmr(FileEarmarkTextFill, () => FileEarmarkTextFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkTextFill[HMR].source;
    set(FileEarmarkTextFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkTextFill_default = FileEarmarkTextFill;
mark_module_end(FileEarmarkTextFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkText.svelte
mark_module_start();
FileEarmarkText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkText.svelte";
var root951 = add_locations(ns_template(`<svg><!><path d="M5.5 7a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zM5 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path><path d="M9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.5L9.5 0zm0 1v2A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5z"></path></svg>`), FileEarmarkText[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FileEarmarkText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkText);
  var svg = root951();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkText = hmr(FileEarmarkText, () => FileEarmarkText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkText[HMR].source;
    set(FileEarmarkText[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkText_default = FileEarmarkText;
mark_module_end(FileEarmarkText);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkWordFill.svelte
mark_module_start();
FileEarmarkWordFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkWordFill.svelte";
var root952 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM5.485 6.879l1.036 4.144.997-3.655a.5.5 0 0 1 .964 0l.997 3.655 1.036-4.144a.5.5 0 0 1 .97.242l-1.5 6a.5.5 0 0 1-.967.01L8 9.402l-1.018 3.73a.5.5 0 0 1-.967-.01l-1.5-6a.5.5 0 1 1 .97-.242z"></path></svg>`), FileEarmarkWordFill[FILENAME], [[1, 0, [[1, 183]]]]);
function FileEarmarkWordFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkWordFill);
  var svg = root952();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-word-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkWordFill = hmr(FileEarmarkWordFill, () => FileEarmarkWordFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkWordFill[HMR].source;
    set(FileEarmarkWordFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkWordFill_default = FileEarmarkWordFill;
mark_module_end(FileEarmarkWordFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkWord.svelte
mark_module_start();
FileEarmarkWord[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkWord.svelte";
var root953 = add_locations(ns_template(`<svg><!><path d="M5.485 6.879a.5.5 0 1 0-.97.242l1.5 6a.5.5 0 0 0 .967.01L8 9.402l1.018 3.73a.5.5 0 0 0 .967-.01l1.5-6a.5.5 0 0 0-.97-.242l-1.036 4.144-.997-3.655a.5.5 0 0 0-.964 0l-.997 3.655L5.485 6.88z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkWord[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function FileEarmarkWord($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkWord);
  var svg = root953();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-word", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkWord = hmr(FileEarmarkWord, () => FileEarmarkWord[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkWord[HMR].source;
    set(FileEarmarkWord[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkWord_default = FileEarmarkWord;
mark_module_end(FileEarmarkWord);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkXFill.svelte
mark_module_start();
FileEarmarkXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkXFill.svelte";
var root954 = add_locations(ns_template(`<svg><!><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM6.854 7.146 8 8.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 9l1.147 1.146a.5.5 0 0 1-.708.708L8 9.707l-1.146 1.147a.5.5 0 0 1-.708-.708L7.293 9 6.146 7.854a.5.5 0 1 1 .708-.708z"></path></svg>`), FileEarmarkXFill[FILENAME], [[1, 0, [[1, 180]]]]);
function FileEarmarkXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkXFill);
  var svg = root954();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkXFill = hmr(FileEarmarkXFill, () => FileEarmarkXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkXFill[HMR].source;
    set(FileEarmarkXFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkXFill_default = FileEarmarkXFill;
mark_module_end(FileEarmarkXFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkX.svelte
mark_module_start();
FileEarmarkX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkX.svelte";
var root955 = add_locations(ns_template(`<svg><!><path d="M6.854 7.146a.5.5 0 1 0-.708.708L7.293 9l-1.147 1.146a.5.5 0 0 0 .708.708L8 9.707l1.146 1.147a.5.5 0 0 0 .708-.708L8.707 9l1.147-1.146a.5.5 0 0 0-.708-.708L8 8.293 6.854 7.146z"></path><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"></path></svg>`), FileEarmarkX[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function FileEarmarkX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkX);
  var svg = root955();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkX = hmr(FileEarmarkX, () => FileEarmarkX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkX[HMR].source;
    set(FileEarmarkX[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkX_default = FileEarmarkX;
mark_module_end(FileEarmarkX);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkZipFill.svelte
mark_module_start();
FileEarmarkZipFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkZipFill.svelte";
var root956 = add_locations(ns_template(`<svg><!><path d="M5.5 9.438V8.5h1v.938a1 1 0 0 0 .03.243l.4 1.598-.93.62-.93-.62.4-1.598a1 1 0 0 0 .03-.243z"></path><path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zm-4-.5V2h-1V1H6v1h1v1H6v1h1v1H6v1h1v1H5.5V6h-1V5h1V4h-1V3h1zm0 4.5h1a1 1 0 0 1 1 1v.938l.4 1.599a1 1 0 0 1-.416 1.074l-.93.62a1 1 0 0 1-1.109 0l-.93-.62a1 1 0 0 1-.415-1.074l.4-1.599V8.5a1 1 0 0 1 1-1z"></path></svg>`), FileEarmarkZipFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function FileEarmarkZipFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkZipFill);
  var svg = root956();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-zip-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkZipFill = hmr(FileEarmarkZipFill, () => FileEarmarkZipFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkZipFill[HMR].source;
    set(FileEarmarkZipFill[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkZipFill_default = FileEarmarkZipFill;
mark_module_end(FileEarmarkZipFill);

// node_modules/svelte-bootstrap-icons/lib/FileEarmarkZip.svelte
mark_module_start();
FileEarmarkZip[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmarkZip.svelte";
var root957 = add_locations(ns_template(`<svg><!><path d="M5 7.5a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v.938l.4 1.599a1 1 0 0 1-.416 1.074l-.93.62a1 1 0 0 1-1.11 0l-.929-.62a1 1 0 0 1-.415-1.074L5 8.438V7.5zm2 0H6v.938a1 1 0 0 1-.03.243l-.4 1.598.93.62.929-.62-.4-1.598A1 1 0 0 1 7 8.438V7.5z"></path><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1h-2v1h-1v1h1v1h-1v1h1v1H6V5H5V4h1V3H5V2h1V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"></path></svg>`), FileEarmarkZip[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function FileEarmarkZip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmarkZip);
  var svg = root957();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark-zip", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmarkZip = hmr(FileEarmarkZip, () => FileEarmarkZip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmarkZip[HMR].source;
    set(FileEarmarkZip[HMR].source, module.default[HMR].original);
  });
}
var FileEarmarkZip_default = FileEarmarkZip;
mark_module_end(FileEarmarkZip);

// node_modules/svelte-bootstrap-icons/lib/FileEarmark.svelte
mark_module_start();
FileEarmark[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEarmark.svelte";
var root958 = add_locations(ns_template(`<svg><!><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"></path></svg>`), FileEarmark[FILENAME], [[1, 0, [[1, 173]]]]);
function FileEarmark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEarmark);
  var svg = root958();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-earmark", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEarmark = hmr(FileEarmark, () => FileEarmark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEarmark[HMR].source;
    set(FileEarmark[HMR].source, module.default[HMR].original);
  });
}
var FileEarmark_default = FileEarmark;
mark_module_end(FileEarmark);

// node_modules/svelte-bootstrap-icons/lib/FileEaselFill.svelte
mark_module_start();
FileEaselFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEaselFill.svelte";
var root959 = add_locations(ns_template(`<svg><!><path d="M5 6.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-2z"></path><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM8.5 5h2A1.5 1.5 0 0 1 12 6.5v2a1.5 1.5 0 0 1-1.5 1.5h-.473l.447 1.342a.5.5 0 0 1-.948.316L8.973 10H8.5v1a.5.5 0 0 1-1 0v-1h-.473l-.553 1.658a.5.5 0 1 1-.948-.316L5.973 10H5.5A1.5 1.5 0 0 1 4 8.5v-2A1.5 1.5 0 0 1 5.5 5h2a.5.5 0 0 1 1 0z"></path></svg>`), FileEaselFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function FileEaselFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEaselFill);
  var svg = root959();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-easel-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEaselFill = hmr(FileEaselFill, () => FileEaselFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEaselFill[HMR].source;
    set(FileEaselFill[HMR].source, module.default[HMR].original);
  });
}
var FileEaselFill_default = FileEaselFill;
mark_module_end(FileEaselFill);

// node_modules/svelte-bootstrap-icons/lib/FileEasel.svelte
mark_module_start();
FileEasel[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileEasel.svelte";
var root960 = add_locations(ns_template(`<svg><!><path d="M8.5 5a.5.5 0 1 0-1 0h-2A1.5 1.5 0 0 0 4 6.5v2A1.5 1.5 0 0 0 5.5 10h.473l-.447 1.342a.5.5 0 1 0 .948.316L7.027 10H7.5v1a.5.5 0 0 0 1 0v-1h.473l.553 1.658a.5.5 0 1 0 .948-.316L10.027 10h.473A1.5 1.5 0 0 0 12 8.5v-2A1.5 1.5 0 0 0 10.5 5h-2zM5 6.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-2z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path></svg>`), FileEasel[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function FileEasel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileEasel);
  var svg = root960();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-easel", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileEasel = hmr(FileEasel, () => FileEasel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileEasel[HMR].source;
    set(FileEasel[HMR].source, module.default[HMR].original);
  });
}
var FileEasel_default = FileEasel;
mark_module_end(FileEasel);

// node_modules/svelte-bootstrap-icons/lib/FileExcelFill.svelte
mark_module_start();
FileExcelFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileExcelFill.svelte";
var root961 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM5.884 4.68 8 7.219l2.116-2.54a.5.5 0 1 1 .768.641L8.651 8l2.233 2.68a.5.5 0 0 1-.768.64L8 8.781l-2.116 2.54a.5.5 0 0 1-.768-.641L7.349 8 5.116 5.32a.5.5 0 1 1 .768-.64z"></path></svg>`), FileExcelFill[FILENAME], [[1, 0, [[1, 176]]]]);
function FileExcelFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileExcelFill);
  var svg = root961();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-excel-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileExcelFill = hmr(FileExcelFill, () => FileExcelFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileExcelFill[HMR].source;
    set(FileExcelFill[HMR].source, module.default[HMR].original);
  });
}
var FileExcelFill_default = FileExcelFill;
mark_module_end(FileExcelFill);

// node_modules/svelte-bootstrap-icons/lib/FileExcel.svelte
mark_module_start();
FileExcel[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileExcel.svelte";
var root962 = add_locations(ns_template(`<svg><!><path d="M5.18 4.616a.5.5 0 0 1 .704.064L8 7.219l2.116-2.54a.5.5 0 1 1 .768.641L8.651 8l2.233 2.68a.5.5 0 0 1-.768.64L8 8.781l-2.116 2.54a.5.5 0 0 1-.768-.641L7.349 8 5.116 5.32a.5.5 0 0 1 .064-.704z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileExcel[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function FileExcel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileExcel);
  var svg = root962();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-excel", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileExcel = hmr(FileExcel, () => FileExcel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileExcel[HMR].source;
    set(FileExcel[HMR].source, module.default[HMR].original);
  });
}
var FileExcel_default = FileExcel;
mark_module_end(FileExcel);

// node_modules/svelte-bootstrap-icons/lib/FileFill.svelte
mark_module_start();
FileFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileFill.svelte";
var root963 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4 0h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2z"></path></svg>`), FileFill[FILENAME], [[1, 0, [[1, 170]]]]);
function FileFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileFill);
  var svg = root963();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileFill = hmr(FileFill, () => FileFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileFill[HMR].source;
    set(FileFill[HMR].source, module.default[HMR].original);
  });
}
var FileFill_default = FileFill;
mark_module_end(FileFill);

// node_modules/svelte-bootstrap-icons/lib/FileFontFill.svelte
mark_module_start();
FileFontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileFontFill.svelte";
var root964 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM5.057 4h5.886L11 6h-.5c-.18-1.096-.356-1.192-1.694-1.235l-.298-.01v6.09c0 .47.1.582.903.655v.5H6.59v-.5c.799-.073.898-.184.898-.654V4.755l-.293.01C5.856 4.808 5.68 4.905 5.5 6H5l.057-2z"></path></svg>`), FileFontFill[FILENAME], [[1, 0, [[1, 175]]]]);
function FileFontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileFontFill);
  var svg = root964();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-font-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileFontFill = hmr(FileFontFill, () => FileFontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileFontFill[HMR].source;
    set(FileFontFill[HMR].source, module.default[HMR].original);
  });
}
var FileFontFill_default = FileFontFill;
mark_module_end(FileFontFill);

// node_modules/svelte-bootstrap-icons/lib/FileFont.svelte
mark_module_start();
FileFont[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileFont.svelte";
var root965 = add_locations(ns_template(`<svg><!><path d="M10.943 4H5.057L5 6h.5c.18-1.096.356-1.192 1.694-1.235l.293-.01v6.09c0 .47-.1.582-.898.655v.5H9.41v-.5c-.803-.073-.903-.184-.903-.654V4.755l.298.01c1.338.043 1.514.14 1.694 1.235h.5l-.057-2z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileFont[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FileFont($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileFont);
  var svg = root965();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-font", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileFont = hmr(FileFont, () => FileFont[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileFont[HMR].source;
    set(FileFont[HMR].source, module.default[HMR].original);
  });
}
var FileFont_default = FileFont;
mark_module_end(FileFont);

// node_modules/svelte-bootstrap-icons/lib/FileImageFill.svelte
mark_module_start();
FileImageFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileImageFill.svelte";
var root966 = add_locations(ns_template(`<svg><!><path d="M4 0h8a2 2 0 0 1 2 2v8.293l-2.73-2.73a1 1 0 0 0-1.52.127l-1.889 2.644-1.769-1.062a1 1 0 0 0-1.222.15L2 12.292V2a2 2 0 0 1 2-2zm4.002 5.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0z"></path><path d="M10.564 8.27 14 11.708V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-.293l3.578-3.577 2.56 1.536 2.426-3.395z"></path></svg>`), FileImageFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function FileImageFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileImageFill);
  var svg = root966();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-image-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileImageFill = hmr(FileImageFill, () => FileImageFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileImageFill[HMR].source;
    set(FileImageFill[HMR].source, module.default[HMR].original);
  });
}
var FileImageFill_default = FileImageFill;
mark_module_end(FileImageFill);

// node_modules/svelte-bootstrap-icons/lib/FileImage.svelte
mark_module_start();
FileImage[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileImage.svelte";
var root967 = add_locations(ns_template(`<svg><!><path d="M8.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM3 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v8l-2.083-2.083a.5.5 0 0 0-.76.063L8 11 5.835 9.7a.5.5 0 0 0-.611.076L3 12V2z"></path></svg>`), FileImage[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function FileImage($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileImage);
  var svg = root967();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-image", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileImage = hmr(FileImage, () => FileImage[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileImage[HMR].source;
    set(FileImage[HMR].source, module.default[HMR].original);
  });
}
var FileImage_default = FileImage;
mark_module_end(FileImage);

// node_modules/svelte-bootstrap-icons/lib/FileLockFill.svelte
mark_module_start();
FileLockFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileLockFill.svelte";
var root968 = add_locations(ns_template(`<svg><!><path d="M7 6a1 1 0 0 1 2 0v1H7V6zM6 8.3c0-.042.02-.107.105-.175A.637.637 0 0 1 6.5 8h3a.64.64 0 0 1 .395.125c.085.068.105.133.105.175v2.4c0 .042-.02.107-.105.175A.637.637 0 0 1 9.5 11h-3a.637.637 0 0 1-.395-.125C6.02 10.807 6 10.742 6 10.7V8.3z"></path><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm-2 6v1.076c.54.166 1 .597 1 1.224v2.4c0 .816-.781 1.3-1.5 1.3h-3c-.719 0-1.5-.484-1.5-1.3V8.3c0-.627.46-1.058 1-1.224V6a2 2 0 1 1 4 0z"></path></svg>`), FileLockFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function FileLockFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileLockFill);
  var svg = root968();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-lock-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileLockFill = hmr(FileLockFill, () => FileLockFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileLockFill[HMR].source;
    set(FileLockFill[HMR].source, module.default[HMR].original);
  });
}
var FileLockFill_default = FileLockFill;
mark_module_end(FileLockFill);

// node_modules/svelte-bootstrap-icons/lib/FileLock.svelte
mark_module_start();
FileLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileLock.svelte";
var root969 = add_locations(ns_template(`<svg><!><path d="M8 5a1 1 0 0 1 1 1v1H7V6a1 1 0 0 1 1-1zm2 2.076V6a2 2 0 1 0-4 0v1.076c-.54.166-1 .597-1 1.224v2.4c0 .816.781 1.3 1.5 1.3h3c.719 0 1.5-.484 1.5-1.3V8.3c0-.627-.46-1.058-1-1.224zM6.105 8.125A.637.637 0 0 1 6.5 8h3a.64.64 0 0 1 .395.125c.085.068.105.133.105.175v2.4c0 .042-.02.107-.105.175A.637.637 0 0 1 9.5 11h-3a.637.637 0 0 1-.395-.125C6.02 10.807 6 10.742 6 10.7V8.3c0-.042.02-.107.105-.175z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileLock[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FileLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileLock);
  var svg = root969();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileLock = hmr(FileLock, () => FileLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileLock[HMR].source;
    set(FileLock[HMR].source, module.default[HMR].original);
  });
}
var FileLock_default = FileLock;
mark_module_end(FileLock);

// node_modules/svelte-bootstrap-icons/lib/FileLock2Fill.svelte
mark_module_start();
FileLock2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileLock2Fill.svelte";
var root970 = add_locations(ns_template(`<svg><!><path d="M7 6a1 1 0 0 1 2 0v1H7V6z"></path><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm-2 6v1.076c.54.166 1 .597 1 1.224v2.4c0 .816-.781 1.3-1.5 1.3h-3c-.719 0-1.5-.484-1.5-1.3V8.3c0-.627.46-1.058 1-1.224V6a2 2 0 1 1 4 0z"></path></svg>`), FileLock2Fill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function FileLock2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileLock2Fill);
  var svg = root970();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-lock2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileLock2Fill = hmr(FileLock2Fill, () => FileLock2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileLock2Fill[HMR].source;
    set(FileLock2Fill[HMR].source, module.default[HMR].original);
  });
}
var FileLock2Fill_default = FileLock2Fill;
mark_module_end(FileLock2Fill);

// node_modules/svelte-bootstrap-icons/lib/FileLock2.svelte
mark_module_start();
FileLock2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileLock2.svelte";
var root971 = add_locations(ns_template(`<svg><!><path d="M8 5a1 1 0 0 1 1 1v1H7V6a1 1 0 0 1 1-1zm2 2.076V6a2 2 0 1 0-4 0v1.076c-.54.166-1 .597-1 1.224v2.4c0 .816.781 1.3 1.5 1.3h3c.719 0 1.5-.484 1.5-1.3V8.3c0-.627-.46-1.058-1-1.224z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileLock2[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function FileLock2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileLock2);
  var svg = root971();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-lock2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileLock2 = hmr(FileLock2, () => FileLock2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileLock2[HMR].source;
    set(FileLock2[HMR].source, module.default[HMR].original);
  });
}
var FileLock2_default = FileLock2;
mark_module_end(FileLock2);

// node_modules/svelte-bootstrap-icons/lib/FileMedicalFill.svelte
mark_module_start();
FileMedicalFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileMedicalFill.svelte";
var root972 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM8.5 4.5v.634l.549-.317a.5.5 0 1 1 .5.866L9 6l.549.317a.5.5 0 1 1-.5.866L8.5 6.866V7.5a.5.5 0 0 1-1 0v-.634l-.549.317a.5.5 0 1 1-.5-.866L7 6l-.549-.317a.5.5 0 0 1 .5-.866l.549.317V4.5a.5.5 0 1 1 1 0zM5.5 9h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1zm0 2h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1z"></path></svg>`), FileMedicalFill[FILENAME], [[1, 0, [[1, 178]]]]);
function FileMedicalFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileMedicalFill);
  var svg = root972();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-medical-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileMedicalFill = hmr(FileMedicalFill, () => FileMedicalFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileMedicalFill[HMR].source;
    set(FileMedicalFill[HMR].source, module.default[HMR].original);
  });
}
var FileMedicalFill_default = FileMedicalFill;
mark_module_end(FileMedicalFill);

// node_modules/svelte-bootstrap-icons/lib/FileMedical.svelte
mark_module_start();
FileMedical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileMedical.svelte";
var root973 = add_locations(ns_template(`<svg><!><path d="M8.5 4.5a.5.5 0 0 0-1 0v.634l-.549-.317a.5.5 0 1 0-.5.866L7 6l-.549.317a.5.5 0 1 0 .5.866l.549-.317V7.5a.5.5 0 1 0 1 0v-.634l.549.317a.5.5 0 1 0 .5-.866L9 6l.549-.317a.5.5 0 1 0-.5-.866l-.549.317V4.5zM5.5 9a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 2a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path></svg>`), FileMedical[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function FileMedical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileMedical);
  var svg = root973();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-medical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileMedical = hmr(FileMedical, () => FileMedical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileMedical[HMR].source;
    set(FileMedical[HMR].source, module.default[HMR].original);
  });
}
var FileMedical_default = FileMedical;
mark_module_end(FileMedical);

// node_modules/svelte-bootstrap-icons/lib/FileMinusFill.svelte
mark_module_start();
FileMinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileMinusFill.svelte";
var root974 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM6 7.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1 0-1z"></path></svg>`), FileMinusFill[FILENAME], [[1, 0, [[1, 176]]]]);
function FileMinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileMinusFill);
  var svg = root974();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileMinusFill = hmr(FileMinusFill, () => FileMinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileMinusFill[HMR].source;
    set(FileMinusFill[HMR].source, module.default[HMR].original);
  });
}
var FileMinusFill_default = FileMinusFill;
mark_module_end(FileMinusFill);

// node_modules/svelte-bootstrap-icons/lib/FileMinus.svelte
mark_module_start();
FileMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileMinus.svelte";
var root975 = add_locations(ns_template(`<svg><!><path d="M5.5 8a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileMinus[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function FileMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileMinus);
  var svg = root975();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileMinus = hmr(FileMinus, () => FileMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileMinus[HMR].source;
    set(FileMinus[HMR].source, module.default[HMR].original);
  });
}
var FileMinus_default = FileMinus;
mark_module_end(FileMinus);

// node_modules/svelte-bootstrap-icons/lib/FileMusicFill.svelte
mark_module_start();
FileMusicFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileMusicFill.svelte";
var root976 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm-.5 4.11v1.8l-2.5.5v5.09c0 .495-.301.883-.662 1.123C7.974 12.866 7.499 13 7 13c-.5 0-.974-.134-1.338-.377-.36-.24-.662-.628-.662-1.123s.301-.883.662-1.123C6.026 10.134 6.501 10 7 10c.356 0 .7.068 1 .196V4.41a1 1 0 0 1 .804-.98l1.5-.3a1 1 0 0 1 1.196.98z"></path></svg>`), FileMusicFill[FILENAME], [[1, 0, [[1, 176]]]]);
function FileMusicFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileMusicFill);
  var svg = root976();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-music-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileMusicFill = hmr(FileMusicFill, () => FileMusicFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileMusicFill[HMR].source;
    set(FileMusicFill[HMR].source, module.default[HMR].original);
  });
}
var FileMusicFill_default = FileMusicFill;
mark_module_end(FileMusicFill);

// node_modules/svelte-bootstrap-icons/lib/FileMusic.svelte
mark_module_start();
FileMusic[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileMusic.svelte";
var root977 = add_locations(ns_template(`<svg><!><path d="M10.304 3.13a1 1 0 0 1 1.196.98v1.8l-2.5.5v5.09c0 .495-.301.883-.662 1.123C7.974 12.866 7.499 13 7 13c-.5 0-.974-.134-1.338-.377-.36-.24-.662-.628-.662-1.123s.301-.883.662-1.123C6.026 10.134 6.501 10 7 10c.356 0 .7.068 1 .196V4.41a1 1 0 0 1 .804-.98l1.5-.3z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileMusic[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function FileMusic($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileMusic);
  var svg = root977();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-music", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileMusic = hmr(FileMusic, () => FileMusic[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileMusic[HMR].source;
    set(FileMusic[HMR].source, module.default[HMR].original);
  });
}
var FileMusic_default = FileMusic;
mark_module_end(FileMusic);

// node_modules/svelte-bootstrap-icons/lib/FilePdfFill.svelte
mark_module_start();
FilePdfFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePdfFill.svelte";
var root978 = add_locations(ns_template(`<svg><!><path d="M5.523 10.424c.14-.082.293-.162.459-.238a7.878 7.878 0 0 1-.45.606c-.28.337-.498.516-.635.572a.266.266 0 0 1-.035.012.282.282 0 0 1-.026-.044c-.056-.11-.054-.216.04-.36.106-.165.319-.354.647-.548zm2.455-1.647c-.119.025-.237.05-.356.078a21.035 21.035 0 0 0 .5-1.05 11.96 11.96 0 0 0 .51.858c-.217.032-.436.07-.654.114zm2.525.939a3.888 3.888 0 0 1-.435-.41c.228.005.434.022.612.054.317.057.466.147.518.209a.095.095 0 0 1 .026.064.436.436 0 0 1-.06.2.307.307 0 0 1-.094.124.107.107 0 0 1-.069.015c-.09-.003-.258-.066-.498-.256zM8.278 4.97c-.04.244-.108.524-.2.829a4.86 4.86 0 0 1-.089-.346c-.076-.353-.087-.63-.046-.822.038-.177.11-.248.196-.283a.517.517 0 0 1 .145-.04c.013.03.028.092.032.198.005.122-.007.277-.038.465z"></path><path fill-rule="evenodd" d="M4 0h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm.165 11.668c.09.18.23.343.438.419.207.075.412.04.58-.03.318-.13.635-.436.926-.786.333-.401.683-.927 1.021-1.51a11.64 11.64 0 0 1 1.997-.406c.3.383.61.713.91.95.28.22.603.403.934.417a.856.856 0 0 0 .51-.138c.155-.101.27-.247.354-.416.09-.181.145-.37.138-.563a.844.844 0 0 0-.2-.518c-.226-.27-.596-.4-.96-.465a5.76 5.76 0 0 0-1.335-.05 10.954 10.954 0 0 1-.98-1.686c.25-.66.437-1.284.52-1.794.036-.218.055-.426.048-.614a1.238 1.238 0 0 0-.127-.538.7.7 0 0 0-.477-.365c-.202-.043-.41 0-.601.077-.377.15-.576.47-.651.823-.073.34-.04.736.046 1.136.088.406.238.848.43 1.295a19.707 19.707 0 0 1-1.062 2.227 7.662 7.662 0 0 0-1.482.645c-.37.22-.699.48-.897.787-.21.326-.275.714-.08 1.103z"></path></svg>`), FilePdfFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function FilePdfFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePdfFill);
  var svg = root978();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-pdf-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePdfFill = hmr(FilePdfFill, () => FilePdfFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePdfFill[HMR].source;
    set(FilePdfFill[HMR].source, module.default[HMR].original);
  });
}
var FilePdfFill_default = FilePdfFill;
mark_module_end(FilePdfFill);

// node_modules/svelte-bootstrap-icons/lib/FilePdf.svelte
mark_module_start();
FilePdf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePdf.svelte";
var root979 = add_locations(ns_template(`<svg><!><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path><path d="M4.603 12.087a.81.81 0 0 1-.438-.42c-.195-.388-.13-.776.08-1.102.198-.307.526-.568.897-.787a7.68 7.68 0 0 1 1.482-.645 19.701 19.701 0 0 0 1.062-2.227 7.269 7.269 0 0 1-.43-1.295c-.086-.4-.119-.796-.046-1.136.075-.354.274-.672.65-.823.192-.077.4-.12.602-.077a.7.7 0 0 1 .477.365c.088.164.12.356.127.538.007.187-.012.395-.047.614-.084.51-.27 1.134-.52 1.794a10.954 10.954 0 0 0 .98 1.686 5.753 5.753 0 0 1 1.334.05c.364.065.734.195.96.465.12.144.193.32.2.518.007.192-.047.382-.138.563a1.04 1.04 0 0 1-.354.416.856.856 0 0 1-.51.138c-.331-.014-.654-.196-.933-.417a5.716 5.716 0 0 1-.911-.95 11.642 11.642 0 0 0-1.997.406 11.311 11.311 0 0 1-1.021 1.51c-.29.35-.608.655-.926.787a.793.793 0 0 1-.58.029zm1.379-1.901c-.166.076-.32.156-.459.238-.328.194-.541.383-.647.547-.094.145-.096.25-.04.361.01.022.02.036.026.044a.27.27 0 0 0 .035-.012c.137-.056.355-.235.635-.572a8.18 8.18 0 0 0 .45-.606zm1.64-1.33a12.647 12.647 0 0 1 1.01-.193 11.666 11.666 0 0 1-.51-.858 20.741 20.741 0 0 1-.5 1.05zm2.446.45c.15.162.296.3.435.41.24.19.407.253.498.256a.107.107 0 0 0 .07-.015.307.307 0 0 0 .094-.125.436.436 0 0 0 .059-.2.095.095 0 0 0-.026-.063c-.052-.062-.2-.152-.518-.209a3.881 3.881 0 0 0-.612-.053zM8.078 5.8a6.7 6.7 0 0 0 .2-.828c.031-.188.043-.343.038-.465a.613.613 0 0 0-.032-.198.517.517 0 0 0-.145.04c-.087.035-.158.106-.196.283-.04.192-.03.469.046.822.024.111.054.227.09.346z"></path></svg>`), FilePdf[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function FilePdf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePdf);
  var svg = root979();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-pdf", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePdf = hmr(FilePdf, () => FilePdf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePdf[HMR].source;
    set(FilePdf[HMR].source, module.default[HMR].original);
  });
}
var FilePdf_default = FilePdf;
mark_module_end(FilePdf);

// node_modules/svelte-bootstrap-icons/lib/FilePersonFill.svelte
mark_module_start();
FilePersonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePersonFill.svelte";
var root980 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm-1 7a3 3 0 1 1-6 0 3 3 0 0 1 6 0zm-3 4c2.623 0 4.146.826 5 1.755V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-1.245C3.854 11.825 5.377 11 8 11z"></path></svg>`), FilePersonFill[FILENAME], [[1, 0, [[1, 177]]]]);
function FilePersonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePersonFill);
  var svg = root980();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-person-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePersonFill = hmr(FilePersonFill, () => FilePersonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePersonFill[HMR].source;
    set(FilePersonFill[HMR].source, module.default[HMR].original);
  });
}
var FilePersonFill_default = FilePersonFill;
mark_module_end(FilePersonFill);

// node_modules/svelte-bootstrap-icons/lib/FilePerson.svelte
mark_module_start();
FilePerson[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePerson.svelte";
var root981 = add_locations(ns_template(`<svg><!><path d="M12 1a1 1 0 0 1 1 1v10.755S12 11 8 11s-5 1.755-5 1.755V2a1 1 0 0 1 1-1h8zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z"></path><path d="M8 10a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path></svg>`), FilePerson[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function FilePerson($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePerson);
  var svg = root981();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-person", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePerson = hmr(FilePerson, () => FilePerson[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePerson[HMR].source;
    set(FilePerson[HMR].source, module.default[HMR].original);
  });
}
var FilePerson_default = FilePerson;
mark_module_end(FilePerson);

// node_modules/svelte-bootstrap-icons/lib/FilePlayFill.svelte
mark_module_start();
FilePlayFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePlayFill.svelte";
var root982 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM6 5.883a.5.5 0 0 1 .757-.429l3.528 2.117a.5.5 0 0 1 0 .858l-3.528 2.117a.5.5 0 0 1-.757-.43V5.884z"></path></svg>`), FilePlayFill[FILENAME], [[1, 0, [[1, 175]]]]);
function FilePlayFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePlayFill);
  var svg = root982();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-play-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePlayFill = hmr(FilePlayFill, () => FilePlayFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePlayFill[HMR].source;
    set(FilePlayFill[HMR].source, module.default[HMR].original);
  });
}
var FilePlayFill_default = FilePlayFill;
mark_module_end(FilePlayFill);

// node_modules/svelte-bootstrap-icons/lib/FilePlay.svelte
mark_module_start();
FilePlay[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePlay.svelte";
var root983 = add_locations(ns_template(`<svg><!><path d="M6 10.117V5.883a.5.5 0 0 1 .757-.429l3.528 2.117a.5.5 0 0 1 0 .858l-3.528 2.117a.5.5 0 0 1-.757-.43z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FilePlay[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FilePlay($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePlay);
  var svg = root983();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-play", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePlay = hmr(FilePlay, () => FilePlay[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePlay[HMR].source;
    set(FilePlay[HMR].source, module.default[HMR].original);
  });
}
var FilePlay_default = FilePlay;
mark_module_end(FilePlay);

// node_modules/svelte-bootstrap-icons/lib/FilePlusFill.svelte
mark_module_start();
FilePlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePlusFill.svelte";
var root984 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM8.5 6v1.5H10a.5.5 0 0 1 0 1H8.5V10a.5.5 0 0 1-1 0V8.5H6a.5.5 0 0 1 0-1h1.5V6a.5.5 0 0 1 1 0z"></path></svg>`), FilePlusFill[FILENAME], [[1, 0, [[1, 175]]]]);
function FilePlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePlusFill);
  var svg = root984();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePlusFill = hmr(FilePlusFill, () => FilePlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePlusFill[HMR].source;
    set(FilePlusFill[HMR].source, module.default[HMR].original);
  });
}
var FilePlusFill_default = FilePlusFill;
mark_module_end(FilePlusFill);

// node_modules/svelte-bootstrap-icons/lib/FilePlus.svelte
mark_module_start();
FilePlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePlus.svelte";
var root985 = add_locations(ns_template(`<svg><!><path d="M8.5 6a.5.5 0 0 0-1 0v1.5H6a.5.5 0 0 0 0 1h1.5V10a.5.5 0 0 0 1 0V8.5H10a.5.5 0 0 0 0-1H8.5V6z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path></svg>`), FilePlus[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FilePlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePlus);
  var svg = root985();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePlus = hmr(FilePlus, () => FilePlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePlus[HMR].source;
    set(FilePlus[HMR].source, module.default[HMR].original);
  });
}
var FilePlus_default = FilePlus;
mark_module_end(FilePlus);

// node_modules/svelte-bootstrap-icons/lib/FilePostFill.svelte
mark_module_start();
FilePostFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePostFill.svelte";
var root986 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM4.5 3h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1zm0 2h7a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-8a.5.5 0 0 1 .5-.5z"></path></svg>`), FilePostFill[FILENAME], [[1, 0, [[1, 175]]]]);
function FilePostFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePostFill);
  var svg = root986();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-post-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePostFill = hmr(FilePostFill, () => FilePostFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePostFill[HMR].source;
    set(FilePostFill[HMR].source, module.default[HMR].original);
  });
}
var FilePostFill_default = FilePostFill;
mark_module_end(FilePostFill);

// node_modules/svelte-bootstrap-icons/lib/FilePost.svelte
mark_module_start();
FilePost[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePost.svelte";
var root987 = add_locations(ns_template(`<svg><!><path d="M4 3.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-8z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path></svg>`), FilePost[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FilePost($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePost);
  var svg = root987();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-post", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePost = hmr(FilePost, () => FilePost[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePost[HMR].source;
    set(FilePost[HMR].source, module.default[HMR].original);
  });
}
var FilePost_default = FilePost;
mark_module_end(FilePost);

// node_modules/svelte-bootstrap-icons/lib/FilePptFill.svelte
mark_module_start();
FilePptFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePptFill.svelte";
var root988 = add_locations(ns_template(`<svg><!><path d="M8.188 8.5H7V5h1.188a1.75 1.75 0 1 1 0 3.5z"></path><path d="M4 0h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm3 4a1 1 0 0 0-1 1v6.5a.5.5 0 0 0 1 0v-2h1.188a2.75 2.75 0 0 0 0-5.5H7z"></path></svg>`), FilePptFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function FilePptFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePptFill);
  var svg = root988();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-ppt-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePptFill = hmr(FilePptFill, () => FilePptFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePptFill[HMR].source;
    set(FilePptFill[HMR].source, module.default[HMR].original);
  });
}
var FilePptFill_default = FilePptFill;
mark_module_end(FilePptFill);

// node_modules/svelte-bootstrap-icons/lib/FilePpt.svelte
mark_module_start();
FilePpt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilePpt.svelte";
var root989 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path><path d="M6 5a1 1 0 0 1 1-1h1.188a2.75 2.75 0 0 1 0 5.5H7v2a.5.5 0 0 1-1 0V5zm1 3.5h1.188a1.75 1.75 0 1 0 0-3.5H7v3.5z"></path></svg>`), FilePpt[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function FilePpt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilePpt);
  var svg = root989();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-ppt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePpt = hmr(FilePpt, () => FilePpt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePpt[HMR].source;
    set(FilePpt[HMR].source, module.default[HMR].original);
  });
}
var FilePpt_default = FilePpt;
mark_module_end(FilePpt);

// node_modules/svelte-bootstrap-icons/lib/FileRichtextFill.svelte
mark_module_start();
FileRichtextFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileRichtextFill.svelte";
var root990 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM7 4.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm-.861 1.542 1.33.886 1.854-1.855a.25.25 0 0 1 .289-.047l1.888.974V7.5a.5.5 0 0 1-.5.5H5a.5.5 0 0 1-.5-.5V7s1.54-1.274 1.639-1.208zM5 9h6a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1zm0 2h3a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1z"></path></svg>`), FileRichtextFill[FILENAME], [[1, 0, [[1, 179]]]]);
function FileRichtextFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileRichtextFill);
  var svg = root990();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-richtext-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileRichtextFill = hmr(FileRichtextFill, () => FileRichtextFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileRichtextFill[HMR].source;
    set(FileRichtextFill[HMR].source, module.default[HMR].original);
  });
}
var FileRichtextFill_default = FileRichtextFill;
mark_module_end(FileRichtextFill);

// node_modules/svelte-bootstrap-icons/lib/FileRichtext.svelte
mark_module_start();
FileRichtext[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileRichtext.svelte";
var root991 = add_locations(ns_template(`<svg><!><path d="M7 4.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm-.861 1.542 1.33.886 1.854-1.855a.25.25 0 0 1 .289-.047l1.888.974V7.5a.5.5 0 0 1-.5.5H5a.5.5 0 0 1-.5-.5V7s1.54-1.274 1.639-1.208zM5 9a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1H5zm0 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1H5z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path></svg>`), FileRichtext[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function FileRichtext($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileRichtext);
  var svg = root991();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-richtext", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileRichtext = hmr(FileRichtext, () => FileRichtext[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileRichtext[HMR].source;
    set(FileRichtext[HMR].source, module.default[HMR].original);
  });
}
var FileRichtext_default = FileRichtext;
mark_module_end(FileRichtext);

// node_modules/svelte-bootstrap-icons/lib/FileRuledFill.svelte
mark_module_start();
FileRuledFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileRuledFill.svelte";
var root992 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v4h12V2a2 2 0 0 0-2-2zm2 7H6v2h8V7zm0 3H6v2h8v-2zm0 3H6v3h6a2 2 0 0 0 2-2v-1zm-9 3v-3H2v1a2 2 0 0 0 2 2h1zm-3-4h3v-2H2v2zm0-3h3V7H2v2z"></path></svg>`), FileRuledFill[FILENAME], [[1, 0, [[1, 176]]]]);
function FileRuledFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileRuledFill);
  var svg = root992();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-ruled-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileRuledFill = hmr(FileRuledFill, () => FileRuledFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileRuledFill[HMR].source;
    set(FileRuledFill[HMR].source, module.default[HMR].original);
  });
}
var FileRuledFill_default = FileRuledFill;
mark_module_end(FileRuledFill);

// node_modules/svelte-bootstrap-icons/lib/FileRuled.svelte
mark_module_start();
FileRuled[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileRuled.svelte";
var root993 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v4h10V2a1 1 0 0 0-1-1H4zm9 6H6v2h7V7zm0 3H6v2h7v-2zm0 3H6v2h6a1 1 0 0 0 1-1v-1zm-8 2v-2H3v1a1 1 0 0 0 1 1h1zm-2-3h2v-2H3v2zm0-3h2V7H3v2z"></path></svg>`), FileRuled[FILENAME], [[1, 0, [[1, 171]]]]);
function FileRuled($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileRuled);
  var svg = root993();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-ruled", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileRuled = hmr(FileRuled, () => FileRuled[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileRuled[HMR].source;
    set(FileRuled[HMR].source, module.default[HMR].original);
  });
}
var FileRuled_default = FileRuled;
mark_module_end(FileRuled);

// node_modules/svelte-bootstrap-icons/lib/FileSlidesFill.svelte
mark_module_start();
FileSlidesFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileSlidesFill.svelte";
var root994 = add_locations(ns_template(`<svg><!><path d="M7 7.78V5.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 7.778z"></path><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM5 4h6a.5.5 0 0 1 .496.438l.5 4A.5.5 0 0 1 11.5 9h-3v2.016c.863.055 1.5.251 1.5.484 0 .276-.895.5-2 .5s-2-.224-2-.5c0-.233.637-.429 1.5-.484V9h-3a.5.5 0 0 1-.496-.562l.5-4A.5.5 0 0 1 5 4z"></path></svg>`), FileSlidesFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function FileSlidesFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileSlidesFill);
  var svg = root994();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-slides-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileSlidesFill = hmr(FileSlidesFill, () => FileSlidesFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileSlidesFill[HMR].source;
    set(FileSlidesFill[HMR].source, module.default[HMR].original);
  });
}
var FileSlidesFill_default = FileSlidesFill;
mark_module_end(FileSlidesFill);

// node_modules/svelte-bootstrap-icons/lib/FileSlides.svelte
mark_module_start();
FileSlides[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileSlides.svelte";
var root995 = add_locations(ns_template(`<svg><!><path d="M5 4a.5.5 0 0 0-.496.438l-.5 4A.5.5 0 0 0 4.5 9h3v2.016c-.863.055-1.5.251-1.5.484 0 .276.895.5 2 .5s2-.224 2-.5c0-.233-.637-.429-1.5-.484V9h3a.5.5 0 0 0 .496-.562l-.5-4A.5.5 0 0 0 11 4H5zm2 3.78V5.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 7.778z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path></svg>`), FileSlides[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function FileSlides($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileSlides);
  var svg = root995();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-slides", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileSlides = hmr(FileSlides, () => FileSlides[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileSlides[HMR].source;
    set(FileSlides[HMR].source, module.default[HMR].original);
  });
}
var FileSlides_default = FileSlides;
mark_module_end(FileSlides);

// node_modules/svelte-bootstrap-icons/lib/FileSpreadsheetFill.svelte
mark_module_start();
FileSpreadsheetFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileSpreadsheetFill.svelte";
var root996 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v4h12V2a2 2 0 0 0-2-2zm2 7h-4v2h4V7zm0 3h-4v2h4v-2zm0 3h-4v3h2a2 2 0 0 0 2-2v-1zm-5 3v-3H6v3h3zm-4 0v-3H2v1a2 2 0 0 0 2 2h1zm-3-4h3v-2H2v2zm0-3h3V7H2v2zm4 0V7h3v2H6zm0 1h3v2H6v-2z"></path></svg>`), FileSpreadsheetFill[FILENAME], [[1, 0, [[1, 182]]]]);
function FileSpreadsheetFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileSpreadsheetFill);
  var svg = root996();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-spreadsheet-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileSpreadsheetFill = hmr(FileSpreadsheetFill, () => FileSpreadsheetFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileSpreadsheetFill[HMR].source;
    set(FileSpreadsheetFill[HMR].source, module.default[HMR].original);
  });
}
var FileSpreadsheetFill_default = FileSpreadsheetFill;
mark_module_end(FileSpreadsheetFill);

// node_modules/svelte-bootstrap-icons/lib/FileSpreadsheet.svelte
mark_module_start();
FileSpreadsheet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileSpreadsheet.svelte";
var root997 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v4h10V2a1 1 0 0 0-1-1H4zm9 6h-3v2h3V7zm0 3h-3v2h3v-2zm0 3h-3v2h2a1 1 0 0 0 1-1v-1zm-4 2v-2H6v2h3zm-4 0v-2H3v1a1 1 0 0 0 1 1h1zm-2-3h2v-2H3v2zm0-3h2V7H3v2zm3-2v2h3V7H6zm3 3H6v2h3v-2z"></path></svg>`), FileSpreadsheet[FILENAME], [[1, 0, [[1, 177]]]]);
function FileSpreadsheet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileSpreadsheet);
  var svg = root997();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-spreadsheet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileSpreadsheet = hmr(FileSpreadsheet, () => FileSpreadsheet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileSpreadsheet[HMR].source;
    set(FileSpreadsheet[HMR].source, module.default[HMR].original);
  });
}
var FileSpreadsheet_default = FileSpreadsheet;
mark_module_end(FileSpreadsheet);

// node_modules/svelte-bootstrap-icons/lib/FileTextFill.svelte
mark_module_start();
FileTextFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileTextFill.svelte";
var root998 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM5 4h6a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1zm-.5 2.5A.5.5 0 0 1 5 6h6a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zM5 8h6a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1zm0 2h3a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1z"></path></svg>`), FileTextFill[FILENAME], [[1, 0, [[1, 175]]]]);
function FileTextFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileTextFill);
  var svg = root998();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-text-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileTextFill = hmr(FileTextFill, () => FileTextFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileTextFill[HMR].source;
    set(FileTextFill[HMR].source, module.default[HMR].original);
  });
}
var FileTextFill_default = FileTextFill;
mark_module_end(FileTextFill);

// node_modules/svelte-bootstrap-icons/lib/FileText.svelte
mark_module_start();
FileText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileText.svelte";
var root999 = add_locations(ns_template(`<svg><!><path d="M5 4a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1H5zm-.5 2.5A.5.5 0 0 1 5 6h6a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zM5 8a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1H5zm0 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1H5z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"></path></svg>`), FileText[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FileText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileText);
  var svg = root999();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileText = hmr(FileText, () => FileText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileText[HMR].source;
    set(FileText[HMR].source, module.default[HMR].original);
  });
}
var FileText_default = FileText;
mark_module_end(FileText);

// node_modules/svelte-bootstrap-icons/lib/FileWordFill.svelte
mark_module_start();
FileWordFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileWordFill.svelte";
var root1000 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM5.485 4.879l1.036 4.144.997-3.655a.5.5 0 0 1 .964 0l.997 3.655 1.036-4.144a.5.5 0 0 1 .97.242l-1.5 6a.5.5 0 0 1-.967.01L8 7.402l-1.018 3.73a.5.5 0 0 1-.967-.01l-1.5-6a.5.5 0 1 1 .97-.242z"></path></svg>`), FileWordFill[FILENAME], [[1, 0, [[1, 175]]]]);
function FileWordFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileWordFill);
  var svg = root1000();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-word-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileWordFill = hmr(FileWordFill, () => FileWordFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileWordFill[HMR].source;
    set(FileWordFill[HMR].source, module.default[HMR].original);
  });
}
var FileWordFill_default = FileWordFill;
mark_module_end(FileWordFill);

// node_modules/svelte-bootstrap-icons/lib/FileWord.svelte
mark_module_start();
FileWord[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileWord.svelte";
var root1001 = add_locations(ns_template(`<svg><!><path d="M4.879 4.515a.5.5 0 0 1 .606.364l1.036 4.144.997-3.655a.5.5 0 0 1 .964 0l.997 3.655 1.036-4.144a.5.5 0 0 1 .97.242l-1.5 6a.5.5 0 0 1-.967.01L8 7.402l-1.018 3.73a.5.5 0 0 1-.967-.01l-1.5-6a.5.5 0 0 1 .364-.606z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileWord[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FileWord($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileWord);
  var svg = root1001();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-word", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileWord = hmr(FileWord, () => FileWord[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileWord[HMR].source;
    set(FileWord[HMR].source, module.default[HMR].original);
  });
}
var FileWord_default = FileWord;
mark_module_end(FileWord);

// node_modules/svelte-bootstrap-icons/lib/FileXFill.svelte
mark_module_start();
FileXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileXFill.svelte";
var root1002 = add_locations(ns_template(`<svg><!><path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM6.854 6.146 8 7.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 8l1.147 1.146a.5.5 0 0 1-.708.708L8 8.707 6.854 9.854a.5.5 0 0 1-.708-.708L7.293 8 6.146 6.854a.5.5 0 1 1 .708-.708z"></path></svg>`), FileXFill[FILENAME], [[1, 0, [[1, 172]]]]);
function FileXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileXFill);
  var svg = root1002();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileXFill = hmr(FileXFill, () => FileXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileXFill[HMR].source;
    set(FileXFill[HMR].source, module.default[HMR].original);
  });
}
var FileXFill_default = FileXFill;
mark_module_end(FileXFill);

// node_modules/svelte-bootstrap-icons/lib/FileX.svelte
mark_module_start();
FileX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileX.svelte";
var root1003 = add_locations(ns_template(`<svg><!><path d="M6.146 6.146a.5.5 0 0 1 .708 0L8 7.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 8l1.147 1.146a.5.5 0 0 1-.708.708L8 8.707 6.854 9.854a.5.5 0 0 1-.708-.708L7.293 8 6.146 6.854a.5.5 0 0 1 0-.708z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), FileX[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function FileX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileX);
  var svg = root1003();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileX = hmr(FileX, () => FileX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileX[HMR].source;
    set(FileX[HMR].source, module.default[HMR].original);
  });
}
var FileX_default = FileX;
mark_module_end(FileX);

// node_modules/svelte-bootstrap-icons/lib/FileZipFill.svelte
mark_module_start();
FileZipFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileZipFill.svelte";
var root1004 = add_locations(ns_template(`<svg><!><path d="M8.5 9.438V8.5h-1v.938a1 1 0 0 1-.03.243l-.4 1.598.93.62.93-.62-.4-1.598a1 1 0 0 1-.03-.243z"></path><path d="M4 0h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm2.5 8.5v.938l-.4 1.599a1 1 0 0 0 .416 1.074l.93.62a1 1 0 0 0 1.109 0l.93-.62a1 1 0 0 0 .415-1.074l-.4-1.599V8.5a1 1 0 0 0-1-1h-1a1 1 0 0 0-1 1zm1-5.5h-1v1h1v1h-1v1h1v1H9V6H8V5h1V4H8V3h1V2H8V1H6.5v1h1v1z"></path></svg>`), FileZipFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function FileZipFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileZipFill);
  var svg = root1004();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-zip-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileZipFill = hmr(FileZipFill, () => FileZipFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileZipFill[HMR].source;
    set(FileZipFill[HMR].source, module.default[HMR].original);
  });
}
var FileZipFill_default = FileZipFill;
mark_module_end(FileZipFill);

// node_modules/svelte-bootstrap-icons/lib/FileZip.svelte
mark_module_start();
FileZip[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FileZip.svelte";
var root1005 = add_locations(ns_template(`<svg><!><path d="M6.5 7.5a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v.938l.4 1.599a1 1 0 0 1-.416 1.074l-.93.62a1 1 0 0 1-1.109 0l-.93-.62a1 1 0 0 1-.415-1.074l.4-1.599V7.5zm2 0h-1v.938a1 1 0 0 1-.03.243l-.4 1.598.93.62.93-.62-.4-1.598a1 1 0 0 1-.03-.243V7.5z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm5.5-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9v1H8v1h1v1H8v1h1v1H7.5V5h-1V4h1V3h-1V2h1V1z"></path></svg>`), FileZip[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function FileZip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FileZip);
  var svg = root1005();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file-zip", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileZip = hmr(FileZip, () => FileZip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileZip[HMR].source;
    set(FileZip[HMR].source, module.default[HMR].original);
  });
}
var FileZip_default = FileZip;
mark_module_end(FileZip);

// node_modules/svelte-bootstrap-icons/lib/File.svelte
mark_module_start();
File[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/File.svelte";
var root1006 = add_locations(ns_template(`<svg><!><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"></path></svg>`), File[FILENAME], [[1, 0, [[1, 165]]]]);
function File($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, File);
  var svg = root1006();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-file", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File = hmr(File, () => File[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File[HMR].source;
    set(File[HMR].source, module.default[HMR].original);
  });
}
var File_default = File;
mark_module_end(File);

// node_modules/svelte-bootstrap-icons/lib/FilesAlt.svelte
mark_module_start();
FilesAlt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilesAlt.svelte";
var root1007 = add_locations(ns_template(`<svg><!><path d="M11 0H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2 2 2 0 0 0 2-2V4a2 2 0 0 0-2-2 2 2 0 0 0-2-2zm2 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1V3zM2 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V2z"></path></svg>`), FilesAlt[FILENAME], [[1, 0, [[1, 170]]]]);
function FilesAlt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilesAlt);
  var svg = root1007();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-files-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilesAlt = hmr(FilesAlt, () => FilesAlt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilesAlt[HMR].source;
    set(FilesAlt[HMR].source, module.default[HMR].original);
  });
}
var FilesAlt_default = FilesAlt;
mark_module_end(FilesAlt);

// node_modules/svelte-bootstrap-icons/lib/Files.svelte
mark_module_start();
Files[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Files.svelte";
var root1008 = add_locations(ns_template(`<svg><!><path d="M13 0H6a2 2 0 0 0-2 2 2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2 2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm0 13V4a2 2 0 0 0-2-2H5a1 1 0 0 1 1-1h7a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1zM3 4a1 1 0 0 1 1-1h7a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4z"></path></svg>`), Files[FILENAME], [[1, 0, [[1, 166]]]]);
function Files($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Files);
  var svg = root1008();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-files", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Files = hmr(Files, () => Files[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Files[HMR].source;
    set(Files[HMR].source, module.default[HMR].original);
  });
}
var Files_default = Files;
mark_module_end(Files);

// node_modules/svelte-bootstrap-icons/lib/FiletypeAac.svelte
mark_module_start();
FiletypeAac[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeAac.svelte";
var root1009 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-5.808 8.554a1.732 1.732 0 0 0-.103.633v.495c0 .246.035.455.103.627a.834.834 0 0 0 .299.393.845.845 0 0 0 .477.131.872.872 0 0 0 .402-.088.699.699 0 0 0 .272-.248.8.8 0 0 0 .117-.364h.765v.076a1.268 1.268 0 0 1-.226.674c-.136.194-.32.345-.55.454a1.81 1.81 0 0 1-.785.164c-.36 0-.665-.072-.915-.216a1.424 1.424 0 0 1-.57-.627c-.13-.272-.194-.597-.194-.976v-.498c0-.379.065-.705.196-.978.13-.274.321-.485.571-.633.252-.149.556-.223.912-.223.218 0 .42.032.606.097.187.062.35.153.49.272a1.325 1.325 0 0 1 .465.964v.073h-.765a.85.85 0 0 0-.12-.38.7.7 0 0 0-.272-.261.802.802 0 0 0-.399-.097.814.814 0 0 0-.474.138.868.868 0 0 0-.302.398ZM.8 15.925l.313-1.028H2.45l.314 1.028h.84l-1.335-3.999h-.926l-1.342 4h.8Zm1.002-3.234.489 1.617H1.277l.49-1.617h.035Zm2.63 3.234.313-1.028H6.08l.313 1.028h.841L5.9 11.926h-.926l-1.341 4h.8Zm1.001-3.234.49 1.617H4.909l.49-1.617h.034Z"></path></svg>`), FiletypeAac[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeAac($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeAac);
  var svg = root1009();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-aac", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeAac = hmr(FiletypeAac, () => FiletypeAac[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeAac[HMR].source;
    set(FiletypeAac[HMR].source, module.default[HMR].original);
  });
}
var FiletypeAac_default = FiletypeAac;
mark_module_end(FiletypeAac);

// node_modules/svelte-bootstrap-icons/lib/FiletypeAi.svelte
mark_module_start();
FiletypeAi[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeAi.svelte";
var root1010 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2H6v-1h6a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.113 14.82.8 15.85H0l1.342-3.999h.926l1.336 3.999h-.841l-.314-1.028H1.113Zm1.178-.588-.49-1.617h-.034l-.49 1.617h1.014Zm2.425-2.382v3.999h-.791V11.85h.79Z"></path></svg>`), FiletypeAi[FILENAME], [[1, 0, [[1, 172]]]]);
function FiletypeAi($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeAi);
  var svg = root1010();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-ai", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeAi = hmr(FiletypeAi, () => FiletypeAi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeAi[HMR].source;
    set(FiletypeAi[HMR].source, module.default[HMR].original);
  });
}
var FiletypeAi_default = FiletypeAi;
mark_module_end(FiletypeAi);

// node_modules/svelte-bootstrap-icons/lib/FiletypeBmp.svelte
mark_module_start();
FiletypeBmp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeBmp.svelte";
var root1011 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM0 15.849h1.664c.272 0 .512-.044.72-.132.21-.09.374-.219.493-.386.12-.168.179-.372.179-.61a.986.986 0 0 0-.123-.51.846.846 0 0 0-.323-.325 1.084 1.084 0 0 0-.445-.14v-.036a1 1 0 0 0 .352-.16.79.79 0 0 0 .243-.294.932.932 0 0 0 .09-.422c0-.308-.107-.55-.322-.723-.215-.174-.5-.261-.858-.261H0v3.999Zm.785-3.404h.7c.186 0 .33.047.431.14.104.092.155.22.155.384a.52.52 0 0 1-.082.296.497.497 0 0 1-.249.185 1.222 1.222 0 0 1-.433.064H.785v-1.07Zm0 1.62h.75c.154 0 .285.024.393.073a.51.51 0 0 1 .24.211.61.61 0 0 1 .082.325c0 .19-.068.334-.205.434-.137.098-.36.146-.671.146H.785v-1.19Zm3.474 1.784v-2.66h.038l.952 2.16h.515l.947-2.16h.038v2.66h.715V11.85h-.8l-1.14 2.596h-.026l-1.14-2.596h-.805v3.999h.706Zm3.918-3.999h1.6c.289 0 .533.06.732.179.201.117.355.276.46.477.106.201.159.427.159.677 0 .25-.054.476-.162.677-.105.199-.26.357-.462.474a1.452 1.452 0 0 1-.733.173h-.803v1.342h-.79V11.85Zm2.06 1.714a.794.794 0 0 0 .085-.381c0-.226-.062-.4-.185-.521-.123-.122-.294-.182-.512-.182h-.66v1.406h.66a.794.794 0 0 0 .375-.082.574.574 0 0 0 .237-.24Z"></path></svg>`), FiletypeBmp[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeBmp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeBmp);
  var svg = root1011();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-bmp", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeBmp = hmr(FiletypeBmp, () => FiletypeBmp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeBmp[HMR].source;
    set(FiletypeBmp[HMR].source, module.default[HMR].original);
  });
}
var FiletypeBmp_default = FiletypeBmp;
mark_module_end(FiletypeBmp);

// node_modules/svelte-bootstrap-icons/lib/FiletypeCs.svelte
mark_module_start();
FiletypeCs[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeCs.svelte";
var root1012 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2H8v-1h4a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.629 15.29a1.176 1.176 0 0 1-.112-.449h.765a.578.578 0 0 0 .255.384c.07.049.153.087.249.114.096.028.202.041.32.041.163 0 .301-.023.412-.07a.559.559 0 0 0 .255-.193.507.507 0 0 0 .085-.29.387.387 0 0 0-.152-.326c-.102-.08-.256-.144-.463-.193l-.618-.143a1.72 1.72 0 0 1-.54-.214 1.001 1.001 0 0 1-.35-.367 1.068 1.068 0 0 1-.124-.524c0-.244.064-.457.19-.639.128-.181.303-.322.528-.422.225-.1.483-.149.776-.149.305 0 .565.05.78.152.216.102.383.239.5.41.12.17.186.359.2.566h-.75a.56.56 0 0 0-.12-.258.624.624 0 0 0-.246-.181.923.923 0 0 0-.37-.068c-.216 0-.387.05-.512.152a.472.472 0 0 0-.185.384c0 .121.048.22.144.3a.97.97 0 0 0 .404.175l.621.143c.217.05.405.12.566.211.16.09.285.21.375.358.09.148.134.335.134.56 0 .247-.062.466-.187.656a1.216 1.216 0 0 1-.54.439c-.234.105-.52.158-.858.158a2.21 2.21 0 0 1-.665-.09 1.404 1.404 0 0 1-.477-.252 1.13 1.13 0 0 1-.29-.375Zm-2.72-2.23a1.732 1.732 0 0 0-.103.633v.495c0 .246.034.455.102.627a.833.833 0 0 0 .299.392.845.845 0 0 0 .478.132.86.86 0 0 0 .4-.088.7.7 0 0 0 .273-.249.799.799 0 0 0 .118-.363h.764v.076a1.27 1.27 0 0 1-.225.674c-.137.193-.32.345-.551.454a1.81 1.81 0 0 1-.785.164c-.36 0-.664-.072-.914-.217a1.424 1.424 0 0 1-.572-.626C.064 14.892 0 14.567 0 14.188v-.498c0-.38.065-.705.196-.979a1.44 1.44 0 0 1 .572-.633c.252-.148.555-.222.91-.222.22 0 .422.032.607.097.188.062.35.153.49.272a1.324 1.324 0 0 1 .465.964v.073h-.764a.85.85 0 0 0-.12-.38.7.7 0 0 0-.273-.261.803.803 0 0 0-.398-.097.814.814 0 0 0-.475.138.868.868 0 0 0-.302.398Z"></path></svg>`), FiletypeCs[FILENAME], [[1, 0, [[1, 172]]]]);
function FiletypeCs($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeCs);
  var svg = root1012();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-cs", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeCs = hmr(FiletypeCs, () => FiletypeCs[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeCs[HMR].source;
    set(FiletypeCs[HMR].source, module.default[HMR].original);
  });
}
var FiletypeCs_default = FiletypeCs;
mark_module_end(FiletypeCs);

// node_modules/svelte-bootstrap-icons/lib/FiletypeCss.svelte
mark_module_start();
FiletypeCss[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeCss.svelte";
var root1013 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.397 14.841a1.13 1.13 0 0 0 .401.823c.13.108.289.192.478.252.19.061.411.091.665.091.338 0 .624-.053.859-.158.236-.105.416-.252.539-.44.125-.189.187-.408.187-.656 0-.224-.045-.41-.134-.56a1.001 1.001 0 0 0-.375-.357 2.027 2.027 0 0 0-.566-.21l-.621-.144a.97.97 0 0 1-.404-.176.37.37 0 0 1-.144-.299c0-.156.062-.284.185-.384.125-.101.296-.152.512-.152.143 0 .266.023.37.068a.624.624 0 0 1 .246.181.56.56 0 0 1 .12.258h.75a1.092 1.092 0 0 0-.2-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.293 0-.551.05-.776.15-.225.099-.4.24-.527.421-.127.182-.19.395-.19.639 0 .201.04.376.122.524.082.149.2.27.352.367.152.095.332.167.539.213l.618.144c.207.049.361.113.463.193a.387.387 0 0 1 .152.326.505.505 0 0 1-.085.29.559.559 0 0 1-.255.193c-.111.047-.249.07-.413.07-.117 0-.223-.013-.32-.04a.838.838 0 0 1-.248-.115.578.578 0 0 1-.255-.384h-.765ZM.806 13.693c0-.248.034-.46.102-.633a.868.868 0 0 1 .302-.399.814.814 0 0 1 .475-.137c.15 0 .283.032.398.097a.7.7 0 0 1 .272.26.85.85 0 0 1 .12.381h.765v-.072a1.33 1.33 0 0 0-.466-.964 1.441 1.441 0 0 0-.489-.272 1.838 1.838 0 0 0-.606-.097c-.356 0-.66.074-.911.223-.25.148-.44.359-.572.632-.13.274-.196.6-.196.979v.498c0 .379.064.704.193.976.131.271.322.48.572.626.25.145.554.217.914.217.293 0 .554-.055.785-.164.23-.11.414-.26.55-.454a1.27 1.27 0 0 0 .226-.674v-.076h-.764a.799.799 0 0 1-.118.363.7.7 0 0 1-.272.25.874.874 0 0 1-.401.087.845.845 0 0 1-.478-.132.833.833 0 0 1-.299-.392 1.699 1.699 0 0 1-.102-.627v-.495ZM6.78 15.29a1.176 1.176 0 0 1-.111-.449h.764a.578.578 0 0 0 .255.384c.07.049.154.087.25.114.095.028.201.041.319.041.164 0 .301-.023.413-.07a.559.559 0 0 0 .255-.193.507.507 0 0 0 .085-.29.387.387 0 0 0-.153-.326c-.101-.08-.256-.144-.463-.193l-.618-.143a1.72 1.72 0 0 1-.539-.214 1 1 0 0 1-.351-.367 1.068 1.068 0 0 1-.123-.524c0-.244.063-.457.19-.639.127-.181.303-.322.527-.422.225-.1.484-.149.777-.149.304 0 .564.05.779.152.217.102.384.239.5.41.12.17.187.359.2.566h-.75a.56.56 0 0 0-.12-.258.624.624 0 0 0-.246-.181.923.923 0 0 0-.37-.068c-.216 0-.387.05-.512.152a.472.472 0 0 0-.184.384c0 .121.047.22.143.3a.97.97 0 0 0 .404.175l.621.143c.217.05.406.12.566.211.16.09.285.21.375.358.09.148.135.335.135.56 0 .247-.063.466-.188.656a1.216 1.216 0 0 1-.539.439c-.234.105-.52.158-.858.158-.254 0-.476-.03-.665-.09a1.404 1.404 0 0 1-.478-.252 1.13 1.13 0 0 1-.29-.375Z"></path></svg>`), FiletypeCss[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeCss($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeCss);
  var svg = root1013();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-css", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeCss = hmr(FiletypeCss, () => FiletypeCss[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeCss[HMR].source;
    set(FiletypeCss[HMR].source, module.default[HMR].original);
  });
}
var FiletypeCss_default = FiletypeCss;
mark_module_end(FiletypeCss);

// node_modules/svelte-bootstrap-icons/lib/FiletypeCsv.svelte
mark_module_start();
FiletypeCsv[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeCsv.svelte";
var root1014 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.517 14.841a1.13 1.13 0 0 0 .401.823c.13.108.289.192.478.252.19.061.411.091.665.091.338 0 .624-.053.859-.158.236-.105.416-.252.539-.44.125-.189.187-.408.187-.656 0-.224-.045-.41-.134-.56a1.001 1.001 0 0 0-.375-.357 2.027 2.027 0 0 0-.566-.21l-.621-.144a.97.97 0 0 1-.404-.176.37.37 0 0 1-.144-.299c0-.156.062-.284.185-.384.125-.101.296-.152.512-.152.143 0 .266.023.37.068a.624.624 0 0 1 .246.181.56.56 0 0 1 .12.258h.75a1.092 1.092 0 0 0-.2-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.293 0-.551.05-.776.15-.225.099-.4.24-.527.421-.127.182-.19.395-.19.639 0 .201.04.376.122.524.082.149.2.27.352.367.152.095.332.167.539.213l.618.144c.207.049.361.113.463.193a.387.387 0 0 1 .152.326.505.505 0 0 1-.085.29.559.559 0 0 1-.255.193c-.111.047-.249.07-.413.07-.117 0-.223-.013-.32-.04a.838.838 0 0 1-.248-.115.578.578 0 0 1-.255-.384h-.765ZM.806 13.693c0-.248.034-.46.102-.633a.868.868 0 0 1 .302-.399.814.814 0 0 1 .475-.137c.15 0 .283.032.398.097a.7.7 0 0 1 .272.26.85.85 0 0 1 .12.381h.765v-.072a1.33 1.33 0 0 0-.466-.964 1.441 1.441 0 0 0-.489-.272 1.838 1.838 0 0 0-.606-.097c-.356 0-.66.074-.911.223-.25.148-.44.359-.572.632-.13.274-.196.6-.196.979v.498c0 .379.064.704.193.976.131.271.322.48.572.626.25.145.554.217.914.217.293 0 .554-.055.785-.164.23-.11.414-.26.55-.454a1.27 1.27 0 0 0 .226-.674v-.076h-.764a.799.799 0 0 1-.118.363.7.7 0 0 1-.272.25.874.874 0 0 1-.401.087.845.845 0 0 1-.478-.132.833.833 0 0 1-.299-.392 1.699 1.699 0 0 1-.102-.627v-.495Zm8.239 2.238h-.953l-1.338-3.999h.917l.896 3.138h.038l.888-3.138h.879l-1.327 4Z"></path></svg>`), FiletypeCsv[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeCsv($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeCsv);
  var svg = root1014();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-csv", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeCsv = hmr(FiletypeCsv, () => FiletypeCsv[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeCsv[HMR].source;
    set(FiletypeCsv[HMR].source, module.default[HMR].original);
  });
}
var FiletypeCsv_default = FiletypeCsv;
mark_module_end(FiletypeCsv);

// node_modules/svelte-bootstrap-icons/lib/FiletypeDoc.svelte
mark_module_start();
FiletypeDoc[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeDoc.svelte";
var root1015 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-7.839 9.166v.522c0 .256-.039.47-.117.641a.861.861 0 0 1-.322.387.877.877 0 0 1-.469.126.883.883 0 0 1-.471-.126.868.868 0 0 1-.32-.386 1.55 1.55 0 0 1-.117-.642v-.522c0-.257.04-.471.117-.641a.868.868 0 0 1 .32-.387.868.868 0 0 1 .471-.129c.176 0 .332.043.469.13a.861.861 0 0 1 .322.386c.078.17.117.384.117.641Zm.803.519v-.513c0-.377-.068-.7-.205-.972a1.46 1.46 0 0 0-.589-.63c-.254-.147-.56-.22-.917-.22-.355 0-.662.073-.92.22a1.441 1.441 0 0 0-.589.627c-.136.271-.205.596-.205.975v.513c0 .375.069.7.205.973.137.271.333.48.59.627.257.144.564.216.92.216.357 0 .662-.072.916-.216.256-.147.452-.356.59-.627.136-.274.204-.598.204-.973ZM0 11.926v4h1.459c.402 0 .735-.08.999-.238a1.45 1.45 0 0 0 .595-.689c.13-.3.196-.662.196-1.084 0-.42-.065-.778-.196-1.075a1.426 1.426 0 0 0-.59-.68c-.263-.156-.598-.234-1.004-.234H0Zm.791.645h.563c.248 0 .45.05.609.152a.89.89 0 0 1 .354.454c.079.201.118.452.118.753a2.3 2.3 0 0 1-.068.592 1.141 1.141 0 0 1-.196.422.8.8 0 0 1-.334.252 1.298 1.298 0 0 1-.483.082H.79V12.57Zm7.422.483a1.732 1.732 0 0 0-.103.633v.495c0 .246.034.455.103.627a.834.834 0 0 0 .298.393.845.845 0 0 0 .478.131.868.868 0 0 0 .401-.088.699.699 0 0 0 .273-.248.8.8 0 0 0 .117-.364h.765v.076a1.268 1.268 0 0 1-.226.674c-.137.194-.32.345-.55.454a1.81 1.81 0 0 1-.786.164c-.36 0-.664-.072-.914-.216a1.424 1.424 0 0 1-.571-.627c-.13-.272-.194-.597-.194-.976v-.498c0-.379.066-.705.197-.978.13-.274.321-.485.571-.633.252-.149.556-.223.911-.223.219 0 .421.032.607.097.187.062.35.153.489.272a1.326 1.326 0 0 1 .466.964v.073H9.78a.85.85 0 0 0-.12-.38.7.7 0 0 0-.273-.261.802.802 0 0 0-.398-.097.814.814 0 0 0-.475.138.868.868 0 0 0-.301.398Z"></path></svg>`), FiletypeDoc[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeDoc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeDoc);
  var svg = root1015();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-doc", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeDoc = hmr(FiletypeDoc, () => FiletypeDoc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeDoc[HMR].source;
    set(FiletypeDoc[HMR].source, module.default[HMR].original);
  });
}
var FiletypeDoc_default = FiletypeDoc;
mark_module_end(FiletypeDoc);

// node_modules/svelte-bootstrap-icons/lib/FiletypeDocx.svelte
mark_module_start();
FiletypeDocx[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeDocx.svelte";
var root1016 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-6.839 9.688v-.522a1.54 1.54 0 0 0-.117-.641.861.861 0 0 0-.322-.387.862.862 0 0 0-.469-.129.868.868 0 0 0-.471.13.868.868 0 0 0-.32.386 1.54 1.54 0 0 0-.117.641v.522c0 .256.04.47.117.641a.868.868 0 0 0 .32.387.883.883 0 0 0 .471.126.877.877 0 0 0 .469-.126.861.861 0 0 0 .322-.386 1.55 1.55 0 0 0 .117-.642Zm.803-.516v.513c0 .375-.068.7-.205.973a1.47 1.47 0 0 1-.589.627c-.254.144-.56.216-.917.216a1.86 1.86 0 0 1-.92-.216 1.463 1.463 0 0 1-.589-.627 2.151 2.151 0 0 1-.205-.973v-.513c0-.379.069-.704.205-.975.137-.274.333-.483.59-.627.257-.147.564-.22.92-.22.357 0 .662.073.916.22.256.146.452.356.59.63.136.271.204.595.204.972ZM1 15.925v-3.999h1.459c.406 0 .741.078 1.005.235.264.156.46.382.589.68.13.296.196.655.196 1.074 0 .422-.065.784-.196 1.084-.131.301-.33.53-.595.689-.264.158-.597.237-.999.237H1Zm1.354-3.354H1.79v2.707h.563c.185 0 .346-.028.483-.082a.8.8 0 0 0 .334-.252c.088-.114.153-.254.196-.422a2.3 2.3 0 0 0 .068-.592c0-.3-.04-.552-.118-.753a.89.89 0 0 0-.354-.454c-.158-.102-.361-.152-.61-.152Zm6.756 1.116c0-.248.034-.46.103-.633a.868.868 0 0 1 .301-.398.814.814 0 0 1 .475-.138c.15 0 .283.032.398.097a.7.7 0 0 1 .273.26.85.85 0 0 1 .12.381h.765v-.073a1.33 1.33 0 0 0-.466-.964 1.44 1.44 0 0 0-.49-.272 1.836 1.836 0 0 0-.606-.097c-.355 0-.66.074-.911.223-.25.148-.44.359-.571.633-.131.273-.197.6-.197.978v.498c0 .379.065.704.194.976.13.271.321.48.571.627.25.144.555.216.914.216.293 0 .555-.054.785-.164.23-.11.414-.26.551-.454a1.27 1.27 0 0 0 .226-.674v-.076h-.765a.8.8 0 0 1-.117.364.699.699 0 0 1-.273.248.874.874 0 0 1-.401.088.845.845 0 0 1-.478-.131.834.834 0 0 1-.298-.393 1.7 1.7 0 0 1-.103-.627v-.495Zm5.092-1.76h.894l-1.275 2.006 1.254 1.992h-.908l-.85-1.415h-.035l-.852 1.415h-.862l1.24-2.015-1.228-1.984h.932l.832 1.439h.035l.823-1.439Z"></path></svg>`), FiletypeDocx[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeDocx($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeDocx);
  var svg = root1016();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-docx", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeDocx = hmr(FiletypeDocx, () => FiletypeDocx[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeDocx[HMR].source;
    set(FiletypeDocx[HMR].source, module.default[HMR].original);
  });
}
var FiletypeDocx_default = FiletypeDocx;
mark_module_end(FiletypeDocx);

// node_modules/svelte-bootstrap-icons/lib/FiletypeExe.svelte
mark_module_start();
FiletypeExe[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeExe.svelte";
var root1017 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM2.575 15.202H.785v-1.073H2.47v-.606H.785v-1.025h1.79v-.648H0v3.999h2.575v-.647ZM6.31 11.85h-.893l-.823 1.439h-.036l-.832-1.439h-.931l1.227 1.983-1.239 2.016h.861l.853-1.415h.035l.85 1.415h.908l-1.254-1.992L6.31 11.85Zm1.025 3.352h1.79v.647H6.548V11.85h2.576v.648h-1.79v1.025h1.684v.606H7.334v1.073Z"></path></svg>`), FiletypeExe[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeExe($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeExe);
  var svg = root1017();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-exe", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeExe = hmr(FiletypeExe, () => FiletypeExe[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeExe[HMR].source;
    set(FiletypeExe[HMR].source, module.default[HMR].original);
  });
}
var FiletypeExe_default = FiletypeExe;
mark_module_end(FiletypeExe);

// node_modules/svelte-bootstrap-icons/lib/FiletypeGif.svelte
mark_module_start();
FiletypeGif[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeGif.svelte";
var root1018 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2H9v-1h3a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.278 13.124a1.403 1.403 0 0 0-.14-.492 1.317 1.317 0 0 0-.314-.407 1.447 1.447 0 0 0-.48-.275 1.88 1.88 0 0 0-.636-.1c-.361 0-.67.076-.926.229a1.48 1.48 0 0 0-.583.632 2.136 2.136 0 0 0-.199.95v.506c0 .272.035.52.105.745.07.224.177.417.32.58.142.162.32.288.533.377.215.088.466.132.753.132.268 0 .5-.037.697-.111a1.29 1.29 0 0 0 .788-.77c.065-.174.097-.358.097-.551v-.797H1.717v.589h.823v.255c0 .132-.03.254-.09.363a.67.67 0 0 1-.273.264.967.967 0 0 1-.457.096.87.87 0 0 1-.519-.146.881.881 0 0 1-.305-.413 1.785 1.785 0 0 1-.096-.615v-.499c0-.365.078-.648.234-.85.158-.2.38-.301.665-.301a.96.96 0 0 1 .3.044c.09.03.17.071.236.126a.689.689 0 0 1 .17.19.797.797 0 0 1 .097.25h.776Zm1.353 2.801v-3.999H3.84v4h.79Zm1.493-1.59v1.59h-.791v-3.999H7.88v.653H6.124v1.117h1.605v.638H6.124Z"></path></svg>`), FiletypeGif[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeGif($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeGif);
  var svg = root1018();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-gif", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeGif = hmr(FiletypeGif, () => FiletypeGif[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeGif[HMR].source;
    set(FiletypeGif[HMR].source, module.default[HMR].original);
  });
}
var FiletypeGif_default = FiletypeGif;
mark_module_end(FiletypeGif);

// node_modules/svelte-bootstrap-icons/lib/FiletypeHeic.svelte
mark_module_start();
FiletypeHeic[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeHeic.svelte";
var root1019 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-4.637 8.554a1.732 1.732 0 0 0-.103.633v.495c0 .246.034.455.103.627a.834.834 0 0 0 .299.393.846.846 0 0 0 .477.131.868.868 0 0 0 .401-.088.698.698 0 0 0 .273-.248.8.8 0 0 0 .117-.364h.765v.076a1.268 1.268 0 0 1-.226.674c-.137.194-.32.345-.55.454a1.81 1.81 0 0 1-.786.164c-.36 0-.664-.072-.914-.216a1.424 1.424 0 0 1-.571-.627c-.129-.272-.194-.597-.194-.976v-.498c0-.379.066-.705.197-.978.13-.274.321-.485.571-.633.252-.149.556-.223.911-.223.219 0 .421.032.607.097.187.062.35.153.489.272a1.324 1.324 0 0 1 .466.964v.073h-.765a.85.85 0 0 0-.12-.38.7.7 0 0 0-.273-.261.802.802 0 0 0-.398-.097.814.814 0 0 0-.475.138.868.868 0 0 0-.301.398Zm-6.1-1.128v4h-.79V14.21H.79v1.714H0v-3.999h.791v1.626h1.682v-1.626h.79Zm1.488 3.352h1.79v.647H3.966v-3.999H6.54v.648H4.75v1.025h1.684v.607H4.751v1.072Zm3.163.647v-3.999h-.791v4h.79Z"></path></svg>`), FiletypeHeic[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeHeic($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeHeic);
  var svg = root1019();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-heic", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeHeic = hmr(FiletypeHeic, () => FiletypeHeic[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeHeic[HMR].source;
    set(FiletypeHeic[HMR].source, module.default[HMR].original);
  });
}
var FiletypeHeic_default = FiletypeHeic;
mark_module_end(FiletypeHeic);

// node_modules/svelte-bootstrap-icons/lib/FiletypeHtml.svelte
mark_module_start();
FiletypeHtml[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeHtml.svelte";
var root1020 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-9.736 7.35v3.999h-.791v-1.714H1.79v1.714H1V11.85h.791v1.626h1.682V11.85h.79Zm2.251.662v3.337h-.794v-3.337H4.588v-.662h3.064v.662H6.515Zm2.176 3.337v-2.66h.038l.952 2.159h.516l.946-2.16h.038v2.661h.715V11.85h-.8l-1.14 2.596H9.93L8.79 11.85h-.805v3.999h.706Zm4.71-.674h1.696v.674H12.61V11.85h.79v3.325Z"></path></svg>`), FiletypeHtml[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeHtml($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeHtml);
  var svg = root1020();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-html", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeHtml = hmr(FiletypeHtml, () => FiletypeHtml[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeHtml[HMR].source;
    set(FiletypeHtml[HMR].source, module.default[HMR].original);
  });
}
var FiletypeHtml_default = FiletypeHtml;
mark_module_end(FiletypeHtml);

// node_modules/svelte-bootstrap-icons/lib/FiletypeJava.svelte
mark_module_start();
FiletypeJava[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeJava.svelte";
var root1021 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.521 15.175a1.321 1.321 0 0 1-.082-.466h.765a.577.577 0 0 0 .073.27.499.499 0 0 0 .454.246c.19 0 .33-.055.422-.164.092-.11.138-.265.138-.466V11.85h.79v2.725c0 .44-.118.774-.357 1.005-.236.23-.564.345-.984.345a1.59 1.59 0 0 1-.568-.094 1.144 1.144 0 0 1-.408-.266 1.139 1.139 0 0 1-.243-.39Zm3.972-.354-.314 1.028h-.8l1.342-3.999h.926l1.336 3.999h-.84l-.314-1.028H5.493Zm1.178-.59-.49-1.616h-.035l-.49 1.617h1.015Zm2.342 1.618h.952l1.327-3.999h-.878l-.888 3.138h-.038L8.59 11.85h-.917l1.34 3.999Zm3.087-1.028-.314 1.028h-.8l1.342-3.999h.926l1.336 3.999h-.84l-.314-1.028H12.1Zm1.178-.59-.49-1.616h-.035l-.49 1.617h1.015Z"></path></svg>`), FiletypeJava[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeJava($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeJava);
  var svg = root1021();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-java", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeJava = hmr(FiletypeJava, () => FiletypeJava[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeJava[HMR].source;
    set(FiletypeJava[HMR].source, module.default[HMR].original);
  });
}
var FiletypeJava_default = FiletypeJava;
mark_module_end(FiletypeJava);

// node_modules/svelte-bootstrap-icons/lib/FiletypeJpg.svelte
mark_module_start();
FiletypeJpg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeJpg.svelte";
var root1022 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-4.34 8.132c.076.153.123.317.14.492h-.776a.797.797 0 0 0-.097-.249.689.689 0 0 0-.17-.19.707.707 0 0 0-.237-.126.96.96 0 0 0-.299-.044c-.285 0-.507.1-.665.302-.156.201-.234.484-.234.85v.498c0 .234.032.439.097.615a.881.881 0 0 0 .304.413.87.87 0 0 0 .519.146.967.967 0 0 0 .457-.096.67.67 0 0 0 .272-.264c.06-.11.091-.23.091-.363v-.255H8.24v-.59h1.576v.798c0 .193-.032.377-.097.55a1.29 1.29 0 0 1-.293.458 1.37 1.37 0 0 1-.495.313c-.197.074-.43.111-.697.111a1.98 1.98 0 0 1-.753-.132 1.447 1.447 0 0 1-.533-.377 1.58 1.58 0 0 1-.32-.58 2.482 2.482 0 0 1-.105-.745v-.506c0-.362.066-.678.2-.95.134-.271.328-.482.582-.633.256-.152.565-.228.926-.228.238 0 .45.033.636.1.187.066.347.158.48.275.133.117.238.253.314.407ZM0 14.786c0 .164.027.319.082.465.055.147.136.277.243.39.11.113.245.202.407.267.164.062.354.093.569.093.42 0 .748-.115.984-.345.238-.23.358-.566.358-1.005v-2.725h-.791v2.745c0 .202-.046.357-.138.466-.092.11-.233.164-.422.164a.499.499 0 0 1-.454-.246.577.577 0 0 1-.073-.27H0Zm4.92-2.86H3.322v4h.791v-1.343h.803c.287 0 .531-.057.732-.172.203-.118.358-.276.463-.475.108-.201.161-.427.161-.677 0-.25-.052-.475-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.546 1.333a.795.795 0 0 1-.085.381.574.574 0 0 1-.238.24.794.794 0 0 1-.375.082H4.11v-1.406h.66c.218 0 .389.06.512.182.123.12.185.295.185.521Z"></path></svg>`), FiletypeJpg[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeJpg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeJpg);
  var svg = root1022();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-jpg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeJpg = hmr(FiletypeJpg, () => FiletypeJpg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeJpg[HMR].source;
    set(FiletypeJpg[HMR].source, module.default[HMR].original);
  });
}
var FiletypeJpg_default = FiletypeJpg;
mark_module_end(FiletypeJpg);

// node_modules/svelte-bootstrap-icons/lib/FiletypeJs.svelte
mark_module_start();
FiletypeJs[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeJs.svelte";
var root1023 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2H8v-1h4a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.186 15.29a1.176 1.176 0 0 1-.111-.449h.765a.578.578 0 0 0 .255.384c.07.049.153.087.249.114.095.028.202.041.319.041.164 0 .302-.023.413-.07a.559.559 0 0 0 .255-.193.507.507 0 0 0 .085-.29.387.387 0 0 0-.153-.326c-.101-.08-.255-.144-.462-.193l-.619-.143a1.72 1.72 0 0 1-.539-.214 1.001 1.001 0 0 1-.351-.367 1.068 1.068 0 0 1-.123-.524c0-.244.063-.457.19-.639.127-.181.303-.322.528-.422.224-.1.483-.149.776-.149.305 0 .564.05.78.152.216.102.383.239.5.41.12.17.186.359.2.566h-.75a.56.56 0 0 0-.12-.258.624.624 0 0 0-.247-.181.923.923 0 0 0-.369-.068c-.217 0-.388.05-.513.152a.472.472 0 0 0-.184.384c0 .121.048.22.143.3a.97.97 0 0 0 .405.175l.62.143c.218.05.406.12.566.211.16.09.285.21.375.358.09.148.135.335.135.56 0 .247-.063.466-.188.656a1.216 1.216 0 0 1-.539.439c-.234.105-.52.158-.858.158-.254 0-.476-.03-.665-.09a1.404 1.404 0 0 1-.478-.252 1.13 1.13 0 0 1-.29-.375Zm-3.104-.033A1.32 1.32 0 0 1 0 14.791h.765a.576.576 0 0 0 .073.27.499.499 0 0 0 .454.246c.19 0 .33-.055.422-.164.092-.11.138-.265.138-.466v-2.745h.79v2.725c0 .44-.119.774-.357 1.005-.236.23-.564.345-.984.345a1.59 1.59 0 0 1-.569-.094 1.145 1.145 0 0 1-.407-.266 1.14 1.14 0 0 1-.243-.39Z"></path></svg>`), FiletypeJs[FILENAME], [[1, 0, [[1, 172]]]]);
function FiletypeJs($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeJs);
  var svg = root1023();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-js", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeJs = hmr(FiletypeJs, () => FiletypeJs[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeJs[HMR].source;
    set(FiletypeJs[HMR].source, module.default[HMR].original);
  });
}
var FiletypeJs_default = FiletypeJs;
mark_module_end(FiletypeJs);

// node_modules/svelte-bootstrap-icons/lib/FiletypeJson.svelte
mark_module_start();
FiletypeJson[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeJson.svelte";
var root1024 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM4.151 15.29a1.176 1.176 0 0 1-.111-.449h.764a.578.578 0 0 0 .255.384c.07.049.154.087.25.114.095.028.201.041.319.041.164 0 .301-.023.413-.07a.559.559 0 0 0 .255-.193.507.507 0 0 0 .084-.29.387.387 0 0 0-.152-.326c-.101-.08-.256-.144-.463-.193l-.618-.143a1.72 1.72 0 0 1-.539-.214 1.001 1.001 0 0 1-.352-.367 1.068 1.068 0 0 1-.123-.524c0-.244.064-.457.19-.639.128-.181.304-.322.528-.422.225-.1.484-.149.777-.149.304 0 .564.05.779.152.217.102.384.239.5.41.12.17.186.359.2.566h-.75a.56.56 0 0 0-.12-.258.624.624 0 0 0-.246-.181.923.923 0 0 0-.37-.068c-.216 0-.387.05-.512.152a.472.472 0 0 0-.185.384c0 .121.048.22.144.3a.97.97 0 0 0 .404.175l.621.143c.217.05.406.12.566.211a1 1 0 0 1 .375.358c.09.148.135.335.135.56 0 .247-.063.466-.188.656a1.216 1.216 0 0 1-.539.439c-.234.105-.52.158-.858.158-.254 0-.476-.03-.665-.09a1.404 1.404 0 0 1-.478-.252 1.13 1.13 0 0 1-.29-.375Zm-3.104-.033a1.32 1.32 0 0 1-.082-.466h.764a.576.576 0 0 0 .074.27.499.499 0 0 0 .454.246c.19 0 .33-.055.422-.164.091-.11.137-.265.137-.466v-2.745h.791v2.725c0 .44-.119.774-.357 1.005-.237.23-.565.345-.985.345a1.59 1.59 0 0 1-.568-.094 1.145 1.145 0 0 1-.407-.266 1.14 1.14 0 0 1-.243-.39Zm9.091-1.585v.522c0 .256-.039.47-.117.641a.862.862 0 0 1-.322.387.877.877 0 0 1-.47.126.883.883 0 0 1-.47-.126.87.87 0 0 1-.32-.387 1.55 1.55 0 0 1-.117-.641v-.522c0-.258.039-.471.117-.641a.87.87 0 0 1 .32-.387.868.868 0 0 1 .47-.129c.177 0 .333.043.47.129a.862.862 0 0 1 .322.387c.078.17.117.383.117.641Zm.803.519v-.513c0-.377-.069-.701-.205-.973a1.46 1.46 0 0 0-.59-.63c-.253-.146-.559-.22-.916-.22-.356 0-.662.074-.92.22a1.441 1.441 0 0 0-.589.628c-.137.271-.205.596-.205.975v.513c0 .375.068.699.205.973.137.271.333.48.589.626.258.145.564.217.92.217.357 0 .663-.072.917-.217.256-.146.452-.355.589-.626.136-.274.205-.598.205-.973Zm1.29-.935v2.675h-.746v-3.999h.662l1.752 2.66h.032v-2.66h.75v4h-.656l-1.761-2.676h-.032Z"></path></svg>`), FiletypeJson[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeJson($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeJson);
  var svg = root1024();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-json", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeJson = hmr(FiletypeJson, () => FiletypeJson[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeJson[HMR].source;
    set(FiletypeJson[HMR].source, module.default[HMR].original);
  });
}
var FiletypeJson_default = FiletypeJson;
mark_module_end(FiletypeJson);

// node_modules/svelte-bootstrap-icons/lib/FiletypeJsx.svelte
mark_module_start();
FiletypeJsx[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeJsx.svelte";
var root1025 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.075 14.841a1.13 1.13 0 0 0 .401.823c.13.108.288.192.478.252.19.061.411.091.665.091.338 0 .624-.053.858-.158.237-.105.416-.252.54-.44a1.17 1.17 0 0 0 .187-.656c0-.224-.045-.41-.135-.56a1.001 1.001 0 0 0-.375-.357 2.027 2.027 0 0 0-.565-.21l-.621-.144a.97.97 0 0 1-.405-.176.37.37 0 0 1-.143-.299c0-.156.061-.284.184-.384.125-.101.296-.152.513-.152.143 0 .266.023.37.068a.624.624 0 0 1 .245.181.56.56 0 0 1 .12.258h.75a1.092 1.092 0 0 0-.199-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.293 0-.552.05-.776.15-.225.099-.4.24-.528.421-.127.182-.19.395-.19.639 0 .201.04.376.123.524.082.149.199.27.351.367.153.095.332.167.54.213l.618.144c.207.049.36.113.462.193a.387.387 0 0 1 .153.326.512.512 0 0 1-.085.29.559.559 0 0 1-.255.193c-.111.047-.249.07-.413.07-.117 0-.224-.013-.32-.04a.837.837 0 0 1-.248-.115.578.578 0 0 1-.255-.384h-.765ZM0 14.791c0 .165.027.32.082.466.055.147.136.277.243.39.11.113.245.202.407.267.164.062.354.093.569.093.42 0 .748-.115.984-.346.238-.23.358-.565.358-1.004v-2.725h-.791v2.745c0 .201-.046.357-.138.466-.092.11-.233.164-.422.164a.499.499 0 0 1-.454-.246.576.576 0 0 1-.073-.27H0Zm8.907-2.859H9.8l-1.274 2.007L9.78 15.93h-.908l-.85-1.415h-.035l-.853 1.415h-.861l1.24-2.016-1.228-1.983h.931l.832 1.438h.036l.823-1.438Z"></path></svg>`), FiletypeJsx[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeJsx($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeJsx);
  var svg = root1025();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-jsx", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeJsx = hmr(FiletypeJsx, () => FiletypeJsx[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeJsx[HMR].source;
    set(FiletypeJsx[HMR].source, module.default[HMR].original);
  });
}
var FiletypeJsx_default = FiletypeJsx;
mark_module_end(FiletypeJsx);

// node_modules/svelte-bootstrap-icons/lib/FiletypeKey.svelte
mark_module_start();
FiletypeKey[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeKey.svelte";
var root1026 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.21 11.85h-.87L.83 13.64H.79v-1.79H0v3.999h.791v-1.283l.41-.466 1.12 1.749h.951l-1.488-2.276 1.427-1.723Zm2.903 3.352h-1.79v-1.073h1.685v-.606H4.323v-1.025h1.79v-.648H3.538v3.999h2.575v-.647Zm2.243-.888v1.535h-.794v-1.52L6.223 11.85H7.1l.853 1.696h.032l.855-1.696h.856l-1.339 2.464Z"></path></svg>`), FiletypeKey[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeKey($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeKey);
  var svg = root1026();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-key", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeKey = hmr(FiletypeKey, () => FiletypeKey[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeKey[HMR].source;
    set(FiletypeKey[HMR].source, module.default[HMR].original);
  });
}
var FiletypeKey_default = FiletypeKey;
mark_module_end(FiletypeKey);

// node_modules/svelte-bootstrap-icons/lib/FiletypeM4p.svelte
mark_module_start();
FiletypeM4p[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeM4p.svelte";
var root1027 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM.706 15.849v-2.66h.038l.952 2.16h.516l.946-2.16h.038v2.66h.715V11.85h-.8l-1.14 2.596h-.026L.805 11.85H0v3.999h.706Zm5.237-3.999c-.262.434-.525.867-.79 1.3-.265.434-.514.87-.748 1.31v.648h1.937v.741h.74v-.741h.49v-.639h-.49V11.85H5.944Zm-.82 2.62v-.021c.18-.34.37-.68.571-1.017.203-.338.405-.666.607-.984h.04v2.021H5.124Zm2.893-2.62h1.6c.289 0 .533.06.732.179.201.117.355.276.46.477.106.201.158.427.158.677 0 .25-.053.476-.16.677-.106.199-.26.357-.464.474a1.452 1.452 0 0 1-.732.173h-.803v1.342h-.79V11.85Zm2.06 1.714a.795.795 0 0 0 .085-.381c0-.226-.062-.4-.185-.521-.123-.122-.294-.182-.513-.182h-.659v1.406h.66a.794.794 0 0 0 .374-.082.574.574 0 0 0 .238-.24Z"></path></svg>`), FiletypeM4p[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeM4p($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeM4p);
  var svg = root1027();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-m4p", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeM4p = hmr(FiletypeM4p, () => FiletypeM4p[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeM4p[HMR].source;
    set(FiletypeM4p[HMR].source, module.default[HMR].original);
  });
}
var FiletypeM4p_default = FiletypeM4p;
mark_module_end(FiletypeM4p);

// node_modules/svelte-bootstrap-icons/lib/FiletypeMd.svelte
mark_module_start();
FiletypeMd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeMd.svelte";
var root1028 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2H9v-1h3a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM.706 13.189v2.66H0V11.85h.806l1.14 2.596h.026l1.14-2.596h.8v3.999h-.716v-2.66h-.038l-.946 2.159h-.516l-.952-2.16H.706Zm3.919 2.66V11.85h1.459c.406 0 .741.078 1.005.234.263.157.46.383.589.68.13.297.196.655.196 1.075 0 .422-.066.784-.196 1.084-.131.301-.33.53-.595.689-.264.158-.597.237-1 .237H4.626Zm1.353-3.354h-.562v2.707h.562c.186 0 .347-.028.484-.082a.8.8 0 0 0 .334-.252 1.14 1.14 0 0 0 .196-.422c.045-.168.067-.365.067-.592a2.1 2.1 0 0 0-.117-.753.89.89 0 0 0-.354-.454c-.159-.102-.362-.152-.61-.152Z"></path></svg>`), FiletypeMd[FILENAME], [[1, 0, [[1, 172]]]]);
function FiletypeMd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeMd);
  var svg = root1028();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-md", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeMd = hmr(FiletypeMd, () => FiletypeMd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeMd[HMR].source;
    set(FiletypeMd[HMR].source, module.default[HMR].original);
  });
}
var FiletypeMd_default = FiletypeMd;
mark_module_end(FiletypeMd);

// node_modules/svelte-bootstrap-icons/lib/FiletypeMdx.svelte
mark_module_start();
FiletypeMdx[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeMdx.svelte";
var root1029 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM.706 15.849v-2.66h.038l.952 2.159h.516l.946-2.16h.038v2.661h.715V11.85h-.8l-1.14 2.596h-.026L.805 11.85H0v3.999h.706Zm3.559-3.999v3.999h1.459c.402 0 .735-.08.999-.237a1.45 1.45 0 0 0 .595-.689c.13-.3.196-.662.196-1.084 0-.42-.066-.778-.196-1.075a1.426 1.426 0 0 0-.59-.68c-.263-.156-.598-.234-1.004-.234h-1.46Zm.79.645h.563c.248 0 .451.05.61.152a.89.89 0 0 1 .354.454c.078.201.117.452.117.753 0 .227-.022.424-.067.592a1.14 1.14 0 0 1-.196.422.8.8 0 0 1-.334.252 1.298 1.298 0 0 1-.484.082h-.562v-2.707Zm4.787-.645h.894L9.46 13.857l1.254 1.992h-.908l-.85-1.415h-.035l-.852 1.415h-.862l1.24-2.016L7.22 11.85h.932l.832 1.439h.035l.823-1.439Z"></path></svg>`), FiletypeMdx[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeMdx($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeMdx);
  var svg = root1029();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-mdx", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeMdx = hmr(FiletypeMdx, () => FiletypeMdx[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeMdx[HMR].source;
    set(FiletypeMdx[HMR].source, module.default[HMR].original);
  });
}
var FiletypeMdx_default = FiletypeMdx;
mark_module_end(FiletypeMdx);

// node_modules/svelte-bootstrap-icons/lib/FiletypeMov.svelte
mark_module_start();
FiletypeMov[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeMov.svelte";
var root1030 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-6.914 9.166v.522c0 .256-.04.47-.117.641a.861.861 0 0 1-.323.387.877.877 0 0 1-.468.126.883.883 0 0 1-.472-.126.869.869 0 0 1-.32-.386 1.55 1.55 0 0 1-.117-.642v-.522c0-.257.04-.471.118-.641a.869.869 0 0 1 .319-.387.868.868 0 0 1 .472-.129c.175 0 .332.043.468.13a.861.861 0 0 1 .323.386c.078.17.117.384.117.641Zm.802.519v-.513c0-.377-.068-.7-.205-.972a1.46 1.46 0 0 0-.588-.63c-.254-.147-.56-.22-.917-.22-.356 0-.663.073-.92.22a1.441 1.441 0 0 0-.59.627c-.136.271-.204.596-.204.975v.513c0 .375.068.7.205.973.136.271.333.48.589.627.257.144.564.216.92.216.357 0 .663-.072.917-.216.255-.147.452-.356.588-.627.137-.274.205-.598.205-.973Zm-7.182 1.74v-2.66h.038l.952 2.16h.516l.946-2.16h.038v2.66h.715v-3.999h-.8l-1.14 2.596h-.026l-1.14-2.596H0v4h.706Zm9.54 0h-.952l-1.34-3.999h.918l.896 3.138h.038l.888-3.138h.879l-1.327 4Z"></path></svg>`), FiletypeMov[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeMov($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeMov);
  var svg = root1030();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-mov", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeMov = hmr(FiletypeMov, () => FiletypeMov[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeMov[HMR].source;
    set(FiletypeMov[HMR].source, module.default[HMR].original);
  });
}
var FiletypeMov_default = FiletypeMov;
mark_module_end(FiletypeMov);

// node_modules/svelte-bootstrap-icons/lib/FiletypeMp3.svelte
mark_module_start();
FiletypeMp3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeMp3.svelte";
var root1031 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-4.911 9.67h-.443v-.609h.422a.688.688 0 0 0 .322-.073.558.558 0 0 0 .22-.2.505.505 0 0 0 .076-.284.49.49 0 0 0-.176-.392.652.652 0 0 0-.442-.15.74.74 0 0 0-.252.041.625.625 0 0 0-.193.112.496.496 0 0 0-.179.349H7.71c.006-.157.04-.302.102-.437.063-.135.153-.252.27-.352.117-.101.26-.18.428-.237.17-.057.364-.086.583-.088.279-.002.52.042.723.132.203.09.36.214.472.372a.91.91 0 0 1 .173.539.833.833 0 0 1-.12.478.96.96 0 0 1-.619.439v.041a1.008 1.008 0 0 1 .718.434.909.909 0 0 1 .144.521c.002.19-.037.359-.117.507a1.104 1.104 0 0 1-.329.378c-.14.101-.302.18-.486.234-.182.053-.376.08-.583.08-.3 0-.558-.051-.77-.153a1.206 1.206 0 0 1-.487-.41 1.094 1.094 0 0 1-.178-.563h.726a.457.457 0 0 0 .106.258.664.664 0 0 0 .249.179.98.98 0 0 0 .357.067.903.903 0 0 0 .384-.076.598.598 0 0 0 .252-.217.56.56 0 0 0 .088-.319.556.556 0 0 0-.334-.522.81.81 0 0 0-.372-.079ZM.706 15.925v-2.66h.038l.952 2.16h.516l.946-2.16h.038v2.66h.715v-3.999h-.8l-1.14 2.596h-.026l-1.14-2.596H0v4h.706Zm5.458-3.999h-1.6v4h.792v-1.342h.803c.287 0 .53-.058.732-.173.203-.118.357-.276.463-.475a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.475-.158-.677a1.175 1.175 0 0 0-.46-.477 1.4 1.4 0 0 0-.733-.179Zm.545 1.333a.795.795 0 0 1-.085.381.574.574 0 0 1-.237.24.793.793 0 0 1-.375.082h-.66v-1.406h.66c.219 0 .39.06.513.182.123.12.184.295.184.521Z"></path></svg>`), FiletypeMp3[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeMp3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeMp3);
  var svg = root1031();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-mp3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeMp3 = hmr(FiletypeMp3, () => FiletypeMp3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeMp3[HMR].source;
    set(FiletypeMp3[HMR].source, module.default[HMR].original);
  });
}
var FiletypeMp3_default = FiletypeMp3;
mark_module_end(FiletypeMp3);

// node_modules/svelte-bootstrap-icons/lib/FiletypeMp4.svelte
mark_module_start();
FiletypeMp4[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeMp4.svelte";
var root1032 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM.706 15.849v-2.66h.038l.952 2.16h.516l.946-2.16h.038v2.66h.715V11.85h-.8l-1.14 2.596h-.026L.805 11.85H0v3.999h.706Zm5.278-3.999h-1.6v3.999h.792v-1.342h.803c.287 0 .53-.057.732-.173.203-.117.357-.275.463-.474a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.476-.158-.677a1.176 1.176 0 0 0-.46-.477 1.4 1.4 0 0 0-.733-.179Zm.545 1.333a.795.795 0 0 1-.085.38.574.574 0 0 1-.237.241.794.794 0 0 1-.375.082h-.66V12.48h.66c.219 0 .39.06.513.181.123.122.184.296.184.522Zm1.505-.032c.266-.434.53-.867.791-1.301h1.14v2.62h.49v.638h-.49v.741h-.741v-.741H7.287v-.648c.235-.44.484-.876.747-1.31Zm-.029 1.298v.02h1.219v-2.021h-.041c-.201.318-.404.646-.607.984-.2.338-.391.677-.571 1.017Z"></path></svg>`), FiletypeMp4[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeMp4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeMp4);
  var svg = root1032();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-mp4", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeMp4 = hmr(FiletypeMp4, () => FiletypeMp4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeMp4[HMR].source;
    set(FiletypeMp4[HMR].source, module.default[HMR].original);
  });
}
var FiletypeMp4_default = FiletypeMp4;
mark_module_end(FiletypeMp4);

// node_modules/svelte-bootstrap-icons/lib/FiletypeOtf.svelte
mark_module_start();
FiletypeOtf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeOtf.svelte";
var root1033 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM2.622 13.666v.522c0 .256-.039.47-.117.641a.861.861 0 0 1-.322.387.877.877 0 0 1-.47.126.883.883 0 0 1-.47-.126.868.868 0 0 1-.32-.386 1.55 1.55 0 0 1-.117-.642v-.522c0-.257.039-.471.117-.641a.868.868 0 0 1 .32-.387.868.868 0 0 1 .47-.129c.177 0 .333.043.47.13a.861.861 0 0 1 .322.386c.078.17.117.384.117.641Zm.803.519v-.513c0-.377-.069-.7-.205-.972a1.46 1.46 0 0 0-.59-.63c-.253-.147-.559-.22-.916-.22-.356 0-.662.073-.92.22a1.441 1.441 0 0 0-.589.627c-.137.271-.205.596-.205.975v.513c0 .375.068.7.205.973.137.271.333.48.589.627.258.144.564.216.92.216.357 0 .663-.072.917-.216a1.47 1.47 0 0 0 .589-.627c.136-.274.205-.598.205-.973Zm2 1.74v-3.337H6.56v-.662H3.497v.662H4.63v3.337h.794Zm2.251-1.59v1.59h-.79v-3.999h2.548v.653H7.676v1.117h1.606v.638H7.676Z"></path></svg>`), FiletypeOtf[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeOtf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeOtf);
  var svg = root1033();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-otf", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeOtf = hmr(FiletypeOtf, () => FiletypeOtf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeOtf[HMR].source;
    set(FiletypeOtf[HMR].source, module.default[HMR].original);
  });
}
var FiletypeOtf_default = FiletypeOtf;
mark_module_end(FiletypeOtf);

// node_modules/svelte-bootstrap-icons/lib/FiletypePdf.svelte
mark_module_start();
FiletypePdf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypePdf.svelte";
var root1034 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.6 11.85H0v3.999h.791v-1.342h.803c.287 0 .531-.057.732-.173.203-.117.358-.275.463-.474a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.476-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.545 1.333a.795.795 0 0 1-.085.38.574.574 0 0 1-.238.241.794.794 0 0 1-.375.082H.788V12.48h.66c.218 0 .389.06.512.181.123.122.185.296.185.522Zm1.217-1.333v3.999h1.46c.401 0 .734-.08.998-.237a1.45 1.45 0 0 0 .595-.689c.13-.3.196-.662.196-1.084 0-.42-.065-.778-.196-1.075a1.426 1.426 0 0 0-.589-.68c-.264-.156-.599-.234-1.005-.234H3.362Zm.791.645h.563c.248 0 .45.05.609.152a.89.89 0 0 1 .354.454c.079.201.118.452.118.753a2.3 2.3 0 0 1-.068.592 1.14 1.14 0 0 1-.196.422.8.8 0 0 1-.334.252 1.298 1.298 0 0 1-.483.082h-.563v-2.707Zm3.743 1.763v1.591h-.79V11.85h2.548v.653H7.896v1.117h1.606v.638H7.896Z"></path></svg>`), FiletypePdf[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypePdf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypePdf);
  var svg = root1034();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-pdf", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypePdf = hmr(FiletypePdf, () => FiletypePdf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypePdf[HMR].source;
    set(FiletypePdf[HMR].source, module.default[HMR].original);
  });
}
var FiletypePdf_default = FiletypePdf;
mark_module_end(FiletypePdf);

// node_modules/svelte-bootstrap-icons/lib/FiletypePhp.svelte
mark_module_start();
FiletypePhp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypePhp.svelte";
var root1035 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.6 11.85H0v3.999h.791v-1.342h.803c.287 0 .531-.057.732-.173.203-.117.358-.275.463-.474a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.476-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.545 1.333a.795.795 0 0 1-.085.38.574.574 0 0 1-.238.241.794.794 0 0 1-.375.082H.788V12.48h.66c.218 0 .389.06.512.181.123.122.185.295.185.522Zm4.48 2.666V11.85h-.79v1.626H4.153V11.85h-.79v3.999h.79v-1.714h1.682v1.714h.79Zm.703-3.999h1.6c.288 0 .533.06.732.179.2.117.354.276.46.477.105.201.158.427.158.677 0 .25-.054.476-.161.677-.106.199-.26.357-.463.474a1.452 1.452 0 0 1-.733.173H8.12v1.342h-.791V11.85Zm2.06 1.714a.795.795 0 0 0 .084-.381c0-.227-.061-.4-.184-.521-.123-.122-.294-.182-.513-.182h-.66v1.406h.66a.794.794 0 0 0 .375-.082.574.574 0 0 0 .237-.24Z"></path></svg>`), FiletypePhp[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypePhp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypePhp);
  var svg = root1035();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-php", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypePhp = hmr(FiletypePhp, () => FiletypePhp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypePhp[HMR].source;
    set(FiletypePhp[HMR].source, module.default[HMR].original);
  });
}
var FiletypePhp_default = FiletypePhp;
mark_module_end(FiletypePhp);

// node_modules/svelte-bootstrap-icons/lib/FiletypePng.svelte
mark_module_start();
FiletypePng[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypePng.svelte";
var root1036 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-3.76 8.132c.076.153.123.317.14.492h-.776a.797.797 0 0 0-.097-.249.689.689 0 0 0-.17-.19.707.707 0 0 0-.237-.126.96.96 0 0 0-.299-.044c-.285 0-.506.1-.665.302-.156.201-.234.484-.234.85v.498c0 .234.032.439.097.615a.881.881 0 0 0 .304.413.87.87 0 0 0 .519.146.967.967 0 0 0 .457-.096.67.67 0 0 0 .272-.264c.06-.11.091-.23.091-.363v-.255H8.82v-.59h1.576v.798c0 .193-.032.377-.097.55a1.29 1.29 0 0 1-.293.458 1.37 1.37 0 0 1-.495.313c-.197.074-.43.111-.697.111a1.98 1.98 0 0 1-.753-.132 1.447 1.447 0 0 1-.533-.377 1.58 1.58 0 0 1-.32-.58 2.482 2.482 0 0 1-.105-.745v-.506c0-.362.067-.678.2-.95.134-.271.328-.482.582-.633.256-.152.565-.228.926-.228.238 0 .45.033.636.1.187.066.348.158.48.275.133.117.238.253.314.407Zm-8.64-.706H0v4h.791v-1.343h.803c.287 0 .531-.057.732-.172.203-.118.358-.276.463-.475a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.475-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.545 1.333a.795.795 0 0 1-.085.381.574.574 0 0 1-.238.24.794.794 0 0 1-.375.082H.788v-1.406h.66c.218 0 .389.06.512.182.123.12.185.295.185.521Zm1.964 2.666V13.25h.032l1.761 2.675h.656v-3.999h-.75v2.66h-.032l-1.752-2.66h-.662v4h.747Z"></path></svg>`), FiletypePng[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypePng($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypePng);
  var svg = root1036();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-png", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypePng = hmr(FiletypePng, () => FiletypePng[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypePng[HMR].source;
    set(FiletypePng[HMR].source, module.default[HMR].original);
  });
}
var FiletypePng_default = FiletypePng;
mark_module_end(FiletypePng);

// node_modules/svelte-bootstrap-icons/lib/FiletypePpt.svelte
mark_module_start();
FiletypePpt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypePpt.svelte";
var root1037 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.6 11.85H0v3.999h.791v-1.342h.803c.287 0 .531-.057.732-.173.203-.117.358-.275.463-.474a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.476-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.545 1.333a.795.795 0 0 1-.085.38.574.574 0 0 1-.238.241.794.794 0 0 1-.375.082H.788V12.48h.66c.218 0 .389.06.512.181.123.122.185.296.185.522Zm2.817-1.333h-1.6v3.999h.791v-1.342h.803c.287 0 .531-.057.732-.173.203-.117.358-.275.463-.474.108-.201.161-.427.161-.677 0-.25-.052-.476-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.545 1.333a.795.795 0 0 1-.085.38.574.574 0 0 1-.238.241.793.793 0 0 1-.375.082H4.15V12.48h.66c.218 0 .389.06.512.181.123.122.185.296.185.522Zm2.767-.67v3.336H7.48v-3.337H6.346v-.662h3.065v.662H8.274Z"></path></svg>`), FiletypePpt[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypePpt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypePpt);
  var svg = root1037();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-ppt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypePpt = hmr(FiletypePpt, () => FiletypePpt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypePpt[HMR].source;
    set(FiletypePpt[HMR].source, module.default[HMR].original);
  });
}
var FiletypePpt_default = FiletypePpt;
mark_module_end(FiletypePpt);

// node_modules/svelte-bootstrap-icons/lib/FiletypePptx.svelte
mark_module_start();
FiletypePptx[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypePptx.svelte";
var root1038 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.5 11.85h1.6c.289 0 .533.06.732.179.201.117.355.276.46.477.105.201.158.427.158.677 0 .25-.054.476-.16.677-.106.199-.26.357-.464.474a1.452 1.452 0 0 1-.732.173H2.29v1.342H1.5V11.85Zm2.06 1.714a.795.795 0 0 0 .085-.381c0-.226-.062-.4-.185-.521-.123-.122-.294-.182-.513-.182h-.659v1.406h.66a.794.794 0 0 0 .374-.082.574.574 0 0 0 .238-.24Zm1.302-1.714h1.6c.289 0 .533.06.732.179.201.117.355.276.46.477.106.201.158.427.158.677 0 .25-.053.476-.16.677-.106.199-.26.357-.464.474a1.452 1.452 0 0 1-.732.173h-.803v1.342h-.79V11.85Zm2.06 1.714a.795.795 0 0 0 .085-.381c0-.226-.062-.4-.185-.521-.123-.122-.294-.182-.513-.182H5.65v1.406h.66a.793.793 0 0 0 .374-.082.574.574 0 0 0 .238-.24Zm2.852 2.285v-3.337h1.137v-.662H7.846v.662H8.98v3.337h.794Zm3.796-3.999h.893l-1.274 2.007 1.254 1.992h-.908l-.85-1.415h-.035l-.853 1.415h-.861l1.24-2.016-1.228-1.983h.931l.832 1.439h.035l.824-1.439Z"></path></svg>`), FiletypePptx[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypePptx($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypePptx);
  var svg = root1038();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-pptx", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypePptx = hmr(FiletypePptx, () => FiletypePptx[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypePptx[HMR].source;
    set(FiletypePptx[HMR].source, module.default[HMR].original);
  });
}
var FiletypePptx_default = FiletypePptx;
mark_module_end(FiletypePptx);

// node_modules/svelte-bootstrap-icons/lib/FiletypePsd.svelte
mark_module_start();
FiletypePsd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypePsd.svelte";
var root1039 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-.5v-1h.5a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.116 14.841a1.13 1.13 0 0 0 .401.823c.13.108.288.192.478.252.19.061.411.091.665.091.338 0 .624-.053.858-.158.237-.105.416-.252.54-.44a1.17 1.17 0 0 0 .187-.656c0-.224-.045-.41-.135-.56a1 1 0 0 0-.375-.357 2.027 2.027 0 0 0-.565-.21l-.621-.144a.97.97 0 0 1-.405-.176.37.37 0 0 1-.143-.299c0-.156.061-.284.184-.384.125-.101.296-.152.513-.152.143 0 .266.023.37.068a.625.625 0 0 1 .245.181.56.56 0 0 1 .12.258h.75a1.092 1.092 0 0 0-.199-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.293 0-.552.05-.776.15-.225.099-.4.24-.528.421-.127.182-.19.395-.19.639 0 .201.04.376.123.524.082.149.199.27.351.367.153.095.332.167.54.213l.618.144c.207.049.36.113.462.193a.387.387 0 0 1 .153.326.505.505 0 0 1-.085.29.559.559 0 0 1-.255.193c-.111.047-.249.07-.413.07-.117 0-.224-.013-.32-.04a.837.837 0 0 1-.248-.115.578.578 0 0 1-.255-.384h-.765ZM1.6 11.932H0v4h.791v-1.343h.803c.287 0 .531-.057.732-.173.203-.117.358-.275.463-.474a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.476-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.545 1.333a.795.795 0 0 1-.085.38.574.574 0 0 1-.238.241.793.793 0 0 1-.375.082H.788v-1.406h.66c.218 0 .389.06.512.182.123.12.185.295.185.521Zm4.609 2.666v-3.999h1.459c.406 0 .74.078 1.004.234.264.157.46.383.59.68.13.297.195.655.195 1.075 0 .422-.065.784-.196 1.084-.13.301-.329.53-.594.689-.264.158-.597.237-1 .237H6.755Zm1.353-3.354h-.562v2.707h.562c.186 0 .347-.028.483-.082a.8.8 0 0 0 .334-.252 1.14 1.14 0 0 0 .197-.422c.045-.168.067-.366.067-.592a2.1 2.1 0 0 0-.117-.753.89.89 0 0 0-.355-.454c-.158-.102-.36-.152-.609-.152Z"></path></svg>`), FiletypePsd[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypePsd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypePsd);
  var svg = root1039();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-psd", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypePsd = hmr(FiletypePsd, () => FiletypePsd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypePsd[HMR].source;
    set(FiletypePsd[HMR].source, module.default[HMR].original);
  });
}
var FiletypePsd_default = FiletypePsd;
mark_module_end(FiletypePsd);

// node_modules/svelte-bootstrap-icons/lib/FiletypePy.svelte
mark_module_start();
FiletypePy[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypePy.svelte";
var root1040 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2H7v-1h5a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM0 11.85h1.6c.289 0 .533.06.732.179.201.117.355.276.46.477.105.201.158.427.158.677 0 .25-.054.476-.16.677-.106.199-.26.357-.464.474a1.452 1.452 0 0 1-.732.173H.79v1.342H0V11.85Zm2.06 1.714a.795.795 0 0 0 .085-.381c0-.227-.062-.4-.185-.521-.123-.122-.294-.182-.513-.182H.788v1.406h.66a.794.794 0 0 0 .374-.082.574.574 0 0 0 .238-.24Zm2.963.75v1.535H4.23v-1.52L2.89 11.85h.876l.853 1.696h.032l.856-1.696h.855l-1.339 2.464Z"></path></svg>`), FiletypePy[FILENAME], [[1, 0, [[1, 172]]]]);
function FiletypePy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypePy);
  var svg = root1040();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-py", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypePy = hmr(FiletypePy, () => FiletypePy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypePy[HMR].source;
    set(FiletypePy[HMR].source, module.default[HMR].original);
  });
}
var FiletypePy_default = FiletypePy;
mark_module_end(FiletypePy);

// node_modules/svelte-bootstrap-icons/lib/FiletypeRaw.svelte
mark_module_start();
FiletypeRaw[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeRaw.svelte";
var root1041 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.597 11.85H0v3.999h.782v-1.491h.71l.7 1.491h1.651l.313-1.028h1.336l.314 1.028h.84L5.31 11.85h-.925l-1.329 3.96-.783-1.572A1.18 1.18 0 0 0 3 13.116c0-.256-.056-.479-.167-.668a1.098 1.098 0 0 0-.478-.44 1.669 1.669 0 0 0-.758-.158Zm-.815 1.913v-1.292h.7a.74.74 0 0 1 .507.17c.13.113.194.276.194.49 0 .21-.065.368-.194.474-.127.105-.3.158-.518.158H.782Zm4.063-1.148.489 1.617H4.32l.49-1.617h.035Zm4.006.445-.74 2.789h-.73L6.326 11.85h.855l.601 2.903h.038l.706-2.903h.683l.706 2.903h.04l.596-2.903h.858l-1.055 3.999h-.73l-.74-2.789H8.85Z"></path></svg>`), FiletypeRaw[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeRaw($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeRaw);
  var svg = root1041();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-raw", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeRaw = hmr(FiletypeRaw, () => FiletypeRaw[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeRaw[HMR].source;
    set(FiletypeRaw[HMR].source, module.default[HMR].original);
  });
}
var FiletypeRaw_default = FiletypeRaw;
mark_module_end(FiletypeRaw);

// node_modules/svelte-bootstrap-icons/lib/FiletypeRb.svelte
mark_module_start();
FiletypeRb[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeRb.svelte";
var root1042 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2H8v-1h4a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM0 11.85h1.597c.297 0 .55.053.758.158.21.104.369.25.478.44.111.19.167.412.167.668a1.18 1.18 0 0 1-.727 1.122l.803 1.611h-.885l-.7-1.491H.782v1.491H0V11.85Zm.782.621v1.292h.689c.218 0 .391-.053.518-.158.13-.106.194-.264.194-.475 0-.213-.065-.376-.194-.489a.74.74 0 0 0-.507-.17h-.7Zm4.426 3.378H3.544V11.85h1.67c.357 0 .643.087.858.26.215.175.322.416.322.724a.94.94 0 0 1-.09.422.79.79 0 0 1-.244.293 1.002 1.002 0 0 1-.351.161v.035c.162.016.31.063.445.141a.846.846 0 0 1 .322.325.986.986 0 0 1 .123.51c0 .238-.06.441-.178.61-.12.167-.284.296-.492.386a1.85 1.85 0 0 1-.721.132Zm-.179-3.404h-.7v1.07h.521c.178 0 .323-.022.434-.065a.497.497 0 0 0 .249-.185.52.52 0 0 0 .082-.296.486.486 0 0 0-.155-.384c-.102-.093-.245-.14-.43-.14Zm.05 1.62h-.75v1.19h.589c.31 0 .534-.05.67-.147a.503.503 0 0 0 .206-.434.614.614 0 0 0-.082-.325.51.51 0 0 0-.24-.21.946.946 0 0 0-.393-.074Z"></path></svg>`), FiletypeRb[FILENAME], [[1, 0, [[1, 172]]]]);
function FiletypeRb($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeRb);
  var svg = root1042();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-rb", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeRb = hmr(FiletypeRb, () => FiletypeRb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeRb[HMR].source;
    set(FiletypeRb[HMR].source, module.default[HMR].original);
  });
}
var FiletypeRb_default = FiletypeRb;
mark_module_end(FiletypeRb);

// node_modules/svelte-bootstrap-icons/lib/FiletypeSass.svelte
mark_module_start();
FiletypeSass[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeSass.svelte";
var root1043 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.41 15.29a1.176 1.176 0 0 1-.111-.449h.764a.578.578 0 0 0 .255.384.81.81 0 0 0 .25.114c.095.028.201.041.319.041.164 0 .301-.023.413-.07a.559.559 0 0 0 .255-.193.506.506 0 0 0 .084-.29.387.387 0 0 0-.152-.326c-.101-.08-.256-.144-.463-.193l-.618-.143a1.72 1.72 0 0 1-.539-.214 1.001 1.001 0 0 1-.352-.367 1.068 1.068 0 0 1-.123-.524c0-.244.064-.457.19-.639.128-.181.304-.322.528-.422.225-.1.484-.149.777-.149.304 0 .564.05.779.152.217.102.384.239.5.41.12.17.186.359.2.566h-.75a.56.56 0 0 0-.12-.258.624.624 0 0 0-.246-.181.923.923 0 0 0-.37-.068c-.216 0-.387.05-.512.152a.472.472 0 0 0-.185.384c0 .121.048.22.144.3a.97.97 0 0 0 .404.175l.621.143c.217.05.406.12.566.211.16.09.285.21.375.358.09.148.135.335.135.56 0 .247-.063.466-.188.656a1.216 1.216 0 0 1-.539.439c-.234.105-.52.158-.858.158-.254 0-.476-.03-.665-.09a1.404 1.404 0 0 1-.478-.252 1.13 1.13 0 0 1-.29-.375Zm4.188-.387-.313 1.028h-.8l1.342-3.999h.926l1.335 4h-.84l-.314-1.03H5.598Zm1.178-.59-.49-1.616h-.034l-.49 1.617h1.014Zm1.352.528a1.13 1.13 0 0 0 .401.823c.13.108.289.192.478.252.19.061.411.091.665.091.338 0 .624-.053.859-.158.236-.105.416-.252.539-.44.125-.189.187-.408.187-.656 0-.224-.045-.41-.134-.56a1.002 1.002 0 0 0-.375-.357 2.028 2.028 0 0 0-.566-.21l-.621-.144a.97.97 0 0 1-.404-.176.37.37 0 0 1-.144-.299c0-.156.062-.284.185-.384.125-.101.296-.152.512-.152.143 0 .266.023.37.068a.623.623 0 0 1 .246.181.56.56 0 0 1 .12.258h.75a1.093 1.093 0 0 0-.2-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.293 0-.552.05-.776.15-.225.099-.4.24-.527.421-.127.182-.19.395-.19.639 0 .201.04.376.122.524.082.149.2.27.352.367.152.095.332.167.539.213l.618.144c.207.049.361.113.463.193a.387.387 0 0 1 .152.326.505.505 0 0 1-.085.29.558.558 0 0 1-.255.193c-.111.047-.249.07-.413.07-.117 0-.223-.013-.32-.04a.838.838 0 0 1-.248-.115.578.578 0 0 1-.255-.384h-.765Zm3.503.449a1.178 1.178 0 0 1-.111-.449h.764a.58.58 0 0 0 .255.384c.07.049.154.087.25.114.095.028.201.041.319.041.164 0 .301-.023.413-.07a.558.558 0 0 0 .255-.193.507.507 0 0 0 .085-.29.387.387 0 0 0-.153-.326c-.101-.08-.256-.144-.463-.193l-.618-.143a1.72 1.72 0 0 1-.539-.214 1.002 1.002 0 0 1-.351-.367 1.068 1.068 0 0 1-.123-.524c0-.244.063-.457.19-.639.127-.181.303-.322.527-.422.225-.1.484-.149.777-.149.304 0 .564.05.779.152.217.102.384.239.5.41.12.17.186.359.2.566h-.75a.56.56 0 0 0-.12-.258.623.623 0 0 0-.246-.181.923.923 0 0 0-.37-.068c-.216 0-.387.05-.512.152a.472.472 0 0 0-.184.384c0 .121.047.22.143.3a.97.97 0 0 0 .404.175l.621.143c.217.05.406.12.566.211.16.09.285.21.375.358.09.148.135.335.135.56 0 .247-.063.466-.188.656a1.216 1.216 0 0 1-.539.439c-.234.105-.52.158-.858.158a2.19 2.19 0 0 1-.665-.09 1.404 1.404 0 0 1-.478-.252 1.131 1.131 0 0 1-.29-.375Z"></path></svg>`), FiletypeSass[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeSass($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeSass);
  var svg = root1043();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-sass", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeSass = hmr(FiletypeSass, () => FiletypeSass[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeSass[HMR].source;
    set(FiletypeSass[HMR].source, module.default[HMR].original);
  });
}
var FiletypeSass_default = FiletypeSass;
mark_module_end(FiletypeSass);

// node_modules/svelte-bootstrap-icons/lib/FiletypeScss.svelte
mark_module_start();
FiletypeScss[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeScss.svelte";
var root1044 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.356 15.29a1.176 1.176 0 0 1-.111-.449h.765a.578.578 0 0 0 .255.384c.07.049.153.087.249.114.095.028.202.041.319.041.164 0 .302-.023.413-.07a.559.559 0 0 0 .255-.193.506.506 0 0 0 .085-.29.387.387 0 0 0-.153-.326c-.101-.08-.255-.144-.462-.193l-.619-.143a1.72 1.72 0 0 1-.539-.214 1.001 1.001 0 0 1-.351-.367 1.068 1.068 0 0 1-.123-.524c0-.244.063-.457.19-.639.127-.181.303-.322.528-.422.224-.1.483-.149.776-.149.305 0 .564.05.78.152.216.102.383.239.5.41.12.17.186.359.2.566h-.75a.56.56 0 0 0-.12-.258.624.624 0 0 0-.247-.181.923.923 0 0 0-.369-.068c-.217 0-.388.05-.513.152a.472.472 0 0 0-.184.384c0 .121.048.22.143.3a.97.97 0 0 0 .405.175l.62.143c.217.05.406.12.566.211.16.09.285.21.375.358.09.148.135.335.135.56 0 .247-.063.466-.188.656a1.216 1.216 0 0 1-.539.439c-.234.105-.52.158-.858.158-.254 0-.476-.03-.665-.09a1.404 1.404 0 0 1-.478-.252 1.13 1.13 0 0 1-.29-.375Zm4.274-2.23a1.732 1.732 0 0 0-.103.633v.495c0 .246.034.455.103.627a.833.833 0 0 0 .298.392.846.846 0 0 0 .478.132.868.868 0 0 0 .401-.088.7.7 0 0 0 .273-.249.798.798 0 0 0 .117-.363h.765v.076a1.27 1.27 0 0 1-.226.674 1.39 1.39 0 0 1-.55.454 1.81 1.81 0 0 1-.786.164c-.36 0-.664-.072-.914-.217a1.424 1.424 0 0 1-.571-.626c-.13-.272-.194-.597-.194-.976v-.498c0-.38.066-.705.197-.979a1.44 1.44 0 0 1 .57-.633c.253-.148.557-.222.912-.222.219 0 .421.032.607.097.187.062.35.153.489.272a1.324 1.324 0 0 1 .466.964v.073h-.765a.85.85 0 0 0-.12-.38.7.7 0 0 0-.273-.261.803.803 0 0 0-.398-.097.814.814 0 0 0-.475.138.868.868 0 0 0-.301.398Zm2.609 1.781a1.13 1.13 0 0 0 .401.823c.129.108.288.192.478.252.19.061.41.091.665.091.338 0 .624-.053.858-.158.236-.105.416-.252.54-.44a1.17 1.17 0 0 0 .187-.656c0-.224-.045-.41-.135-.56a1.002 1.002 0 0 0-.375-.357 2.028 2.028 0 0 0-.566-.21l-.62-.144a.97.97 0 0 1-.405-.176.37.37 0 0 1-.143-.299c0-.156.061-.284.184-.384.125-.101.296-.152.513-.152.142 0 .265.023.369.068a.623.623 0 0 1 .246.181.56.56 0 0 1 .12.258h.75a1.091 1.091 0 0 0-.2-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.292 0-.551.05-.776.15-.224.099-.4.24-.527.421-.127.182-.19.395-.19.639 0 .201.04.376.123.524.082.149.199.27.351.367.152.095.332.167.54.213l.617.144c.207.049.362.113.463.193a.387.387 0 0 1 .153.326.512.512 0 0 1-.085.29.558.558 0 0 1-.255.193 1.07 1.07 0 0 1-.413.07c-.118 0-.224-.013-.32-.04a.837.837 0 0 1-.249-.115.578.578 0 0 1-.255-.384H8.24Zm3.502.449a1.176 1.176 0 0 1-.11-.449h.764a.578.578 0 0 0 .255.384c.07.049.153.087.249.114.095.028.202.041.319.041.164 0 .302-.023.413-.07a.558.558 0 0 0 .255-.193.506.506 0 0 0 .085-.29.387.387 0 0 0-.152-.326c-.102-.08-.256-.144-.463-.193l-.618-.143a1.72 1.72 0 0 1-.54-.214 1.002 1.002 0 0 1-.351-.367 1.068 1.068 0 0 1-.123-.524c0-.244.063-.457.19-.639.127-.181.303-.322.528-.422.224-.1.483-.149.776-.149.305 0 .565.05.78.152.216.102.383.239.5.41.12.17.186.359.2.566h-.75a.56.56 0 0 0-.12-.258.623.623 0 0 0-.247-.181.923.923 0 0 0-.369-.068c-.217 0-.387.05-.512.152a.472.472 0 0 0-.185.384c0 .121.048.22.143.3a.97.97 0 0 0 .405.175l.62.143c.218.05.406.12.566.211.16.09.285.21.375.358.09.148.135.335.135.56 0 .247-.062.466-.187.656a1.217 1.217 0 0 1-.54.439c-.234.105-.52.158-.858.158-.254 0-.476-.03-.665-.09a1.404 1.404 0 0 1-.478-.252 1.131 1.131 0 0 1-.29-.375Z"></path></svg>`), FiletypeScss[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeScss($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeScss);
  var svg = root1044();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-scss", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeScss = hmr(FiletypeScss, () => FiletypeScss[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeScss[HMR].source;
    set(FiletypeScss[HMR].source, module.default[HMR].original);
  });
}
var FiletypeScss_default = FiletypeScss;
mark_module_end(FiletypeScss);

// node_modules/svelte-bootstrap-icons/lib/FiletypeSh.svelte
mark_module_start();
FiletypeSh[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeSh.svelte";
var root1045 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2H8v-1h4a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM.111 15.29A1.176 1.176 0 0 1 0 14.84h.765a.578.578 0 0 0 .255.384c.07.049.153.087.249.114.095.028.202.041.319.041.164 0 .302-.023.413-.07a.559.559 0 0 0 .255-.193.507.507 0 0 0 .085-.29.387.387 0 0 0-.153-.326c-.101-.08-.255-.144-.462-.193l-.619-.143a1.72 1.72 0 0 1-.539-.214 1.001 1.001 0 0 1-.351-.367 1.068 1.068 0 0 1-.123-.524c0-.244.063-.457.19-.639.127-.181.303-.322.528-.422.224-.1.483-.149.776-.149.305 0 .564.05.78.152.216.102.383.239.5.41.12.17.186.359.2.566h-.75a.56.56 0 0 0-.12-.258.624.624 0 0 0-.247-.181.923.923 0 0 0-.369-.068c-.217 0-.388.05-.513.152a.472.472 0 0 0-.184.384c0 .121.048.22.143.3a.97.97 0 0 0 .405.175l.62.143c.218.05.406.12.566.211.16.09.285.21.375.358.09.148.135.335.135.56 0 .247-.063.466-.188.656a1.216 1.216 0 0 1-.539.439c-.234.105-.52.158-.858.158-.254 0-.476-.03-.665-.09a1.404 1.404 0 0 1-.478-.252 1.13 1.13 0 0 1-.29-.375Zm6.67-3.358v4h-.79v-1.715H4.308v1.714h-.792v-3.999h.792v1.626H5.99v-1.626h.791Z"></path></svg>`), FiletypeSh[FILENAME], [[1, 0, [[1, 172]]]]);
function FiletypeSh($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeSh);
  var svg = root1045();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-sh", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeSh = hmr(FiletypeSh, () => FiletypeSh[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeSh[HMR].source;
    set(FiletypeSh[HMR].source, module.default[HMR].original);
  });
}
var FiletypeSh_default = FiletypeSh;
mark_module_end(FiletypeSh);

// node_modules/svelte-bootstrap-icons/lib/FiletypeSql.svelte
mark_module_start();
FiletypeSql[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeSql.svelte";
var root1046 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM0 14.841a1.129 1.129 0 0 0 .401.823c.13.108.288.192.478.252s.411.091.665.091c.338 0 .624-.053.858-.158.237-.106.416-.252.54-.44a1.17 1.17 0 0 0 .187-.656c0-.224-.045-.41-.135-.56a1 1 0 0 0-.375-.357 2.027 2.027 0 0 0-.565-.21l-.621-.144a.97.97 0 0 1-.405-.176.369.369 0 0 1-.143-.299c0-.156.061-.284.184-.384.125-.101.296-.152.513-.152.143 0 .266.022.37.068a.624.624 0 0 1 .245.181.56.56 0 0 1 .12.258h.75a1.092 1.092 0 0 0-.199-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.293 0-.552.05-.776.15-.225.099-.4.24-.528.421-.127.182-.19.395-.19.639 0 .201.04.376.123.524.082.149.199.27.351.367.153.095.332.167.54.213l.618.144c.207.049.36.113.462.193a.387.387 0 0 1 .153.325c0 .11-.029.207-.085.29A.558.558 0 0 1 2 15.31c-.111.047-.249.07-.413.07-.117 0-.224-.013-.32-.04a.835.835 0 0 1-.248-.115.579.579 0 0 1-.255-.384H0Zm6.878 1.489-.507-.739c.176-.162.31-.362.401-.6.092-.239.138-.507.138-.806v-.501c0-.371-.07-.693-.208-.967a1.495 1.495 0 0 0-.589-.636c-.256-.15-.561-.225-.917-.225-.351 0-.656.075-.914.225-.256.149-.453.36-.592.636a2.138 2.138 0 0 0-.205.967v.5c0 .37.069.691.205.965.139.273.336.485.592.636a1.8 1.8 0 0 0 .914.222 1.8 1.8 0 0 0 .6-.1l.294.422h.788ZM4.262 14.2v-.522c0-.246.038-.456.114-.63a.91.91 0 0 1 .325-.398.885.885 0 0 1 .495-.138c.192 0 .357.046.495.138a.88.88 0 0 1 .325.398c.077.174.115.384.115.63v.522c0 .164-.018.312-.053.445-.035.13-.087.244-.155.34l-.106-.14-.105-.147h-.733l.451.65a.638.638 0 0 1-.251.047.872.872 0 0 1-.487-.147.916.916 0 0 1-.32-.404 1.67 1.67 0 0 1-.11-.644Zm3.986 1.057h1.696v.674H7.457v-3.999h.79v3.325Z"></path></svg>`), FiletypeSql[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeSql($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeSql);
  var svg = root1046();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-sql", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeSql = hmr(FiletypeSql, () => FiletypeSql[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeSql[HMR].source;
    set(FiletypeSql[HMR].source, module.default[HMR].original);
  });
}
var FiletypeSql_default = FiletypeSql;
mark_module_end(FiletypeSql);

// node_modules/svelte-bootstrap-icons/lib/FiletypeSvg.svelte
mark_module_start();
FiletypeSvg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeSvg.svelte";
var root1047 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM0 14.841a1.13 1.13 0 0 0 .401.823c.13.108.288.192.478.252.19.061.411.091.665.091.338 0 .624-.053.858-.158.237-.105.416-.252.54-.44a1.17 1.17 0 0 0 .187-.656c0-.224-.045-.41-.135-.56a1 1 0 0 0-.375-.357 2.027 2.027 0 0 0-.565-.21l-.621-.144a.97.97 0 0 1-.405-.176.37.37 0 0 1-.143-.299c0-.156.061-.284.184-.384.125-.101.296-.152.513-.152.143 0 .266.023.37.068a.625.625 0 0 1 .245.181.56.56 0 0 1 .12.258h.75a1.092 1.092 0 0 0-.199-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.293 0-.552.05-.776.15-.225.099-.4.24-.528.421-.127.182-.19.395-.19.639 0 .201.04.376.123.524.082.149.199.27.351.367.153.095.332.167.54.213l.618.144c.207.049.36.113.462.193a.387.387 0 0 1 .153.326.512.512 0 0 1-.085.29.559.559 0 0 1-.256.193c-.111.047-.249.07-.413.07-.117 0-.224-.013-.32-.04a.837.837 0 0 1-.248-.115.578.578 0 0 1-.255-.384H0Zm4.575 1.09h.952l1.327-3.999h-.879l-.887 3.138H5.05l-.897-3.138h-.917l1.339 4Zm5.483-3.293c.076.152.123.316.14.492h-.776a.797.797 0 0 0-.096-.249.689.689 0 0 0-.17-.19.707.707 0 0 0-.237-.126.963.963 0 0 0-.3-.044c-.284 0-.506.1-.664.302-.157.2-.235.484-.235.85v.497c0 .235.033.44.097.616a.881.881 0 0 0 .305.413.87.87 0 0 0 .518.146.965.965 0 0 0 .457-.097.67.67 0 0 0 .273-.263c.06-.11.09-.23.09-.364v-.254h-.823v-.59h1.576v.798c0 .193-.032.377-.096.55a1.29 1.29 0 0 1-.293.457 1.37 1.37 0 0 1-.495.314c-.198.074-.43.111-.698.111a1.98 1.98 0 0 1-.752-.132 1.447 1.447 0 0 1-.534-.377 1.58 1.58 0 0 1-.319-.58 2.482 2.482 0 0 1-.105-.745v-.507c0-.36.066-.677.199-.949.134-.271.329-.482.583-.633.256-.152.564-.228.926-.228.238 0 .45.033.635.1.188.066.348.158.48.275.134.117.238.253.314.407Z"></path></svg>`), FiletypeSvg[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeSvg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeSvg);
  var svg = root1047();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-svg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeSvg = hmr(FiletypeSvg, () => FiletypeSvg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeSvg[HMR].source;
    set(FiletypeSvg[HMR].source, module.default[HMR].original);
  });
}
var FiletypeSvg_default = FiletypeSvg;
mark_module_end(FiletypeSvg);

// node_modules/svelte-bootstrap-icons/lib/FiletypeTiff.svelte
mark_module_start();
FiletypeTiff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeTiff.svelte";
var root1048 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.928 12.512v3.337h-.794v-3.337H0v-.662h3.064v.662H1.928Zm2.131-.662v3.999h-.79V11.85h.79Zm1.373 3.999v-1.59h1.606v-.64H5.432v-1.116H7.19v-.653H4.641v3.999h.791Zm2.868-1.59v1.59h-.791V11.85h2.548v.653H8.3v1.117h1.605v.638H8.3Z"></path></svg>`), FiletypeTiff[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeTiff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeTiff);
  var svg = root1048();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-tiff", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeTiff = hmr(FiletypeTiff, () => FiletypeTiff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeTiff[HMR].source;
    set(FiletypeTiff[HMR].source, module.default[HMR].original);
  });
}
var FiletypeTiff_default = FiletypeTiff;
mark_module_end(FiletypeTiff);

// node_modules/svelte-bootstrap-icons/lib/FiletypeTsx.svelte
mark_module_start();
FiletypeTsx[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeTsx.svelte";
var root1049 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.172 14.841a1.13 1.13 0 0 0 .401.823c.129.108.288.192.478.252.189.061.41.091.665.091.338 0 .624-.053.858-.158.236-.105.416-.252.54-.44a1.17 1.17 0 0 0 .187-.656c0-.224-.045-.41-.135-.56a1.001 1.001 0 0 0-.375-.357 2.027 2.027 0 0 0-.566-.21l-.62-.144a.97.97 0 0 1-.405-.176.37.37 0 0 1-.144-.299c0-.156.062-.284.185-.384.125-.101.296-.152.513-.152.142 0 .265.023.369.068a.624.624 0 0 1 .246.181.56.56 0 0 1 .12.258h.75a1.092 1.092 0 0 0-.2-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.292 0-.551.05-.776.15-.224.099-.4.24-.527.421-.127.182-.19.395-.19.639 0 .201.04.376.122.524.083.149.2.27.352.367.152.095.332.167.54.213l.617.144c.207.049.362.113.463.193a.387.387 0 0 1 .152.326.511.511 0 0 1-.084.29.559.559 0 0 1-.255.193 1.07 1.07 0 0 1-.413.07c-.118 0-.224-.013-.32-.04a.837.837 0 0 1-.249-.115.578.578 0 0 1-.255-.384h-.764Zm-1.244 1.09v-3.337h1.136v-.662H0v.662h1.134v3.337h.794Zm7.076-3.999h.893l-1.274 2.007 1.254 1.992h-.909l-.85-1.415h-.034l-.853 1.415H6.37l1.239-2.016-1.228-1.983h.932l.832 1.438h.035l.824-1.438Z"></path></svg>`), FiletypeTsx[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeTsx($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeTsx);
  var svg = root1049();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-tsx", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeTsx = hmr(FiletypeTsx, () => FiletypeTsx[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeTsx[HMR].source;
    set(FiletypeTsx[HMR].source, module.default[HMR].original);
  });
}
var FiletypeTsx_default = FiletypeTsx;
mark_module_end(FiletypeTsx);

// node_modules/svelte-bootstrap-icons/lib/FiletypeTtf.svelte
mark_module_start();
FiletypeTtf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeTtf.svelte";
var root1050 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-2v-1h2a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.928 15.849v-3.337h2.269v3.337h.794v-3.337h1.137v-.662H0v.662h1.134v3.337h.794Zm5.315-1.59v1.59h-.791V11.85H9v.653H7.243v1.117h1.605v.638H7.243Z"></path></svg>`), FiletypeTtf[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeTtf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeTtf);
  var svg = root1050();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-ttf", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeTtf = hmr(FiletypeTtf, () => FiletypeTtf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeTtf[HMR].source;
    set(FiletypeTtf[HMR].source, module.default[HMR].original);
  });
}
var FiletypeTtf_default = FiletypeTtf;
mark_module_end(FiletypeTtf);

// node_modules/svelte-bootstrap-icons/lib/FiletypeTxt.svelte
mark_module_start();
FiletypeTxt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeTxt.svelte";
var root1051 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-2v-1h2a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.928 15.849v-3.337h1.136v-.662H0v.662h1.134v3.337h.794Zm4.689-3.999h-.894L4.9 13.289h-.035l-.832-1.439h-.932l1.228 1.983-1.24 2.016h.862l.853-1.415h.035l.85 1.415h.907l-1.253-1.992 1.274-2.007Zm1.93.662v3.337h-.794v-3.337H6.619v-.662h3.064v.662H8.546Z"></path></svg>`), FiletypeTxt[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeTxt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeTxt);
  var svg = root1051();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-txt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeTxt = hmr(FiletypeTxt, () => FiletypeTxt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeTxt[HMR].source;
    set(FiletypeTxt[HMR].source, module.default[HMR].original);
  });
}
var FiletypeTxt_default = FiletypeTxt;
mark_module_end(FiletypeTxt);

// node_modules/svelte-bootstrap-icons/lib/FiletypeWav.svelte
mark_module_start();
FiletypeWav[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeWav.svelte";
var root1052 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.784 15.849l.741-2.789h.033l.74 2.789h.73l1.055-3.999h-.858l-.595 2.903h-.041l-.706-2.903H2.2l-.706 2.903h-.038l-.6-2.903H0l1.055 3.999h.73Zm3.715 0 .314-1.028h1.336l.313 1.028h.841L6.967 11.85h-.926L4.7 15.849h.8Zm1.002-3.234.49 1.617H5.977l.49-1.617H6.5Zm3.604 3.234h-.952L7.814 11.85h.917l.897 3.138h.038l.888-3.138h.879l-1.328 3.999Z"></path></svg>`), FiletypeWav[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeWav($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeWav);
  var svg = root1052();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-wav", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeWav = hmr(FiletypeWav, () => FiletypeWav[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeWav[HMR].source;
    set(FiletypeWav[HMR].source, module.default[HMR].original);
  });
}
var FiletypeWav_default = FiletypeWav;
mark_module_end(FiletypeWav);

// node_modules/svelte-bootstrap-icons/lib/FiletypeWoff.svelte
mark_module_start();
FiletypeWoff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeWoff.svelte";
var root1053 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-5.464 9.688v-.522c0-.257-.04-.471-.117-.641a.861.861 0 0 0-.323-.387.862.862 0 0 0-.468-.129.868.868 0 0 0-.472.13.868.868 0 0 0-.32.386c-.077.17-.116.384-.116.641v.522c0 .256.039.47.117.641a.866.866 0 0 0 .319.387.883.883 0 0 0 .472.126.877.877 0 0 0 .468-.126.861.861 0 0 0 .323-.386 1.55 1.55 0 0 0 .117-.642Zm.803-.516v.513c0 .375-.069.7-.205.973-.137.271-.333.48-.59.627-.253.144-.559.216-.916.216-.356 0-.662-.072-.92-.216a1.463 1.463 0 0 1-.59-.627 2.151 2.151 0 0 1-.204-.973v-.513c0-.379.068-.704.205-.975.137-.274.333-.483.589-.627.258-.147.564-.22.92-.22.357 0 .663.073.917.22.256.146.452.356.589.63.136.271.205.595.205.972Zm-6.064-.536-.74 2.79h-.73l-1.055-4h.855l.601 2.903h.038l.706-2.903h.683l.706 2.903h.04l.596-2.903h.858l-1.055 4h-.73l-.74-2.79h-.033Zm7.398 2.79v-1.592h1.606v-.638h-1.606v-1.117h1.758v-.653H9.882v4h.791Zm2.988-1.592v1.591h-.791v-3.999h2.548v.653h-1.757v1.117h1.605v.638h-1.605Z"></path></svg>`), FiletypeWoff[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeWoff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeWoff);
  var svg = root1053();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-woff", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeWoff = hmr(FiletypeWoff, () => FiletypeWoff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeWoff[HMR].source;
    set(FiletypeWoff[HMR].source, module.default[HMR].original);
  });
}
var FiletypeWoff_default = FiletypeWoff;
mark_module_end(FiletypeWoff);

// node_modules/svelte-bootstrap-icons/lib/FiletypeXls.svelte
mark_module_start();
FiletypeXls[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeXls.svelte";
var root1054 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM6.472 15.29a1.176 1.176 0 0 1-.111-.449h.765a.578.578 0 0 0 .254.384c.07.049.154.087.25.114.095.028.202.041.319.041.164 0 .302-.023.413-.07a.559.559 0 0 0 .255-.193.507.507 0 0 0 .085-.29.387.387 0 0 0-.153-.326c-.101-.08-.255-.144-.462-.193l-.619-.143a1.72 1.72 0 0 1-.539-.214 1.001 1.001 0 0 1-.351-.367 1.068 1.068 0 0 1-.123-.524c0-.244.063-.457.19-.639.127-.181.303-.322.527-.422.225-.1.484-.149.777-.149.305 0 .564.05.78.152.216.102.383.239.5.41.12.17.186.359.2.566h-.75a.56.56 0 0 0-.12-.258.625.625 0 0 0-.247-.181.923.923 0 0 0-.369-.068c-.217 0-.388.05-.513.152a.472.472 0 0 0-.184.384c0 .121.048.22.143.3a.97.97 0 0 0 .405.175l.62.143c.217.05.406.12.566.211a1 1 0 0 1 .375.358c.09.148.135.335.135.56 0 .247-.063.466-.188.656a1.216 1.216 0 0 1-.539.439c-.234.105-.52.158-.858.158-.254 0-.476-.03-.665-.09a1.404 1.404 0 0 1-.478-.252 1.13 1.13 0 0 1-.29-.375Zm-2.945-3.358h-.893L1.81 13.37h-.036l-.832-1.438h-.93l1.227 1.983L0 15.931h.861l.853-1.415h.035l.85 1.415h.908L2.253 13.94l1.274-2.007Zm2.727 3.325H4.557v-3.325h-.79v4h2.487v-.675Z"></path></svg>`), FiletypeXls[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeXls($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeXls);
  var svg = root1054();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-xls", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeXls = hmr(FiletypeXls, () => FiletypeXls[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeXls[HMR].source;
    set(FiletypeXls[HMR].source, module.default[HMR].original);
  });
}
var FiletypeXls_default = FiletypeXls;
mark_module_end(FiletypeXls);

// node_modules/svelte-bootstrap-icons/lib/FiletypeXlsx.svelte
mark_module_start();
FiletypeXlsx[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeXlsx.svelte";
var root1055 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM7.86 14.841a1.13 1.13 0 0 0 .401.823c.13.108.29.192.479.252.19.061.411.091.665.091.338 0 .624-.053.858-.158.237-.105.416-.252.54-.44a1.17 1.17 0 0 0 .187-.656c0-.224-.045-.41-.135-.56a1.002 1.002 0 0 0-.375-.357 2.028 2.028 0 0 0-.565-.21l-.621-.144a.97.97 0 0 1-.405-.176.37.37 0 0 1-.143-.299c0-.156.061-.284.184-.384.125-.101.296-.152.513-.152.143 0 .266.023.37.068a.624.624 0 0 1 .245.181.56.56 0 0 1 .12.258h.75a1.093 1.093 0 0 0-.199-.566 1.21 1.21 0 0 0-.5-.41 1.813 1.813 0 0 0-.78-.152c-.293 0-.552.05-.777.15-.224.099-.4.24-.527.421-.127.182-.19.395-.19.639 0 .201.04.376.123.524.082.149.199.27.351.367.153.095.332.167.54.213l.618.144c.207.049.36.113.462.193a.387.387 0 0 1 .153.326.512.512 0 0 1-.085.29.558.558 0 0 1-.255.193c-.111.047-.25.07-.413.07-.117 0-.224-.013-.32-.04a.837.837 0 0 1-.249-.115.578.578 0 0 1-.255-.384h-.764Zm-3.726-2.909h.893l-1.274 2.007 1.254 1.992h-.908l-.85-1.415h-.035l-.853 1.415H1.5l1.24-2.016-1.228-1.983h.931l.832 1.438h.036l.823-1.438Zm1.923 3.325h1.697v.674H5.266v-3.999h.791v3.325Zm7.636-3.325h.893l-1.274 2.007 1.254 1.992h-.908l-.85-1.415h-.035l-.853 1.415h-.861l1.24-2.016-1.228-1.983h.931l.832 1.438h.036l.823-1.438Z"></path></svg>`), FiletypeXlsx[FILENAME], [[1, 0, [[1, 174]]]]);
function FiletypeXlsx($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeXlsx);
  var svg = root1055();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-xlsx", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeXlsx = hmr(FiletypeXlsx, () => FiletypeXlsx[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeXlsx[HMR].source;
    set(FiletypeXlsx[HMR].source, module.default[HMR].original);
  });
}
var FiletypeXlsx_default = FiletypeXlsx;
mark_module_end(FiletypeXlsx);

// node_modules/svelte-bootstrap-icons/lib/FiletypeXml.svelte
mark_module_start();
FiletypeXml[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeXml.svelte";
var root1056 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM3.527 11.85h-.893l-.823 1.439h-.036L.943 11.85H.012l1.227 1.983L0 15.85h.861l.853-1.415h.035l.85 1.415h.908l-1.254-1.992 1.274-2.007Zm.954 3.999v-2.66h.038l.952 2.159h.516l.946-2.16h.038v2.661h.715V11.85h-.8l-1.14 2.596h-.025L4.58 11.85h-.806v3.999h.706Zm4.71-.674h1.696v.674H8.4V11.85h.791v3.325Z"></path></svg>`), FiletypeXml[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeXml($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeXml);
  var svg = root1056();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-xml", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeXml = hmr(FiletypeXml, () => FiletypeXml[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeXml[HMR].source;
    set(FiletypeXml[HMR].source, module.default[HMR].original);
  });
}
var FiletypeXml_default = FiletypeXml;
mark_module_end(FiletypeXml);

// node_modules/svelte-bootstrap-icons/lib/FiletypeYml.svelte
mark_module_start();
FiletypeYml[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FiletypeYml.svelte";
var root1057 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM2.133 15.849v-1.535l1.339-2.464h-.856l-.855 1.696h-.032L.876 11.85H0l1.339 2.479v1.52h.794Zm2.287 0v-2.66h.038l.952 2.159h.516l.946-2.16h.038v2.661h.715V11.85h-.8l-1.14 2.596H5.66L4.52 11.85h-.805v3.999h.706Zm4.71-.674h1.696v.674H8.338V11.85h.791v3.325Z"></path></svg>`), FiletypeYml[FILENAME], [[1, 0, [[1, 173]]]]);
function FiletypeYml($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FiletypeYml);
  var svg = root1057();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filetype-yml", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FiletypeYml = hmr(FiletypeYml, () => FiletypeYml[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FiletypeYml[HMR].source;
    set(FiletypeYml[HMR].source, module.default[HMR].original);
  });
}
var FiletypeYml_default = FiletypeYml;
mark_module_end(FiletypeYml);

// node_modules/svelte-bootstrap-icons/lib/Film.svelte
mark_module_start();
Film[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Film.svelte";
var root1058 = add_locations(ns_template(`<svg><!><path d="M0 1a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V1zm4 0v6h8V1H4zm8 8H4v6h8V9zM1 1v2h2V1H1zm2 3H1v2h2V4zM1 7v2h2V7H1zm2 3H1v2h2v-2zm-2 3v2h2v-2H1zM15 1h-2v2h2V1zm-2 3v2h2V4h-2zm2 3h-2v2h2V7zm-2 3v2h2v-2h-2zm2 3h-2v2h2v-2z"></path></svg>`), Film[FILENAME], [[1, 0, [[1, 165]]]]);
function Film($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Film);
  var svg = root1058();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-film", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Film = hmr(Film, () => Film[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Film[HMR].source;
    set(Film[HMR].source, module.default[HMR].original);
  });
}
var Film_default = Film;
mark_module_end(Film);

// node_modules/svelte-bootstrap-icons/lib/FilterCircleFill.svelte
mark_module_start();
FilterCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilterCircleFill.svelte";
var root1059 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM3.5 5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1 0-1zM5 8.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm2 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5z"></path></svg>`), FilterCircleFill[FILENAME], [[1, 0, [[1, 179]]]]);
function FilterCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilterCircleFill);
  var svg = root1059();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filter-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilterCircleFill = hmr(FilterCircleFill, () => FilterCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilterCircleFill[HMR].source;
    set(FilterCircleFill[HMR].source, module.default[HMR].original);
  });
}
var FilterCircleFill_default = FilterCircleFill;
mark_module_end(FilterCircleFill);

// node_modules/svelte-bootstrap-icons/lib/FilterCircle.svelte
mark_module_start();
FilterCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilterCircle.svelte";
var root1060 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M7 11.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z"></path></svg>`), FilterCircle[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function FilterCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilterCircle);
  var svg = root1060();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filter-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilterCircle = hmr(FilterCircle, () => FilterCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilterCircle[HMR].source;
    set(FilterCircle[HMR].source, module.default[HMR].original);
  });
}
var FilterCircle_default = FilterCircle;
mark_module_end(FilterCircle);

// node_modules/svelte-bootstrap-icons/lib/FilterLeft.svelte
mark_module_start();
FilterLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilterLeft.svelte";
var root1061 = add_locations(ns_template(`<svg><!><path d="M2 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), FilterLeft[FILENAME], [[1, 0, [[1, 172]]]]);
function FilterLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilterLeft);
  var svg = root1061();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filter-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilterLeft = hmr(FilterLeft, () => FilterLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilterLeft[HMR].source;
    set(FilterLeft[HMR].source, module.default[HMR].original);
  });
}
var FilterLeft_default = FilterLeft;
mark_module_end(FilterLeft);

// node_modules/svelte-bootstrap-icons/lib/FilterRight.svelte
mark_module_start();
FilterRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilterRight.svelte";
var root1062 = add_locations(ns_template(`<svg><!><path d="M14 10.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 .5-.5zm0-3a.5.5 0 0 0-.5-.5h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 .5-.5zm0-3a.5.5 0 0 0-.5-.5h-11a.5.5 0 0 0 0 1h11a.5.5 0 0 0 .5-.5z"></path></svg>`), FilterRight[FILENAME], [[1, 0, [[1, 173]]]]);
function FilterRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilterRight);
  var svg = root1062();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filter-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilterRight = hmr(FilterRight, () => FilterRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilterRight[HMR].source;
    set(FilterRight[HMR].source, module.default[HMR].original);
  });
}
var FilterRight_default = FilterRight;
mark_module_end(FilterRight);

// node_modules/svelte-bootstrap-icons/lib/FilterSquareFill.svelte
mark_module_start();
FilterSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilterSquareFill.svelte";
var root1063 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm.5 5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1 0-1zM4 8.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm2 3a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5z"></path></svg>`), FilterSquareFill[FILENAME], [[1, 0, [[1, 179]]]]);
function FilterSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilterSquareFill);
  var svg = root1063();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filter-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilterSquareFill = hmr(FilterSquareFill, () => FilterSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilterSquareFill[HMR].source;
    set(FilterSquareFill[HMR].source, module.default[HMR].original);
  });
}
var FilterSquareFill_default = FilterSquareFill;
mark_module_end(FilterSquareFill);

// node_modules/svelte-bootstrap-icons/lib/FilterSquare.svelte
mark_module_start();
FilterSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FilterSquare.svelte";
var root1064 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M6 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), FilterSquare[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function FilterSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FilterSquare);
  var svg = root1064();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filter-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilterSquare = hmr(FilterSquare, () => FilterSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilterSquare[HMR].source;
    set(FilterSquare[HMR].source, module.default[HMR].original);
  });
}
var FilterSquare_default = FilterSquare;
mark_module_end(FilterSquare);

// node_modules/svelte-bootstrap-icons/lib/Filter.svelte
mark_module_start();
Filter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Filter.svelte";
var root1065 = add_locations(ns_template(`<svg><!><path d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), Filter[FILENAME], [[1, 0, [[1, 167]]]]);
function Filter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Filter);
  var svg = root1065();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-filter", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Filter = hmr(Filter, () => Filter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Filter[HMR].source;
    set(Filter[HMR].source, module.default[HMR].original);
  });
}
var Filter_default = Filter;
mark_module_end(Filter);

// node_modules/svelte-bootstrap-icons/lib/Fingerprint.svelte
mark_module_start();
Fingerprint[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Fingerprint.svelte";
var root1066 = add_locations(ns_template(`<svg><!><path d="M8.06 6.5a.5.5 0 0 1 .5.5v.776a11.5 11.5 0 0 1-.552 3.519l-1.331 4.14a.5.5 0 0 1-.952-.305l1.33-4.141a10.5 10.5 0 0 0 .504-3.213V7a.5.5 0 0 1 .5-.5Z"></path><path d="M6.06 7a2 2 0 1 1 4 0 .5.5 0 1 1-1 0 1 1 0 1 0-2 0v.332c0 .409-.022.816-.066 1.221A.5.5 0 0 1 6 8.447c.04-.37.06-.742.06-1.115V7Zm3.509 1a.5.5 0 0 1 .487.513 11.5 11.5 0 0 1-.587 3.339l-1.266 3.8a.5.5 0 0 1-.949-.317l1.267-3.8a10.5 10.5 0 0 0 .535-3.048A.5.5 0 0 1 9.569 8Zm-3.356 2.115a.5.5 0 0 1 .33.626L5.24 14.939a.5.5 0 1 1-.955-.296l1.303-4.199a.5.5 0 0 1 .625-.329Z"></path><path d="M4.759 5.833A3.501 3.501 0 0 1 11.559 7a.5.5 0 0 1-1 0 2.5 2.5 0 0 0-4.857-.833.5.5 0 1 1-.943-.334Zm.3 1.67a.5.5 0 0 1 .449.546 10.72 10.72 0 0 1-.4 2.031l-1.222 4.072a.5.5 0 1 1-.958-.287L4.15 9.793a9.72 9.72 0 0 0 .363-1.842.5.5 0 0 1 .546-.449Zm6 .647a.5.5 0 0 1 .5.5c0 1.28-.213 2.552-.632 3.762l-1.09 3.145a.5.5 0 0 1-.944-.327l1.089-3.145c.382-1.105.578-2.266.578-3.435a.5.5 0 0 1 .5-.5Z"></path><path d="M3.902 4.222a4.996 4.996 0 0 1 5.202-2.113.5.5 0 0 1-.208.979 3.996 3.996 0 0 0-4.163 1.69.5.5 0 0 1-.831-.556Zm6.72-.955a.5.5 0 0 1 .705-.052A4.99 4.99 0 0 1 13.059 7v1.5a.5.5 0 1 1-1 0V7a3.99 3.99 0 0 0-1.386-3.028.5.5 0 0 1-.051-.705ZM3.68 5.842a.5.5 0 0 1 .422.568c-.029.192-.044.39-.044.59 0 .71-.1 1.417-.298 2.1l-1.14 3.923a.5.5 0 1 1-.96-.279L2.8 8.821A6.531 6.531 0 0 0 3.058 7c0-.25.019-.496.054-.736a.5.5 0 0 1 .568-.422Zm8.882 3.66a.5.5 0 0 1 .456.54c-.084 1-.298 1.986-.64 2.934l-.744 2.068a.5.5 0 0 1-.941-.338l.745-2.07a10.51 10.51 0 0 0 .584-2.678.5.5 0 0 1 .54-.456Z"></path><path d="M4.81 1.37A6.5 6.5 0 0 1 14.56 7a.5.5 0 1 1-1 0 5.5 5.5 0 0 0-8.25-4.765.5.5 0 0 1-.5-.865Zm-.89 1.257a.5.5 0 0 1 .04.706A5.478 5.478 0 0 0 2.56 7a.5.5 0 0 1-1 0c0-1.664.626-3.184 1.655-4.333a.5.5 0 0 1 .706-.04ZM1.915 8.02a.5.5 0 0 1 .346.616l-.779 2.767a.5.5 0 1 1-.962-.27l.778-2.767a.5.5 0 0 1 .617-.346Zm12.15.481a.5.5 0 0 1 .49.51c-.03 1.499-.161 3.025-.727 4.533l-.07.187a.5.5 0 0 1-.936-.351l.07-.187c.506-1.35.634-2.74.663-4.202a.5.5 0 0 1 .51-.49Z"></path></svg>`), Fingerprint[FILENAME], [
  [
    1,
    0,
    [
      [1, 172],
      [2, 2],
      [3, 2],
      [4, 2],
      [5, 2]
    ]
  ]
]);
function Fingerprint($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Fingerprint);
  var svg = root1066();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(5);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fingerprint", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fingerprint = hmr(Fingerprint, () => Fingerprint[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fingerprint[HMR].source;
    set(Fingerprint[HMR].source, module.default[HMR].original);
  });
}
var Fingerprint_default = Fingerprint;
mark_module_end(Fingerprint);

// node_modules/svelte-bootstrap-icons/lib/Fire.svelte
mark_module_start();
Fire[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Fire.svelte";
var root1067 = add_locations(ns_template(`<svg><!><path d="M8 16c3.314 0 6-2 6-5.5 0-1.5-.5-4-2.5-6 .25 1.5-1.25 2-1.25 2C11 4 9 .5 6 0c.357 2 .5 4-2 6-1.25 1-2 2.729-2 4.5C2 14 4.686 16 8 16Zm0-1c-1.657 0-3-1-3-2.75 0-.75.25-2 1.25-3C6.125 10 7 10.5 7 10.5c-.375-1.25.5-3.25 2-3.5-.179 1-.25 2 1 3 .625.5 1 1.364 1 2.25C11 14 9.657 15 8 15Z"></path></svg>`), Fire[FILENAME], [[1, 0, [[1, 165]]]]);
function Fire($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Fire);
  var svg = root1067();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fire", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fire = hmr(Fire, () => Fire[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fire[HMR].source;
    set(Fire[HMR].source, module.default[HMR].original);
  });
}
var Fire_default = Fire;
mark_module_end(Fire);

// node_modules/svelte-bootstrap-icons/lib/FlagFill.svelte
mark_module_start();
FlagFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FlagFill.svelte";
var root1068 = add_locations(ns_template(`<svg><!><path d="M14.778.085A.5.5 0 0 1 15 .5V8a.5.5 0 0 1-.314.464L14.5 8l.186.464-.003.001-.006.003-.023.009a12.435 12.435 0 0 1-.397.15c-.264.095-.631.223-1.047.35-.816.252-1.879.523-2.71.523-.847 0-1.548-.28-2.158-.525l-.028-.01C7.68 8.71 7.14 8.5 6.5 8.5c-.7 0-1.638.23-2.437.477A19.626 19.626 0 0 0 3 9.342V15.5a.5.5 0 0 1-1 0V.5a.5.5 0 0 1 1 0v.282c.226-.079.496-.17.79-.26C4.606.272 5.67 0 6.5 0c.84 0 1.524.277 2.121.519l.043.018C9.286.788 9.828 1 10.5 1c.7 0 1.638-.23 2.437-.477a19.587 19.587 0 0 0 1.349-.476l.019-.007.004-.002h.001"></path></svg>`), FlagFill[FILENAME], [[1, 0, [[1, 170]]]]);
function FlagFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FlagFill);
  var svg = root1068();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-flag-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FlagFill = hmr(FlagFill, () => FlagFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FlagFill[HMR].source;
    set(FlagFill[HMR].source, module.default[HMR].original);
  });
}
var FlagFill_default = FlagFill;
mark_module_end(FlagFill);

// node_modules/svelte-bootstrap-icons/lib/Flag.svelte
mark_module_start();
Flag[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Flag.svelte";
var root1069 = add_locations(ns_template(`<svg><!><path d="M14.778.085A.5.5 0 0 1 15 .5V8a.5.5 0 0 1-.314.464L14.5 8l.186.464-.003.001-.006.003-.023.009a12.435 12.435 0 0 1-.397.15c-.264.095-.631.223-1.047.35-.816.252-1.879.523-2.71.523-.847 0-1.548-.28-2.158-.525l-.028-.01C7.68 8.71 7.14 8.5 6.5 8.5c-.7 0-1.638.23-2.437.477A19.626 19.626 0 0 0 3 9.342V15.5a.5.5 0 0 1-1 0V.5a.5.5 0 0 1 1 0v.282c.226-.079.496-.17.79-.26C4.606.272 5.67 0 6.5 0c.84 0 1.524.277 2.121.519l.043.018C9.286.788 9.828 1 10.5 1c.7 0 1.638-.23 2.437-.477a19.587 19.587 0 0 0 1.349-.476l.019-.007.004-.002h.001M14 1.221c-.22.078-.48.167-.766.255-.81.252-1.872.523-2.734.523-.886 0-1.592-.286-2.203-.534l-.008-.003C7.662 1.21 7.139 1 6.5 1c-.669 0-1.606.229-2.415.478A21.294 21.294 0 0 0 3 1.845v6.433c.22-.078.48-.167.766-.255C4.576 7.77 5.638 7.5 6.5 7.5c.847 0 1.548.28 2.158.525l.028.01C9.32 8.29 9.86 8.5 10.5 8.5c.668 0 1.606-.229 2.415-.478A21.317 21.317 0 0 0 14 7.655V1.222z"></path></svg>`), Flag[FILENAME], [[1, 0, [[1, 165]]]]);
function Flag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Flag);
  var svg = root1069();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-flag", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flag = hmr(Flag, () => Flag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flag[HMR].source;
    set(Flag[HMR].source, module.default[HMR].original);
  });
}
var Flag_default = Flag;
mark_module_end(Flag);

// node_modules/svelte-bootstrap-icons/lib/FloppyFill.svelte
mark_module_start();
FloppyFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FloppyFill.svelte";
var root1070 = add_locations(ns_template(`<svg><!><path d="M0 1.5A1.5 1.5 0 0 1 1.5 0H3v5.5A1.5 1.5 0 0 0 4.5 7h7A1.5 1.5 0 0 0 13 5.5V0h.086a1.5 1.5 0 0 1 1.06.44l1.415 1.414A1.5 1.5 0 0 1 16 2.914V14.5a1.5 1.5 0 0 1-1.5 1.5H14v-5.5A1.5 1.5 0 0 0 12.5 9h-9A1.5 1.5 0 0 0 2 10.5V16h-.5A1.5 1.5 0 0 1 0 14.5v-13Z"></path><path d="M3 16h10v-5.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5V16Zm9-16H4v5.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5V0ZM9 1h2v4H9V1Z"></path></svg>`), FloppyFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function FloppyFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FloppyFill);
  var svg = root1070();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-floppy-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FloppyFill = hmr(FloppyFill, () => FloppyFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FloppyFill[HMR].source;
    set(FloppyFill[HMR].source, module.default[HMR].original);
  });
}
var FloppyFill_default = FloppyFill;
mark_module_end(FloppyFill);

// node_modules/svelte-bootstrap-icons/lib/Floppy.svelte
mark_module_start();
Floppy[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Floppy.svelte";
var root1071 = add_locations(ns_template(`<svg><!><path d="M11 2H9v3h2V2Z"></path><path d="M1.5 0h11.586a1.5 1.5 0 0 1 1.06.44l1.415 1.414A1.5 1.5 0 0 1 16 2.914V14.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 14.5v-13A1.5 1.5 0 0 1 1.5 0ZM1 1.5v13a.5.5 0 0 0 .5.5H2v-4.5A1.5 1.5 0 0 1 3.5 9h9a1.5 1.5 0 0 1 1.5 1.5V15h.5a.5.5 0 0 0 .5-.5V2.914a.5.5 0 0 0-.146-.353l-1.415-1.415A.5.5 0 0 0 13.086 1H13v4.5A1.5 1.5 0 0 1 11.5 7h-7A1.5 1.5 0 0 1 3 5.5V1H1.5a.5.5 0 0 0-.5.5Zm3 4a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5V1H4v4.5ZM3 15h10v-4.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5V15Z"></path></svg>`), Floppy[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Floppy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Floppy);
  var svg = root1071();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-floppy", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Floppy = hmr(Floppy, () => Floppy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Floppy[HMR].source;
    set(Floppy[HMR].source, module.default[HMR].original);
  });
}
var Floppy_default = Floppy;
mark_module_end(Floppy);

// node_modules/svelte-bootstrap-icons/lib/Floppy2Fill.svelte
mark_module_start();
Floppy2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Floppy2Fill.svelte";
var root1072 = add_locations(ns_template(`<svg><!><path d="M12 2h-2v3h2V2Z"></path><path d="M1.5 0A1.5 1.5 0 0 0 0 1.5v13A1.5 1.5 0 0 0 1.5 16h13a1.5 1.5 0 0 0 1.5-1.5V2.914a1.5 1.5 0 0 0-.44-1.06L14.147.439A1.5 1.5 0 0 0 13.086 0H1.5ZM4 6a1 1 0 0 1-1-1V1h10v4a1 1 0 0 1-1 1H4ZM3 9h10a1 1 0 0 1 1 1v5H2v-5a1 1 0 0 1 1-1Z"></path></svg>`), Floppy2Fill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function Floppy2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Floppy2Fill);
  var svg = root1072();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-floppy2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Floppy2Fill = hmr(Floppy2Fill, () => Floppy2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Floppy2Fill[HMR].source;
    set(Floppy2Fill[HMR].source, module.default[HMR].original);
  });
}
var Floppy2Fill_default = Floppy2Fill;
mark_module_end(Floppy2Fill);

// node_modules/svelte-bootstrap-icons/lib/Floppy2.svelte
mark_module_start();
Floppy2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Floppy2.svelte";
var root1073 = add_locations(ns_template(`<svg><!><path d="M1.5 0h11.586a1.5 1.5 0 0 1 1.06.44l1.415 1.414A1.5 1.5 0 0 1 16 2.914V14.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 14.5v-13A1.5 1.5 0 0 1 1.5 0ZM1 1.5v13a.5.5 0 0 0 .5.5H2v-4.5A1.5 1.5 0 0 1 3.5 9h9a1.5 1.5 0 0 1 1.5 1.5V15h.5a.5.5 0 0 0 .5-.5V2.914a.5.5 0 0 0-.146-.353l-1.415-1.415A.5.5 0 0 0 13.086 1H13v3.5A1.5 1.5 0 0 1 11.5 6h-7A1.5 1.5 0 0 1 3 4.5V1H1.5a.5.5 0 0 0-.5.5Zm9.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-1Z"></path></svg>`), Floppy2[FILENAME], [[1, 0, [[1, 168]]]]);
function Floppy2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Floppy2);
  var svg = root1073();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-floppy2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Floppy2 = hmr(Floppy2, () => Floppy2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Floppy2[HMR].source;
    set(Floppy2[HMR].source, module.default[HMR].original);
  });
}
var Floppy2_default = Floppy2;
mark_module_end(Floppy2);

// node_modules/svelte-bootstrap-icons/lib/Flower1.svelte
mark_module_start();
Flower1[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Flower1.svelte";
var root1074 = add_locations(ns_template(`<svg><!><path d="M6.174 1.184a2 2 0 0 1 3.652 0A2 2 0 0 1 12.99 3.01a2 2 0 0 1 1.826 3.164 2 2 0 0 1 0 3.652 2 2 0 0 1-1.826 3.164 2 2 0 0 1-3.164 1.826 2 2 0 0 1-3.652 0A2 2 0 0 1 3.01 12.99a2 2 0 0 1-1.826-3.164 2 2 0 0 1 0-3.652A2 2 0 0 1 3.01 3.01a2 2 0 0 1 3.164-1.826zM8 1a1 1 0 0 0-.998 1.03l.01.091c.012.077.029.176.054.296.049.241.122.542.213.887.182.688.428 1.513.676 2.314L8 5.762l.045-.144c.248-.8.494-1.626.676-2.314.091-.345.164-.646.213-.887a4.997 4.997 0 0 0 .064-.386L9 2a1 1 0 0 0-1-1zM2 9l.03-.002.091-.01a4.99 4.99 0 0 0 .296-.054c.241-.049.542-.122.887-.213a60.59 60.59 0 0 0 2.314-.676L5.762 8l-.144-.045a60.59 60.59 0 0 0-2.314-.676 16.705 16.705 0 0 0-.887-.213 4.99 4.99 0 0 0-.386-.064L2 7a1 1 0 1 0 0 2zm7 5-.002-.03a5.005 5.005 0 0 0-.064-.386 16.398 16.398 0 0 0-.213-.888 60.582 60.582 0 0 0-.676-2.314L8 10.238l-.045.144c-.248.8-.494 1.626-.676 2.314-.091.345-.164.646-.213.887a4.996 4.996 0 0 0-.064.386L7 14a1 1 0 1 0 2 0zm-5.696-2.134.025-.017a5.001 5.001 0 0 0 .303-.248c.184-.164.408-.377.661-.629A60.614 60.614 0 0 0 5.96 9.23l.103-.111-.147.033a60.88 60.88 0 0 0-2.343.572c-.344.093-.64.18-.874.258a5.063 5.063 0 0 0-.367.138l-.027.014a1 1 0 1 0 1 1.732zM4.5 14.062a1 1 0 0 0 1.366-.366l.014-.027c.01-.02.021-.048.036-.084a5.09 5.09 0 0 0 .102-.283c.078-.233.165-.53.258-.874a60.6 60.6 0 0 0 .572-2.343l.033-.147-.11.102a60.848 60.848 0 0 0-1.743 1.667 17.07 17.07 0 0 0-.629.66 5.06 5.06 0 0 0-.248.304l-.017.025a1 1 0 0 0 .366 1.366zm9.196-8.196a1 1 0 0 0-1-1.732l-.025.017a4.951 4.951 0 0 0-.303.248 16.69 16.69 0 0 0-.661.629A60.72 60.72 0 0 0 10.04 6.77l-.102.111.147-.033a60.6 60.6 0 0 0 2.342-.572c.345-.093.642-.18.875-.258a4.993 4.993 0 0 0 .367-.138.53.53 0 0 0 .027-.014zM11.5 1.938a1 1 0 0 0-1.366.366l-.014.027c-.01.02-.021.048-.036.084a5.09 5.09 0 0 0-.102.283c-.078.233-.165.53-.258.875a60.62 60.62 0 0 0-.572 2.342l-.033.147.11-.102a60.848 60.848 0 0 0 1.743-1.667c.252-.253.465-.477.629-.66a5.001 5.001 0 0 0 .248-.304l.017-.025a1 1 0 0 0-.366-1.366zM14 9a1 1 0 0 0 0-2l-.03.002a4.996 4.996 0 0 0-.386.064c-.242.049-.543.122-.888.213-.688.182-1.513.428-2.314.676L10.238 8l.144.045c.8.248 1.626.494 2.314.676.345.091.646.164.887.213a4.996 4.996 0 0 0 .386.064L14 9zM1.938 4.5a1 1 0 0 0 .393 1.38l.084.035c.072.03.166.064.283.103.233.078.53.165.874.258a60.88 60.88 0 0 0 2.343.572l.147.033-.103-.111a60.584 60.584 0 0 0-1.666-1.742 16.705 16.705 0 0 0-.66-.629 4.996 4.996 0 0 0-.304-.248l-.025-.017a1 1 0 0 0-1.366.366zm2.196-1.196.017.025a4.996 4.996 0 0 0 .248.303c.164.184.377.408.629.661A60.597 60.597 0 0 0 6.77 5.96l.111.102-.033-.147a60.602 60.602 0 0 0-.572-2.342c-.093-.345-.18-.642-.258-.875a5.006 5.006 0 0 0-.138-.367l-.014-.027a1 1 0 1 0-1.732 1zm9.928 8.196a1 1 0 0 0-.366-1.366l-.027-.014a5 5 0 0 0-.367-.138c-.233-.078-.53-.165-.875-.258a60.619 60.619 0 0 0-2.342-.572l-.147-.033.102.111a60.73 60.73 0 0 0 1.667 1.742c.253.252.477.465.66.629a4.946 4.946 0 0 0 .304.248l.025.017a1 1 0 0 0 1.366-.366zm-3.928 2.196a1 1 0 0 0 1.732-1l-.017-.025a5.065 5.065 0 0 0-.248-.303 16.705 16.705 0 0 0-.629-.661A60.462 60.462 0 0 0 9.23 10.04l-.111-.102.033.147a60.6 60.6 0 0 0 .572 2.342c.093.345.18.642.258.875a4.985 4.985 0 0 0 .138.367.575.575 0 0 0 .014.027zM8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"></path></svg>`), Flower1[FILENAME], [[1, 0, [[1, 168]]]]);
function Flower1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Flower1);
  var svg = root1074();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-flower1", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flower1 = hmr(Flower1, () => Flower1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flower1[HMR].source;
    set(Flower1[HMR].source, module.default[HMR].original);
  });
}
var Flower1_default = Flower1;
mark_module_end(Flower1);

// node_modules/svelte-bootstrap-icons/lib/Flower2.svelte
mark_module_start();
Flower2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Flower2.svelte";
var root1075 = add_locations(ns_template(`<svg><!><path d="M8 16a4 4 0 0 0 4-4 4 4 0 0 0 0-8 4 4 0 0 0-8 0 4 4 0 1 0 0 8 4 4 0 0 0 4 4zm3-12c0 .073-.01.155-.03.247-.544.241-1.091.638-1.598 1.084A2.987 2.987 0 0 0 8 5c-.494 0-.96.12-1.372.331-.507-.446-1.054-.843-1.597-1.084A1.117 1.117 0 0 1 5 4a3 3 0 0 1 6 0zm-.812 6.052A2.99 2.99 0 0 0 11 8a2.99 2.99 0 0 0-.812-2.052c.215-.18.432-.346.647-.487C11.34 5.131 11.732 5 12 5a3 3 0 1 1 0 6c-.268 0-.66-.13-1.165-.461a6.833 6.833 0 0 1-.647-.487zm-3.56.617a3.001 3.001 0 0 0 2.744 0c.507.446 1.054.842 1.598 1.084.02.091.03.174.03.247a3 3 0 1 1-6 0c0-.073.01-.155.03-.247.544-.242 1.091-.638 1.598-1.084zm-.816-4.721A2.99 2.99 0 0 0 5 8c0 .794.308 1.516.812 2.052a6.83 6.83 0 0 1-.647.487C4.66 10.869 4.268 11 4 11a3 3 0 0 1 0-6c.268 0 .66.13 1.165.461.215.141.432.306.647.487zM8 9a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"></path></svg>`), Flower2[FILENAME], [[1, 0, [[1, 168]]]]);
function Flower2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Flower2);
  var svg = root1075();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-flower2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flower2 = hmr(Flower2, () => Flower2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flower2[HMR].source;
    set(Flower2[HMR].source, module.default[HMR].original);
  });
}
var Flower2_default = Flower2;
mark_module_end(Flower2);

// node_modules/svelte-bootstrap-icons/lib/Flower3.svelte
mark_module_start();
Flower3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Flower3.svelte";
var root1076 = add_locations(ns_template(`<svg><!><path d="M11.424 8c.437-.052.811-.136 1.04-.268a2 2 0 0 0-2-3.464c-.229.132-.489.414-.752.767C9.886 4.63 10 4.264 10 4a2 2 0 1 0-4 0c0 .264.114.63.288 1.035-.263-.353-.523-.635-.752-.767a2 2 0 0 0-2 3.464c.229.132.603.216 1.04.268-.437.052-.811.136-1.04.268a2 2 0 1 0 2 3.464c.229-.132.489-.414.752-.767C6.114 11.37 6 11.736 6 12a2 2 0 1 0 4 0c0-.264-.114-.63-.288-1.035.263.353.523.635.752.767a2 2 0 1 0 2-3.464c-.229-.132-.603-.216-1.04-.268zM9 4a1.468 1.468 0 0 1-.045.205c-.039.132-.1.295-.183.484a12.88 12.88 0 0 1-.637 1.223L8 6.142a21.73 21.73 0 0 1-.135-.23 12.88 12.88 0 0 1-.637-1.223 4.216 4.216 0 0 1-.183-.484A1.473 1.473 0 0 1 7 4a1 1 0 1 1 2 0zM3.67 5.5a1 1 0 0 1 1.366-.366 1.472 1.472 0 0 1 .156.142c.094.1.204.233.326.4.245.333.502.747.742 1.163l.13.232a21.86 21.86 0 0 1-.265.002 12.88 12.88 0 0 1-1.379-.06 4.214 4.214 0 0 1-.51-.083 1.47 1.47 0 0 1-.2-.064A1 1 0 0 1 3.67 5.5zm1.366 5.366a1 1 0 0 1-1-1.732c.001 0 .016-.008.047-.02.037-.013.087-.028.153-.044.134-.032.305-.06.51-.083a12.88 12.88 0 0 1 1.379-.06c.09 0 .178 0 .266.002a21.82 21.82 0 0 1-.131.232c-.24.416-.497.83-.742 1.163a4.1 4.1 0 0 1-.327.4 1.483 1.483 0 0 1-.155.142zM9 12a1 1 0 0 1-2 0 1.476 1.476 0 0 1 .045-.206c.039-.131.1-.294.183-.483.166-.378.396-.808.637-1.223L8 9.858l.135.23c.241.415.47.845.637 1.223.083.19.144.352.183.484A1.338 1.338 0 0 1 9 12zm3.33-6.5a1 1 0 0 1-.366 1.366 1.478 1.478 0 0 1-.2.064c-.134.032-.305.06-.51.083-.412.045-.898.061-1.379.06-.09 0-.178 0-.266-.002l.131-.232c.24-.416.497-.83.742-1.163a4.1 4.1 0 0 1 .327-.4c.046-.05.085-.086.114-.11.026-.022.04-.03.041-.032a1 1 0 0 1 1.366.366zm-1.366 5.366a1.494 1.494 0 0 1-.155-.141 4.225 4.225 0 0 1-.327-.4A12.88 12.88 0 0 1 9.74 9.16a22 22 0 0 1-.13-.232l.265-.002c.48-.001.967.015 1.379.06.205.023.376.051.51.083.066.016.116.031.153.044l.048.02a1 1 0 1 1-1 1.732zM8 9a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"></path></svg>`), Flower3[FILENAME], [[1, 0, [[1, 168]]]]);
function Flower3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Flower3);
  var svg = root1076();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-flower3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flower3 = hmr(Flower3, () => Flower3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flower3[HMR].source;
    set(Flower3[HMR].source, module.default[HMR].original);
  });
}
var Flower3_default = Flower3;
mark_module_end(Flower3);

// node_modules/svelte-bootstrap-icons/lib/FolderCheck.svelte
mark_module_start();
FolderCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FolderCheck.svelte";
var root1077 = add_locations(ns_template(`<svg><!><path d="m.5 3 .04.87a1.99 1.99 0 0 0-.342 1.311l.637 7A2 2 0 0 0 2.826 14H9v-1H2.826a1 1 0 0 1-.995-.91l-.637-7A1 1 0 0 1 2.19 4h11.62a1 1 0 0 1 .996 1.09L14.54 8h1.005l.256-2.819A2 2 0 0 0 13.81 3H9.828a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 6.172 1H2.5a2 2 0 0 0-2 2zm5.672-1a1 1 0 0 1 .707.293L7.586 3H2.19c-.24 0-.47.042-.683.12L1.5 2.98a1 1 0 0 1 1-.98h3.672z"></path><path d="M15.854 10.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.707 0l-1.5-1.5a.5.5 0 0 1 .707-.708l1.146 1.147 2.646-2.647a.5.5 0 0 1 .708 0z"></path></svg>`), FolderCheck[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function FolderCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FolderCheck);
  var svg = root1077();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderCheck = hmr(FolderCheck, () => FolderCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderCheck[HMR].source;
    set(FolderCheck[HMR].source, module.default[HMR].original);
  });
}
var FolderCheck_default = FolderCheck;
mark_module_end(FolderCheck);

// node_modules/svelte-bootstrap-icons/lib/FolderFill.svelte
mark_module_start();
FolderFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FolderFill.svelte";
var root1078 = add_locations(ns_template(`<svg><!><path d="M9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.825a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3zm-8.322.12C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139z"></path></svg>`), FolderFill[FILENAME], [[1, 0, [[1, 172]]]]);
function FolderFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FolderFill);
  var svg = root1078();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderFill = hmr(FolderFill, () => FolderFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderFill[HMR].source;
    set(FolderFill[HMR].source, module.default[HMR].original);
  });
}
var FolderFill_default = FolderFill;
mark_module_end(FolderFill);

// node_modules/svelte-bootstrap-icons/lib/FolderMinus.svelte
mark_module_start();
FolderMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FolderMinus.svelte";
var root1079 = add_locations(ns_template(`<svg><!><path d="m.5 3 .04.87a1.99 1.99 0 0 0-.342 1.311l.637 7A2 2 0 0 0 2.826 14H9v-1H2.826a1 1 0 0 1-.995-.91l-.637-7A1 1 0 0 1 2.19 4h11.62a1 1 0 0 1 .996 1.09L14.54 8h1.005l.256-2.819A2 2 0 0 0 13.81 3H9.828a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 6.172 1H2.5a2 2 0 0 0-2 2zm5.672-1a1 1 0 0 1 .707.293L7.586 3H2.19c-.24 0-.47.042-.683.12L1.5 2.98a1 1 0 0 1 1-.98h3.672z"></path><path d="M11 11.5a.5.5 0 0 1 .5-.5h4a.5.5 0 1 1 0 1h-4a.5.5 0 0 1-.5-.5z"></path></svg>`), FolderMinus[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function FolderMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FolderMinus);
  var svg = root1079();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderMinus = hmr(FolderMinus, () => FolderMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderMinus[HMR].source;
    set(FolderMinus[HMR].source, module.default[HMR].original);
  });
}
var FolderMinus_default = FolderMinus;
mark_module_end(FolderMinus);

// node_modules/svelte-bootstrap-icons/lib/FolderPlus.svelte
mark_module_start();
FolderPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FolderPlus.svelte";
var root1080 = add_locations(ns_template(`<svg><!><path d="m.5 3 .04.87a1.99 1.99 0 0 0-.342 1.311l.637 7A2 2 0 0 0 2.826 14H9v-1H2.826a1 1 0 0 1-.995-.91l-.637-7A1 1 0 0 1 2.19 4h11.62a1 1 0 0 1 .996 1.09L14.54 8h1.005l.256-2.819A2 2 0 0 0 13.81 3H9.828a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 6.172 1H2.5a2 2 0 0 0-2 2Zm5.672-1a1 1 0 0 1 .707.293L7.586 3H2.19c-.24 0-.47.042-.683.12L1.5 2.98a1 1 0 0 1 1-.98h3.672Z"></path><path d="M13.5 9a.5.5 0 0 1 .5.5V11h1.5a.5.5 0 1 1 0 1H14v1.5a.5.5 0 1 1-1 0V12h-1.5a.5.5 0 0 1 0-1H13V9.5a.5.5 0 0 1 .5-.5Z"></path></svg>`), FolderPlus[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function FolderPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FolderPlus);
  var svg = root1080();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderPlus = hmr(FolderPlus, () => FolderPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderPlus[HMR].source;
    set(FolderPlus[HMR].source, module.default[HMR].original);
  });
}
var FolderPlus_default = FolderPlus;
mark_module_end(FolderPlus);

// node_modules/svelte-bootstrap-icons/lib/FolderSymlinkFill.svelte
mark_module_start();
FolderSymlinkFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FolderSymlinkFill.svelte";
var root1081 = add_locations(ns_template(`<svg><!><path d="M13.81 3H9.828a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 6.172 1H2.5a2 2 0 0 0-2 2l.04.87a1.99 1.99 0 0 0-.342 1.311l.637 7A2 2 0 0 0 2.826 14h10.348a2 2 0 0 0 1.991-1.819l.637-7A2 2 0 0 0 13.81 3zM2.19 3c-.24 0-.47.042-.683.12L1.5 2.98a1 1 0 0 1 1-.98h3.672a1 1 0 0 1 .707.293L7.586 3H2.19zm9.608 5.271-3.182 1.97c-.27.166-.616-.036-.616-.372V9.1s-2.571-.3-4 2.4c.571-4.8 3.143-4.8 4-4.8v-.769c0-.336.346-.538.616-.371l3.182 1.969c.27.166.27.576 0 .742z"></path></svg>`), FolderSymlinkFill[FILENAME], [[1, 0, [[1, 180]]]]);
function FolderSymlinkFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FolderSymlinkFill);
  var svg = root1081();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder-symlink-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderSymlinkFill = hmr(FolderSymlinkFill, () => FolderSymlinkFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderSymlinkFill[HMR].source;
    set(FolderSymlinkFill[HMR].source, module.default[HMR].original);
  });
}
var FolderSymlinkFill_default = FolderSymlinkFill;
mark_module_end(FolderSymlinkFill);

// node_modules/svelte-bootstrap-icons/lib/FolderSymlink.svelte
mark_module_start();
FolderSymlink[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FolderSymlink.svelte";
var root1082 = add_locations(ns_template(`<svg><!><path d="m11.798 8.271-3.182 1.97c-.27.166-.616-.036-.616-.372V9.1s-2.571-.3-4 2.4c.571-4.8 3.143-4.8 4-4.8v-.769c0-.336.346-.538.616-.371l3.182 1.969c.27.166.27.576 0 .742z"></path><path d="m.5 3 .04.87a1.99 1.99 0 0 0-.342 1.311l.637 7A2 2 0 0 0 2.826 14h10.348a2 2 0 0 0 1.991-1.819l.637-7A2 2 0 0 0 13.81 3H9.828a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 6.172 1H2.5a2 2 0 0 0-2 2zm.694 2.09A1 1 0 0 1 2.19 4h11.62a1 1 0 0 1 .996 1.09l-.636 7a1 1 0 0 1-.996.91H2.826a1 1 0 0 1-.995-.91l-.637-7zM6.172 2a1 1 0 0 1 .707.293L7.586 3H2.19c-.24 0-.47.042-.683.12L1.5 2.98a1 1 0 0 1 1-.98h3.672z"></path></svg>`), FolderSymlink[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function FolderSymlink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FolderSymlink);
  var svg = root1082();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder-symlink", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderSymlink = hmr(FolderSymlink, () => FolderSymlink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderSymlink[HMR].source;
    set(FolderSymlink[HMR].source, module.default[HMR].original);
  });
}
var FolderSymlink_default = FolderSymlink;
mark_module_end(FolderSymlink);

// node_modules/svelte-bootstrap-icons/lib/FolderX.svelte
mark_module_start();
FolderX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FolderX.svelte";
var root1083 = add_locations(ns_template(`<svg><!><path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181L15.546 8H14.54l.265-2.91A1 1 0 0 0 13.81 4H2.19a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91H9v1H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zm6.339-1.577A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z"></path><path d="M11.854 10.146a.5.5 0 0 0-.707.708L12.293 12l-1.146 1.146a.5.5 0 0 0 .707.708L13 12.707l1.146 1.147a.5.5 0 0 0 .708-.708L13.707 12l1.147-1.146a.5.5 0 0 0-.707-.708L13 11.293l-1.146-1.147z"></path></svg>`), FolderX[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function FolderX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FolderX);
  var svg = root1083();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderX = hmr(FolderX, () => FolderX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderX[HMR].source;
    set(FolderX[HMR].source, module.default[HMR].original);
  });
}
var FolderX_default = FolderX;
mark_module_end(FolderX);

// node_modules/svelte-bootstrap-icons/lib/Folder.svelte
mark_module_start();
Folder[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Folder.svelte";
var root1084 = add_locations(ns_template(`<svg><!><path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z"></path></svg>`), Folder[FILENAME], [[1, 0, [[1, 167]]]]);
function Folder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Folder);
  var svg = root1084();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder = hmr(Folder, () => Folder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder[HMR].source;
    set(Folder[HMR].source, module.default[HMR].original);
  });
}
var Folder_default = Folder;
mark_module_end(Folder);

// node_modules/svelte-bootstrap-icons/lib/Folder2Open.svelte
mark_module_start();
Folder2Open[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Folder2Open.svelte";
var root1085 = add_locations(ns_template(`<svg><!><path d="M1 3.5A1.5 1.5 0 0 1 2.5 2h2.764c.958 0 1.76.56 2.311 1.184C7.985 3.648 8.48 4 9 4h4.5A1.5 1.5 0 0 1 15 5.5v.64c.57.265.94.876.856 1.546l-.64 5.124A2.5 2.5 0 0 1 12.733 15H3.266a2.5 2.5 0 0 1-2.481-2.19l-.64-5.124A1.5 1.5 0 0 1 1 6.14V3.5zM2 6h12v-.5a.5.5 0 0 0-.5-.5H9c-.964 0-1.71-.629-2.174-1.154C6.374 3.334 5.82 3 5.264 3H2.5a.5.5 0 0 0-.5.5V6zm-.367 1a.5.5 0 0 0-.496.562l.64 5.124A1.5 1.5 0 0 0 3.266 14h9.468a1.5 1.5 0 0 0 1.489-1.314l.64-5.124A.5.5 0 0 0 14.367 7H1.633z"></path></svg>`), Folder2Open[FILENAME], [[1, 0, [[1, 173]]]]);
function Folder2Open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Folder2Open);
  var svg = root1085();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder2-open", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder2Open = hmr(Folder2Open, () => Folder2Open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder2Open[HMR].source;
    set(Folder2Open[HMR].source, module.default[HMR].original);
  });
}
var Folder2Open_default = Folder2Open;
mark_module_end(Folder2Open);

// node_modules/svelte-bootstrap-icons/lib/Folder2.svelte
mark_module_start();
Folder2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Folder2.svelte";
var root1086 = add_locations(ns_template(`<svg><!><path d="M1 3.5A1.5 1.5 0 0 1 2.5 2h2.764c.958 0 1.76.56 2.311 1.184C7.985 3.648 8.48 4 9 4h4.5A1.5 1.5 0 0 1 15 5.5v7a1.5 1.5 0 0 1-1.5 1.5h-11A1.5 1.5 0 0 1 1 12.5v-9zM2.5 3a.5.5 0 0 0-.5.5V6h12v-.5a.5.5 0 0 0-.5-.5H9c-.964 0-1.71-.629-2.174-1.154C6.374 3.334 5.82 3 5.264 3H2.5zM14 7H2v5.5a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5V7z"></path></svg>`), Folder2[FILENAME], [[1, 0, [[1, 168]]]]);
function Folder2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Folder2);
  var svg = root1086();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-folder2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder2 = hmr(Folder2, () => Folder2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder2[HMR].source;
    set(Folder2[HMR].source, module.default[HMR].original);
  });
}
var Folder2_default = Folder2;
mark_module_end(Folder2);

// node_modules/svelte-bootstrap-icons/lib/Fonts.svelte
mark_module_start();
Fonts[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Fonts.svelte";
var root1087 = add_locations(ns_template(`<svg><!><path d="M12.258 3h-8.51l-.083 2.46h.479c.26-1.544.758-1.783 2.693-1.845l.424-.013v7.827c0 .663-.144.82-1.3.923v.52h4.082v-.52c-1.162-.103-1.306-.26-1.306-.923V3.602l.431.013c1.934.062 2.434.301 2.693 1.846h.479L12.258 3z"></path></svg>`), Fonts[FILENAME], [[1, 0, [[1, 166]]]]);
function Fonts($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Fonts);
  var svg = root1087();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fonts", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fonts = hmr(Fonts, () => Fonts[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fonts[HMR].source;
    set(Fonts[HMR].source, module.default[HMR].original);
  });
}
var Fonts_default = Fonts;
mark_module_end(Fonts);

// node_modules/svelte-bootstrap-icons/lib/ForwardFill.svelte
mark_module_start();
ForwardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ForwardFill.svelte";
var root1088 = add_locations(ns_template(`<svg><!><path d="m9.77 12.11 4.012-2.953a.647.647 0 0 0 0-1.114L9.771 5.09a.644.644 0 0 0-.971.557V6.65H2v3.9h6.8v1.003c0 .505.545.808.97.557z"></path></svg>`), ForwardFill[FILENAME], [[1, 0, [[1, 173]]]]);
function ForwardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ForwardFill);
  var svg = root1088();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-forward-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ForwardFill = hmr(ForwardFill, () => ForwardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ForwardFill[HMR].source;
    set(ForwardFill[HMR].source, module.default[HMR].original);
  });
}
var ForwardFill_default = ForwardFill;
mark_module_end(ForwardFill);

// node_modules/svelte-bootstrap-icons/lib/Forward.svelte
mark_module_start();
Forward[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Forward.svelte";
var root1089 = add_locations(ns_template(`<svg><!><path d="M9.502 5.513a.144.144 0 0 0-.202.134V6.65a.5.5 0 0 1-.5.5H2.5v2.9h6.3a.5.5 0 0 1 .5.5v1.003c0 .108.11.176.202.134l3.984-2.933a.51.51 0 0 1 .042-.028.147.147 0 0 0 0-.252.51.51 0 0 1-.042-.028L9.502 5.513zM8.3 5.647a1.144 1.144 0 0 1 1.767-.96l3.994 2.94a1.147 1.147 0 0 1 0 1.946l-3.994 2.94a1.144 1.144 0 0 1-1.767-.96v-.503H2a.5.5 0 0 1-.5-.5v-3.9a.5.5 0 0 1 .5-.5h6.3v-.503z"></path></svg>`), Forward[FILENAME], [[1, 0, [[1, 168]]]]);
function Forward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Forward);
  var svg = root1089();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-forward", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Forward = hmr(Forward, () => Forward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Forward[HMR].source;
    set(Forward[HMR].source, module.default[HMR].original);
  });
}
var Forward_default = Forward;
mark_module_end(Forward);

// node_modules/svelte-bootstrap-icons/lib/Front.svelte
mark_module_start();
Front[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Front.svelte";
var root1090 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm5 10v2a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2v5a2 2 0 0 1-2 2H5z"></path></svg>`), Front[FILENAME], [[1, 0, [[1, 166]]]]);
function Front($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Front);
  var svg = root1090();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Front = hmr(Front, () => Front[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Front[HMR].source;
    set(Front[HMR].source, module.default[HMR].original);
  });
}
var Front_default = Front;
mark_module_end(Front);

// node_modules/svelte-bootstrap-icons/lib/FuelPumpDieselFill.svelte
mark_module_start();
FuelPumpDieselFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FuelPumpDieselFill.svelte";
var root1091 = add_locations(ns_template(`<svg><!><path d="M4.974 9.806h.692c.306 0 .556.063.75.19.198.127.343.317.437.568.096.252.144.565.144.941 0 .284-.027.53-.083.74-.053.21-.133.386-.241.528a.986.986 0 0 1-.412.315 1.575 1.575 0 0 1-.595.103h-.692V9.806Z"></path><path d="M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V8h-.5a.5.5 0 0 1-.5-.5V4.375a.5.5 0 0 1 .5-.5h1.495c-.011-.476-.053-.894-.201-1.222a.97.97 0 0 0-.394-.458c-.184-.11-.464-.195-.9-.195a.5.5 0 0 1 0-1c.564 0 1.034.11 1.412.336.383.228.634.551.794.907.295.655.294 1.465.294 2.081V7.5a.5.5 0 0 1-.5.5H15v4.5a1.5 1.5 0 0 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1V2Zm2 .5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0-.5.5ZM4 9v5h1.796c.496 0 .906-.099 1.23-.297.327-.197.571-.484.732-.86.161-.377.242-.828.242-1.356 0-.525-.08-.973-.242-1.344a1.775 1.775 0 0 0-.725-.85C6.71 9.098 6.296 9 5.796 9H4Z"></path></svg>`), FuelPumpDieselFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function FuelPumpDieselFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FuelPumpDieselFill);
  var svg = root1091();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fuel-pump-diesel-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FuelPumpDieselFill = hmr(FuelPumpDieselFill, () => FuelPumpDieselFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FuelPumpDieselFill[HMR].source;
    set(FuelPumpDieselFill[HMR].source, module.default[HMR].original);
  });
}
var FuelPumpDieselFill_default = FuelPumpDieselFill;
mark_module_end(FuelPumpDieselFill);

// node_modules/svelte-bootstrap-icons/lib/FuelPumpDiesel.svelte
mark_module_start();
FuelPumpDiesel[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FuelPumpDiesel.svelte";
var root1092 = add_locations(ns_template(`<svg><!><path d="M3.5 2a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5h-5ZM4 14V9h1.796c.5 0 .913.098 1.237.293.325.195.567.479.725.85.161.371.242.82.242 1.344 0 .528-.08.98-.242 1.355a1.805 1.805 0 0 1-.732.861c-.324.198-.734.297-1.23.297H4Zm1.666-4.194h-.692v3.385h.692c.229 0 .427-.035.595-.103a.986.986 0 0 0 .412-.315c.108-.142.188-.318.241-.528.056-.21.083-.456.083-.74 0-.376-.048-.69-.144-.94a1.11 1.11 0 0 0-.436-.569c-.195-.127-.445-.19-.75-.19Z"></path><path d="M3 0a2 2 0 0 0-2 2v13H.5a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1H11v-4a1 1 0 0 1 1 1v.5a1.5 1.5 0 0 0 3 0V8h.5a.5.5 0 0 0 .5-.5V4.324c0-.616 0-1.426-.294-2.081a1.969 1.969 0 0 0-.794-.907C14.534 1.111 14.064 1 13.5 1a.5.5 0 0 0 0 1c.436 0 .716.086.9.195a.97.97 0 0 1 .394.458c.147.328.19.746.201 1.222H13.5a.5.5 0 0 0-.5.5V7.5a.5.5 0 0 0 .5.5h.5v4.5a.5.5 0 0 1-1 0V12a2 2 0 0 0-2-2V2a2 2 0 0 0-2-2H3Zm7 2v13H2V2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1Z"></path></svg>`), FuelPumpDiesel[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function FuelPumpDiesel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FuelPumpDiesel);
  var svg = root1092();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fuel-pump-diesel", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FuelPumpDiesel = hmr(FuelPumpDiesel, () => FuelPumpDiesel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FuelPumpDiesel[HMR].source;
    set(FuelPumpDiesel[HMR].source, module.default[HMR].original);
  });
}
var FuelPumpDiesel_default = FuelPumpDiesel;
mark_module_end(FuelPumpDiesel);

// node_modules/svelte-bootstrap-icons/lib/FuelPumpFill.svelte
mark_module_start();
FuelPumpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FuelPumpFill.svelte";
var root1093 = add_locations(ns_template(`<svg><!><path d="M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V8h-.5a.5.5 0 0 1-.5-.5V4.375a.5.5 0 0 1 .5-.5h1.495c-.011-.476-.053-.894-.201-1.222a.97.97 0 0 0-.394-.458c-.184-.11-.464-.195-.9-.195a.5.5 0 0 1 0-1c.564 0 1.034.11 1.412.336.383.228.634.551.794.907.295.655.294 1.465.294 2.081V7.5a.5.5 0 0 1-.5.5H15v4.5a1.5 1.5 0 0 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1V2Zm2.5 0a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5h-5Z"></path></svg>`), FuelPumpFill[FILENAME], [[1, 0, [[1, 175]]]]);
function FuelPumpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FuelPumpFill);
  var svg = root1093();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fuel-pump-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FuelPumpFill = hmr(FuelPumpFill, () => FuelPumpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FuelPumpFill[HMR].source;
    set(FuelPumpFill[HMR].source, module.default[HMR].original);
  });
}
var FuelPumpFill_default = FuelPumpFill;
mark_module_end(FuelPumpFill);

// node_modules/svelte-bootstrap-icons/lib/FuelPump.svelte
mark_module_start();
FuelPump[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FuelPump.svelte";
var root1094 = add_locations(ns_template(`<svg><!><path d="M3 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5Z"></path><path d="M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V8h-.5a.5.5 0 0 1-.5-.5V4.375a.5.5 0 0 1 .5-.5h1.495c-.011-.476-.053-.894-.201-1.222a.97.97 0 0 0-.394-.458c-.184-.11-.464-.195-.9-.195a.5.5 0 0 1 0-1c.564 0 1.034.11 1.412.336.383.228.634.551.794.907.295.655.294 1.465.294 2.081v3.175a.5.5 0 0 1-.5.501H15v4.5a1.5 1.5 0 0 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1V2Zm9 0a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v13h8V2Z"></path></svg>`), FuelPump[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function FuelPump($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FuelPump);
  var svg = root1094();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fuel-pump", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FuelPump = hmr(FuelPump, () => FuelPump[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FuelPump[HMR].source;
    set(FuelPump[HMR].source, module.default[HMR].original);
  });
}
var FuelPump_default = FuelPump;
mark_module_end(FuelPump);

// node_modules/svelte-bootstrap-icons/lib/FullscreenExit.svelte
mark_module_start();
FullscreenExit[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FullscreenExit.svelte";
var root1095 = add_locations(ns_template(`<svg><!><path d="M5.5 0a.5.5 0 0 1 .5.5v4A1.5 1.5 0 0 1 4.5 6h-4a.5.5 0 0 1 0-1h4a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 1 .5-.5zm5 0a.5.5 0 0 1 .5.5v4a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 10 4.5v-4a.5.5 0 0 1 .5-.5zM0 10.5a.5.5 0 0 1 .5-.5h4A1.5 1.5 0 0 1 6 11.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 0-.5-.5h-4a.5.5 0 0 1-.5-.5zm10 1a1.5 1.5 0 0 1 1.5-1.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 0-.5.5v4a.5.5 0 0 1-1 0v-4z"></path></svg>`), FullscreenExit[FILENAME], [[1, 0, [[1, 176]]]]);
function FullscreenExit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FullscreenExit);
  var svg = root1095();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fullscreen-exit", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FullscreenExit = hmr(FullscreenExit, () => FullscreenExit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FullscreenExit[HMR].source;
    set(FullscreenExit[HMR].source, module.default[HMR].original);
  });
}
var FullscreenExit_default = FullscreenExit;
mark_module_end(FullscreenExit);

// node_modules/svelte-bootstrap-icons/lib/Fullscreen.svelte
mark_module_start();
Fullscreen[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Fullscreen.svelte";
var root1096 = add_locations(ns_template(`<svg><!><path d="M1.5 1a.5.5 0 0 0-.5.5v4a.5.5 0 0 1-1 0v-4A1.5 1.5 0 0 1 1.5 0h4a.5.5 0 0 1 0 1h-4zM10 .5a.5.5 0 0 1 .5-.5h4A1.5 1.5 0 0 1 16 1.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 0-.5-.5h-4a.5.5 0 0 1-.5-.5zM.5 10a.5.5 0 0 1 .5.5v4a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 0 14.5v-4a.5.5 0 0 1 .5-.5zm15 0a.5.5 0 0 1 .5.5v4a1.5 1.5 0 0 1-1.5 1.5h-4a.5.5 0 0 1 0-1h4a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 1 .5-.5z"></path></svg>`), Fullscreen[FILENAME], [[1, 0, [[1, 171]]]]);
function Fullscreen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Fullscreen);
  var svg = root1096();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-fullscreen", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fullscreen = hmr(Fullscreen, () => Fullscreen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fullscreen[HMR].source;
    set(Fullscreen[HMR].source, module.default[HMR].original);
  });
}
var Fullscreen_default = Fullscreen;
mark_module_end(Fullscreen);

// node_modules/svelte-bootstrap-icons/lib/FunnelFill.svelte
mark_module_start();
FunnelFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/FunnelFill.svelte";
var root1097 = add_locations(ns_template(`<svg><!><path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2z"></path></svg>`), FunnelFill[FILENAME], [[1, 0, [[1, 172]]]]);
function FunnelFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, FunnelFill);
  var svg = root1097();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-funnel-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FunnelFill = hmr(FunnelFill, () => FunnelFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FunnelFill[HMR].source;
    set(FunnelFill[HMR].source, module.default[HMR].original);
  });
}
var FunnelFill_default = FunnelFill;
mark_module_end(FunnelFill);

// node_modules/svelte-bootstrap-icons/lib/Funnel.svelte
mark_module_start();
Funnel[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Funnel.svelte";
var root1098 = add_locations(ns_template(`<svg><!><path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2zm1 .5v1.308l4.372 4.858A.5.5 0 0 1 7 8.5v5.306l2-.666V8.5a.5.5 0 0 1 .128-.334L13.5 3.308V2h-11z"></path></svg>`), Funnel[FILENAME], [[1, 0, [[1, 167]]]]);
function Funnel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Funnel);
  var svg = root1098();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-funnel", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Funnel = hmr(Funnel, () => Funnel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Funnel[HMR].source;
    set(Funnel[HMR].source, module.default[HMR].original);
  });
}
var Funnel_default = Funnel;
mark_module_end(Funnel);

// node_modules/svelte-bootstrap-icons/lib/GearFill.svelte
mark_module_start();
GearFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GearFill.svelte";
var root1099 = add_locations(ns_template(`<svg><!><path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"></path></svg>`), GearFill[FILENAME], [[1, 0, [[1, 170]]]]);
function GearFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GearFill);
  var svg = root1099();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gear-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GearFill = hmr(GearFill, () => GearFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GearFill[HMR].source;
    set(GearFill[HMR].source, module.default[HMR].original);
  });
}
var GearFill_default = GearFill;
mark_module_end(GearFill);

// node_modules/svelte-bootstrap-icons/lib/GearWideConnected.svelte
mark_module_start();
GearWideConnected[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GearWideConnected.svelte";
var root1100 = add_locations(ns_template(`<svg><!><path d="M7.068.727c.243-.97 1.62-.97 1.864 0l.071.286a.96.96 0 0 0 1.622.434l.205-.211c.695-.719 1.888-.03 1.613.931l-.08.284a.96.96 0 0 0 1.187 1.187l.283-.081c.96-.275 1.65.918.931 1.613l-.211.205a.96.96 0 0 0 .434 1.622l.286.071c.97.243.97 1.62 0 1.864l-.286.071a.96.96 0 0 0-.434 1.622l.211.205c.719.695.03 1.888-.931 1.613l-.284-.08a.96.96 0 0 0-1.187 1.187l.081.283c.275.96-.918 1.65-1.613.931l-.205-.211a.96.96 0 0 0-1.622.434l-.071.286c-.243.97-1.62.97-1.864 0l-.071-.286a.96.96 0 0 0-1.622-.434l-.205.211c-.695.719-1.888.03-1.613-.931l.08-.284a.96.96 0 0 0-1.186-1.187l-.284.081c-.96.275-1.65-.918-.931-1.613l.211-.205a.96.96 0 0 0-.434-1.622l-.286-.071c-.97-.243-.97-1.62 0-1.864l.286-.071a.96.96 0 0 0 .434-1.622l-.211-.205c-.719-.695-.03-1.888.931-1.613l.284.08a.96.96 0 0 0 1.187-1.186l-.081-.284c-.275-.96.918-1.65 1.613-.931l.205.211a.96.96 0 0 0 1.622-.434l.071-.286zM12.973 8.5H8.25l-2.834 3.779A4.998 4.998 0 0 0 12.973 8.5zm0-1a4.998 4.998 0 0 0-7.557-3.779l2.834 3.78h4.723zM5.048 3.967c-.03.021-.058.043-.087.065l.087-.065zm-.431.355A4.984 4.984 0 0 0 3.002 8c0 1.455.622 2.765 1.615 3.678L7.375 8 4.617 4.322zm.344 7.646.087.065-.087-.065z"></path></svg>`), GearWideConnected[FILENAME], [[1, 0, [[1, 180]]]]);
function GearWideConnected($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GearWideConnected);
  var svg = root1100();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gear-wide-connected", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GearWideConnected = hmr(GearWideConnected, () => GearWideConnected[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GearWideConnected[HMR].source;
    set(GearWideConnected[HMR].source, module.default[HMR].original);
  });
}
var GearWideConnected_default = GearWideConnected;
mark_module_end(GearWideConnected);

// node_modules/svelte-bootstrap-icons/lib/GearWide.svelte
mark_module_start();
GearWide[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GearWide.svelte";
var root1101 = add_locations(ns_template(`<svg><!><path d="M8.932.727c-.243-.97-1.62-.97-1.864 0l-.071.286a.96.96 0 0 1-1.622.434l-.205-.211c-.695-.719-1.888-.03-1.613.931l.08.284a.96.96 0 0 1-1.186 1.187l-.284-.081c-.96-.275-1.65.918-.931 1.613l.211.205a.96.96 0 0 1-.434 1.622l-.286.071c-.97.243-.97 1.62 0 1.864l.286.071a.96.96 0 0 1 .434 1.622l-.211.205c-.719.695-.03 1.888.931 1.613l.284-.08a.96.96 0 0 1 1.187 1.187l-.081.283c-.275.96.918 1.65 1.613.931l.205-.211a.96.96 0 0 1 1.622.434l.071.286c.243.97 1.62.97 1.864 0l.071-.286a.96.96 0 0 1 1.622-.434l.205.211c.695.719 1.888.03 1.613-.931l-.08-.284a.96.96 0 0 1 1.187-1.187l.283.081c.96.275 1.65-.918.931-1.613l-.211-.205a.96.96 0 0 1 .434-1.622l.286-.071c.97-.243.97-1.62 0-1.864l-.286-.071a.96.96 0 0 1-.434-1.622l.211-.205c.719-.695.03-1.888-.931-1.613l-.284.08a.96.96 0 0 1-1.187-1.186l.081-.284c.275-.96-.918-1.65-1.613-.931l-.205.211a.96.96 0 0 1-1.622-.434L8.932.727zM8 12.997a4.998 4.998 0 1 1 0-9.995 4.998 4.998 0 0 1 0 9.996z"></path></svg>`), GearWide[FILENAME], [[1, 0, [[1, 170]]]]);
function GearWide($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GearWide);
  var svg = root1101();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gear-wide", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GearWide = hmr(GearWide, () => GearWide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GearWide[HMR].source;
    set(GearWide[HMR].source, module.default[HMR].original);
  });
}
var GearWide_default = GearWide;
mark_module_end(GearWide);

// node_modules/svelte-bootstrap-icons/lib/Gear.svelte
mark_module_start();
Gear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Gear.svelte";
var root1102 = add_locations(ns_template(`<svg><!><path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"></path><path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"></path></svg>`), Gear[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Gear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Gear);
  var svg = root1102();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gear = hmr(Gear, () => Gear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gear[HMR].source;
    set(Gear[HMR].source, module.default[HMR].original);
  });
}
var Gear_default = Gear;
mark_module_end(Gear);

// node_modules/svelte-bootstrap-icons/lib/Gem.svelte
mark_module_start();
Gem[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Gem.svelte";
var root1103 = add_locations(ns_template(`<svg><!><path d="M3.1.7a.5.5 0 0 1 .4-.2h9a.5.5 0 0 1 .4.2l2.976 3.974c.149.185.156.45.01.644L8.4 15.3a.5.5 0 0 1-.8 0L.1 5.3a.5.5 0 0 1 0-.6l3-4zm11.386 3.785-1.806-2.41-.776 2.413 2.582-.003zm-3.633.004.961-2.989H4.186l.963 2.995 5.704-.006zM5.47 5.495 8 13.366l2.532-7.876-5.062.005zm-1.371-.999-.78-2.422-1.818 2.425 2.598-.003zM1.499 5.5l5.113 6.817-2.192-6.82L1.5 5.5zm7.889 6.817 5.123-6.83-2.928.002-2.195 6.828z"></path></svg>`), Gem[FILENAME], [[1, 0, [[1, 164]]]]);
function Gem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Gem);
  var svg = root1103();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gem", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gem = hmr(Gem, () => Gem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gem[HMR].source;
    set(Gem[HMR].source, module.default[HMR].original);
  });
}
var Gem_default = Gem;
mark_module_end(Gem);

// node_modules/svelte-bootstrap-icons/lib/GenderAmbiguous.svelte
mark_module_start();
GenderAmbiguous[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GenderAmbiguous.svelte";
var root1104 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11.5 1a.5.5 0 0 1 0-1h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V1.707l-3.45 3.45A4 4 0 0 1 8.5 10.97V13H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V14H6a.5.5 0 0 1 0-1h1.5v-2.03a4 4 0 1 1 3.471-6.648L14.293 1H11.5zm-.997 4.346a3 3 0 1 0-5.006 3.309 3 3 0 0 0 5.006-3.31z"></path></svg>`), GenderAmbiguous[FILENAME], [[1, 0, [[1, 177]]]]);
function GenderAmbiguous($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GenderAmbiguous);
  var svg = root1104();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gender-ambiguous", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GenderAmbiguous = hmr(GenderAmbiguous, () => GenderAmbiguous[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GenderAmbiguous[HMR].source;
    set(GenderAmbiguous[HMR].source, module.default[HMR].original);
  });
}
var GenderAmbiguous_default = GenderAmbiguous;
mark_module_end(GenderAmbiguous);

// node_modules/svelte-bootstrap-icons/lib/GenderFemale.svelte
mark_module_start();
GenderFemale[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GenderFemale.svelte";
var root1105 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 1a4 4 0 1 0 0 8 4 4 0 0 0 0-8zM3 5a5 5 0 1 1 5.5 4.975V12h2a.5.5 0 0 1 0 1h-2v2.5a.5.5 0 0 1-1 0V13h-2a.5.5 0 0 1 0-1h2V9.975A5 5 0 0 1 3 5z"></path></svg>`), GenderFemale[FILENAME], [[1, 0, [[1, 174]]]]);
function GenderFemale($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GenderFemale);
  var svg = root1105();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gender-female", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GenderFemale = hmr(GenderFemale, () => GenderFemale[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GenderFemale[HMR].source;
    set(GenderFemale[HMR].source, module.default[HMR].original);
  });
}
var GenderFemale_default = GenderFemale;
mark_module_end(GenderFemale);

// node_modules/svelte-bootstrap-icons/lib/GenderMale.svelte
mark_module_start();
GenderMale[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GenderMale.svelte";
var root1106 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M9.5 2a.5.5 0 0 1 0-1h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-1 0V2.707L9.871 6.836a5 5 0 1 1-.707-.707L13.293 2H9.5zM6 6a4 4 0 1 0 0 8 4 4 0 0 0 0-8z"></path></svg>`), GenderMale[FILENAME], [[1, 0, [[1, 172]]]]);
function GenderMale($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GenderMale);
  var svg = root1106();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gender-male", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GenderMale = hmr(GenderMale, () => GenderMale[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GenderMale[HMR].source;
    set(GenderMale[HMR].source, module.default[HMR].original);
  });
}
var GenderMale_default = GenderMale;
mark_module_end(GenderMale);

// node_modules/svelte-bootstrap-icons/lib/GenderNeuter.svelte
mark_module_start();
GenderNeuter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GenderNeuter.svelte";
var root1107 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 1a4 4 0 1 0 0 8 4 4 0 0 0 0-8ZM3 5a5 5 0 1 1 5.5 4.975V15.5a.5.5 0 0 1-1 0V9.975A5 5 0 0 1 3 5Z"></path></svg>`), GenderNeuter[FILENAME], [[1, 0, [[1, 174]]]]);
function GenderNeuter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GenderNeuter);
  var svg = root1107();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gender-neuter", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GenderNeuter = hmr(GenderNeuter, () => GenderNeuter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GenderNeuter[HMR].source;
    set(GenderNeuter[HMR].source, module.default[HMR].original);
  });
}
var GenderNeuter_default = GenderNeuter;
mark_module_end(GenderNeuter);

// node_modules/svelte-bootstrap-icons/lib/GenderTrans.svelte
mark_module_start();
GenderTrans[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GenderTrans.svelte";
var root1108 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 .5A.5.5 0 0 1 .5 0h3a.5.5 0 0 1 0 1H1.707L3.5 2.793l.646-.647a.5.5 0 1 1 .708.708l-.647.646.822.822A3.99 3.99 0 0 1 8 3c1.18 0 2.239.51 2.971 1.322L14.293 1H11.5a.5.5 0 0 1 0-1h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V1.707l-3.45 3.45A4 4 0 0 1 8.5 10.97V13H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V14H6a.5.5 0 0 1 0-1h1.5v-2.03a4 4 0 0 1-3.05-5.814l-.95-.949-.646.647a.5.5 0 1 1-.708-.708l.647-.646L1 1.707V3.5a.5.5 0 0 1-1 0v-3zm5.49 4.856a3 3 0 1 0 5.02 3.288 3 3 0 0 0-5.02-3.288z"></path></svg>`), GenderTrans[FILENAME], [[1, 0, [[1, 173]]]]);
function GenderTrans($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GenderTrans);
  var svg = root1108();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gender-trans", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GenderTrans = hmr(GenderTrans, () => GenderTrans[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GenderTrans[HMR].source;
    set(GenderTrans[HMR].source, module.default[HMR].original);
  });
}
var GenderTrans_default = GenderTrans;
mark_module_end(GenderTrans);

// node_modules/svelte-bootstrap-icons/lib/GeoAltFill.svelte
mark_module_start();
GeoAltFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GeoAltFill.svelte";
var root1109 = add_locations(ns_template(`<svg><!><path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"></path></svg>`), GeoAltFill[FILENAME], [[1, 0, [[1, 173]]]]);
function GeoAltFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GeoAltFill);
  var svg = root1109();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-geo-alt-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GeoAltFill = hmr(GeoAltFill, () => GeoAltFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GeoAltFill[HMR].source;
    set(GeoAltFill[HMR].source, module.default[HMR].original);
  });
}
var GeoAltFill_default = GeoAltFill;
mark_module_end(GeoAltFill);

// node_modules/svelte-bootstrap-icons/lib/GeoAlt.svelte
mark_module_start();
GeoAlt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GeoAlt.svelte";
var root1110 = add_locations(ns_template(`<svg><!><path d="M12.166 8.94c-.524 1.062-1.234 2.12-1.96 3.07A31.493 31.493 0 0 1 8 14.58a31.481 31.481 0 0 1-2.206-2.57c-.726-.95-1.436-2.008-1.96-3.07C3.304 7.867 3 6.862 3 6a5 5 0 0 1 10 0c0 .862-.305 1.867-.834 2.94zM8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10z"></path><path d="M8 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm0 1a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path></svg>`), GeoAlt[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function GeoAlt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GeoAlt);
  var svg = root1110();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-geo-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GeoAlt = hmr(GeoAlt, () => GeoAlt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GeoAlt[HMR].source;
    set(GeoAlt[HMR].source, module.default[HMR].original);
  });
}
var GeoAlt_default = GeoAlt;
mark_module_end(GeoAlt);

// node_modules/svelte-bootstrap-icons/lib/GeoFill.svelte
mark_module_start();
GeoFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GeoFill.svelte";
var root1111 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4 4a4 4 0 1 1 4.5 3.969V13.5a.5.5 0 0 1-1 0V7.97A4 4 0 0 1 4 3.999zm2.493 8.574a.5.5 0 0 1-.411.575c-.712.118-1.28.295-1.655.493a1.319 1.319 0 0 0-.37.265.301.301 0 0 0-.057.09V14l.002.008a.147.147 0 0 0 .016.033.617.617 0 0 0 .145.15c.165.13.435.27.813.395.751.25 1.82.414 3.024.414s2.273-.163 3.024-.414c.378-.126.648-.265.813-.395a.619.619 0 0 0 .146-.15.148.148 0 0 0 .015-.033L12 14v-.004a.301.301 0 0 0-.057-.09 1.318 1.318 0 0 0-.37-.264c-.376-.198-.943-.375-1.655-.493a.5.5 0 1 1 .164-.986c.77.127 1.452.328 1.957.594C12.5 13 13 13.4 13 14c0 .426-.26.752-.544.977-.29.228-.68.413-1.116.558-.878.293-2.059.465-3.34.465-1.281 0-2.462-.172-3.34-.465-.436-.145-.826-.33-1.116-.558C3.26 14.752 3 14.426 3 14c0-.599.5-1 .961-1.243.505-.266 1.187-.467 1.957-.594a.5.5 0 0 1 .575.411z"></path></svg>`), GeoFill[FILENAME], [[1, 0, [[1, 169]]]]);
function GeoFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GeoFill);
  var svg = root1111();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-geo-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GeoFill = hmr(GeoFill, () => GeoFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GeoFill[HMR].source;
    set(GeoFill[HMR].source, module.default[HMR].original);
  });
}
var GeoFill_default = GeoFill;
mark_module_end(GeoFill);

// node_modules/svelte-bootstrap-icons/lib/Geo.svelte
mark_module_start();
Geo[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Geo.svelte";
var root1112 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 1a3 3 0 1 0 0 6 3 3 0 0 0 0-6zM4 4a4 4 0 1 1 4.5 3.969V13.5a.5.5 0 0 1-1 0V7.97A4 4 0 0 1 4 3.999zm2.493 8.574a.5.5 0 0 1-.411.575c-.712.118-1.28.295-1.655.493a1.319 1.319 0 0 0-.37.265.301.301 0 0 0-.057.09V14l.002.008a.147.147 0 0 0 .016.033.617.617 0 0 0 .145.15c.165.13.435.27.813.395.751.25 1.82.414 3.024.414s2.273-.163 3.024-.414c.378-.126.648-.265.813-.395a.619.619 0 0 0 .146-.15.148.148 0 0 0 .015-.033L12 14v-.004a.301.301 0 0 0-.057-.09 1.318 1.318 0 0 0-.37-.264c-.376-.198-.943-.375-1.655-.493a.5.5 0 1 1 .164-.986c.77.127 1.452.328 1.957.594C12.5 13 13 13.4 13 14c0 .426-.26.752-.544.977-.29.228-.68.413-1.116.558-.878.293-2.059.465-3.34.465-1.281 0-2.462-.172-3.34-.465-.436-.145-.826-.33-1.116-.558C3.26 14.752 3 14.426 3 14c0-.599.5-1 .961-1.243.505-.266 1.187-.467 1.957-.594a.5.5 0 0 1 .575.411z"></path></svg>`), Geo[FILENAME], [[1, 0, [[1, 164]]]]);
function Geo($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Geo);
  var svg = root1112();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-geo", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Geo = hmr(Geo, () => Geo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Geo[HMR].source;
    set(Geo[HMR].source, module.default[HMR].original);
  });
}
var Geo_default = Geo;
mark_module_end(Geo);

// node_modules/svelte-bootstrap-icons/lib/GiftFill.svelte
mark_module_start();
GiftFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GiftFill.svelte";
var root1113 = add_locations(ns_template(`<svg><!><path d="M3 2.5a2.5 2.5 0 0 1 5 0 2.5 2.5 0 0 1 5 0v.006c0 .07 0 .27-.038.494H15a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h2.038A2.968 2.968 0 0 1 3 2.506V2.5zm1.068.5H7v-.5a1.5 1.5 0 1 0-3 0c0 .085.002.274.045.43a.522.522 0 0 0 .023.07zM9 3h2.932a.56.56 0 0 0 .023-.07c.043-.156.045-.345.045-.43a1.5 1.5 0 0 0-3 0V3zm6 4v7.5a1.5 1.5 0 0 1-1.5 1.5H9V7h6zM2.5 16A1.5 1.5 0 0 1 1 14.5V7h6v9H2.5z"></path></svg>`), GiftFill[FILENAME], [[1, 0, [[1, 170]]]]);
function GiftFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GiftFill);
  var svg = root1113();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gift-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GiftFill = hmr(GiftFill, () => GiftFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GiftFill[HMR].source;
    set(GiftFill[HMR].source, module.default[HMR].original);
  });
}
var GiftFill_default = GiftFill;
mark_module_end(GiftFill);

// node_modules/svelte-bootstrap-icons/lib/Gift.svelte
mark_module_start();
Gift[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Gift.svelte";
var root1114 = add_locations(ns_template(`<svg><!><path d="M3 2.5a2.5 2.5 0 0 1 5 0 2.5 2.5 0 0 1 5 0v.006c0 .07 0 .27-.038.494H15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1v7.5a1.5 1.5 0 0 1-1.5 1.5h-11A1.5 1.5 0 0 1 1 14.5V7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h2.038A2.968 2.968 0 0 1 3 2.506V2.5zm1.068.5H7v-.5a1.5 1.5 0 1 0-3 0c0 .085.002.274.045.43a.522.522 0 0 0 .023.07zM9 3h2.932a.56.56 0 0 0 .023-.07c.043-.156.045-.345.045-.43a1.5 1.5 0 0 0-3 0V3zM1 4v2h6V4H1zm8 0v2h6V4H9zm5 3H9v8h4.5a.5.5 0 0 0 .5-.5V7zm-7 8V7H2v7.5a.5.5 0 0 0 .5.5H7z"></path></svg>`), Gift[FILENAME], [[1, 0, [[1, 165]]]]);
function Gift($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Gift);
  var svg = root1114();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gift", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gift = hmr(Gift, () => Gift[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gift[HMR].source;
    set(Gift[HMR].source, module.default[HMR].original);
  });
}
var Gift_default = Gift;
mark_module_end(Gift);

// node_modules/svelte-bootstrap-icons/lib/Git.svelte
mark_module_start();
Git[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Git.svelte";
var root1115 = add_locations(ns_template(`<svg><!><path d="M15.698 7.287 8.712.302a1.03 1.03 0 0 0-1.457 0l-1.45 1.45 1.84 1.84a1.223 1.223 0 0 1 1.55 1.56l1.773 1.774a1.224 1.224 0 0 1 1.267 2.025 1.226 1.226 0 0 1-2.002-1.334L8.58 5.963v4.353a1.226 1.226 0 1 1-1.008-.036V5.887a1.226 1.226 0 0 1-.666-1.608L5.093 2.465l-4.79 4.79a1.03 1.03 0 0 0 0 1.457l6.986 6.986a1.03 1.03 0 0 0 1.457 0l6.953-6.953a1.031 1.031 0 0 0 0-1.457"></path></svg>`), Git[FILENAME], [[1, 0, [[1, 164]]]]);
function Git($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Git);
  var svg = root1115();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-git", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git = hmr(Git, () => Git[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git[HMR].source;
    set(Git[HMR].source, module.default[HMR].original);
  });
}
var Git_default = Git;
mark_module_end(Git);

// node_modules/svelte-bootstrap-icons/lib/Github.svelte
mark_module_start();
Github[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Github.svelte";
var root1116 = add_locations(ns_template(`<svg><!><path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path></svg>`), Github[FILENAME], [[1, 0, [[1, 167]]]]);
function Github($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Github);
  var svg = root1116();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-github", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Github = hmr(Github, () => Github[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Github[HMR].source;
    set(Github[HMR].source, module.default[HMR].original);
  });
}
var Github_default = Github;
mark_module_end(Github);

// node_modules/svelte-bootstrap-icons/lib/Gitlab.svelte
mark_module_start();
Gitlab[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Gitlab.svelte";
var root1117 = add_locations(ns_template(`<svg><!><path d="m15.734 6.1-.022-.058L13.534.358a.568.568 0 0 0-.563-.356.583.583 0 0 0-.328.122.582.582 0 0 0-.193.294l-1.47 4.499H5.025l-1.47-4.5A.572.572 0 0 0 2.47.358L.289 6.04l-.022.057A4.044 4.044 0 0 0 1.61 10.77l.007.006.02.014 3.318 2.485 1.64 1.242 1 .755a.673.673 0 0 0 .814 0l1-.755 1.64-1.242 3.338-2.5.009-.007a4.046 4.046 0 0 0 1.34-4.668Z"></path></svg>`), Gitlab[FILENAME], [[1, 0, [[1, 167]]]]);
function Gitlab($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Gitlab);
  var svg = root1117();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gitlab", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gitlab = hmr(Gitlab, () => Gitlab[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gitlab[HMR].source;
    set(Gitlab[HMR].source, module.default[HMR].original);
  });
}
var Gitlab_default = Gitlab;
mark_module_end(Gitlab);

// node_modules/svelte-bootstrap-icons/lib/GlobeAmericas.svelte
mark_module_start();
GlobeAmericas[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GlobeAmericas.svelte";
var root1118 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM2.04 4.326c.325 1.329 2.532 2.54 3.717 3.19.48.263.793.434.743.484-.08.08-.162.158-.242.234-.416.396-.787.749-.758 1.266.035.634.618.824 1.214 1.017.577.188 1.168.38 1.286.983.082.417-.075.988-.22 1.52-.215.782-.406 1.48.22 1.48 1.5-.5 3.798-3.186 4-5 .138-1.243-2-2-3.5-2.5-.478-.16-.755.081-.99.284-.172.15-.322.279-.51.216-.445-.148-2.5-2-1.5-2.5.78-.39.952-.171 1.227.182.078.099.163.208.273.318.609.304.662-.132.723-.633.039-.322.081-.671.277-.867.434-.434 1.265-.791 2.028-1.12.712-.306 1.365-.587 1.579-.88A7 7 0 1 1 2.04 4.327Z"></path></svg>`), GlobeAmericas[FILENAME], [[1, 0, [[1, 175]]]]);
function GlobeAmericas($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GlobeAmericas);
  var svg = root1118();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-globe-americas", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GlobeAmericas = hmr(GlobeAmericas, () => GlobeAmericas[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GlobeAmericas[HMR].source;
    set(GlobeAmericas[HMR].source, module.default[HMR].original);
  });
}
var GlobeAmericas_default = GlobeAmericas;
mark_module_end(GlobeAmericas);

// node_modules/svelte-bootstrap-icons/lib/GlobeAsiaAustralia.svelte
mark_module_start();
GlobeAsiaAustralia[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GlobeAsiaAustralia.svelte";
var root1119 = add_locations(ns_template(`<svg><!><path d="m10.495 6.92 1.278-.619a.483.483 0 0 0 .126-.782c-.252-.244-.682-.139-.932.107-.23.226-.513.373-.816.53l-.102.054c-.338.178-.264.626.1.736a.476.476 0 0 0 .346-.027ZM7.741 9.808V9.78a.413.413 0 1 1 .783.183l-.22.443a.602.602 0 0 1-.12.167l-.193.185a.36.36 0 1 1-.5-.516l.112-.108a.453.453 0 0 0 .138-.326ZM5.672 12.5l.482.233A.386.386 0 1 0 6.32 12h-.416a.702.702 0 0 1-.419-.139l-.277-.206a.302.302 0 1 0-.298.52l.761.325Z"></path><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM1.612 10.867l.756-1.288a1 1 0 0 1 1.545-.225l1.074 1.005a.986.986 0 0 0 1.36-.011l.038-.037a.882.882 0 0 0 .26-.755c-.075-.548.37-1.033.92-1.099.728-.086 1.587-.324 1.728-.957.086-.386-.114-.83-.361-1.2-.207-.312 0-.8.374-.8.123 0 .24-.055.318-.15l.393-.474c.196-.237.491-.368.797-.403.554-.064 1.407-.277 1.583-.973.098-.391-.192-.634-.484-.88-.254-.212-.51-.426-.515-.741a6.998 6.998 0 0 1 3.425 7.692 1.015 1.015 0 0 0-.087-.063l-.316-.204a1 1 0 0 0-.977-.06l-.169.082a1 1 0 0 1-.741.051l-1.021-.329A1 1 0 0 0 11.205 9h-.165a1 1 0 0 0-.945.674l-.172.499a1 1 0 0 1-.404.514l-.802.518a1 1 0 0 0-.458.84v.455a1 1 0 0 0 1 1h.257a1 1 0 0 1 .542.16l.762.49a.998.998 0 0 0 .283.126 7.001 7.001 0 0 1-9.49-3.409Z"></path></svg>`), GlobeAsiaAustralia[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function GlobeAsiaAustralia($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GlobeAsiaAustralia);
  var svg = root1119();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-globe-asia-australia", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GlobeAsiaAustralia = hmr(GlobeAsiaAustralia, () => GlobeAsiaAustralia[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GlobeAsiaAustralia[HMR].source;
    set(GlobeAsiaAustralia[HMR].source, module.default[HMR].original);
  });
}
var GlobeAsiaAustralia_default = GlobeAsiaAustralia;
mark_module_end(GlobeAsiaAustralia);

// node_modules/svelte-bootstrap-icons/lib/GlobeCentralSouthAsia.svelte
mark_module_start();
GlobeCentralSouthAsia[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GlobeCentralSouthAsia.svelte";
var root1120 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM4.882 1.731a.482.482 0 0 0 .14.291.487.487 0 0 1-.126.78l-.291.146a.721.721 0 0 0-.188.135l-.48.48a1 1 0 0 1-1.023.242l-.02-.007a.996.996 0 0 0-.462-.04 7.03 7.03 0 0 1 2.45-2.027Zm-3 9.674.86-.216a1 1 0 0 0 .758-.97v-.184a1 1 0 0 1 .445-.832l.04-.026a1 1 0 0 0 .152-1.54L3.121 6.621a.414.414 0 0 1 .542-.624l1.09.818a.5.5 0 0 0 .523.047.5.5 0 0 1 .724.447v.455a.78.78 0 0 0 .131.433l.795 1.192a1 1 0 0 1 .116.238l.73 2.19a1 1 0 0 0 .949.683h.058a1 1 0 0 0 .949-.684l.73-2.189a1 1 0 0 1 .116-.238l.791-1.187A.454.454 0 0 1 11.743 8c.16 0 .306.084.392.218.557.875 1.63 2.282 2.365 2.282a.61.61 0 0 0 .04-.001 7.003 7.003 0 0 1-12.658.905Z"></path></svg>`), GlobeCentralSouthAsia[FILENAME], [[1, 0, [[1, 185]]]]);
function GlobeCentralSouthAsia($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GlobeCentralSouthAsia);
  var svg = root1120();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-globe-central-south-asia", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GlobeCentralSouthAsia = hmr(GlobeCentralSouthAsia, () => GlobeCentralSouthAsia[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GlobeCentralSouthAsia[HMR].source;
    set(GlobeCentralSouthAsia[HMR].source, module.default[HMR].original);
  });
}
var GlobeCentralSouthAsia_default = GlobeCentralSouthAsia;
mark_module_end(GlobeCentralSouthAsia);

// node_modules/svelte-bootstrap-icons/lib/GlobeEuropeAfrica.svelte
mark_module_start();
GlobeEuropeAfrica[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GlobeEuropeAfrica.svelte";
var root1121 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM3.668 2.501l-.288.646a.847.847 0 0 0 1.479.815l.245-.368a.809.809 0 0 1 1.034-.275.809.809 0 0 0 .724 0l.261-.13a1 1 0 0 1 .775-.05l.984.34c.078.028.16.044.243.054.784.093.855.377.694.801-.155.41-.616.617-1.035.487l-.01-.003C8.274 4.663 7.748 4.5 6 4.5 4.8 4.5 3.5 5.62 3.5 7c0 1.96.826 2.166 1.696 2.382.46.115.935.233 1.304.618.449.467.393 1.181.339 1.877C6.755 12.96 6.674 14 8.5 14c1.75 0 3-3.5 3-4.5 0-.262.208-.468.444-.7.396-.392.87-.86.556-1.8-.097-.291-.396-.568-.641-.756-.174-.133-.207-.396-.052-.551a.333.333 0 0 1 .42-.042l1.085.724c.11.072.255.058.348-.035.15-.15.415-.083.489.117.16.43.445 1.05.849 1.357L15 8A7 7 0 1 1 3.668 2.501Z"></path></svg>`), GlobeEuropeAfrica[FILENAME], [[1, 0, [[1, 180]]]]);
function GlobeEuropeAfrica($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GlobeEuropeAfrica);
  var svg = root1121();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-globe-europe-africa", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GlobeEuropeAfrica = hmr(GlobeEuropeAfrica, () => GlobeEuropeAfrica[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GlobeEuropeAfrica[HMR].source;
    set(GlobeEuropeAfrica[HMR].source, module.default[HMR].original);
  });
}
var GlobeEuropeAfrica_default = GlobeEuropeAfrica;
mark_module_end(GlobeEuropeAfrica);

// node_modules/svelte-bootstrap-icons/lib/Globe.svelte
mark_module_start();
Globe[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Globe.svelte";
var root1122 = add_locations(ns_template(`<svg><!><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-3.5a6.959 6.959 0 0 0-.656-2.5H12.18c.174.782.282 1.623.312 2.5h2.49zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z"></path></svg>`), Globe[FILENAME], [[1, 0, [[1, 166]]]]);
function Globe($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Globe);
  var svg = root1122();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-globe", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Globe = hmr(Globe, () => Globe[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Globe[HMR].source;
    set(Globe[HMR].source, module.default[HMR].original);
  });
}
var Globe_default = Globe;
mark_module_end(Globe);

// node_modules/svelte-bootstrap-icons/lib/Globe2.svelte
mark_module_start();
Globe2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Globe2.svelte";
var root1123 = add_locations(ns_template(`<svg><!><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855-.143.268-.276.56-.395.872.705.157 1.472.257 2.282.287V1.077zM4.249 3.539c.142-.384.304-.744.481-1.078a6.7 6.7 0 0 1 .597-.933A7.01 7.01 0 0 0 3.051 3.05c.362.184.763.349 1.198.49zM3.509 7.5c.036-1.07.188-2.087.436-3.008a9.124 9.124 0 0 1-1.565-.667A6.964 6.964 0 0 0 1.018 7.5h2.49zm1.4-2.741a12.344 12.344 0 0 0-.4 2.741H7.5V5.091c-.91-.03-1.783-.145-2.591-.332zM8.5 5.09V7.5h2.99a12.342 12.342 0 0 0-.399-2.741c-.808.187-1.681.301-2.591.332zM4.51 8.5c.035.987.176 1.914.399 2.741A13.612 13.612 0 0 1 7.5 10.91V8.5H4.51zm3.99 0v2.409c.91.03 1.783.145 2.591.332.223-.827.364-1.754.4-2.741H8.5zm-3.282 3.696c.12.312.252.604.395.872.552 1.035 1.218 1.65 1.887 1.855V11.91c-.81.03-1.577.13-2.282.287zm.11 2.276a6.696 6.696 0 0 1-.598-.933 8.853 8.853 0 0 1-.481-1.079 8.38 8.38 0 0 0-1.198.49 7.01 7.01 0 0 0 2.276 1.522zm-1.383-2.964A13.36 13.36 0 0 1 3.508 8.5h-2.49a6.963 6.963 0 0 0 1.362 3.675c.47-.258.995-.482 1.565-.667zm6.728 2.964a7.009 7.009 0 0 0 2.275-1.521 8.376 8.376 0 0 0-1.197-.49 8.853 8.853 0 0 1-.481 1.078 6.688 6.688 0 0 1-.597.933zM8.5 11.909v3.014c.67-.204 1.335-.82 1.887-1.855.143-.268.276-.56.395-.872A12.63 12.63 0 0 0 8.5 11.91zm3.555-.401c.57.185 1.095.409 1.565.667A6.963 6.963 0 0 0 14.982 8.5h-2.49a13.36 13.36 0 0 1-.437 3.008zM14.982 7.5a6.963 6.963 0 0 0-1.362-3.675c-.47.258-.995.482-1.565.667.248.92.4 1.938.437 3.008h2.49zM11.27 2.461c.177.334.339.694.482 1.078a8.368 8.368 0 0 0 1.196-.49 7.01 7.01 0 0 0-2.275-1.52c.218.283.418.597.597.932zm-.488 1.343a7.765 7.765 0 0 0-.395-.872C9.835 1.897 9.17 1.282 8.5 1.077V4.09c.81-.03 1.577-.13 2.282-.287z"></path></svg>`), Globe2[FILENAME], [[1, 0, [[1, 167]]]]);
function Globe2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Globe2);
  var svg = root1123();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-globe2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Globe2 = hmr(Globe2, () => Globe2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Globe2[HMR].source;
    set(Globe2[HMR].source, module.default[HMR].original);
  });
}
var Globe2_default = Globe2;
mark_module_end(Globe2);

// node_modules/svelte-bootstrap-icons/lib/GooglePlay.svelte
mark_module_start();
GooglePlay[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GooglePlay.svelte";
var root1124 = add_locations(ns_template(`<svg><!><path d="M14.222 9.374c1.037-.61 1.037-2.137 0-2.748L11.528 5.04 8.32 8l3.207 2.96 2.694-1.586Zm-3.595 2.116L7.583 8.68 1.03 14.73c.201 1.029 1.36 1.61 2.303 1.055l7.294-4.295ZM1 13.396V2.603L6.846 8 1 13.396ZM1.03 1.27l6.553 6.05 3.044-2.81L3.333.215C2.39-.341 1.231.24 1.03 1.27Z"></path></svg>`), GooglePlay[FILENAME], [[1, 0, [[1, 172]]]]);
function GooglePlay($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GooglePlay);
  var svg = root1124();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-google-play", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GooglePlay = hmr(GooglePlay, () => GooglePlay[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GooglePlay[HMR].source;
    set(GooglePlay[HMR].source, module.default[HMR].original);
  });
}
var GooglePlay_default = GooglePlay;
mark_module_end(GooglePlay);

// node_modules/svelte-bootstrap-icons/lib/Google.svelte
mark_module_start();
Google[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Google.svelte";
var root1125 = add_locations(ns_template(`<svg><!><path d="M15.545 6.558a9.42 9.42 0 0 1 .139 1.626c0 2.434-.87 4.492-2.384 5.885h.002C11.978 15.292 10.158 16 8 16A8 8 0 1 1 8 0a7.689 7.689 0 0 1 5.352 2.082l-2.284 2.284A4.347 4.347 0 0 0 8 3.166c-2.087 0-3.86 1.408-4.492 3.304a4.792 4.792 0 0 0 0 3.063h.003c.635 1.893 2.405 3.301 4.492 3.301 1.078 0 2.004-.276 2.722-.764h-.003a3.702 3.702 0 0 0 1.599-2.431H8v-3.08h7.545z"></path></svg>`), Google[FILENAME], [[1, 0, [[1, 167]]]]);
function Google($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Google);
  var svg = root1125();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-google", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Google = hmr(Google, () => Google[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Google[HMR].source;
    set(Google[HMR].source, module.default[HMR].original);
  });
}
var Google_default = Google;
mark_module_end(Google);

// node_modules/svelte-bootstrap-icons/lib/GpuCard.svelte
mark_module_start();
GpuCard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GpuCard.svelte";
var root1126 = add_locations(ns_template(`<svg><!><path d="M4 8a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Zm7.5-1.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3Z"></path><path d="M0 1.5A.5.5 0 0 1 .5 1h1a.5.5 0 0 1 .5.5V4h13.5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5H2v2.5a.5.5 0 0 1-1 0V2H.5a.5.5 0 0 1-.5-.5Zm5.5 4a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5ZM9 8a2.5 2.5 0 1 0 5 0 2.5 2.5 0 0 0-5 0Z"></path><path d="M3 12.5h3.5v1a.5.5 0 0 1-.5.5H3.5a.5.5 0 0 1-.5-.5v-1Zm4 1v-1h4v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5Z"></path></svg>`), GpuCard[FILENAME], [
  [
    1,
    0,
    [[1, 169], [2, 2], [3, 2]]
  ]
]);
function GpuCard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GpuCard);
  var svg = root1126();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-gpu-card", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GpuCard = hmr(GpuCard, () => GpuCard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GpuCard[HMR].source;
    set(GpuCard[HMR].source, module.default[HMR].original);
  });
}
var GpuCard_default = GpuCard;
mark_module_end(GpuCard);

// node_modules/svelte-bootstrap-icons/lib/GraphDownArrow.svelte
mark_module_start();
GraphDownArrow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GraphDownArrow.svelte";
var root1127 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 0h1v15h15v1H0V0Zm10 11.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 0-1 0v2.6l-3.613-4.417a.5.5 0 0 0-.74-.037L7.06 8.233 3.404 3.206a.5.5 0 0 0-.808.588l4 5.5a.5.5 0 0 0 .758.06l2.609-2.61L13.445 11H10.5a.5.5 0 0 0-.5.5Z"></path></svg>`), GraphDownArrow[FILENAME], [[1, 0, [[1, 177]]]]);
function GraphDownArrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GraphDownArrow);
  var svg = root1127();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-graph-down-arrow", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GraphDownArrow = hmr(GraphDownArrow, () => GraphDownArrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GraphDownArrow[HMR].source;
    set(GraphDownArrow[HMR].source, module.default[HMR].original);
  });
}
var GraphDownArrow_default = GraphDownArrow;
mark_module_end(GraphDownArrow);

// node_modules/svelte-bootstrap-icons/lib/GraphDown.svelte
mark_module_start();
GraphDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GraphDown.svelte";
var root1128 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 0h1v15h15v1H0V0Zm14.817 11.887a.5.5 0 0 0 .07-.704l-4.5-5.5a.5.5 0 0 0-.74-.037L7.06 8.233 3.404 3.206a.5.5 0 0 0-.808.588l4 5.5a.5.5 0 0 0 .758.06l2.609-2.61 4.15 5.073a.5.5 0 0 0 .704.07Z"></path></svg>`), GraphDown[FILENAME], [[1, 0, [[1, 171]]]]);
function GraphDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GraphDown);
  var svg = root1128();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-graph-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GraphDown = hmr(GraphDown, () => GraphDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GraphDown[HMR].source;
    set(GraphDown[HMR].source, module.default[HMR].original);
  });
}
var GraphDown_default = GraphDown;
mark_module_end(GraphDown);

// node_modules/svelte-bootstrap-icons/lib/GraphUpArrow.svelte
mark_module_start();
GraphUpArrow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GraphUpArrow.svelte";
var root1129 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 0h1v15h15v1H0V0Zm10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V4.9l-3.613 4.417a.5.5 0 0 1-.74.037L7.06 6.767l-3.656 5.027a.5.5 0 0 1-.808-.588l4-5.5a.5.5 0 0 1 .758-.06l2.609 2.61L13.445 4H10.5a.5.5 0 0 1-.5-.5Z"></path></svg>`), GraphUpArrow[FILENAME], [[1, 0, [[1, 175]]]]);
function GraphUpArrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GraphUpArrow);
  var svg = root1129();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-graph-up-arrow", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GraphUpArrow = hmr(GraphUpArrow, () => GraphUpArrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GraphUpArrow[HMR].source;
    set(GraphUpArrow[HMR].source, module.default[HMR].original);
  });
}
var GraphUpArrow_default = GraphUpArrow;
mark_module_end(GraphUpArrow);

// node_modules/svelte-bootstrap-icons/lib/GraphUp.svelte
mark_module_start();
GraphUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GraphUp.svelte";
var root1130 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 0h1v15h15v1H0V0Zm14.817 3.113a.5.5 0 0 1 .07.704l-4.5 5.5a.5.5 0 0 1-.74.037L7.06 6.767l-3.656 5.027a.5.5 0 0 1-.808-.588l4-5.5a.5.5 0 0 1 .758-.06l2.609 2.61 4.15-5.073a.5.5 0 0 1 .704-.07Z"></path></svg>`), GraphUp[FILENAME], [[1, 0, [[1, 169]]]]);
function GraphUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GraphUp);
  var svg = root1130();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-graph-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GraphUp = hmr(GraphUp, () => GraphUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GraphUp[HMR].source;
    set(GraphUp[HMR].source, module.default[HMR].original);
  });
}
var GraphUp_default = GraphUp;
mark_module_end(GraphUp);

// node_modules/svelte-bootstrap-icons/lib/Grid1x2Fill.svelte
mark_module_start();
Grid1x2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Grid1x2Fill.svelte";
var root1131 = add_locations(ns_template(`<svg><!><path d="M0 1a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V1zm9 0a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1h-5a1 1 0 0 1-1-1V1zm0 9a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1h-5a1 1 0 0 1-1-1v-5z"></path></svg>`), Grid1x2Fill[FILENAME], [[1, 0, [[1, 174]]]]);
function Grid1x2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Grid1x2Fill);
  var svg = root1131();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid-1x2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid1x2Fill = hmr(Grid1x2Fill, () => Grid1x2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid1x2Fill[HMR].source;
    set(Grid1x2Fill[HMR].source, module.default[HMR].original);
  });
}
var Grid1x2Fill_default = Grid1x2Fill;
mark_module_end(Grid1x2Fill);

// node_modules/svelte-bootstrap-icons/lib/Grid1x2.svelte
mark_module_start();
Grid1x2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Grid1x2.svelte";
var root1132 = add_locations(ns_template(`<svg><!><path d="M6 1H1v14h5V1zm9 0h-5v5h5V1zm0 9v5h-5v-5h5zM0 1a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V1zm9 0a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1h-5a1 1 0 0 1-1-1V1zm1 8a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1h-5z"></path></svg>`), Grid1x2[FILENAME], [[1, 0, [[1, 169]]]]);
function Grid1x2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Grid1x2);
  var svg = root1132();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid-1x2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid1x2 = hmr(Grid1x2, () => Grid1x2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid1x2[HMR].source;
    set(Grid1x2[HMR].source, module.default[HMR].original);
  });
}
var Grid1x2_default = Grid1x2;
mark_module_end(Grid1x2);

// node_modules/svelte-bootstrap-icons/lib/Grid3x2GapFill.svelte
mark_module_start();
Grid3x2GapFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Grid3x2GapFill.svelte";
var root1133 = add_locations(ns_template(`<svg><!><path d="M1 4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V4zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V4zM1 9a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V9zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V9zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V9z"></path></svg>`), Grid3x2GapFill[FILENAME], [[1, 0, [[1, 178]]]]);
function Grid3x2GapFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Grid3x2GapFill);
  var svg = root1133();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid-3x2-gap-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid3x2GapFill = hmr(Grid3x2GapFill, () => Grid3x2GapFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid3x2GapFill[HMR].source;
    set(Grid3x2GapFill[HMR].source, module.default[HMR].original);
  });
}
var Grid3x2GapFill_default = Grid3x2GapFill;
mark_module_end(Grid3x2GapFill);

// node_modules/svelte-bootstrap-icons/lib/Grid3x2Gap.svelte
mark_module_start();
Grid3x2Gap[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Grid3x2Gap.svelte";
var root1134 = add_locations(ns_template(`<svg><!><path d="M4 4v2H2V4h2zm1 7V9a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V4a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm5 5V9a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V4a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zM9 4v2H7V4h2zm5 0h-2v2h2V4zM4 9v2H2V9h2zm5 0v2H7V9h2zm5 0v2h-2V9h2zm-3-5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V4zm1 4a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-2z"></path></svg>`), Grid3x2Gap[FILENAME], [[1, 0, [[1, 173]]]]);
function Grid3x2Gap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Grid3x2Gap);
  var svg = root1134();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid-3x2-gap", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid3x2Gap = hmr(Grid3x2Gap, () => Grid3x2Gap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid3x2Gap[HMR].source;
    set(Grid3x2Gap[HMR].source, module.default[HMR].original);
  });
}
var Grid3x2Gap_default = Grid3x2Gap;
mark_module_end(Grid3x2Gap);

// node_modules/svelte-bootstrap-icons/lib/Grid3x2.svelte
mark_module_start();
Grid3x2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Grid3x2.svelte";
var root1135 = add_locations(ns_template(`<svg><!><path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v8a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5v-8zM1.5 3a.5.5 0 0 0-.5.5V7h4V3H1.5zM5 8H1v3.5a.5.5 0 0 0 .5.5H5V8zm1 0v4h4V8H6zm4-1V3H6v4h4zm1 1v4h3.5a.5.5 0 0 0 .5-.5V8h-4zm0-1h4V3.5a.5.5 0 0 0-.5-.5H11v4z"></path></svg>`), Grid3x2[FILENAME], [[1, 0, [[1, 169]]]]);
function Grid3x2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Grid3x2);
  var svg = root1135();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid-3x2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid3x2 = hmr(Grid3x2, () => Grid3x2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid3x2[HMR].source;
    set(Grid3x2[HMR].source, module.default[HMR].original);
  });
}
var Grid3x2_default = Grid3x2;
mark_module_end(Grid3x2);

// node_modules/svelte-bootstrap-icons/lib/Grid3x3GapFill.svelte
mark_module_start();
Grid3x3GapFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Grid3x3GapFill.svelte";
var root1136 = add_locations(ns_template(`<svg><!><path d="M1 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2zM1 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7zM1 12a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2z"></path></svg>`), Grid3x3GapFill[FILENAME], [[1, 0, [[1, 178]]]]);
function Grid3x3GapFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Grid3x3GapFill);
  var svg = root1136();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid-3x3-gap-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid3x3GapFill = hmr(Grid3x3GapFill, () => Grid3x3GapFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid3x3GapFill[HMR].source;
    set(Grid3x3GapFill[HMR].source, module.default[HMR].original);
  });
}
var Grid3x3GapFill_default = Grid3x3GapFill;
mark_module_end(Grid3x3GapFill);

// node_modules/svelte-bootstrap-icons/lib/Grid3x3Gap.svelte
mark_module_start();
Grid3x3Gap[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Grid3x3Gap.svelte";
var root1137 = add_locations(ns_template(`<svg><!><path d="M4 2v2H2V2h2zm1 12v-2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V7a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm5 10v-2a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V7a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V2a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zM9 2v2H7V2h2zm5 0v2h-2V2h2zM4 7v2H2V7h2zm5 0v2H7V7h2zm5 0h-2v2h2V7zM4 12v2H2v-2h2zm5 0v2H7v-2h2zm5 0v2h-2v-2h2zM12 1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1h-2zm-1 6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7zm1 4a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-2z"></path></svg>`), Grid3x3Gap[FILENAME], [[1, 0, [[1, 173]]]]);
function Grid3x3Gap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Grid3x3Gap);
  var svg = root1137();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid-3x3-gap", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid3x3Gap = hmr(Grid3x3Gap, () => Grid3x3Gap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid3x3Gap[HMR].source;
    set(Grid3x3Gap[HMR].source, module.default[HMR].original);
  });
}
var Grid3x3Gap_default = Grid3x3Gap;
mark_module_end(Grid3x3Gap);

// node_modules/svelte-bootstrap-icons/lib/Grid3x3.svelte
mark_module_start();
Grid3x3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Grid3x3.svelte";
var root1138 = add_locations(ns_template(`<svg><!><path d="M0 1.5A1.5 1.5 0 0 1 1.5 0h13A1.5 1.5 0 0 1 16 1.5v13a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 14.5v-13zM1.5 1a.5.5 0 0 0-.5.5V5h4V1H1.5zM5 6H1v4h4V6zm1 4h4V6H6v4zm-1 1H1v3.5a.5.5 0 0 0 .5.5H5v-4zm1 0v4h4v-4H6zm5 0v4h3.5a.5.5 0 0 0 .5-.5V11h-4zm0-1h4V6h-4v4zm0-5h4V1.5a.5.5 0 0 0-.5-.5H11v4zm-1 0V1H6v4h4z"></path></svg>`), Grid3x3[FILENAME], [[1, 0, [[1, 169]]]]);
function Grid3x3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Grid3x3);
  var svg = root1138();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid-3x3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid3x3 = hmr(Grid3x3, () => Grid3x3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid3x3[HMR].source;
    set(Grid3x3[HMR].source, module.default[HMR].original);
  });
}
var Grid3x3_default = Grid3x3;
mark_module_end(Grid3x3);

// node_modules/svelte-bootstrap-icons/lib/GridFill.svelte
mark_module_start();
GridFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GridFill.svelte";
var root1139 = add_locations(ns_template(`<svg><!><path d="M1 2.5A1.5 1.5 0 0 1 2.5 1h3A1.5 1.5 0 0 1 7 2.5v3A1.5 1.5 0 0 1 5.5 7h-3A1.5 1.5 0 0 1 1 5.5v-3zm8 0A1.5 1.5 0 0 1 10.5 1h3A1.5 1.5 0 0 1 15 2.5v3A1.5 1.5 0 0 1 13.5 7h-3A1.5 1.5 0 0 1 9 5.5v-3zm-8 8A1.5 1.5 0 0 1 2.5 9h3A1.5 1.5 0 0 1 7 10.5v3A1.5 1.5 0 0 1 5.5 15h-3A1.5 1.5 0 0 1 1 13.5v-3zm8 0A1.5 1.5 0 0 1 10.5 9h3a1.5 1.5 0 0 1 1.5 1.5v3a1.5 1.5 0 0 1-1.5 1.5h-3A1.5 1.5 0 0 1 9 13.5v-3z"></path></svg>`), GridFill[FILENAME], [[1, 0, [[1, 170]]]]);
function GridFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GridFill);
  var svg = root1139();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GridFill = hmr(GridFill, () => GridFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GridFill[HMR].source;
    set(GridFill[HMR].source, module.default[HMR].original);
  });
}
var GridFill_default = GridFill;
mark_module_end(GridFill);

// node_modules/svelte-bootstrap-icons/lib/Grid.svelte
mark_module_start();
Grid[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Grid.svelte";
var root1140 = add_locations(ns_template(`<svg><!><path d="M1 2.5A1.5 1.5 0 0 1 2.5 1h3A1.5 1.5 0 0 1 7 2.5v3A1.5 1.5 0 0 1 5.5 7h-3A1.5 1.5 0 0 1 1 5.5v-3zM2.5 2a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3zm6.5.5A1.5 1.5 0 0 1 10.5 1h3A1.5 1.5 0 0 1 15 2.5v3A1.5 1.5 0 0 1 13.5 7h-3A1.5 1.5 0 0 1 9 5.5v-3zm1.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3zM1 10.5A1.5 1.5 0 0 1 2.5 9h3A1.5 1.5 0 0 1 7 10.5v3A1.5 1.5 0 0 1 5.5 15h-3A1.5 1.5 0 0 1 1 13.5v-3zm1.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3zm6.5.5A1.5 1.5 0 0 1 10.5 9h3a1.5 1.5 0 0 1 1.5 1.5v3a1.5 1.5 0 0 1-1.5 1.5h-3A1.5 1.5 0 0 1 9 13.5v-3zm1.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3z"></path></svg>`), Grid[FILENAME], [[1, 0, [[1, 165]]]]);
function Grid($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Grid);
  var svg = root1140();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grid", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid = hmr(Grid, () => Grid[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid[HMR].source;
    set(Grid[HMR].source, module.default[HMR].original);
  });
}
var Grid_default = Grid;
mark_module_end(Grid);

// node_modules/svelte-bootstrap-icons/lib/GripHorizontal.svelte
mark_module_start();
GripHorizontal[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GripHorizontal.svelte";
var root1141 = add_locations(ns_template(`<svg><!><path d="M2 8a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm0-3a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm3 3a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm0-3a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm3 3a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm0-3a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm3 3a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm0-3a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm3 3a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm0-3a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path></svg>`), GripHorizontal[FILENAME], [[1, 0, [[1, 176]]]]);
function GripHorizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GripHorizontal);
  var svg = root1141();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grip-horizontal", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GripHorizontal = hmr(GripHorizontal, () => GripHorizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GripHorizontal[HMR].source;
    set(GripHorizontal[HMR].source, module.default[HMR].original);
  });
}
var GripHorizontal_default = GripHorizontal;
mark_module_end(GripHorizontal);

// node_modules/svelte-bootstrap-icons/lib/GripVertical.svelte
mark_module_start();
GripVertical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/GripVertical.svelte";
var root1142 = add_locations(ns_template(`<svg><!><path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), GripVertical[FILENAME], [[1, 0, [[1, 174]]]]);
function GripVertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, GripVertical);
  var svg = root1142();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-grip-vertical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GripVertical = hmr(GripVertical, () => GripVertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GripVertical[HMR].source;
    set(GripVertical[HMR].source, module.default[HMR].original);
  });
}
var GripVertical_default = GripVertical;
mark_module_end(GripVertical);

// node_modules/svelte-bootstrap-icons/lib/HCircleFill.svelte
mark_module_start();
HCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HCircleFill.svelte";
var root1143 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-5-3.998H9.67v3.322H6.33V4.002H5V12h1.33V8.455h3.34V12H11V4.002Z"></path></svg>`), HCircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function HCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HCircleFill);
  var svg = root1143();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-h-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HCircleFill = hmr(HCircleFill, () => HCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HCircleFill[HMR].source;
    set(HCircleFill[HMR].source, module.default[HMR].original);
  });
}
var HCircleFill_default = HCircleFill;
mark_module_end(HCircleFill);

// node_modules/svelte-bootstrap-icons/lib/HCircle.svelte
mark_module_start();
HCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HCircle.svelte";
var root1144 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-5-3.998V12H9.67V8.455H6.33V12H5V4.002h1.33v3.322h3.34V4.002H11Z"></path></svg>`), HCircle[FILENAME], [[1, 0, [[1, 169]]]]);
function HCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HCircle);
  var svg = root1144();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-h-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HCircle = hmr(HCircle, () => HCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HCircle[HMR].source;
    set(HCircle[HMR].source, module.default[HMR].original);
  });
}
var HCircle_default = HCircle;
mark_module_end(HCircle);

// node_modules/svelte-bootstrap-icons/lib/HSquareFill.svelte
mark_module_start();
HSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HSquareFill.svelte";
var root1145 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm9 4.002V12H9.67V8.455H6.33V12H5V4.002h1.33v3.322h3.34V4.002H11Z"></path></svg>`), HSquareFill[FILENAME], [[1, 0, [[1, 174]]]]);
function HSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HSquareFill);
  var svg = root1145();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-h-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HSquareFill = hmr(HSquareFill, () => HSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HSquareFill[HMR].source;
    set(HSquareFill[HMR].source, module.default[HMR].original);
  });
}
var HSquareFill_default = HSquareFill;
mark_module_end(HSquareFill);

// node_modules/svelte-bootstrap-icons/lib/HSquare.svelte
mark_module_start();
HSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HSquare.svelte";
var root1146 = add_locations(ns_template(`<svg><!><path d="M11 4.002V12H9.67V8.455H6.33V12H5V4.002h1.33v3.322h3.34V4.002H11Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), HSquare[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function HSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HSquare);
  var svg = root1146();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-h-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HSquare = hmr(HSquare, () => HSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HSquare[HMR].source;
    set(HSquare[HMR].source, module.default[HMR].original);
  });
}
var HSquare_default = HSquare;
mark_module_end(HSquare);

// node_modules/svelte-bootstrap-icons/lib/Hammer.svelte
mark_module_start();
Hammer[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hammer.svelte";
var root1147 = add_locations(ns_template(`<svg><!><path d="M9.972 2.508a.5.5 0 0 0-.16-.556l-.178-.129a5.009 5.009 0 0 0-2.076-.783C6.215.862 4.504 1.229 2.84 3.133H1.786a.5.5 0 0 0-.354.147L.146 4.567a.5.5 0 0 0 0 .706l2.571 2.579a.5.5 0 0 0 .708 0l1.286-1.29a.5.5 0 0 0 .146-.353V5.57l8.387 8.873A.5.5 0 0 0 14 14.5l1.5-1.5a.5.5 0 0 0 .017-.689l-9.129-8.63c.747-.456 1.772-.839 3.112-.839a.5.5 0 0 0 .472-.334z"></path></svg>`), Hammer[FILENAME], [[1, 0, [[1, 167]]]]);
function Hammer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hammer);
  var svg = root1147();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hammer", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hammer = hmr(Hammer, () => Hammer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hammer[HMR].source;
    set(Hammer[HMR].source, module.default[HMR].original);
  });
}
var Hammer_default = Hammer;
mark_module_end(Hammer);

// node_modules/svelte-bootstrap-icons/lib/HandIndexFill.svelte
mark_module_start();
HandIndexFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HandIndexFill.svelte";
var root1148 = add_locations(ns_template(`<svg><!><path d="M8.5 4.466V1.75a1.75 1.75 0 1 0-3.5 0v5.34l-1.2.24a1.5 1.5 0 0 0-1.196 1.636l.345 3.106a2.5 2.5 0 0 0 .405 1.11l1.433 2.15A1.5 1.5 0 0 0 6.035 16h6.385a1.5 1.5 0 0 0 1.302-.756l1.395-2.441a3.5 3.5 0 0 0 .444-1.389l.271-2.715a2 2 0 0 0-1.99-2.199h-.581a5.114 5.114 0 0 0-.195-.248c-.191-.229-.51-.568-.88-.716-.364-.146-.846-.132-1.158-.108l-.132.012a1.26 1.26 0 0 0-.56-.642 2.632 2.632 0 0 0-.738-.288c-.31-.062-.739-.058-1.05-.046l-.048.002z"></path></svg>`), HandIndexFill[FILENAME], [[1, 0, [[1, 176]]]]);
function HandIndexFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HandIndexFill);
  var svg = root1148();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hand-index-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HandIndexFill = hmr(HandIndexFill, () => HandIndexFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HandIndexFill[HMR].source;
    set(HandIndexFill[HMR].source, module.default[HMR].original);
  });
}
var HandIndexFill_default = HandIndexFill;
mark_module_end(HandIndexFill);

// node_modules/svelte-bootstrap-icons/lib/HandIndexThumbFill.svelte
mark_module_start();
HandIndexThumbFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HandIndexThumbFill.svelte";
var root1149 = add_locations(ns_template(`<svg><!><path d="M8.5 1.75v2.716l.047-.002c.312-.012.742-.016 1.051.046.28.056.543.18.738.288.273.152.456.385.56.642l.132-.012c.312-.024.794-.038 1.158.108.37.148.689.487.88.716.075.09.141.175.195.248h.582a2 2 0 0 1 1.99 2.199l-.272 2.715a3.5 3.5 0 0 1-.444 1.389l-1.395 2.441A1.5 1.5 0 0 1 12.42 16H6.118a1.5 1.5 0 0 1-1.342-.83l-1.215-2.43L1.07 8.589a1.517 1.517 0 0 1 2.373-1.852L5 8.293V1.75a1.75 1.75 0 0 1 3.5 0z"></path></svg>`), HandIndexThumbFill[FILENAME], [[1, 0, [[1, 182]]]]);
function HandIndexThumbFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HandIndexThumbFill);
  var svg = root1149();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hand-index-thumb-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HandIndexThumbFill = hmr(HandIndexThumbFill, () => HandIndexThumbFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HandIndexThumbFill[HMR].source;
    set(HandIndexThumbFill[HMR].source, module.default[HMR].original);
  });
}
var HandIndexThumbFill_default = HandIndexThumbFill;
mark_module_end(HandIndexThumbFill);

// node_modules/svelte-bootstrap-icons/lib/HandIndexThumb.svelte
mark_module_start();
HandIndexThumb[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HandIndexThumb.svelte";
var root1150 = add_locations(ns_template(`<svg><!><path d="M6.75 1a.75.75 0 0 1 .75.75V8a.5.5 0 0 0 1 0V5.467l.086-.004c.317-.012.637-.008.816.027.134.027.294.096.448.182.077.042.15.147.15.314V8a.5.5 0 0 0 1 0V6.435l.106-.01c.316-.024.584-.01.708.04.118.046.3.207.486.43.081.096.15.19.2.259V8.5a.5.5 0 1 0 1 0v-1h.342a1 1 0 0 1 .995 1.1l-.271 2.715a2.5 2.5 0 0 1-.317.991l-1.395 2.442a.5.5 0 0 1-.434.252H6.118a.5.5 0 0 1-.447-.276l-1.232-2.465-2.512-4.185a.517.517 0 0 1 .809-.631l2.41 2.41A.5.5 0 0 0 6 9.5V1.75A.75.75 0 0 1 6.75 1zM8.5 4.466V1.75a1.75 1.75 0 1 0-3.5 0v6.543L3.443 6.736A1.517 1.517 0 0 0 1.07 8.588l2.491 4.153 1.215 2.43A1.5 1.5 0 0 0 6.118 16h6.302a1.5 1.5 0 0 0 1.302-.756l1.395-2.441a3.5 3.5 0 0 0 .444-1.389l.271-2.715a2 2 0 0 0-1.99-2.199h-.581a5.114 5.114 0 0 0-.195-.248c-.191-.229-.51-.568-.88-.716-.364-.146-.846-.132-1.158-.108l-.132.012a1.26 1.26 0 0 0-.56-.642 2.632 2.632 0 0 0-.738-.288c-.31-.062-.739-.058-1.05-.046l-.048.002zm2.094 2.025z"></path></svg>`), HandIndexThumb[FILENAME], [[1, 0, [[1, 177]]]]);
function HandIndexThumb($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HandIndexThumb);
  var svg = root1150();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hand-index-thumb", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HandIndexThumb = hmr(HandIndexThumb, () => HandIndexThumb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HandIndexThumb[HMR].source;
    set(HandIndexThumb[HMR].source, module.default[HMR].original);
  });
}
var HandIndexThumb_default = HandIndexThumb;
mark_module_end(HandIndexThumb);

// node_modules/svelte-bootstrap-icons/lib/HandIndex.svelte
mark_module_start();
HandIndex[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HandIndex.svelte";
var root1151 = add_locations(ns_template(`<svg><!><path d="M6.75 1a.75.75 0 0 1 .75.75V8a.5.5 0 0 0 1 0V5.467l.086-.004c.317-.012.637-.008.816.027.134.027.294.096.448.182.077.042.15.147.15.314V8a.5.5 0 1 0 1 0V6.435a4.9 4.9 0 0 1 .106-.01c.316-.024.584-.01.708.04.118.046.3.207.486.43.081.096.15.19.2.259V8.5a.5.5 0 0 0 1 0v-1h.342a1 1 0 0 1 .995 1.1l-.271 2.715a2.5 2.5 0 0 1-.317.991l-1.395 2.442a.5.5 0 0 1-.434.252H6.035a.5.5 0 0 1-.416-.223l-1.433-2.15a1.5 1.5 0 0 1-.243-.666l-.345-3.105a.5.5 0 0 1 .399-.546L5 8.11V9a.5.5 0 0 0 1 0V1.75A.75.75 0 0 1 6.75 1zM8.5 4.466V1.75a1.75 1.75 0 1 0-3.5 0v5.34l-1.2.24a1.5 1.5 0 0 0-1.196 1.636l.345 3.106a2.5 2.5 0 0 0 .405 1.11l1.433 2.15A1.5 1.5 0 0 0 6.035 16h6.385a1.5 1.5 0 0 0 1.302-.756l1.395-2.441a3.5 3.5 0 0 0 .444-1.389l.271-2.715a2 2 0 0 0-1.99-2.199h-.581a5.114 5.114 0 0 0-.195-.248c-.191-.229-.51-.568-.88-.716-.364-.146-.846-.132-1.158-.108l-.132.012a1.26 1.26 0 0 0-.56-.642 2.632 2.632 0 0 0-.738-.288c-.31-.062-.739-.058-1.05-.046l-.048.002zm2.094 2.025z"></path></svg>`), HandIndex[FILENAME], [[1, 0, [[1, 171]]]]);
function HandIndex($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HandIndex);
  var svg = root1151();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hand-index", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HandIndex = hmr(HandIndex, () => HandIndex[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HandIndex[HMR].source;
    set(HandIndex[HMR].source, module.default[HMR].original);
  });
}
var HandIndex_default = HandIndex;
mark_module_end(HandIndex);

// node_modules/svelte-bootstrap-icons/lib/HandThumbsDownFill.svelte
mark_module_start();
HandThumbsDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HandThumbsDownFill.svelte";
var root1152 = add_locations(ns_template(`<svg><!><path d="M6.956 14.534c.065.936.952 1.659 1.908 1.42l.261-.065a1.378 1.378 0 0 0 1.012-.965c.22-.816.533-2.512.062-4.51.136.02.285.037.443.051.713.065 1.669.071 2.516-.211.518-.173.994-.68 1.2-1.272a1.896 1.896 0 0 0-.234-1.734c.058-.118.103-.242.138-.362.077-.27.113-.568.113-.856 0-.29-.036-.586-.113-.857a2.094 2.094 0 0 0-.16-.403c.169-.387.107-.82-.003-1.149a3.162 3.162 0 0 0-.488-.9c.054-.153.076-.313.076-.465a1.86 1.86 0 0 0-.253-.912C13.1.757 12.437.28 11.5.28H8c-.605 0-1.07.08-1.466.217a4.823 4.823 0 0 0-.97.485l-.048.029c-.504.308-.999.61-2.068.723C2.682 1.815 2 2.434 2 3.279v4c0 .851.685 1.433 1.357 1.616.849.232 1.574.787 2.132 1.41.56.626.914 1.28 1.039 1.638.199.575.356 1.54.428 2.591z"></path></svg>`), HandThumbsDownFill[FILENAME], [[1, 0, [[1, 182]]]]);
function HandThumbsDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HandThumbsDownFill);
  var svg = root1152();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hand-thumbs-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HandThumbsDownFill = hmr(HandThumbsDownFill, () => HandThumbsDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HandThumbsDownFill[HMR].source;
    set(HandThumbsDownFill[HMR].source, module.default[HMR].original);
  });
}
var HandThumbsDownFill_default = HandThumbsDownFill;
mark_module_end(HandThumbsDownFill);

// node_modules/svelte-bootstrap-icons/lib/HandThumbsDown.svelte
mark_module_start();
HandThumbsDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HandThumbsDown.svelte";
var root1153 = add_locations(ns_template(`<svg><!><path d="M8.864 15.674c-.956.24-1.843-.484-1.908-1.42-.072-1.05-.23-2.015-.428-2.59-.125-.36-.479-1.012-1.04-1.638-.557-.624-1.282-1.179-2.131-1.41C2.685 8.432 2 7.85 2 7V3c0-.845.682-1.464 1.448-1.546 1.07-.113 1.564-.415 2.068-.723l.048-.029c.272-.166.578-.349.97-.484C6.931.08 7.395 0 8 0h3.5c.937 0 1.599.478 1.934 1.064.164.287.254.607.254.913 0 .152-.023.312-.077.464.201.262.38.577.488.9.11.33.172.762.004 1.15.069.13.12.268.159.403.077.27.113.567.113.856 0 .289-.036.586-.113.856-.035.12-.08.244-.138.363.394.571.418 1.2.234 1.733-.206.592-.682 1.1-1.2 1.272-.847.283-1.803.276-2.516.211a9.877 9.877 0 0 1-.443-.05 9.364 9.364 0 0 1-.062 4.51c-.138.508-.55.848-1.012.964l-.261.065zM11.5 1H8c-.51 0-.863.068-1.14.163-.281.097-.506.229-.776.393l-.04.025c-.555.338-1.198.73-2.49.868-.333.035-.554.29-.554.55V7c0 .255.226.543.62.65 1.095.3 1.977.997 2.614 1.709.635.71 1.064 1.475 1.238 1.977.243.7.407 1.768.482 2.85.025.362.36.595.667.518l.262-.065c.16-.04.258-.144.288-.255a8.34 8.34 0 0 0-.145-4.726.5.5 0 0 1 .595-.643h.003l.014.004.058.013a8.912 8.912 0 0 0 1.036.157c.663.06 1.457.054 2.11-.163.175-.059.45-.301.57-.651.107-.308.087-.67-.266-1.021L12.793 7l.353-.354c.043-.042.105-.14.154-.315.048-.167.075-.37.075-.581 0-.211-.027-.414-.075-.581-.05-.174-.111-.273-.154-.315l-.353-.354.353-.354c.047-.047.109-.176.005-.488a2.224 2.224 0 0 0-.505-.804l-.353-.354.353-.354c.006-.005.041-.05.041-.17a.866.866 0 0 0-.121-.415C12.4 1.272 12.063 1 11.5 1z"></path></svg>`), HandThumbsDown[FILENAME], [[1, 0, [[1, 177]]]]);
function HandThumbsDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HandThumbsDown);
  var svg = root1153();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hand-thumbs-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HandThumbsDown = hmr(HandThumbsDown, () => HandThumbsDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HandThumbsDown[HMR].source;
    set(HandThumbsDown[HMR].source, module.default[HMR].original);
  });
}
var HandThumbsDown_default = HandThumbsDown;
mark_module_end(HandThumbsDown);

// node_modules/svelte-bootstrap-icons/lib/HandThumbsUpFill.svelte
mark_module_start();
HandThumbsUpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HandThumbsUpFill.svelte";
var root1154 = add_locations(ns_template(`<svg><!><path d="M6.956 1.745C7.021.81 7.908.087 8.864.325l.261.066c.463.116.874.456 1.012.965.22.816.533 2.511.062 4.51a9.84 9.84 0 0 1 .443-.051c.713-.065 1.669-.072 2.516.21.518.173.994.681 1.2 1.273.184.532.16 1.162-.234 1.733.058.119.103.242.138.363.077.27.113.567.113.856 0 .289-.036.586-.113.856-.039.135-.09.273-.16.404.169.387.107.819-.003 1.148a3.163 3.163 0 0 1-.488.901c.054.152.076.312.076.465 0 .305-.089.625-.253.912C13.1 15.522 12.437 16 11.5 16H8c-.605 0-1.07-.081-1.466-.218a4.82 4.82 0 0 1-.97-.484l-.048-.03c-.504-.307-.999-.609-2.068-.722C2.682 14.464 2 13.846 2 13V9c0-.85.685-1.432 1.357-1.615.849-.232 1.574-.787 2.132-1.41.56-.627.914-1.28 1.039-1.639.199-.575.356-1.539.428-2.59z"></path></svg>`), HandThumbsUpFill[FILENAME], [[1, 0, [[1, 180]]]]);
function HandThumbsUpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HandThumbsUpFill);
  var svg = root1154();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hand-thumbs-up-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HandThumbsUpFill = hmr(HandThumbsUpFill, () => HandThumbsUpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HandThumbsUpFill[HMR].source;
    set(HandThumbsUpFill[HMR].source, module.default[HMR].original);
  });
}
var HandThumbsUpFill_default = HandThumbsUpFill;
mark_module_end(HandThumbsUpFill);

// node_modules/svelte-bootstrap-icons/lib/HandThumbsUp.svelte
mark_module_start();
HandThumbsUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HandThumbsUp.svelte";
var root1155 = add_locations(ns_template(`<svg><!><path d="M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2.144 2.144 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a9.84 9.84 0 0 0-.443.05 9.365 9.365 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111L8.864.046zM11.5 14.721H8c-.51 0-.863-.069-1.14-.164-.281-.097-.506-.228-.776-.393l-.04-.024c-.555-.339-1.198-.731-2.49-.868-.333-.036-.554-.29-.554-.55V8.72c0-.254.226-.543.62-.65 1.095-.3 1.977-.996 2.614-1.708.635-.71 1.064-1.475 1.238-1.978.243-.7.407-1.768.482-2.85.025-.362.36-.594.667-.518l.262.066c.16.04.258.143.288.255a8.34 8.34 0 0 1-.145 4.725.5.5 0 0 0 .595.644l.003-.001.014-.003.058-.014a8.908 8.908 0 0 1 1.036-.157c.663-.06 1.457-.054 2.11.164.175.058.45.3.57.65.107.308.087.67-.266 1.022l-.353.353.353.354c.043.043.105.141.154.315.048.167.075.37.075.581 0 .212-.027.414-.075.582-.05.174-.111.272-.154.315l-.353.353.353.354c.047.047.109.177.005.488a2.224 2.224 0 0 1-.505.805l-.353.353.353.354c.006.005.041.05.041.17a.866.866 0 0 1-.121.416c-.165.288-.503.56-1.066.56z"></path></svg>`), HandThumbsUp[FILENAME], [[1, 0, [[1, 175]]]]);
function HandThumbsUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HandThumbsUp);
  var svg = root1155();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hand-thumbs-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HandThumbsUp = hmr(HandThumbsUp, () => HandThumbsUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HandThumbsUp[HMR].source;
    set(HandThumbsUp[HMR].source, module.default[HMR].original);
  });
}
var HandThumbsUp_default = HandThumbsUp;
mark_module_end(HandThumbsUp);

// node_modules/svelte-bootstrap-icons/lib/HandbagFill.svelte
mark_module_start();
HandbagFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HandbagFill.svelte";
var root1156 = add_locations(ns_template(`<svg><!><path d="M8 1a2 2 0 0 0-2 2v2H5V3a3 3 0 1 1 6 0v2h-1V3a2 2 0 0 0-2-2zM5 5H3.36a1.5 1.5 0 0 0-1.483 1.277L.85 13.13A2.5 2.5 0 0 0 3.322 16h9.355a2.5 2.5 0 0 0 2.473-2.87l-1.028-6.853A1.5 1.5 0 0 0 12.64 5H11v1.5a.5.5 0 0 1-1 0V5H6v1.5a.5.5 0 0 1-1 0V5z"></path></svg>`), HandbagFill[FILENAME], [[1, 0, [[1, 173]]]]);
function HandbagFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HandbagFill);
  var svg = root1156();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-handbag-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HandbagFill = hmr(HandbagFill, () => HandbagFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HandbagFill[HMR].source;
    set(HandbagFill[HMR].source, module.default[HMR].original);
  });
}
var HandbagFill_default = HandbagFill;
mark_module_end(HandbagFill);

// node_modules/svelte-bootstrap-icons/lib/Handbag.svelte
mark_module_start();
Handbag[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Handbag.svelte";
var root1157 = add_locations(ns_template(`<svg><!><path d="M8 1a2 2 0 0 1 2 2v2H6V3a2 2 0 0 1 2-2zm3 4V3a3 3 0 1 0-6 0v2H3.36a1.5 1.5 0 0 0-1.483 1.277L.85 13.13A2.5 2.5 0 0 0 3.322 16h9.355a2.5 2.5 0 0 0 2.473-2.87l-1.028-6.853A1.5 1.5 0 0 0 12.64 5H11zm-1 1v1.5a.5.5 0 0 0 1 0V6h1.639a.5.5 0 0 1 .494.426l1.028 6.851A1.5 1.5 0 0 1 12.678 15H3.322a1.5 1.5 0 0 1-1.483-1.723l1.028-6.851A.5.5 0 0 1 3.36 6H5v1.5a.5.5 0 1 0 1 0V6h4z"></path></svg>`), Handbag[FILENAME], [[1, 0, [[1, 168]]]]);
function Handbag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Handbag);
  var svg = root1157();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-handbag", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Handbag = hmr(Handbag, () => Handbag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Handbag[HMR].source;
    set(Handbag[HMR].source, module.default[HMR].original);
  });
}
var Handbag_default = Handbag;
mark_module_end(Handbag);

// node_modules/svelte-bootstrap-icons/lib/Hash.svelte
mark_module_start();
Hash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hash.svelte";
var root1158 = add_locations(ns_template(`<svg><!><path d="M8.39 12.648a1.32 1.32 0 0 0-.015.18c0 .305.21.508.5.508.266 0 .492-.172.555-.477l.554-2.703h1.204c.421 0 .617-.234.617-.547 0-.312-.188-.53-.617-.53h-.985l.516-2.524h1.265c.43 0 .618-.227.618-.547 0-.313-.188-.524-.618-.524h-1.046l.476-2.304a1.06 1.06 0 0 0 .016-.164.51.51 0 0 0-.516-.516.54.54 0 0 0-.539.43l-.523 2.554H7.617l.477-2.304c.008-.04.015-.118.015-.164a.512.512 0 0 0-.523-.516.539.539 0 0 0-.531.43L6.53 5.484H5.414c-.43 0-.617.22-.617.532 0 .312.187.539.617.539h.906l-.515 2.523H4.609c-.421 0-.609.219-.609.531 0 .313.188.547.61.547h.976l-.516 2.492c-.008.04-.015.125-.015.18 0 .305.21.508.5.508.265 0 .492-.172.554-.477l.555-2.703h2.242l-.515 2.492zm-1-6.109h2.266l-.515 2.563H6.859l.532-2.563z"></path></svg>`), Hash[FILENAME], [[1, 0, [[1, 165]]]]);
function Hash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hash);
  var svg = root1158();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hash = hmr(Hash, () => Hash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hash[HMR].source;
    set(Hash[HMR].source, module.default[HMR].original);
  });
}
var Hash_default = Hash;
mark_module_end(Hash);

// node_modules/svelte-bootstrap-icons/lib/HddFill.svelte
mark_module_start();
HddFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HddFill.svelte";
var root1159 = add_locations(ns_template(`<svg><!><path d="M0 10a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-1zm2.5 1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm2 0a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zM.91 7.204A2.993 2.993 0 0 1 2 7h12c.384 0 .752.072 1.09.204l-1.867-3.422A1.5 1.5 0 0 0 11.906 3H4.094a1.5 1.5 0 0 0-1.317.782L.91 7.204z"></path></svg>`), HddFill[FILENAME], [[1, 0, [[1, 169]]]]);
function HddFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HddFill);
  var svg = root1159();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdd-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HddFill = hmr(HddFill, () => HddFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HddFill[HMR].source;
    set(HddFill[HMR].source, module.default[HMR].original);
  });
}
var HddFill_default = HddFill;
mark_module_end(HddFill);

// node_modules/svelte-bootstrap-icons/lib/HddNetworkFill.svelte
mark_module_start();
HddNetworkFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HddNetworkFill.svelte";
var root1160 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h5.5v3A1.5 1.5 0 0 0 6 11.5H.5a.5.5 0 0 0 0 1H6A1.5 1.5 0 0 0 7.5 14h1a1.5 1.5 0 0 0 1.5-1.5h5.5a.5.5 0 0 0 0-1H10A1.5 1.5 0 0 0 8.5 10V7H14a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm.5 3a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm2 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1z"></path></svg>`), HddNetworkFill[FILENAME], [[1, 0, [[1, 177]]]]);
function HddNetworkFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HddNetworkFill);
  var svg = root1160();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdd-network-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HddNetworkFill = hmr(HddNetworkFill, () => HddNetworkFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HddNetworkFill[HMR].source;
    set(HddNetworkFill[HMR].source, module.default[HMR].original);
  });
}
var HddNetworkFill_default = HddNetworkFill;
mark_module_end(HddNetworkFill);

// node_modules/svelte-bootstrap-icons/lib/HddNetwork.svelte
mark_module_start();
HddNetwork[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HddNetwork.svelte";
var root1161 = add_locations(ns_template(`<svg><!><path d="M4.5 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zM3 4.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2H8.5v3a1.5 1.5 0 0 1 1.5 1.5h5.5a.5.5 0 0 1 0 1H10A1.5 1.5 0 0 1 8.5 14h-1A1.5 1.5 0 0 1 6 12.5H.5a.5.5 0 0 1 0-1H6A1.5 1.5 0 0 1 7.5 10V7H2a2 2 0 0 1-2-2V4zm1 0v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1zm6 7.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5z"></path></svg>`), HddNetwork[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function HddNetwork($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HddNetwork);
  var svg = root1161();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdd-network", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HddNetwork = hmr(HddNetwork, () => HddNetwork[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HddNetwork[HMR].source;
    set(HddNetwork[HMR].source, module.default[HMR].original);
  });
}
var HddNetwork_default = HddNetwork;
mark_module_end(HddNetwork);

// node_modules/svelte-bootstrap-icons/lib/HddRackFill.svelte
mark_module_start();
HddRackFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HddRackFill.svelte";
var root1162 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h1v2H2a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-1a2 2 0 0 0-2-2h-1V7h1a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm.5 3a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm2 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm-2 7a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm2 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zM12 7v2H4V7h8z"></path></svg>`), HddRackFill[FILENAME], [[1, 0, [[1, 174]]]]);
function HddRackFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HddRackFill);
  var svg = root1162();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdd-rack-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HddRackFill = hmr(HddRackFill, () => HddRackFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HddRackFill[HMR].source;
    set(HddRackFill[HMR].source, module.default[HMR].original);
  });
}
var HddRackFill_default = HddRackFill;
mark_module_end(HddRackFill);

// node_modules/svelte-bootstrap-icons/lib/HddRack.svelte
mark_module_start();
HddRack[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HddRack.svelte";
var root1163 = add_locations(ns_template(`<svg><!><path d="M4.5 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zM3 4.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm2 7a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-2.5.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1z"></path><path d="M2 2a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h1v2H2a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-1a2 2 0 0 0-2-2h-1V7h1a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm13 2v1a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1zm0 7v1a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1zm-3-4v2H4V7h8z"></path></svg>`), HddRack[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function HddRack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HddRack);
  var svg = root1163();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdd-rack", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HddRack = hmr(HddRack, () => HddRack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HddRack[HMR].source;
    set(HddRack[HMR].source, module.default[HMR].original);
  });
}
var HddRack_default = HddRack;
mark_module_end(HddRack);

// node_modules/svelte-bootstrap-icons/lib/HddStackFill.svelte
mark_module_start();
HddStackFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HddStackFill.svelte";
var root1164 = add_locations(ns_template(`<svg><!><path d="M2 9a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-1a2 2 0 0 0-2-2H2zm.5 3a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm2 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zM2 2a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2zm.5 3a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm2 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1z"></path></svg>`), HddStackFill[FILENAME], [[1, 0, [[1, 175]]]]);
function HddStackFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HddStackFill);
  var svg = root1164();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdd-stack-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HddStackFill = hmr(HddStackFill, () => HddStackFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HddStackFill[HMR].source;
    set(HddStackFill[HMR].source, module.default[HMR].original);
  });
}
var HddStackFill_default = HddStackFill;
mark_module_end(HddStackFill);

// node_modules/svelte-bootstrap-icons/lib/HddStack.svelte
mark_module_start();
HddStack[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HddStack.svelte";
var root1165 = add_locations(ns_template(`<svg><!><path d="M14 10a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h12zM2 9a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-1a2 2 0 0 0-2-2H2z"></path><path d="M5 11.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-2 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zM14 3a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path><path d="M5 4.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-2 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"></path></svg>`), HddStack[FILENAME], [
  [
    1,
    0,
    [[1, 170], [2, 2], [3, 2]]
  ]
]);
function HddStack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HddStack);
  var svg = root1165();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdd-stack", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HddStack = hmr(HddStack, () => HddStack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HddStack[HMR].source;
    set(HddStack[HMR].source, module.default[HMR].original);
  });
}
var HddStack_default = HddStack;
mark_module_end(HddStack);

// node_modules/svelte-bootstrap-icons/lib/Hdd.svelte
mark_module_start();
Hdd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hdd.svelte";
var root1166 = add_locations(ns_template(`<svg><!><path d="M4.5 11a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zM3 10.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"></path><path d="M16 11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V9.51c0-.418.105-.83.305-1.197l2.472-4.531A1.5 1.5 0 0 1 4.094 3h7.812a1.5 1.5 0 0 1 1.317.782l2.472 4.53c.2.368.305.78.305 1.198V11zM3.655 4.26 1.592 8.043C1.724 8.014 1.86 8 2 8h12c.14 0 .276.014.408.042L12.345 4.26a.5.5 0 0 0-.439-.26H4.094a.5.5 0 0 0-.44.26zM1 10v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1z"></path></svg>`), Hdd[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Hdd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hdd);
  var svg = root1166();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdd", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hdd = hmr(Hdd, () => Hdd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hdd[HMR].source;
    set(Hdd[HMR].source, module.default[HMR].original);
  });
}
var Hdd_default = Hdd;
mark_module_end(Hdd);

// node_modules/svelte-bootstrap-icons/lib/HdmiFill.svelte
mark_module_start();
HdmiFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HdmiFill.svelte";
var root1167 = add_locations(ns_template(`<svg><!><path d="M1 5a1 1 0 0 0-1 1v3.293c0 .39.317.707.707.707.188 0 .368.075.5.207l.5.5a1 1 0 0 0 .707.293h11.172a1 1 0 0 0 .707-.293l.5-.5a.707.707 0 0 1 .5-.207c.39 0 .707-.317.707-.707V6a1 1 0 0 0-1-1H1Zm1.5 2h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1 0-1Z"></path></svg>`), HdmiFill[FILENAME], [[1, 0, [[1, 170]]]]);
function HdmiFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HdmiFill);
  var svg = root1167();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdmi-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HdmiFill = hmr(HdmiFill, () => HdmiFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HdmiFill[HMR].source;
    set(HdmiFill[HMR].source, module.default[HMR].original);
  });
}
var HdmiFill_default = HdmiFill;
mark_module_end(HdmiFill);

// node_modules/svelte-bootstrap-icons/lib/Hdmi.svelte
mark_module_start();
Hdmi[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hdmi.svelte";
var root1168 = add_locations(ns_template(`<svg><!><path d="M2.5 7a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1h-11Z"></path><path d="M1 5a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h.293l.707.707a1 1 0 0 0 .707.293h10.586a1 1 0 0 0 .707-.293l.707-.707H15a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H1Zm0 1h14v3h-.293a1 1 0 0 0-.707.293l-.707.707H2.707L2 9.293A1 1 0 0 0 1.293 9H1V6Z"></path></svg>`), Hdmi[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Hdmi($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hdmi);
  var svg = root1168();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hdmi", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hdmi = hmr(Hdmi, () => Hdmi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hdmi[HMR].source;
    set(Hdmi[HMR].source, module.default[HMR].original);
  });
}
var Hdmi_default = Hdmi;
mark_module_end(Hdmi);

// node_modules/svelte-bootstrap-icons/lib/Headphones.svelte
mark_module_start();
Headphones[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Headphones.svelte";
var root1169 = add_locations(ns_template(`<svg><!><path d="M8 3a5 5 0 0 0-5 5v1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V8a6 6 0 1 1 12 0v5a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1h1V8a5 5 0 0 0-5-5z"></path></svg>`), Headphones[FILENAME], [[1, 0, [[1, 171]]]]);
function Headphones($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Headphones);
  var svg = root1169();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-headphones", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Headphones = hmr(Headphones, () => Headphones[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Headphones[HMR].source;
    set(Headphones[HMR].source, module.default[HMR].original);
  });
}
var Headphones_default = Headphones;
mark_module_end(Headphones);

// node_modules/svelte-bootstrap-icons/lib/HeadsetVr.svelte
mark_module_start();
HeadsetVr[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HeadsetVr.svelte";
var root1170 = add_locations(ns_template(`<svg><!><path d="M8 1.248c1.857 0 3.526.641 4.65 1.794a4.978 4.978 0 0 1 2.518 1.09C13.907 1.482 11.295 0 8 0 4.75 0 2.12 1.48.844 4.122a4.979 4.979 0 0 1 2.289-1.047C4.236 1.872 5.974 1.248 8 1.248z"></path><path d="M12 12a3.988 3.988 0 0 1-2.786-1.13l-.002-.002a1.612 1.612 0 0 0-.276-.167A2.164 2.164 0 0 0 8 10.5c-.414 0-.729.103-.935.201a1.612 1.612 0 0 0-.277.167l-.002.002A4 4 0 1 1 4 4h8a4 4 0 0 1 0 8z"></path></svg>`), HeadsetVr[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function HeadsetVr($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HeadsetVr);
  var svg = root1170();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-headset-vr", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeadsetVr = hmr(HeadsetVr, () => HeadsetVr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeadsetVr[HMR].source;
    set(HeadsetVr[HMR].source, module.default[HMR].original);
  });
}
var HeadsetVr_default = HeadsetVr;
mark_module_end(HeadsetVr);

// node_modules/svelte-bootstrap-icons/lib/Headset.svelte
mark_module_start();
Headset[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Headset.svelte";
var root1171 = add_locations(ns_template(`<svg><!><path d="M8 1a5 5 0 0 0-5 5v1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V6a6 6 0 1 1 12 0v6a2.5 2.5 0 0 1-2.5 2.5H9.366a1 1 0 0 1-.866.5h-1a1 1 0 1 1 0-2h1a1 1 0 0 1 .866.5H11.5A1.5 1.5 0 0 0 13 12h-1a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1h1V6a5 5 0 0 0-5-5z"></path></svg>`), Headset[FILENAME], [[1, 0, [[1, 168]]]]);
function Headset($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Headset);
  var svg = root1171();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-headset", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Headset = hmr(Headset, () => Headset[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Headset[HMR].source;
    set(Headset[HMR].source, module.default[HMR].original);
  });
}
var Headset_default = Headset;
mark_module_end(Headset);

// node_modules/svelte-bootstrap-icons/lib/HeartArrow.svelte
mark_module_start();
HeartArrow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HeartArrow.svelte";
var root1172 = add_locations(ns_template(`<svg><!><path d="M6.707 9h4.364c-.536 1.573 2.028 3.806 4.929-.5-2.9-4.306-5.465-2.073-4.929-.5H6.707L4.854 6.146a.5.5 0 1 0-.708.708L5.293 8h-.586L2.854 6.146a.5.5 0 1 0-.708.708L3.293 8h-.586L.854 6.146a.5.5 0 1 0-.708.708L1.793 8.5.146 10.146a.5.5 0 0 0 .708.708L2.707 9h.586l-1.147 1.146a.5.5 0 0 0 .708.708L4.707 9h.586l-1.147 1.146a.5.5 0 0 0 .708.708L6.707 9Z"></path></svg>`), HeartArrow[FILENAME], [[1, 0, [[1, 172]]]]);
function HeartArrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HeartArrow);
  var svg = root1172();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heart-arrow", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeartArrow = hmr(HeartArrow, () => HeartArrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeartArrow[HMR].source;
    set(HeartArrow[HMR].source, module.default[HMR].original);
  });
}
var HeartArrow_default = HeartArrow;
mark_module_end(HeartArrow);

// node_modules/svelte-bootstrap-icons/lib/HeartFill.svelte
mark_module_start();
HeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HeartFill.svelte";
var root1173 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"></path></svg>`), HeartFill[FILENAME], [[1, 0, [[1, 171]]]]);
function HeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HeartFill);
  var svg = root1173();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeartFill = hmr(HeartFill, () => HeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeartFill[HMR].source;
    set(HeartFill[HMR].source, module.default[HMR].original);
  });
}
var HeartFill_default = HeartFill;
mark_module_end(HeartFill);

// node_modules/svelte-bootstrap-icons/lib/HeartHalf.svelte
mark_module_start();
HeartHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HeartHalf.svelte";
var root1174 = add_locations(ns_template(`<svg><!><path d="M8 2.748v11.047c3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z"></path></svg>`), HeartHalf[FILENAME], [[1, 0, [[1, 171]]]]);
function HeartHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HeartHalf);
  var svg = root1174();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heart-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeartHalf = hmr(HeartHalf, () => HeartHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeartHalf[HMR].source;
    set(HeartHalf[HMR].source, module.default[HMR].original);
  });
}
var HeartHalf_default = HeartHalf;
mark_module_end(HeartHalf);

// node_modules/svelte-bootstrap-icons/lib/HeartPulseFill.svelte
mark_module_start();
HeartPulseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HeartPulseFill.svelte";
var root1175 = add_locations(ns_template(`<svg><!><path d="M1.475 9C2.702 10.84 4.779 12.871 8 15c3.221-2.129 5.298-4.16 6.525-6H12a.5.5 0 0 1-.464-.314l-1.457-3.642-1.598 5.593a.5.5 0 0 1-.945.049L5.889 6.568l-1.473 2.21A.5.5 0 0 1 4 9H1.475Z"></path><path d="M.88 8C-2.427 1.68 4.41-2 7.823 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C11.59-2 18.426 1.68 15.12 8h-2.783l-1.874-4.686a.5.5 0 0 0-.945.049L7.921 8.956 6.464 5.314a.5.5 0 0 0-.88-.091L3.732 8H.88Z"></path></svg>`), HeartPulseFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function HeartPulseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HeartPulseFill);
  var svg = root1175();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heart-pulse-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeartPulseFill = hmr(HeartPulseFill, () => HeartPulseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeartPulseFill[HMR].source;
    set(HeartPulseFill[HMR].source, module.default[HMR].original);
  });
}
var HeartPulseFill_default = HeartPulseFill;
mark_module_end(HeartPulseFill);

// node_modules/svelte-bootstrap-icons/lib/HeartPulse.svelte
mark_module_start();
HeartPulse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HeartPulse.svelte";
var root1176 = add_locations(ns_template(`<svg><!><path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053.918 3.995.78 5.323 1.508 7H.43c-2.128-5.697 4.165-8.83 7.394-5.857.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17c3.23-2.974 9.522.159 7.394 5.856h-1.078c.728-1.677.59-3.005.108-3.947C13.486.878 10.4.28 8.717 2.01L8 2.748ZM2.212 10h1.315C4.593 11.183 6.05 12.458 8 13.795c1.949-1.337 3.407-2.612 4.473-3.795h1.315c-1.265 1.566-3.14 3.25-5.788 5-2.648-1.75-4.523-3.434-5.788-5Z"></path><path d="M10.464 3.314a.5.5 0 0 0-.945.049L7.921 8.956 6.464 5.314a.5.5 0 0 0-.88-.091L3.732 8H.5a.5.5 0 0 0 0 1H4a.5.5 0 0 0 .416-.223l1.473-2.209 1.647 4.118a.5.5 0 0 0 .945-.049l1.598-5.593 1.457 3.642A.5.5 0 0 0 12 9h3.5a.5.5 0 0 0 0-1h-3.162l-1.874-4.686Z"></path></svg>`), HeartPulse[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function HeartPulse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HeartPulse);
  var svg = root1176();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heart-pulse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeartPulse = hmr(HeartPulse, () => HeartPulse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeartPulse[HMR].source;
    set(HeartPulse[HMR].source, module.default[HMR].original);
  });
}
var HeartPulse_default = HeartPulse;
mark_module_end(HeartPulse);

// node_modules/svelte-bootstrap-icons/lib/Heart.svelte
mark_module_start();
Heart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Heart.svelte";
var root1177 = add_locations(ns_template(`<svg><!><path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z"></path></svg>`), Heart[FILENAME], [[1, 0, [[1, 166]]]]);
function Heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Heart);
  var svg = root1177();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heart = hmr(Heart, () => Heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart[HMR].source;
    set(Heart[HMR].source, module.default[HMR].original);
  });
}
var Heart_default = Heart;
mark_module_end(Heart);

// node_modules/svelte-bootstrap-icons/lib/HeartbreakFill.svelte
mark_module_start();
HeartbreakFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HeartbreakFill.svelte";
var root1178 = add_locations(ns_template(`<svg><!><path d="M8.931.586 7 3l1.5 4-2 3L8 15C22.534 5.396 13.757-2.21 8.931.586ZM7.358.77 5.5 3 7 7l-1.5 3 1.815 4.537C-6.533 4.96 2.685-2.467 7.358.77Z"></path></svg>`), HeartbreakFill[FILENAME], [[1, 0, [[1, 176]]]]);
function HeartbreakFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HeartbreakFill);
  var svg = root1178();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heartbreak-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeartbreakFill = hmr(HeartbreakFill, () => HeartbreakFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeartbreakFill[HMR].source;
    set(HeartbreakFill[HMR].source, module.default[HMR].original);
  });
}
var HeartbreakFill_default = HeartbreakFill;
mark_module_end(HeartbreakFill);

// node_modules/svelte-bootstrap-icons/lib/Heartbreak.svelte
mark_module_start();
Heartbreak[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Heartbreak.svelte";
var root1179 = add_locations(ns_template(`<svg><!><path d="M8.867 14.41c13.308-9.322 4.79-16.563.064-13.824L7 3l1.5 4-2 3L8 15a38.094 38.094 0 0 0 .867-.59Zm-.303-1.01-.971-3.237 1.74-2.608a1 1 0 0 0 .103-.906l-1.3-3.468 1.45-1.813c1.861-.948 4.446.002 5.197 2.11.691 1.94-.055 5.521-6.219 9.922Zm-1.25 1.137a36.027 36.027 0 0 1-1.522-1.116C-5.077 4.97 1.842-1.472 6.454.293c.314.12.618.279.904.477L5.5 3 7 7l-1.5 3 1.815 4.537Zm-2.3-3.06-.442-1.106a1 1 0 0 1 .034-.818l1.305-2.61L4.564 3.35a1 1 0 0 1 .168-.991l1.032-1.24c-1.688-.449-3.7.398-4.456 2.128-.711 1.627-.413 4.55 3.706 8.229Z"></path></svg>`), Heartbreak[FILENAME], [[1, 0, [[1, 171]]]]);
function Heartbreak($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Heartbreak);
  var svg = root1179();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heartbreak", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heartbreak = hmr(Heartbreak, () => Heartbreak[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heartbreak[HMR].source;
    set(Heartbreak[HMR].source, module.default[HMR].original);
  });
}
var Heartbreak_default = Heartbreak;
mark_module_end(Heartbreak);

// node_modules/svelte-bootstrap-icons/lib/Hearts.svelte
mark_module_start();
Hearts[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hearts.svelte";
var root1180 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4.931.481c1.627-1.671 5.692 1.254 0 5.015-5.692-3.76-1.626-6.686 0-5.015Zm6.84 1.794c1.084-1.114 3.795.836 0 3.343-3.795-2.507-1.084-4.457 0-3.343ZM7.84 7.642c2.71-2.786 9.486 2.09 0 8.358-9.487-6.268-2.71-11.144 0-8.358Z"></path></svg>`), Hearts[FILENAME], [[1, 0, [[1, 167]]]]);
function Hearts($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hearts);
  var svg = root1180();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hearts", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hearts = hmr(Hearts, () => Hearts[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hearts[HMR].source;
    set(Hearts[HMR].source, module.default[HMR].original);
  });
}
var Hearts_default = Hearts;
mark_module_end(Hearts);

// node_modules/svelte-bootstrap-icons/lib/HeptagonFill.svelte
mark_module_start();
HeptagonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HeptagonFill.svelte";
var root1181 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.779.052a.5.5 0 0 1 .442 0l6.015 2.97a.5.5 0 0 1 .267.34l1.485 6.676a.5.5 0 0 1-.093.415l-4.162 5.354a.5.5 0 0 1-.395.193H4.662a.5.5 0 0 1-.395-.193L.105 10.453a.5.5 0 0 1-.093-.415l1.485-6.676a.5.5 0 0 1 .267-.34L7.779.053z"></path></svg>`), HeptagonFill[FILENAME], [[1, 0, [[1, 174]]]]);
function HeptagonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HeptagonFill);
  var svg = root1181();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heptagon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeptagonFill = hmr(HeptagonFill, () => HeptagonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeptagonFill[HMR].source;
    set(HeptagonFill[HMR].source, module.default[HMR].original);
  });
}
var HeptagonFill_default = HeptagonFill;
mark_module_end(HeptagonFill);

// node_modules/svelte-bootstrap-icons/lib/HeptagonHalf.svelte
mark_module_start();
HeptagonHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HeptagonHalf.svelte";
var root1182 = add_locations(ns_template(`<svg><!><path d="M7.779.052a.5.5 0 0 1 .442 0l6.015 2.97a.5.5 0 0 1 .267.34l1.485 6.676a.5.5 0 0 1-.093.415l-4.162 5.354a.5.5 0 0 1-.395.193H4.662a.5.5 0 0 1-.395-.193L.105 10.453a.5.5 0 0 1-.093-.415l1.485-6.676a.5.5 0 0 1 .267-.34L7.779.053zM8 15h3.093l3.868-4.975-1.383-6.212L8 1.058V15z"></path></svg>`), HeptagonHalf[FILENAME], [[1, 0, [[1, 174]]]]);
function HeptagonHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HeptagonHalf);
  var svg = root1182();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heptagon-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeptagonHalf = hmr(HeptagonHalf, () => HeptagonHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeptagonHalf[HMR].source;
    set(HeptagonHalf[HMR].source, module.default[HMR].original);
  });
}
var HeptagonHalf_default = HeptagonHalf;
mark_module_end(HeptagonHalf);

// node_modules/svelte-bootstrap-icons/lib/Heptagon.svelte
mark_module_start();
Heptagon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Heptagon.svelte";
var root1183 = add_locations(ns_template(`<svg><!><path d="M7.779.052a.5.5 0 0 1 .442 0l6.015 2.97a.5.5 0 0 1 .267.34l1.485 6.676a.5.5 0 0 1-.093.415l-4.162 5.354a.5.5 0 0 1-.395.193H4.662a.5.5 0 0 1-.395-.193L.105 10.453a.5.5 0 0 1-.093-.415l1.485-6.676a.5.5 0 0 1 .267-.34L7.779.053zM2.422 3.813l-1.383 6.212L4.907 15h6.186l3.868-4.975-1.383-6.212L8 1.058 2.422 3.813z"></path></svg>`), Heptagon[FILENAME], [[1, 0, [[1, 169]]]]);
function Heptagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Heptagon);
  var svg = root1183();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-heptagon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heptagon = hmr(Heptagon, () => Heptagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heptagon[HMR].source;
    set(Heptagon[HMR].source, module.default[HMR].original);
  });
}
var Heptagon_default = Heptagon;
mark_module_end(Heptagon);

// node_modules/svelte-bootstrap-icons/lib/HexagonFill.svelte
mark_module_start();
HexagonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HexagonFill.svelte";
var root1184 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.5.134a1 1 0 0 0-1 0l-6 3.577a1 1 0 0 0-.5.866v6.846a1 1 0 0 0 .5.866l6 3.577a1 1 0 0 0 1 0l6-3.577a1 1 0 0 0 .5-.866V4.577a1 1 0 0 0-.5-.866L8.5.134z"></path></svg>`), HexagonFill[FILENAME], [[1, 0, [[1, 173]]]]);
function HexagonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HexagonFill);
  var svg = root1184();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hexagon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HexagonFill = hmr(HexagonFill, () => HexagonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HexagonFill[HMR].source;
    set(HexagonFill[HMR].source, module.default[HMR].original);
  });
}
var HexagonFill_default = HexagonFill;
mark_module_end(HexagonFill);

// node_modules/svelte-bootstrap-icons/lib/HexagonHalf.svelte
mark_module_start();
HexagonHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HexagonHalf.svelte";
var root1185 = add_locations(ns_template(`<svg><!><path d="M14 4.577v6.846L8 15V1l6 3.577zM8.5.134a1 1 0 0 0-1 0l-6 3.577a1 1 0 0 0-.5.866v6.846a1 1 0 0 0 .5.866l6 3.577a1 1 0 0 0 1 0l6-3.577a1 1 0 0 0 .5-.866V4.577a1 1 0 0 0-.5-.866L8.5.134z"></path></svg>`), HexagonHalf[FILENAME], [[1, 0, [[1, 173]]]]);
function HexagonHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HexagonHalf);
  var svg = root1185();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hexagon-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HexagonHalf = hmr(HexagonHalf, () => HexagonHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HexagonHalf[HMR].source;
    set(HexagonHalf[HMR].source, module.default[HMR].original);
  });
}
var HexagonHalf_default = HexagonHalf;
mark_module_end(HexagonHalf);

// node_modules/svelte-bootstrap-icons/lib/Hexagon.svelte
mark_module_start();
Hexagon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hexagon.svelte";
var root1186 = add_locations(ns_template(`<svg><!><path d="M14 4.577v6.846L8 15l-6-3.577V4.577L8 1l6 3.577zM8.5.134a1 1 0 0 0-1 0l-6 3.577a1 1 0 0 0-.5.866v6.846a1 1 0 0 0 .5.866l6 3.577a1 1 0 0 0 1 0l6-3.577a1 1 0 0 0 .5-.866V4.577a1 1 0 0 0-.5-.866L8.5.134z"></path></svg>`), Hexagon[FILENAME], [[1, 0, [[1, 168]]]]);
function Hexagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hexagon);
  var svg = root1186();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hexagon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hexagon = hmr(Hexagon, () => Hexagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hexagon[HMR].source;
    set(Hexagon[HMR].source, module.default[HMR].original);
  });
}
var Hexagon_default = Hexagon;
mark_module_end(Hexagon);

// node_modules/svelte-bootstrap-icons/lib/Highlighter.svelte
mark_module_start();
Highlighter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Highlighter.svelte";
var root1187 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11.096.644a2 2 0 0 1 2.791.036l1.433 1.433a2 2 0 0 1 .035 2.791l-.413.435-8.07 8.995a.5.5 0 0 1-.372.166h-3a.5.5 0 0 1-.234-.058l-.412.412A.5.5 0 0 1 2.5 15h-2a.5.5 0 0 1-.354-.854l1.412-1.412A.5.5 0 0 1 1.5 12.5v-3a.5.5 0 0 1 .166-.372l8.995-8.07.435-.414Zm-.115 1.47L2.727 9.52l3.753 3.753 7.406-8.254-2.905-2.906Zm3.585 2.17.064-.068a1 1 0 0 0-.017-1.396L13.18 1.387a1 1 0 0 0-1.396-.018l-.068.065 2.85 2.85ZM5.293 13.5 2.5 10.707v1.586L3.707 13.5h1.586Z"></path></svg>`), Highlighter[FILENAME], [[1, 0, [[1, 172]]]]);
function Highlighter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Highlighter);
  var svg = root1187();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-highlighter", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Highlighter = hmr(Highlighter, () => Highlighter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Highlighter[HMR].source;
    set(Highlighter[HMR].source, module.default[HMR].original);
  });
}
var Highlighter_default = Highlighter;
mark_module_end(Highlighter);

// node_modules/svelte-bootstrap-icons/lib/Highlights.svelte
mark_module_start();
Highlights[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Highlights.svelte";
var root1188 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M16 8A8 8 0 1 0 0 8a8 8 0 0 0 16 0Zm-8 5v1H4.5a.502.502 0 0 0-.093.009A7.029 7.029 0 0 1 3.1 13H8Zm0-1v-1H1.674c.166.35.36.685.58 1H8Zm-6.71-2H8V9H1.07c.05.342.123.676.22 1ZM1 8h7V7H1.07c-.046.327-.07.66-.07 1Zm.29-2H8V5H1.674c-.153.32-.281.655-.384 1Zm.965-2H8V3H3.101c-.312.306-.596.64-.846 1Zm2.137-2H8V1c-1.32 0-2.554.365-3.608 1Z"></path></svg>`), Highlights[FILENAME], [[1, 0, [[1, 171]]]]);
function Highlights($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Highlights);
  var svg = root1188();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-highlights", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Highlights = hmr(Highlights, () => Highlights[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Highlights[HMR].source;
    set(Highlights[HMR].source, module.default[HMR].original);
  });
}
var Highlights_default = Highlights;
mark_module_end(Highlights);

// node_modules/svelte-bootstrap-icons/lib/HospitalFill.svelte
mark_module_start();
HospitalFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HospitalFill.svelte";
var root1189 = add_locations(ns_template(`<svg><!><path d="M6 0a1 1 0 0 0-1 1v1a1 1 0 0 0-1 1v4H1a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h6v-2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5V16h6a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1h-3V3a1 1 0 0 0-1-1V1a1 1 0 0 0-1-1H6Zm2.5 5.034v1.1l.953-.55.5.867L9 7l.953.55-.5.866-.953-.55v1.1h-1v-1.1l-.953.55-.5-.866L7 7l-.953-.55.5-.866.953.55v-1.1h1ZM2.25 9h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 2 9.75v-.5A.25.25 0 0 1 2.25 9Zm0 2h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5a.25.25 0 0 1 .25-.25ZM2 13.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5ZM13.25 9h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5a.25.25 0 0 1 .25-.25ZM13 11.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5Zm.25 1.75h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5a.25.25 0 0 1 .25-.25Z"></path></svg>`), HospitalFill[FILENAME], [[1, 0, [[1, 174]]]]);
function HospitalFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HospitalFill);
  var svg = root1189();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hospital-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HospitalFill = hmr(HospitalFill, () => HospitalFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HospitalFill[HMR].source;
    set(HospitalFill[HMR].source, module.default[HMR].original);
  });
}
var HospitalFill_default = HospitalFill;
mark_module_end(HospitalFill);

// node_modules/svelte-bootstrap-icons/lib/Hospital.svelte
mark_module_start();
Hospital[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hospital.svelte";
var root1190 = add_locations(ns_template(`<svg><!><path d="M8.5 5.034v1.1l.953-.55.5.867L9 7l.953.55-.5.866-.953-.55v1.1h-1v-1.1l-.953.55-.5-.866L7 7l-.953-.55.5-.866.953.55v-1.1h1ZM13.25 9a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5ZM13 11.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5Zm.25 1.75a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5Zm-11-4a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 3 9.75v-.5A.25.25 0 0 0 2.75 9h-.5Zm0 2a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5ZM2 13.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5Z"></path><path d="M5 1a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1a1 1 0 0 1 1 1v4h3a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1h3V3a1 1 0 0 1 1-1V1Zm2 14h2v-3H7v3Zm3 0h1V3H5v12h1v-3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3Zm0-14H6v1h4V1Zm2 7v7h3V8h-3Zm-8 7V8H1v7h3Z"></path></svg>`), Hospital[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Hospital($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hospital);
  var svg = root1190();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hospital", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hospital = hmr(Hospital, () => Hospital[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hospital[HMR].source;
    set(Hospital[HMR].source, module.default[HMR].original);
  });
}
var Hospital_default = Hospital;
mark_module_end(Hospital);

// node_modules/svelte-bootstrap-icons/lib/HourglassBottom.svelte
mark_module_start();
HourglassBottom[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HourglassBottom.svelte";
var root1191 = add_locations(ns_template(`<svg><!><path d="M2 1.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1-.5-.5zm2.5.5v1a3.5 3.5 0 0 0 1.989 3.158c.533.256 1.011.791 1.011 1.491v.702s.18.149.5.149.5-.15.5-.15v-.7c0-.701.478-1.236 1.011-1.492A3.5 3.5 0 0 0 11.5 3V2h-7z"></path></svg>`), HourglassBottom[FILENAME], [[1, 0, [[1, 177]]]]);
function HourglassBottom($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HourglassBottom);
  var svg = root1191();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hourglass-bottom", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HourglassBottom = hmr(HourglassBottom, () => HourglassBottom[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HourglassBottom[HMR].source;
    set(HourglassBottom[HMR].source, module.default[HMR].original);
  });
}
var HourglassBottom_default = HourglassBottom;
mark_module_end(HourglassBottom);

// node_modules/svelte-bootstrap-icons/lib/HourglassSplit.svelte
mark_module_start();
HourglassSplit[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HourglassSplit.svelte";
var root1192 = add_locations(ns_template(`<svg><!><path d="M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351z"></path></svg>`), HourglassSplit[FILENAME], [[1, 0, [[1, 176]]]]);
function HourglassSplit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HourglassSplit);
  var svg = root1192();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hourglass-split", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HourglassSplit = hmr(HourglassSplit, () => HourglassSplit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HourglassSplit[HMR].source;
    set(HourglassSplit[HMR].source, module.default[HMR].original);
  });
}
var HourglassSplit_default = HourglassSplit;
mark_module_end(HourglassSplit);

// node_modules/svelte-bootstrap-icons/lib/HourglassTop.svelte
mark_module_start();
HourglassTop[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HourglassTop.svelte";
var root1193 = add_locations(ns_template(`<svg><!><path d="M2 14.5a.5.5 0 0 0 .5.5h11a.5.5 0 1 0 0-1h-1v-1a4.5 4.5 0 0 0-2.557-4.06c-.29-.139-.443-.377-.443-.59v-.7c0-.213.154-.451.443-.59A4.5 4.5 0 0 0 12.5 3V2h1a.5.5 0 0 0 0-1h-11a.5.5 0 0 0 0 1h1v1a4.5 4.5 0 0 0 2.557 4.06c.29.139.443.377.443.59v.7c0 .213-.154.451-.443.59A4.5 4.5 0 0 0 3.5 13v1h-1a.5.5 0 0 0-.5.5zm2.5-.5v-1a3.5 3.5 0 0 1 1.989-3.158c.533-.256 1.011-.79 1.011-1.491v-.702s.18.101.5.101.5-.1.5-.1v.7c0 .701.478 1.236 1.011 1.492A3.5 3.5 0 0 1 11.5 13v1h-7z"></path></svg>`), HourglassTop[FILENAME], [[1, 0, [[1, 174]]]]);
function HourglassTop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HourglassTop);
  var svg = root1193();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hourglass-top", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HourglassTop = hmr(HourglassTop, () => HourglassTop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HourglassTop[HMR].source;
    set(HourglassTop[HMR].source, module.default[HMR].original);
  });
}
var HourglassTop_default = HourglassTop;
mark_module_end(HourglassTop);

// node_modules/svelte-bootstrap-icons/lib/Hourglass.svelte
mark_module_start();
Hourglass[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hourglass.svelte";
var root1194 = add_locations(ns_template(`<svg><!><path d="M2 1.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1-.5-.5zm2.5.5v1a3.5 3.5 0 0 0 1.989 3.158c.533.256 1.011.791 1.011 1.491v.702c0 .7-.478 1.235-1.011 1.491A3.5 3.5 0 0 0 4.5 13v1h7v-1a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351v-.702c0-.7.478-1.235 1.011-1.491A3.5 3.5 0 0 0 11.5 3V2h-7z"></path></svg>`), Hourglass[FILENAME], [[1, 0, [[1, 170]]]]);
function Hourglass($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hourglass);
  var svg = root1194();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hourglass", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hourglass = hmr(Hourglass, () => Hourglass[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hourglass[HMR].source;
    set(Hourglass[HMR].source, module.default[HMR].original);
  });
}
var Hourglass_default = Hourglass;
mark_module_end(Hourglass);

// node_modules/svelte-bootstrap-icons/lib/HouseAddFill.svelte
mark_module_start();
HouseAddFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseAddFill.svelte";
var root1195 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 1 1-1 0v-1h-1a.5.5 0 1 1 0-1h1v-1a.5.5 0 0 1 1 0Z"></path><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 4.712 4.712A4.5 4.5 0 0 0 8.758 15H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path></svg>`), HouseAddFill[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function HouseAddFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseAddFill);
  var svg = root1195();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-add-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseAddFill = hmr(HouseAddFill, () => HouseAddFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseAddFill[HMR].source;
    set(HouseAddFill[HMR].source, module.default[HMR].original);
  });
}
var HouseAddFill_default = HouseAddFill;
mark_module_end(HouseAddFill);

// node_modules/svelte-bootstrap-icons/lib/HouseAdd.svelte
mark_module_start();
HouseAdd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseAdd.svelte";
var root1196 = add_locations(ns_template(`<svg><!><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h4a.5.5 0 1 0 0-1h-4a.5.5 0 0 1-.5-.5V7.207l5-5 6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 1 0 1 0v-1h1a.5.5 0 1 0 0-1h-1v-1a.5.5 0 0 0-.5-.5Z"></path></svg>`), HouseAdd[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function HouseAdd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseAdd);
  var svg = root1196();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-add", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseAdd = hmr(HouseAdd, () => HouseAdd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseAdd[HMR].source;
    set(HouseAdd[HMR].source, module.default[HMR].original);
  });
}
var HouseAdd_default = HouseAdd;
mark_module_end(HouseAdd);

// node_modules/svelte-bootstrap-icons/lib/HouseCheckFill.svelte
mark_module_start();
HouseCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseCheckFill.svelte";
var root1197 = add_locations(ns_template(`<svg><!><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 4.712 4.712A4.5 4.5 0 0 0 8.758 15H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.707l.547.547 1.17-1.951a.5.5 0 1 1 .858.514Z"></path></svg>`), HouseCheckFill[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function HouseCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseCheckFill);
  var svg = root1197();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseCheckFill = hmr(HouseCheckFill, () => HouseCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseCheckFill[HMR].source;
    set(HouseCheckFill[HMR].source, module.default[HMR].original);
  });
}
var HouseCheckFill_default = HouseCheckFill;
mark_module_end(HouseCheckFill);

// node_modules/svelte-bootstrap-icons/lib/HouseCheck.svelte
mark_module_start();
HouseCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseCheck.svelte";
var root1198 = add_locations(ns_template(`<svg><!><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5 5V13.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 2 13.5V8.207l-.646.647a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.707l.547.547 1.17-1.951a.5.5 0 1 1 .858.514Z"></path></svg>`), HouseCheck[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function HouseCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseCheck);
  var svg = root1198();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseCheck = hmr(HouseCheck, () => HouseCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseCheck[HMR].source;
    set(HouseCheck[HMR].source, module.default[HMR].original);
  });
}
var HouseCheck_default = HouseCheck;
mark_module_end(HouseCheck);

// node_modules/svelte-bootstrap-icons/lib/HouseDashFill.svelte
mark_module_start();
HouseDashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseDashFill.svelte";
var root1199 = add_locations(ns_template(`<svg><!><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 4.712 4.712A4.5 4.5 0 0 0 8.758 15H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7ZM11 12h3a.5.5 0 0 1 0 1h-3a.5.5 0 1 1 0-1Z"></path></svg>`), HouseDashFill[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function HouseDashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseDashFill);
  var svg = root1199();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-dash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseDashFill = hmr(HouseDashFill, () => HouseDashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseDashFill[HMR].source;
    set(HouseDashFill[HMR].source, module.default[HMR].original);
  });
}
var HouseDashFill_default = HouseDashFill;
mark_module_end(HouseDashFill);

// node_modules/svelte-bootstrap-icons/lib/HouseDash.svelte
mark_module_start();
HouseDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseDash.svelte";
var root1200 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7ZM11 12h3a.5.5 0 0 1 0 1h-3a.5.5 0 1 1 0-1Z"></path><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5 5V13.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 2 13.5V8.207l-.646.647a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path></svg>`), HouseDash[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function HouseDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseDash);
  var svg = root1200();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseDash = hmr(HouseDash, () => HouseDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseDash[HMR].source;
    set(HouseDash[HMR].source, module.default[HMR].original);
  });
}
var HouseDash_default = HouseDash;
mark_module_end(HouseDash);

// node_modules/svelte-bootstrap-icons/lib/HouseDoorFill.svelte
mark_module_start();
HouseDoorFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseDoorFill.svelte";
var root1201 = add_locations(ns_template(`<svg><!><path d="M6.5 14.5v-3.505c0-.245.25-.495.5-.495h2c.25 0 .5.25.5.5v3.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5Z"></path></svg>`), HouseDoorFill[FILENAME], [[1, 0, [[1, 176]]]]);
function HouseDoorFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseDoorFill);
  var svg = root1201();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-door-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseDoorFill = hmr(HouseDoorFill, () => HouseDoorFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseDoorFill[HMR].source;
    set(HouseDoorFill[HMR].source, module.default[HMR].original);
  });
}
var HouseDoorFill_default = HouseDoorFill;
mark_module_end(HouseDoorFill);

// node_modules/svelte-bootstrap-icons/lib/HouseDoor.svelte
mark_module_start();
HouseDoor[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseDoor.svelte";
var root1202 = add_locations(ns_template(`<svg><!><path d="M8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4.5a.5.5 0 0 0 .5-.5v-4h2v4a.5.5 0 0 0 .5.5H14a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146ZM2.5 14V7.707l5.5-5.5 5.5 5.5V14H10v-4a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v4H2.5Z"></path></svg>`), HouseDoor[FILENAME], [[1, 0, [[1, 171]]]]);
function HouseDoor($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseDoor);
  var svg = root1202();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-door", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseDoor = hmr(HouseDoor, () => HouseDoor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseDoor[HMR].source;
    set(HouseDoor[HMR].source, module.default[HMR].original);
  });
}
var HouseDoor_default = HouseDoor;
mark_module_end(HouseDoor);

// node_modules/svelte-bootstrap-icons/lib/HouseDownFill.svelte
mark_module_start();
HouseDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseDownFill.svelte";
var root1203 = add_locations(ns_template(`<svg><!><path d="M12.5 9a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7Zm.354 5.854 1.5-1.5a.5.5 0 0 0-.708-.707l-.646.646V10.5a.5.5 0 0 0-1 0v2.793l-.646-.646a.5.5 0 0 0-.708.707l1.5 1.5a.5.5 0 0 0 .708 0Z"></path><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 4.712 4.712A4.5 4.5 0 0 0 8.758 15H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path></svg>`), HouseDownFill[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function HouseDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseDownFill);
  var svg = root1203();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseDownFill = hmr(HouseDownFill, () => HouseDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseDownFill[HMR].source;
    set(HouseDownFill[HMR].source, module.default[HMR].original);
  });
}
var HouseDownFill_default = HouseDownFill;
mark_module_end(HouseDownFill);

// node_modules/svelte-bootstrap-icons/lib/HouseDown.svelte
mark_module_start();
HouseDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseDown.svelte";
var root1204 = add_locations(ns_template(`<svg><!><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5 5V13.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 2 13.5V8.207l-.646.647a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path><path d="M12.5 9a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7Zm.354 5.854 1.5-1.5a.5.5 0 0 0-.708-.707l-.646.646V10.5a.5.5 0 0 0-1 0v2.793l-.646-.646a.5.5 0 0 0-.708.707l1.5 1.5a.5.5 0 0 0 .708 0Z"></path></svg>`), HouseDown[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function HouseDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseDown);
  var svg = root1204();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseDown = hmr(HouseDown, () => HouseDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseDown[HMR].source;
    set(HouseDown[HMR].source, module.default[HMR].original);
  });
}
var HouseDown_default = HouseDown;
mark_module_end(HouseDown);

// node_modules/svelte-bootstrap-icons/lib/HouseExclamationFill.svelte
mark_module_start();
HouseExclamationFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseExclamationFill.svelte";
var root1205 = add_locations(ns_template(`<svg><!><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 4.712 4.712A4.5 4.5 0 0 0 8.758 15H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1.5a.5.5 0 1 0 1 0V11a.5.5 0 0 0-.5-.5Zm0 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path></svg>`), HouseExclamationFill[FILENAME], [
  [
    1,
    0,
    [[1, 183], [2, 2], [3, 2]]
  ]
]);
function HouseExclamationFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseExclamationFill);
  var svg = root1205();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-exclamation-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseExclamationFill = hmr(HouseExclamationFill, () => HouseExclamationFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseExclamationFill[HMR].source;
    set(HouseExclamationFill[HMR].source, module.default[HMR].original);
  });
}
var HouseExclamationFill_default = HouseExclamationFill;
mark_module_end(HouseExclamationFill);

// node_modules/svelte-bootstrap-icons/lib/HouseExclamation.svelte
mark_module_start();
HouseExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseExclamation.svelte";
var root1206 = add_locations(ns_template(`<svg><!><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5 5V13.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 2 13.5V8.207l-.646.647a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1.5a.5.5 0 1 0 1 0V11a.5.5 0 0 0-.5-.5Zm0 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path></svg>`), HouseExclamation[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function HouseExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseExclamation);
  var svg = root1206();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseExclamation = hmr(HouseExclamation, () => HouseExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseExclamation[HMR].source;
    set(HouseExclamation[HMR].source, module.default[HMR].original);
  });
}
var HouseExclamation_default = HouseExclamation;
mark_module_end(HouseExclamation);

// node_modules/svelte-bootstrap-icons/lib/HouseFill.svelte
mark_module_start();
HouseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseFill.svelte";
var root1207 = add_locations(ns_template(`<svg><!><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path></svg>`), HouseFill[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function HouseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseFill);
  var svg = root1207();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseFill = hmr(HouseFill, () => HouseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseFill[HMR].source;
    set(HouseFill[HMR].source, module.default[HMR].original);
  });
}
var HouseFill_default = HouseFill;
mark_module_end(HouseFill);

// node_modules/svelte-bootstrap-icons/lib/HouseGearFill.svelte
mark_module_start();
HouseGearFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseGearFill.svelte";
var root1208 = add_locations(ns_template(`<svg><!><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path><path d="M11.07 9.047a1.5 1.5 0 0 0-1.742.26l-.02.021a1.5 1.5 0 0 0-.261 1.742 1.5 1.5 0 0 0 0 2.86 1.504 1.504 0 0 0-.12 1.07H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6 4.724 4.724a1.5 1.5 0 0 0-1.654 1.03Z"></path><path d="m13.158 9.608-.043-.148c-.181-.613-1.049-.613-1.23 0l-.043.148a.64.64 0 0 1-.921.382l-.136-.074c-.561-.306-1.175.308-.87.869l.075.136a.64.64 0 0 1-.382.92l-.148.045c-.613.18-.613 1.048 0 1.229l.148.043a.64.64 0 0 1 .382.921l-.074.136c-.306.561.308 1.175.869.87l.136-.075a.64.64 0 0 1 .92.382l.045.149c.18.612 1.048.612 1.229 0l.043-.15a.64.64 0 0 1 .921-.38l.136.074c.561.305 1.175-.309.87-.87l-.075-.136a.64.64 0 0 1 .382-.92l.149-.044c.612-.181.612-1.049 0-1.23l-.15-.043a.64.64 0 0 1-.38-.921l.074-.136c.305-.561-.309-1.175-.87-.87l-.136.075a.64.64 0 0 1-.92-.382ZM12.5 14a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Z"></path></svg>`), HouseGearFill[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function HouseGearFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseGearFill);
  var svg = root1208();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-gear-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseGearFill = hmr(HouseGearFill, () => HouseGearFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseGearFill[HMR].source;
    set(HouseGearFill[HMR].source, module.default[HMR].original);
  });
}
var HouseGearFill_default = HouseGearFill;
mark_module_end(HouseGearFill);

// node_modules/svelte-bootstrap-icons/lib/HouseGear.svelte
mark_module_start();
HouseGear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseGear.svelte";
var root1209 = add_locations(ns_template(`<svg><!><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5 5V13.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 2 13.5V8.207l-.646.647a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path><path d="M11.886 9.46c.18-.613 1.048-.613 1.229 0l.043.148a.64.64 0 0 0 .921.382l.136-.074c.561-.306 1.175.308.87.869l-.075.136a.64.64 0 0 0 .382.92l.149.045c.612.18.612 1.048 0 1.229l-.15.043a.64.64 0 0 0-.38.921l.074.136c.305.561-.309 1.175-.87.87l-.136-.075a.64.64 0 0 0-.92.382l-.045.149c-.18.612-1.048.612-1.229 0l-.043-.15a.64.64 0 0 0-.921-.38l-.136.074c-.561.305-1.175-.309-.87-.87l.075-.136a.64.64 0 0 0-.382-.92l-.148-.044c-.613-.181-.613-1.049 0-1.23l.148-.043a.64.64 0 0 0 .382-.921l-.074-.136c-.306-.561.308-1.175.869-.87l.136.075a.64.64 0 0 0 .92-.382l.045-.148ZM14 12.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0Z"></path></svg>`), HouseGear[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function HouseGear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseGear);
  var svg = root1209();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-gear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseGear = hmr(HouseGear, () => HouseGear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseGear[HMR].source;
    set(HouseGear[HMR].source, module.default[HMR].original);
  });
}
var HouseGear_default = HouseGear;
mark_module_end(HouseGear);

// node_modules/svelte-bootstrap-icons/lib/HouseHeartFill.svelte
mark_module_start();
HouseHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseHeartFill.svelte";
var root1210 = add_locations(ns_template(`<svg><!><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.707L8 2.207 1.354 8.853a.5.5 0 1 1-.708-.707L7.293 1.5Z"></path><path d="m14 9.293-6-6-6 6V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V9.293Zm-6-.811c1.664-1.673 5.825 1.254 0 5.018-5.825-3.764-1.664-6.691 0-5.018Z"></path></svg>`), HouseHeartFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function HouseHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseHeartFill);
  var svg = root1210();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseHeartFill = hmr(HouseHeartFill, () => HouseHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseHeartFill[HMR].source;
    set(HouseHeartFill[HMR].source, module.default[HMR].original);
  });
}
var HouseHeartFill_default = HouseHeartFill;
mark_module_end(HouseHeartFill);

// node_modules/svelte-bootstrap-icons/lib/HouseHeart.svelte
mark_module_start();
HouseHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseHeart.svelte";
var root1211 = add_locations(ns_template(`<svg><!><path d="M8 6.982C9.664 5.309 13.825 8.236 8 12 2.175 8.236 6.336 5.309 8 6.982Z"></path><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.707L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.646a.5.5 0 0 0 .708-.707L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z"></path></svg>`), HouseHeart[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function HouseHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseHeart);
  var svg = root1211();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseHeart = hmr(HouseHeart, () => HouseHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseHeart[HMR].source;
    set(HouseHeart[HMR].source, module.default[HMR].original);
  });
}
var HouseHeart_default = HouseHeart;
mark_module_end(HouseHeart);

// node_modules/svelte-bootstrap-icons/lib/HouseLockFill.svelte
mark_module_start();
HouseLockFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseLockFill.svelte";
var root1212 = add_locations(ns_template(`<svg><!><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 4.72 4.72a3 3 0 0 0-2.709 3.248A2 2 0 0 0 9 13v2H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path><path d="M13 9a2 2 0 0 0-2 2v1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1v-1a2 2 0 0 0-2-2Zm0 1a1 1 0 0 1 1 1v1h-2v-1a1 1 0 0 1 1-1Z"></path></svg>`), HouseLockFill[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function HouseLockFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseLockFill);
  var svg = root1212();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-lock-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseLockFill = hmr(HouseLockFill, () => HouseLockFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseLockFill[HMR].source;
    set(HouseLockFill[HMR].source, module.default[HMR].original);
  });
}
var HouseLockFill_default = HouseLockFill;
mark_module_end(HouseLockFill);

// node_modules/svelte-bootstrap-icons/lib/HouseLock.svelte
mark_module_start();
HouseLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseLock.svelte";
var root1213 = add_locations(ns_template(`<svg><!><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5 5V13.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 2 13.5V8.207l-.646.647a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path><path d="M10 13a1 1 0 0 1 1-1v-1a2 2 0 0 1 4 0v1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2Zm3-3a1 1 0 0 0-1 1v1h2v-1a1 1 0 0 0-1-1Z"></path></svg>`), HouseLock[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function HouseLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseLock);
  var svg = root1213();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseLock = hmr(HouseLock, () => HouseLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseLock[HMR].source;
    set(HouseLock[HMR].source, module.default[HMR].original);
  });
}
var HouseLock_default = HouseLock;
mark_module_end(HouseLock);

// node_modules/svelte-bootstrap-icons/lib/HouseSlashFill.svelte
mark_module_start();
HouseSlashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseSlashFill.svelte";
var root1214 = add_locations(ns_template(`<svg><!><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 4.712 4.712A4.5 4.5 0 0 0 8.758 15H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path><path d="M13.879 10.414a2.5 2.5 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95Z"></path></svg>`), HouseSlashFill[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function HouseSlashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseSlashFill);
  var svg = root1214();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-slash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseSlashFill = hmr(HouseSlashFill, () => HouseSlashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseSlashFill[HMR].source;
    set(HouseSlashFill[HMR].source, module.default[HMR].original);
  });
}
var HouseSlashFill_default = HouseSlashFill;
mark_module_end(HouseSlashFill);

// node_modules/svelte-bootstrap-icons/lib/HouseSlash.svelte
mark_module_start();
HouseSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseSlash.svelte";
var root1215 = add_locations(ns_template(`<svg><!><path d="M13.879 10.414a2.5 2.5 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95Z"></path><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5 5V13.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 2 13.5V8.207l-.646.647a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path></svg>`), HouseSlash[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function HouseSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseSlash);
  var svg = root1215();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseSlash = hmr(HouseSlash, () => HouseSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseSlash[HMR].source;
    set(HouseSlash[HMR].source, module.default[HMR].original);
  });
}
var HouseSlash_default = HouseSlash;
mark_module_end(HouseSlash);

// node_modules/svelte-bootstrap-icons/lib/HouseUpFill.svelte
mark_module_start();
HouseUpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseUpFill.svelte";
var root1216 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.854 1.5 1.5a.5.5 0 0 1-.708.708L13 11.707V14.5a.5.5 0 1 1-1 0v-2.793l-.646.647a.5.5 0 0 1-.708-.707l1.5-1.5a.5.5 0 0 1 .708 0Z"></path><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 4.712 4.712A4.5 4.5 0 0 0 8.758 15H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path></svg>`), HouseUpFill[FILENAME], [
  [
    1,
    0,
    [[1, 174], [2, 2], [3, 2]]
  ]
]);
function HouseUpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseUpFill);
  var svg = root1216();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-up-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseUpFill = hmr(HouseUpFill, () => HouseUpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseUpFill[HMR].source;
    set(HouseUpFill[HMR].source, module.default[HMR].original);
  });
}
var HouseUpFill_default = HouseUpFill;
mark_module_end(HouseUpFill);

// node_modules/svelte-bootstrap-icons/lib/HouseUp.svelte
mark_module_start();
HouseUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseUp.svelte";
var root1217 = add_locations(ns_template(`<svg><!><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5 5V13.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 2 13.5V8.207l-.646.647a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.854 1.5 1.5a.5.5 0 0 1-.708.708L13 11.707V14.5a.5.5 0 1 1-1 0v-2.793l-.646.647a.5.5 0 0 1-.708-.707l1.5-1.5a.5.5 0 0 1 .708 0Z"></path></svg>`), HouseUp[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function HouseUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseUp);
  var svg = root1217();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseUp = hmr(HouseUp, () => HouseUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseUp[HMR].source;
    set(HouseUp[HMR].source, module.default[HMR].original);
  });
}
var HouseUp_default = HouseUp;
mark_module_end(HouseUp);

// node_modules/svelte-bootstrap-icons/lib/HouseXFill.svelte
mark_module_start();
HouseXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseXFill.svelte";
var root1218 = add_locations(ns_template(`<svg><!><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"></path><path d="m8 3.293 4.712 4.712A4.5 4.5 0 0 0 8.758 15H3.5A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm-.646-4.854.646.647.646-.646a.5.5 0 0 1 .708.707l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.707l.647-.647-.647-.646a.5.5 0 0 1 .708-.707Z"></path></svg>`), HouseXFill[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function HouseXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseXFill);
  var svg = root1218();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseXFill = hmr(HouseXFill, () => HouseXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseXFill[HMR].source;
    set(HouseXFill[HMR].source, module.default[HMR].original);
  });
}
var HouseXFill_default = HouseXFill;
mark_module_end(HouseXFill);

// node_modules/svelte-bootstrap-icons/lib/HouseX.svelte
mark_module_start();
HouseX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HouseX.svelte";
var root1219 = add_locations(ns_template(`<svg><!><path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5 5V13.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 2 13.5V8.207l-.646.647a.5.5 0 1 1-.708-.708L7.293 1.5Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm-.646-4.854.646.647.646-.646a.5.5 0 0 1 .708.707l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.707l.647-.647-.647-.646a.5.5 0 0 1 .708-.707Z"></path></svg>`), HouseX[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function HouseX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HouseX);
  var svg = root1219();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HouseX = hmr(HouseX, () => HouseX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HouseX[HMR].source;
    set(HouseX[HMR].source, module.default[HMR].original);
  });
}
var HouseX_default = HouseX;
mark_module_end(HouseX);

// node_modules/svelte-bootstrap-icons/lib/House.svelte
mark_module_start();
House[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/House.svelte";
var root1220 = add_locations(ns_template(`<svg><!><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z"></path></svg>`), House[FILENAME], [[1, 0, [[1, 166]]]]);
function House($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, House);
  var svg = root1220();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-house", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  House = hmr(House, () => House[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = House[HMR].source;
    set(House[HMR].source, module.default[HMR].original);
  });
}
var House_default = House;
mark_module_end(House);

// node_modules/svelte-bootstrap-icons/lib/HousesFill.svelte
mark_module_start();
HousesFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/HousesFill.svelte";
var root1221 = add_locations(ns_template(`<svg><!><path d="M7.207 1a1 1 0 0 0-1.414 0L.146 6.646a.5.5 0 0 0 .708.708L1 7.207V12.5A1.5 1.5 0 0 0 2.5 14h.55a2.51 2.51 0 0 1-.05-.5V9.415a1.5 1.5 0 0 1-.56-2.475l5.353-5.354L7.207 1Z"></path><path d="M8.793 2a1 1 0 0 1 1.414 0L12 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l1.854 1.853a.5.5 0 0 1-.708.708L15 8.207V13.5a1.5 1.5 0 0 1-1.5 1.5h-8A1.5 1.5 0 0 1 4 13.5V8.207l-.146.147a.5.5 0 1 1-.708-.708L8.793 2Z"></path></svg>`), HousesFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function HousesFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, HousesFill);
  var svg = root1221();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-houses-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HousesFill = hmr(HousesFill, () => HousesFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HousesFill[HMR].source;
    set(HousesFill[HMR].source, module.default[HMR].original);
  });
}
var HousesFill_default = HousesFill;
mark_module_end(HousesFill);

// node_modules/svelte-bootstrap-icons/lib/Houses.svelte
mark_module_start();
Houses[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Houses.svelte";
var root1222 = add_locations(ns_template(`<svg><!><path d="M5.793 1a1 1 0 0 1 1.414 0l.647.646a.5.5 0 1 1-.708.708L6.5 1.707 2 6.207V12.5a.5.5 0 0 0 .5.5.5.5 0 0 1 0 1A1.5 1.5 0 0 1 1 12.5V7.207l-.146.147a.5.5 0 0 1-.708-.708L5.793 1Zm3 1a1 1 0 0 1 1.414 0L12 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l1.854 1.853a.5.5 0 0 1-.708.708L15 8.207V13.5a1.5 1.5 0 0 1-1.5 1.5h-8A1.5 1.5 0 0 1 4 13.5V8.207l-.146.147a.5.5 0 1 1-.708-.708L8.793 2Zm.707.707L5 7.207V13.5a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5V7.207l-4.5-4.5Z"></path></svg>`), Houses[FILENAME], [[1, 0, [[1, 167]]]]);
function Houses($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Houses);
  var svg = root1222();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-houses", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Houses = hmr(Houses, () => Houses[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Houses[HMR].source;
    set(Houses[HMR].source, module.default[HMR].original);
  });
}
var Houses_default = Houses;
mark_module_end(Houses);

// node_modules/svelte-bootstrap-icons/lib/Hr.svelte
mark_module_start();
Hr[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hr.svelte";
var root1223 = add_locations(ns_template(`<svg><!><path d="M12 3H4a1 1 0 0 0-1 1v2.5H2V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2.5h-1V4a1 1 0 0 0-1-1zM2 9.5h1V12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V9.5h1V12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5zm-1.5-2a.5.5 0 0 0 0 1h15a.5.5 0 0 0 0-1H.5z"></path></svg>`), Hr[FILENAME], [[1, 0, [[1, 163]]]]);
function Hr($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hr);
  var svg = root1223();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hr", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hr = hmr(Hr, () => Hr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hr[HMR].source;
    set(Hr[HMR].source, module.default[HMR].original);
  });
}
var Hr_default = Hr;
mark_module_end(Hr);

// node_modules/svelte-bootstrap-icons/lib/Hurricane.svelte
mark_module_start();
Hurricane[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hurricane.svelte";
var root1224 = add_locations(ns_template(`<svg><!><path d="M6.999 2.6A5.5 5.5 0 0 1 15 7.5a.5.5 0 0 0 1 0 6.5 6.5 0 1 0-13 0 5 5 0 0 0 6.001 4.9A5.5 5.5 0 0 1 1 7.5a.5.5 0 0 0-1 0 6.5 6.5 0 1 0 13 0 5 5 0 0 0-6.001-4.9zM10 7.5a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"></path></svg>`), Hurricane[FILENAME], [[1, 0, [[1, 170]]]]);
function Hurricane($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hurricane);
  var svg = root1224();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hurricane", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hurricane = hmr(Hurricane, () => Hurricane[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hurricane[HMR].source;
    set(Hurricane[HMR].source, module.default[HMR].original);
  });
}
var Hurricane_default = Hurricane;
mark_module_end(Hurricane);

// node_modules/svelte-bootstrap-icons/lib/Hypnotize.svelte
mark_module_start();
Hypnotize[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Hypnotize.svelte";
var root1225 = add_locations(ns_template(`<svg><!><path d="m7.949 7.998.006-.003.003.009-.01-.006Zm.025-.028v-.03l.018.01-.018.02Zm0 .015.04-.022.01.006v.04l-.029.016-.021-.012v-.028Zm.049.057v-.014l-.008.01.008.004Zm-.05-.008h.006l-.006.004v-.004Z"></path><path fill-rule="evenodd" d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM4.965 1.69a6.972 6.972 0 0 1 3.861-.642c.722.767 1.177 1.887 1.177 3.135 0 1.656-.802 3.088-1.965 3.766 1.263.24 2.655-.815 3.406-2.742.38-.975.537-2.023.492-2.996a7.027 7.027 0 0 1 2.488 3.003c-.303 1.01-1.046 1.966-2.128 2.59-1.44.832-3.09.85-4.26.173l.008.021.012-.006-.01.01c.42 1.218 2.032 1.9 4.08 1.586a7.415 7.415 0 0 0 2.856-1.081 6.963 6.963 0 0 1-1.358 3.662c-1.03.248-2.235.084-3.322-.544-1.433-.827-2.272-2.236-2.279-3.58l-.012-.003c-.845.972-.63 2.71.666 4.327a7.415 7.415 0 0 0 2.37 1.935 6.972 6.972 0 0 1-3.86.65c-.727-.767-1.186-1.892-1.186-3.146 0-1.658.804-3.091 1.969-3.768l-.002-.007c-1.266-.25-2.666.805-3.42 2.74a7.415 7.415 0 0 0-.49 3.012 7.026 7.026 0 0 1-2.49-3.018C1.87 9.757 2.613 8.8 3.696 8.174c1.438-.83 3.084-.85 4.253-.176l.005-.006C7.538 6.77 5.924 6.085 3.872 6.4c-1.04.16-2.03.55-2.853 1.08a6.962 6.962 0 0 1 1.372-3.667l-.002.003c1.025-.243 2.224-.078 3.306.547 1.43.826 2.269 2.23 2.28 3.573L8 7.941c.837-.974.62-2.706-.673-4.319a7.415 7.415 0 0 0-2.362-1.931Z"></path></svg>`), Hypnotize[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Hypnotize($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Hypnotize);
  var svg = root1225();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-hypnotize", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hypnotize = hmr(Hypnotize, () => Hypnotize[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hypnotize[HMR].source;
    set(Hypnotize[HMR].source, module.default[HMR].original);
  });
}
var Hypnotize_default = Hypnotize;
mark_module_end(Hypnotize);

// node_modules/svelte-bootstrap-icons/lib/ImageAlt.svelte
mark_module_start();
ImageAlt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ImageAlt.svelte";
var root1226 = add_locations(ns_template(`<svg><!><path d="M7 2.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0zm4.225 4.053a.5.5 0 0 0-.577.093l-3.71 4.71-2.66-2.772a.5.5 0 0 0-.63.062L.002 13v2a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4.5l-4.777-3.947z"></path></svg>`), ImageAlt[FILENAME], [[1, 0, [[1, 170]]]]);
function ImageAlt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ImageAlt);
  var svg = root1226();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-image-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ImageAlt = hmr(ImageAlt, () => ImageAlt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ImageAlt[HMR].source;
    set(ImageAlt[HMR].source, module.default[HMR].original);
  });
}
var ImageAlt_default = ImageAlt;
mark_module_end(ImageAlt);

// node_modules/svelte-bootstrap-icons/lib/ImageFill.svelte
mark_module_start();
ImageFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ImageFill.svelte";
var root1227 = add_locations(ns_template(`<svg><!><path d="M.002 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-12a2 2 0 0 1-2-2V3zm1 9v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V9.5l-3.777-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12zm5-6.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0z"></path></svg>`), ImageFill[FILENAME], [[1, 0, [[1, 171]]]]);
function ImageFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ImageFill);
  var svg = root1227();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-image-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ImageFill = hmr(ImageFill, () => ImageFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ImageFill[HMR].source;
    set(ImageFill[HMR].source, module.default[HMR].original);
  });
}
var ImageFill_default = ImageFill;
mark_module_end(ImageFill);

// node_modules/svelte-bootstrap-icons/lib/Image.svelte
mark_module_start();
Image[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Image.svelte";
var root1228 = add_locations(ns_template(`<svg><!><path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path><path d="M2.002 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-12zm12 1a1 1 0 0 1 1 1v6.5l-3.777-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12V3a1 1 0 0 1 1-1h12z"></path></svg>`), Image[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Image($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Image);
  var svg = root1228();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-image", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image = hmr(Image, () => Image[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image[HMR].source;
    set(Image[HMR].source, module.default[HMR].original);
  });
}
var Image_default = Image;
mark_module_end(Image);

// node_modules/svelte-bootstrap-icons/lib/Images.svelte
mark_module_start();
Images[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Images.svelte";
var root1229 = add_locations(ns_template(`<svg><!><path d="M4.502 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"></path><path d="M14.002 13a2 2 0 0 1-2 2h-10a2 2 0 0 1-2-2V5A2 2 0 0 1 2 3a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v8a2 2 0 0 1-1.998 2zM14 2H4a1 1 0 0 0-1 1h9.002a2 2 0 0 1 2 2v7A1 1 0 0 0 15 11V3a1 1 0 0 0-1-1zM2.002 4a1 1 0 0 0-1 1v8l2.646-2.354a.5.5 0 0 1 .63-.062l2.66 1.773 3.71-3.71a.5.5 0 0 1 .577-.094l1.777 1.947V5a1 1 0 0 0-1-1h-10z"></path></svg>`), Images[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Images($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Images);
  var svg = root1229();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-images", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Images = hmr(Images, () => Images[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Images[HMR].source;
    set(Images[HMR].source, module.default[HMR].original);
  });
}
var Images_default = Images;
mark_module_end(Images);

// node_modules/svelte-bootstrap-icons/lib/InboxFill.svelte
mark_module_start();
InboxFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/InboxFill.svelte";
var root1230 = add_locations(ns_template(`<svg><!><path d="M4.98 4a.5.5 0 0 0-.39.188L1.54 8H6a.5.5 0 0 1 .5.5 1.5 1.5 0 1 0 3 0A.5.5 0 0 1 10 8h4.46l-3.05-3.812A.5.5 0 0 0 11.02 4H4.98zm-1.17-.437A1.5 1.5 0 0 1 4.98 3h6.04a1.5 1.5 0 0 1 1.17.563l3.7 4.625a.5.5 0 0 1 .106.374l-.39 3.124A1.5 1.5 0 0 1 14.117 13H1.883a1.5 1.5 0 0 1-1.489-1.314l-.39-3.124a.5.5 0 0 1 .106-.374l3.7-4.625z"></path></svg>`), InboxFill[FILENAME], [[1, 0, [[1, 171]]]]);
function InboxFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, InboxFill);
  var svg = root1230();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-inbox-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InboxFill = hmr(InboxFill, () => InboxFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InboxFill[HMR].source;
    set(InboxFill[HMR].source, module.default[HMR].original);
  });
}
var InboxFill_default = InboxFill;
mark_module_end(InboxFill);

// node_modules/svelte-bootstrap-icons/lib/Inbox.svelte
mark_module_start();
Inbox[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Inbox.svelte";
var root1231 = add_locations(ns_template(`<svg><!><path d="M4.98 4a.5.5 0 0 0-.39.188L1.54 8H6a.5.5 0 0 1 .5.5 1.5 1.5 0 1 0 3 0A.5.5 0 0 1 10 8h4.46l-3.05-3.812A.5.5 0 0 0 11.02 4H4.98zm9.954 5H10.45a2.5 2.5 0 0 1-4.9 0H1.066l.32 2.562a.5.5 0 0 0 .497.438h12.234a.5.5 0 0 0 .496-.438L14.933 9zM3.809 3.563A1.5 1.5 0 0 1 4.981 3h6.038a1.5 1.5 0 0 1 1.172.563l3.7 4.625a.5.5 0 0 1 .105.374l-.39 3.124A1.5 1.5 0 0 1 14.117 13H1.883a1.5 1.5 0 0 1-1.489-1.314l-.39-3.124a.5.5 0 0 1 .106-.374l3.7-4.625z"></path></svg>`), Inbox[FILENAME], [[1, 0, [[1, 166]]]]);
function Inbox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Inbox);
  var svg = root1231();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-inbox", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Inbox = hmr(Inbox, () => Inbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Inbox[HMR].source;
    set(Inbox[HMR].source, module.default[HMR].original);
  });
}
var Inbox_default = Inbox;
mark_module_end(Inbox);

// node_modules/svelte-bootstrap-icons/lib/InboxesFill.svelte
mark_module_start();
InboxesFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/InboxesFill.svelte";
var root1232 = add_locations(ns_template(`<svg><!><path d="M4.98 1a.5.5 0 0 0-.39.188L1.54 5H6a.5.5 0 0 1 .5.5 1.5 1.5 0 0 0 3 0A.5.5 0 0 1 10 5h4.46l-3.05-3.812A.5.5 0 0 0 11.02 1H4.98zM3.81.563A1.5 1.5 0 0 1 4.98 0h6.04a1.5 1.5 0 0 1 1.17.563l3.7 4.625a.5.5 0 0 1 .106.374l-.39 3.124A1.5 1.5 0 0 1 14.117 10H1.883A1.5 1.5 0 0 1 .394 8.686l-.39-3.124a.5.5 0 0 1 .106-.374L3.81.563zM.125 11.17A.5.5 0 0 1 .5 11H6a.5.5 0 0 1 .5.5 1.5 1.5 0 0 0 3 0 .5.5 0 0 1 .5-.5h5.5a.5.5 0 0 1 .496.562l-.39 3.124A1.5 1.5 0 0 1 14.117 16H1.883a1.5 1.5 0 0 1-1.489-1.314l-.39-3.124a.5.5 0 0 1 .121-.393z"></path></svg>`), InboxesFill[FILENAME], [[1, 0, [[1, 173]]]]);
function InboxesFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, InboxesFill);
  var svg = root1232();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-inboxes-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InboxesFill = hmr(InboxesFill, () => InboxesFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InboxesFill[HMR].source;
    set(InboxesFill[HMR].source, module.default[HMR].original);
  });
}
var InboxesFill_default = InboxesFill;
mark_module_end(InboxesFill);

// node_modules/svelte-bootstrap-icons/lib/Inboxes.svelte
mark_module_start();
Inboxes[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Inboxes.svelte";
var root1233 = add_locations(ns_template(`<svg><!><path d="M4.98 1a.5.5 0 0 0-.39.188L1.54 5H6a.5.5 0 0 1 .5.5 1.5 1.5 0 0 0 3 0A.5.5 0 0 1 10 5h4.46l-3.05-3.812A.5.5 0 0 0 11.02 1H4.98zm9.954 5H10.45a2.5 2.5 0 0 1-4.9 0H1.066l.32 2.562A.5.5 0 0 0 1.884 9h12.234a.5.5 0 0 0 .496-.438L14.933 6zM3.809.563A1.5 1.5 0 0 1 4.981 0h6.038a1.5 1.5 0 0 1 1.172.563l3.7 4.625a.5.5 0 0 1 .105.374l-.39 3.124A1.5 1.5 0 0 1 14.117 10H1.883A1.5 1.5 0 0 1 .394 8.686l-.39-3.124a.5.5 0 0 1 .106-.374L3.81.563zM.125 11.17A.5.5 0 0 1 .5 11H6a.5.5 0 0 1 .5.5 1.5 1.5 0 0 0 3 0 .5.5 0 0 1 .5-.5h5.5a.5.5 0 0 1 .496.562l-.39 3.124A1.5 1.5 0 0 1 14.117 16H1.883a1.5 1.5 0 0 1-1.489-1.314l-.39-3.124a.5.5 0 0 1 .121-.393zm.941.83.32 2.562a.5.5 0 0 0 .497.438h12.234a.5.5 0 0 0 .496-.438l.32-2.562H10.45a2.5 2.5 0 0 1-4.9 0H1.066z"></path></svg>`), Inboxes[FILENAME], [[1, 0, [[1, 168]]]]);
function Inboxes($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Inboxes);
  var svg = root1233();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-inboxes", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Inboxes = hmr(Inboxes, () => Inboxes[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Inboxes[HMR].source;
    set(Inboxes[HMR].source, module.default[HMR].original);
  });
}
var Inboxes_default = Inboxes;
mark_module_end(Inboxes);

// node_modules/svelte-bootstrap-icons/lib/Incognito.svelte
mark_module_start();
Incognito[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Incognito.svelte";
var root1234 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="m4.736 1.968-.892 3.269-.014.058C2.113 5.568 1 6.006 1 6.5 1 7.328 4.134 8 8 8s7-.672 7-1.5c0-.494-1.113-.932-2.83-1.205a1.032 1.032 0 0 0-.014-.058l-.892-3.27c-.146-.533-.698-.849-1.239-.734C9.411 1.363 8.62 1.5 8 1.5c-.62 0-1.411-.136-2.025-.267-.541-.115-1.093.2-1.239.735Zm.015 3.867a.25.25 0 0 1 .274-.224c.9.092 1.91.143 2.975.143a29.58 29.58 0 0 0 2.975-.143.25.25 0 0 1 .05.498c-.918.093-1.944.145-3.025.145s-2.107-.052-3.025-.145a.25.25 0 0 1-.224-.274ZM3.5 10h2a.5.5 0 0 1 .5.5v1a1.5 1.5 0 0 1-3 0v-1a.5.5 0 0 1 .5-.5Zm-1.5.5c0-.175.03-.344.085-.5H2a.5.5 0 0 1 0-1h3.5a1.5 1.5 0 0 1 1.488 1.312 3.5 3.5 0 0 1 2.024 0A1.5 1.5 0 0 1 10.5 9H14a.5.5 0 0 1 0 1h-.085c.055.156.085.325.085.5v1a2.5 2.5 0 0 1-5 0v-.14l-.21-.07a2.5 2.5 0 0 0-1.58 0l-.21.07v.14a2.5 2.5 0 0 1-5 0v-1Zm8.5-.5h2a.5.5 0 0 1 .5.5v1a1.5 1.5 0 0 1-3 0v-1a.5.5 0 0 1 .5-.5Z"></path></svg>`), Incognito[FILENAME], [[1, 0, [[1, 170]]]]);
function Incognito($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Incognito);
  var svg = root1234();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-incognito", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Incognito = hmr(Incognito, () => Incognito[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Incognito[HMR].source;
    set(Incognito[HMR].source, module.default[HMR].original);
  });
}
var Incognito_default = Incognito;
mark_module_end(Incognito);

// node_modules/svelte-bootstrap-icons/lib/Indent.svelte
mark_module_start();
Indent[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Indent.svelte";
var root1235 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3 8a.5.5 0 0 1 .5-.5h6.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H3.5A.5.5 0 0 1 3 8Z"></path><path fill-rule="evenodd" d="M12.5 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5Z"></path></svg>`), Indent[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Indent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Indent);
  var svg = root1235();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-indent", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Indent = hmr(Indent, () => Indent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Indent[HMR].source;
    set(Indent[HMR].source, module.default[HMR].original);
  });
}
var Indent_default = Indent;
mark_module_end(Indent);

// node_modules/svelte-bootstrap-icons/lib/Infinity.svelte
mark_module_start();
Infinity[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Infinity.svelte";
var root1236 = add_locations(ns_template(`<svg><!><path d="M5.68 5.792 7.345 7.75 5.681 9.708a2.75 2.75 0 1 1 0-3.916ZM8 6.978 6.416 5.113l-.014-.015a3.75 3.75 0 1 0 0 5.304l.014-.015L8 8.522l1.584 1.865.014.015a3.75 3.75 0 1 0 0-5.304l-.014.015L8 6.978Zm.656.772 1.663-1.958a2.75 2.75 0 1 1 0 3.916L8.656 7.75Z"></path></svg>`), Infinity[FILENAME], [[1, 0, [[1, 169]]]]);
function Infinity($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Infinity);
  var svg = root1236();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-infinity", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Infinity = hmr(Infinity, () => Infinity[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Infinity[HMR].source;
    set(Infinity[HMR].source, module.default[HMR].original);
  });
}
var Infinity_default = Infinity;
mark_module_end(Infinity);

// node_modules/svelte-bootstrap-icons/lib/InfoCircleFill.svelte
mark_module_start();
InfoCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/InfoCircleFill.svelte";
var root1237 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"></path></svg>`), InfoCircleFill[FILENAME], [[1, 0, [[1, 177]]]]);
function InfoCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, InfoCircleFill);
  var svg = root1237();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-info-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InfoCircleFill = hmr(InfoCircleFill, () => InfoCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InfoCircleFill[HMR].source;
    set(InfoCircleFill[HMR].source, module.default[HMR].original);
  });
}
var InfoCircleFill_default = InfoCircleFill;
mark_module_end(InfoCircleFill);

// node_modules/svelte-bootstrap-icons/lib/InfoCircle.svelte
mark_module_start();
InfoCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/InfoCircle.svelte";
var root1238 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), InfoCircle[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function InfoCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, InfoCircle);
  var svg = root1238();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-info-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InfoCircle = hmr(InfoCircle, () => InfoCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InfoCircle[HMR].source;
    set(InfoCircle[HMR].source, module.default[HMR].original);
  });
}
var InfoCircle_default = InfoCircle;
mark_module_end(InfoCircle);

// node_modules/svelte-bootstrap-icons/lib/InfoLg.svelte
mark_module_start();
InfoLg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/InfoLg.svelte";
var root1239 = add_locations(ns_template(`<svg><!><path d="m9.708 6.075-3.024.379-.108.502.595.108c.387.093.464.232.38.619l-.975 4.577c-.255 1.183.14 1.74 1.067 1.74.72 0 1.554-.332 1.933-.789l.116-.549c-.263.232-.65.325-.905.325-.363 0-.494-.255-.402-.704l1.323-6.208Zm.091-2.755a1.32 1.32 0 1 1-2.64 0 1.32 1.32 0 0 1 2.64 0Z"></path></svg>`), InfoLg[FILENAME], [[1, 0, [[1, 168]]]]);
function InfoLg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, InfoLg);
  var svg = root1239();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-info-lg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InfoLg = hmr(InfoLg, () => InfoLg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InfoLg[HMR].source;
    set(InfoLg[HMR].source, module.default[HMR].original);
  });
}
var InfoLg_default = InfoLg;
mark_module_end(InfoLg);

// node_modules/svelte-bootstrap-icons/lib/InfoSquareFill.svelte
mark_module_start();
InfoSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/InfoSquareFill.svelte";
var root1240 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.93 4.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM8 5.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), InfoSquareFill[FILENAME], [[1, 0, [[1, 177]]]]);
function InfoSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, InfoSquareFill);
  var svg = root1240();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-info-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InfoSquareFill = hmr(InfoSquareFill, () => InfoSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InfoSquareFill[HMR].source;
    set(InfoSquareFill[HMR].source, module.default[HMR].original);
  });
}
var InfoSquareFill_default = InfoSquareFill;
mark_module_end(InfoSquareFill);

// node_modules/svelte-bootstrap-icons/lib/InfoSquare.svelte
mark_module_start();
InfoSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/InfoSquare.svelte";
var root1241 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), InfoSquare[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function InfoSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, InfoSquare);
  var svg = root1241();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-info-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InfoSquare = hmr(InfoSquare, () => InfoSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InfoSquare[HMR].source;
    set(InfoSquare[HMR].source, module.default[HMR].original);
  });
}
var InfoSquare_default = InfoSquare;
mark_module_end(InfoSquare);

// node_modules/svelte-bootstrap-icons/lib/Info.svelte
mark_module_start();
Info[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Info.svelte";
var root1242 = add_locations(ns_template(`<svg><!><path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), Info[FILENAME], [[1, 0, [[1, 165]]]]);
function Info($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Info);
  var svg = root1242();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-info", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Info = hmr(Info, () => Info[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Info[HMR].source;
    set(Info[HMR].source, module.default[HMR].original);
  });
}
var Info_default = Info;
mark_module_end(Info);

// node_modules/svelte-bootstrap-icons/lib/InputCursorText.svelte
mark_module_start();
InputCursorText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/InputCursorText.svelte";
var root1243 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5 2a.5.5 0 0 1 .5-.5c.862 0 1.573.287 2.06.566.174.099.321.198.44.286.119-.088.266-.187.44-.286A4.165 4.165 0 0 1 10.5 1.5a.5.5 0 0 1 0 1c-.638 0-1.177.213-1.564.434a3.49 3.49 0 0 0-.436.294V7.5H9a.5.5 0 0 1 0 1h-.5v4.272c.1.08.248.187.436.294.387.221.926.434 1.564.434a.5.5 0 0 1 0 1 4.165 4.165 0 0 1-2.06-.566A4.561 4.561 0 0 1 8 13.65a4.561 4.561 0 0 1-.44.285 4.165 4.165 0 0 1-2.06.566.5.5 0 0 1 0-1c.638 0 1.177-.213 1.564-.434.188-.107.335-.214.436-.294V8.5H7a.5.5 0 0 1 0-1h.5V3.228a3.49 3.49 0 0 0-.436-.294A3.166 3.166 0 0 0 5.5 2.5.5.5 0 0 1 5 2z"></path><path d="M10 5h4a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1h-4v1h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4v1zM6 5V4H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v-1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h4z"></path></svg>`), InputCursorText[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function InputCursorText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, InputCursorText);
  var svg = root1243();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-input-cursor-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InputCursorText = hmr(InputCursorText, () => InputCursorText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InputCursorText[HMR].source;
    set(InputCursorText[HMR].source, module.default[HMR].original);
  });
}
var InputCursorText_default = InputCursorText;
mark_module_end(InputCursorText);

// node_modules/svelte-bootstrap-icons/lib/InputCursor.svelte
mark_module_start();
InputCursor[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/InputCursor.svelte";
var root1244 = add_locations(ns_template(`<svg><!><path d="M10 5h4a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1h-4v1h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4v1zM6 5V4H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v-1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h4z"></path><path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v13a.5.5 0 0 1-1 0v-13A.5.5 0 0 1 8 1z"></path></svg>`), InputCursor[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function InputCursor($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, InputCursor);
  var svg = root1244();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-input-cursor", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InputCursor = hmr(InputCursor, () => InputCursor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InputCursor[HMR].source;
    set(InputCursor[HMR].source, module.default[HMR].original);
  });
}
var InputCursor_default = InputCursor;
mark_module_end(InputCursor);

// node_modules/svelte-bootstrap-icons/lib/Instagram.svelte
mark_module_start();
Instagram[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Instagram.svelte";
var root1245 = add_locations(ns_template(`<svg><!><path d="M8 0C5.829 0 5.556.01 4.703.048 3.85.088 3.269.222 2.76.42a3.917 3.917 0 0 0-1.417.923A3.927 3.927 0 0 0 .42 2.76C.222 3.268.087 3.85.048 4.7.01 5.555 0 5.827 0 8.001c0 2.172.01 2.444.048 3.297.04.852.174 1.433.372 1.942.205.526.478.972.923 1.417.444.445.89.719 1.416.923.51.198 1.09.333 1.942.372C5.555 15.99 5.827 16 8 16s2.444-.01 3.298-.048c.851-.04 1.434-.174 1.943-.372a3.916 3.916 0 0 0 1.416-.923c.445-.445.718-.891.923-1.417.197-.509.332-1.09.372-1.942C15.99 10.445 16 10.173 16 8s-.01-2.445-.048-3.299c-.04-.851-.175-1.433-.372-1.941a3.926 3.926 0 0 0-.923-1.417A3.911 3.911 0 0 0 13.24.42c-.51-.198-1.092-.333-1.943-.372C10.443.01 10.172 0 7.998 0h.003zm-.717 1.442h.718c2.136 0 2.389.007 3.232.046.78.035 1.204.166 1.486.275.373.145.64.319.92.599.28.28.453.546.598.92.11.281.24.705.275 1.485.039.843.047 1.096.047 3.231s-.008 2.389-.047 3.232c-.035.78-.166 1.203-.275 1.485a2.47 2.47 0 0 1-.599.919c-.28.28-.546.453-.92.598-.28.11-.704.24-1.485.276-.843.038-1.096.047-3.232.047s-2.39-.009-3.233-.047c-.78-.036-1.203-.166-1.485-.276a2.478 2.478 0 0 1-.92-.598 2.48 2.48 0 0 1-.6-.92c-.109-.281-.24-.705-.275-1.485-.038-.843-.046-1.096-.046-3.233 0-2.136.008-2.388.046-3.231.036-.78.166-1.204.276-1.486.145-.373.319-.64.599-.92.28-.28.546-.453.92-.598.282-.11.705-.24 1.485-.276.738-.034 1.024-.044 2.515-.045v.002zm4.988 1.328a.96.96 0 1 0 0 1.92.96.96 0 0 0 0-1.92zm-4.27 1.122a4.109 4.109 0 1 0 0 8.217 4.109 4.109 0 0 0 0-8.217zm0 1.441a2.667 2.667 0 1 1 0 5.334 2.667 2.667 0 0 1 0-5.334z"></path></svg>`), Instagram[FILENAME], [[1, 0, [[1, 170]]]]);
function Instagram($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Instagram);
  var svg = root1245();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-instagram", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Instagram = hmr(Instagram, () => Instagram[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Instagram[HMR].source;
    set(Instagram[HMR].source, module.default[HMR].original);
  });
}
var Instagram_default = Instagram;
mark_module_end(Instagram);

// node_modules/svelte-bootstrap-icons/lib/Intersect.svelte
mark_module_start();
Intersect[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Intersect.svelte";
var root1246 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm5 10v2a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2v5a2 2 0 0 1-2 2H5zm6-8V2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h2V6a2 2 0 0 1 2-2h5z"></path></svg>`), Intersect[FILENAME], [[1, 0, [[1, 170]]]]);
function Intersect($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Intersect);
  var svg = root1246();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-intersect", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Intersect = hmr(Intersect, () => Intersect[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Intersect[HMR].source;
    set(Intersect[HMR].source, module.default[HMR].original);
  });
}
var Intersect_default = Intersect;
mark_module_end(Intersect);

// node_modules/svelte-bootstrap-icons/lib/JournalAlbum.svelte
mark_module_start();
JournalAlbum[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalAlbum.svelte";
var root1247 = add_locations(ns_template(`<svg><!><path d="M5.5 4a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5h-5zm1 7a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalAlbum[FILENAME], [
  [
    1,
    0,
    [[1, 174], [2, 2], [3, 2]]
  ]
]);
function JournalAlbum($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalAlbum);
  var svg = root1247();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-album", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalAlbum = hmr(JournalAlbum, () => JournalAlbum[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalAlbum[HMR].source;
    set(JournalAlbum[HMR].source, module.default[HMR].original);
  });
}
var JournalAlbum_default = JournalAlbum;
mark_module_end(JournalAlbum);

// node_modules/svelte-bootstrap-icons/lib/JournalArrowDown.svelte
mark_module_start();
JournalArrowDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalArrowDown.svelte";
var root1248 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 5a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5A.5.5 0 0 1 8 5z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalArrowDown[FILENAME], [
  [
    1,
    0,
    [[1, 179], [2, 2], [3, 2]]
  ]
]);
function JournalArrowDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalArrowDown);
  var svg = root1248();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-arrow-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalArrowDown = hmr(JournalArrowDown, () => JournalArrowDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalArrowDown[HMR].source;
    set(JournalArrowDown[HMR].source, module.default[HMR].original);
  });
}
var JournalArrowDown_default = JournalArrowDown;
mark_module_end(JournalArrowDown);

// node_modules/svelte-bootstrap-icons/lib/JournalArrowUp.svelte
mark_module_start();
JournalArrowUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalArrowUp.svelte";
var root1249 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 11a.5.5 0 0 0 .5-.5V6.707l1.146 1.147a.5.5 0 0 0 .708-.708l-2-2a.5.5 0 0 0-.708 0l-2 2a.5.5 0 1 0 .708.708L7.5 6.707V10.5a.5.5 0 0 0 .5.5z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalArrowUp[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function JournalArrowUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalArrowUp);
  var svg = root1249();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-arrow-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalArrowUp = hmr(JournalArrowUp, () => JournalArrowUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalArrowUp[HMR].source;
    set(JournalArrowUp[HMR].source, module.default[HMR].original);
  });
}
var JournalArrowUp_default = JournalArrowUp;
mark_module_end(JournalArrowUp);

// node_modules/svelte-bootstrap-icons/lib/JournalBookmarkFill.svelte
mark_module_start();
JournalBookmarkFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalBookmarkFill.svelte";
var root1250 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 1h6v7a.5.5 0 0 1-.757.429L9 7.083 6.757 8.43A.5.5 0 0 1 6 8V1z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalBookmarkFill[FILENAME], [
  [
    1,
    0,
    [[1, 182], [2, 2], [3, 2]]
  ]
]);
function JournalBookmarkFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalBookmarkFill);
  var svg = root1250();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-bookmark-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalBookmarkFill = hmr(JournalBookmarkFill, () => JournalBookmarkFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalBookmarkFill[HMR].source;
    set(JournalBookmarkFill[HMR].source, module.default[HMR].original);
  });
}
var JournalBookmarkFill_default = JournalBookmarkFill;
mark_module_end(JournalBookmarkFill);

// node_modules/svelte-bootstrap-icons/lib/JournalBookmark.svelte
mark_module_start();
JournalBookmark[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalBookmark.svelte";
var root1251 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 8V1h1v6.117L8.743 6.07a.5.5 0 0 1 .514 0L11 7.117V1h1v7a.5.5 0 0 1-.757.429L9 7.083 6.757 8.43A.5.5 0 0 1 6 8z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalBookmark[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function JournalBookmark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalBookmark);
  var svg = root1251();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-bookmark", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalBookmark = hmr(JournalBookmark, () => JournalBookmark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalBookmark[HMR].source;
    set(JournalBookmark[HMR].source, module.default[HMR].original);
  });
}
var JournalBookmark_default = JournalBookmark;
mark_module_end(JournalBookmark);

// node_modules/svelte-bootstrap-icons/lib/JournalCheck.svelte
mark_module_start();
JournalCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalCheck.svelte";
var root1252 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.854 6.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 8.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalCheck[FILENAME], [
  [
    1,
    0,
    [[1, 174], [2, 2], [3, 2]]
  ]
]);
function JournalCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalCheck);
  var svg = root1252();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalCheck = hmr(JournalCheck, () => JournalCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalCheck[HMR].source;
    set(JournalCheck[HMR].source, module.default[HMR].original);
  });
}
var JournalCheck_default = JournalCheck;
mark_module_end(JournalCheck);

// node_modules/svelte-bootstrap-icons/lib/JournalCode.svelte
mark_module_start();
JournalCode[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalCode.svelte";
var root1253 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.646 5.646a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L10.293 8 8.646 6.354a.5.5 0 0 1 0-.708zm-1.292 0a.5.5 0 0 0-.708 0l-2 2a.5.5 0 0 0 0 .708l2 2a.5.5 0 0 0 .708-.708L5.707 8l1.647-1.646a.5.5 0 0 0 0-.708z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalCode[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function JournalCode($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalCode);
  var svg = root1253();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-code", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalCode = hmr(JournalCode, () => JournalCode[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalCode[HMR].source;
    set(JournalCode[HMR].source, module.default[HMR].original);
  });
}
var JournalCode_default = JournalCode;
mark_module_end(JournalCode);

// node_modules/svelte-bootstrap-icons/lib/JournalMedical.svelte
mark_module_start();
JournalMedical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalMedical.svelte";
var root1254 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v.634l.549-.317a.5.5 0 1 1 .5.866L9 6l.549.317a.5.5 0 1 1-.5.866L8.5 6.866V7.5a.5.5 0 0 1-1 0v-.634l-.549.317a.5.5 0 1 1-.5-.866L7 6l-.549-.317a.5.5 0 0 1 .5-.866l.549.317V4.5A.5.5 0 0 1 8 4zM5 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalMedical[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function JournalMedical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalMedical);
  var svg = root1254();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-medical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalMedical = hmr(JournalMedical, () => JournalMedical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalMedical[HMR].source;
    set(JournalMedical[HMR].source, module.default[HMR].original);
  });
}
var JournalMedical_default = JournalMedical;
mark_module_end(JournalMedical);

// node_modules/svelte-bootstrap-icons/lib/JournalMinus.svelte
mark_module_start();
JournalMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalMinus.svelte";
var root1255 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5.5 8a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalMinus[FILENAME], [
  [
    1,
    0,
    [[1, 174], [2, 2], [3, 2]]
  ]
]);
function JournalMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalMinus);
  var svg = root1255();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalMinus = hmr(JournalMinus, () => JournalMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalMinus[HMR].source;
    set(JournalMinus[HMR].source, module.default[HMR].original);
  });
}
var JournalMinus_default = JournalMinus;
mark_module_end(JournalMinus);

// node_modules/svelte-bootstrap-icons/lib/JournalPlus.svelte
mark_module_start();
JournalPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalPlus.svelte";
var root1256 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 5.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V10a.5.5 0 0 1-1 0V8.5H6a.5.5 0 0 1 0-1h1.5V6a.5.5 0 0 1 .5-.5z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalPlus[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function JournalPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalPlus);
  var svg = root1256();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalPlus = hmr(JournalPlus, () => JournalPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalPlus[HMR].source;
    set(JournalPlus[HMR].source, module.default[HMR].original);
  });
}
var JournalPlus_default = JournalPlus;
mark_module_end(JournalPlus);

// node_modules/svelte-bootstrap-icons/lib/JournalRichtext.svelte
mark_module_start();
JournalRichtext[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalRichtext.svelte";
var root1257 = add_locations(ns_template(`<svg><!><path d="M7.5 3.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm-.861 1.542 1.33.886 1.854-1.855a.25.25 0 0 1 .289-.047L11 4.75V7a.5.5 0 0 1-.5.5h-5A.5.5 0 0 1 5 7v-.5s1.54-1.274 1.639-1.208zM5 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalRichtext[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function JournalRichtext($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalRichtext);
  var svg = root1257();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-richtext", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalRichtext = hmr(JournalRichtext, () => JournalRichtext[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalRichtext[HMR].source;
    set(JournalRichtext[HMR].source, module.default[HMR].original);
  });
}
var JournalRichtext_default = JournalRichtext;
mark_module_end(JournalRichtext);

// node_modules/svelte-bootstrap-icons/lib/JournalText.svelte
mark_module_start();
JournalText[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalText.svelte";
var root1258 = add_locations(ns_template(`<svg><!><path d="M5 10.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalText[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function JournalText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalText);
  var svg = root1258();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-text", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalText = hmr(JournalText, () => JournalText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalText[HMR].source;
    set(JournalText[HMR].source, module.default[HMR].original);
  });
}
var JournalText_default = JournalText;
mark_module_end(JournalText);

// node_modules/svelte-bootstrap-icons/lib/JournalX.svelte
mark_module_start();
JournalX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JournalX.svelte";
var root1259 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.146 6.146a.5.5 0 0 1 .708 0L8 7.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 8l1.147 1.146a.5.5 0 0 1-.708.708L8 8.707 6.854 9.854a.5.5 0 0 1-.708-.708L7.293 8 6.146 6.854a.5.5 0 0 1 0-.708z"></path><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), JournalX[FILENAME], [
  [
    1,
    0,
    [[1, 170], [2, 2], [3, 2]]
  ]
]);
function JournalX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JournalX);
  var svg = root1259();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JournalX = hmr(JournalX, () => JournalX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JournalX[HMR].source;
    set(JournalX[HMR].source, module.default[HMR].original);
  });
}
var JournalX_default = JournalX;
mark_module_end(JournalX);

// node_modules/svelte-bootstrap-icons/lib/Journal.svelte
mark_module_start();
Journal[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Journal.svelte";
var root1260 = add_locations(ns_template(`<svg><!><path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"></path><path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"></path></svg>`), Journal[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Journal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Journal);
  var svg = root1260();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journal", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Journal = hmr(Journal, () => Journal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Journal[HMR].source;
    set(Journal[HMR].source, module.default[HMR].original);
  });
}
var Journal_default = Journal;
mark_module_end(Journal);

// node_modules/svelte-bootstrap-icons/lib/Journals.svelte
mark_module_start();
Journals[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Journals.svelte";
var root1261 = add_locations(ns_template(`<svg><!><path d="M5 0h8a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2 2 2 0 0 1-2 2H3a2 2 0 0 1-2-2h1a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1H1a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v9a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1H3a2 2 0 0 1 2-2z"></path><path d="M1 6v-.5a.5.5 0 0 1 1 0V6h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V9h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 2.5v.5H.5a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1H2v-.5a.5.5 0 0 0-1 0z"></path></svg>`), Journals[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Journals($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Journals);
  var svg = root1261();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-journals", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Journals = hmr(Journals, () => Journals[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Journals[HMR].source;
    set(Journals[HMR].source, module.default[HMR].original);
  });
}
var Journals_default = Journals;
mark_module_end(Journals);

// node_modules/svelte-bootstrap-icons/lib/Joystick.svelte
mark_module_start();
Joystick[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Joystick.svelte";
var root1262 = add_locations(ns_template(`<svg><!><path d="M10 2a2 2 0 0 1-1.5 1.937v5.087c.863.083 1.5.377 1.5.726 0 .414-.895.75-2 .75s-2-.336-2-.75c0-.35.637-.643 1.5-.726V3.937A2 2 0 1 1 10 2z"></path><path d="M0 9.665v1.717a1 1 0 0 0 .553.894l6.553 3.277a2 2 0 0 0 1.788 0l6.553-3.277a1 1 0 0 0 .553-.894V9.665c0-.1-.06-.19-.152-.23L9.5 6.715v.993l5.227 2.178a.125.125 0 0 1 .001.23l-5.94 2.546a2 2 0 0 1-1.576 0l-5.94-2.546a.125.125 0 0 1 .001-.23L6.5 7.708l-.013-.988L.152 9.435a.25.25 0 0 0-.152.23z"></path></svg>`), Joystick[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Joystick($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Joystick);
  var svg = root1262();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-joystick", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Joystick = hmr(Joystick, () => Joystick[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Joystick[HMR].source;
    set(Joystick[HMR].source, module.default[HMR].original);
  });
}
var Joystick_default = Joystick;
mark_module_end(Joystick);

// node_modules/svelte-bootstrap-icons/lib/JustifyLeft.svelte
mark_module_start();
JustifyLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JustifyLeft.svelte";
var root1263 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), JustifyLeft[FILENAME], [[1, 0, [[1, 173]]]]);
function JustifyLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JustifyLeft);
  var svg = root1263();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-justify-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JustifyLeft = hmr(JustifyLeft, () => JustifyLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JustifyLeft[HMR].source;
    set(JustifyLeft[HMR].source, module.default[HMR].original);
  });
}
var JustifyLeft_default = JustifyLeft;
mark_module_end(JustifyLeft);

// node_modules/svelte-bootstrap-icons/lib/JustifyRight.svelte
mark_module_start();
JustifyRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/JustifyRight.svelte";
var root1264 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-4-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), JustifyRight[FILENAME], [[1, 0, [[1, 174]]]]);
function JustifyRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, JustifyRight);
  var svg = root1264();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-justify-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  JustifyRight = hmr(JustifyRight, () => JustifyRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = JustifyRight[HMR].source;
    set(JustifyRight[HMR].source, module.default[HMR].original);
  });
}
var JustifyRight_default = JustifyRight;
mark_module_end(JustifyRight);

// node_modules/svelte-bootstrap-icons/lib/Justify.svelte
mark_module_start();
Justify[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Justify.svelte";
var root1265 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 12.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), Justify[FILENAME], [[1, 0, [[1, 168]]]]);
function Justify($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Justify);
  var svg = root1265();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-justify", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Justify = hmr(Justify, () => Justify[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Justify[HMR].source;
    set(Justify[HMR].source, module.default[HMR].original);
  });
}
var Justify_default = Justify;
mark_module_end(Justify);

// node_modules/svelte-bootstrap-icons/lib/KanbanFill.svelte
mark_module_start();
KanbanFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/KanbanFill.svelte";
var root1266 = add_locations(ns_template(`<svg><!><path d="M2.5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2h-11zm5 2h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1zm-5 1a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3zm9-1h1a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1z"></path></svg>`), KanbanFill[FILENAME], [[1, 0, [[1, 172]]]]);
function KanbanFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, KanbanFill);
  var svg = root1266();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-kanban-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  KanbanFill = hmr(KanbanFill, () => KanbanFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = KanbanFill[HMR].source;
    set(KanbanFill[HMR].source, module.default[HMR].original);
  });
}
var KanbanFill_default = KanbanFill;
mark_module_end(KanbanFill);

// node_modules/svelte-bootstrap-icons/lib/Kanban.svelte
mark_module_start();
Kanban[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Kanban.svelte";
var root1267 = add_locations(ns_template(`<svg><!><path d="M13.5 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h11zm-11-1a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2h-11z"></path><path d="M6.5 3a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3zm-4 0a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3zm8 0a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3z"></path></svg>`), Kanban[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Kanban($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Kanban);
  var svg = root1267();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-kanban", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Kanban = hmr(Kanban, () => Kanban[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Kanban[HMR].source;
    set(Kanban[HMR].source, module.default[HMR].original);
  });
}
var Kanban_default = Kanban;
mark_module_end(Kanban);

// node_modules/svelte-bootstrap-icons/lib/KeyFill.svelte
mark_module_start();
KeyFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/KeyFill.svelte";
var root1268 = add_locations(ns_template(`<svg><!><path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2zM2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), KeyFill[FILENAME], [[1, 0, [[1, 169]]]]);
function KeyFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, KeyFill);
  var svg = root1268();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-key-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  KeyFill = hmr(KeyFill, () => KeyFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = KeyFill[HMR].source;
    set(KeyFill[HMR].source, module.default[HMR].original);
  });
}
var KeyFill_default = KeyFill;
mark_module_end(KeyFill);

// node_modules/svelte-bootstrap-icons/lib/Key.svelte
mark_module_start();
Key[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Key.svelte";
var root1269 = add_locations(ns_template(`<svg><!><path d="M0 8a4 4 0 0 1 7.465-2H14a.5.5 0 0 1 .354.146l1.5 1.5a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0L13 9.207l-.646.647a.5.5 0 0 1-.708 0L11 9.207l-.646.647a.5.5 0 0 1-.708 0L9 9.207l-.646.647A.5.5 0 0 1 8 10h-.535A4 4 0 0 1 0 8zm4-3a3 3 0 1 0 2.712 4.285A.5.5 0 0 1 7.163 9h.63l.853-.854a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.793-.793-1-1h-6.63a.5.5 0 0 1-.451-.285A3 3 0 0 0 4 5z"></path><path d="M4 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), Key[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Key($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Key);
  var svg = root1269();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-key", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Key = hmr(Key, () => Key[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Key[HMR].source;
    set(Key[HMR].source, module.default[HMR].original);
  });
}
var Key_default = Key;
mark_module_end(Key);

// node_modules/svelte-bootstrap-icons/lib/KeyboardFill.svelte
mark_module_start();
KeyboardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/KeyboardFill.svelte";
var root1270 = add_locations(ns_template(`<svg><!><path d="M0 6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6zm13 .25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5a.25.25 0 0 0-.25.25zM2.25 8a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 3 8.75v-.5A.25.25 0 0 0 2.75 8h-.5zM4 8.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 5 8.75v-.5A.25.25 0 0 0 4.75 8h-.5a.25.25 0 0 0-.25.25zM6.25 8a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 7 8.75v-.5A.25.25 0 0 0 6.75 8h-.5zM8 8.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 9 8.75v-.5A.25.25 0 0 0 8.75 8h-.5a.25.25 0 0 0-.25.25zM13.25 8a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5zm0 2a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5zm-3-2a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h1.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-1.5zm.75 2.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5a.25.25 0 0 0-.25.25zM11.25 6a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5zM9 6.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5A.25.25 0 0 0 9.75 6h-.5a.25.25 0 0 0-.25.25zM7.25 6a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 8 6.75v-.5A.25.25 0 0 0 7.75 6h-.5zM5 6.25v.5c0 .138.112.25.25.25h.5A.25.25 0 0 0 6 6.75v-.5A.25.25 0 0 0 5.75 6h-.5a.25.25 0 0 0-.25.25zM2.25 6a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h1.5A.25.25 0 0 0 4 6.75v-.5A.25.25 0 0 0 3.75 6h-1.5zM2 10.25v.5c0 .138.112.25.25.25h.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-.5a.25.25 0 0 0-.25.25zM4.25 10a.25.25 0 0 0-.25.25v.5c0 .138.112.25.25.25h5.5a.25.25 0 0 0 .25-.25v-.5a.25.25 0 0 0-.25-.25h-5.5z"></path></svg>`), KeyboardFill[FILENAME], [[1, 0, [[1, 174]]]]);
function KeyboardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, KeyboardFill);
  var svg = root1270();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-keyboard-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  KeyboardFill = hmr(KeyboardFill, () => KeyboardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = KeyboardFill[HMR].source;
    set(KeyboardFill[HMR].source, module.default[HMR].original);
  });
}
var KeyboardFill_default = KeyboardFill;
mark_module_end(KeyboardFill);

// node_modules/svelte-bootstrap-icons/lib/Keyboard.svelte
mark_module_start();
Keyboard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Keyboard.svelte";
var root1271 = add_locations(ns_template(`<svg><!><path d="M14 5a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h12zM2 4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H2z"></path><path d="M13 10.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5zm0-2a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5zm-5 0A.25.25 0 0 1 8.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 8 8.75v-.5zm2 0a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-.5zm1 2a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5zm-5-2A.25.25 0 0 1 6.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 6 8.75v-.5zm-2 0A.25.25 0 0 1 4.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 4 8.75v-.5zm-2 0A.25.25 0 0 1 2.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 2 8.75v-.5zm11-2a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5zm-2 0a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5zm-2 0A.25.25 0 0 1 9.25 6h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 9 6.75v-.5zm-2 0A.25.25 0 0 1 7.25 6h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 7 6.75v-.5zm-2 0A.25.25 0 0 1 5.25 6h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 5 6.75v-.5zm-3 0A.25.25 0 0 1 2.25 6h1.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-1.5A.25.25 0 0 1 2 6.75v-.5zm0 4a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-.5zm2 0a.25.25 0 0 1 .25-.25h5.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-5.5a.25.25 0 0 1-.25-.25v-.5z"></path></svg>`), Keyboard[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Keyboard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Keyboard);
  var svg = root1271();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-keyboard", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Keyboard = hmr(Keyboard, () => Keyboard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Keyboard[HMR].source;
    set(Keyboard[HMR].source, module.default[HMR].original);
  });
}
var Keyboard_default = Keyboard;
mark_module_end(Keyboard);

// node_modules/svelte-bootstrap-icons/lib/Ladder.svelte
mark_module_start();
Ladder[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Ladder.svelte";
var root1272 = add_locations(ns_template(`<svg><!><path d="M4.5 1a.5.5 0 0 1 .5.5V2h6v-.5a.5.5 0 0 1 1 0v14a.5.5 0 0 1-1 0V15H5v.5a.5.5 0 0 1-1 0v-14a.5.5 0 0 1 .5-.5zM5 14h6v-2H5v2zm0-3h6V9H5v2zm0-3h6V6H5v2zm0-3h6V3H5v2z"></path></svg>`), Ladder[FILENAME], [[1, 0, [[1, 167]]]]);
function Ladder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Ladder);
  var svg = root1272();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ladder", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ladder = hmr(Ladder, () => Ladder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ladder[HMR].source;
    set(Ladder[HMR].source, module.default[HMR].original);
  });
}
var Ladder_default = Ladder;
mark_module_end(Ladder);

// node_modules/svelte-bootstrap-icons/lib/LampFill.svelte
mark_module_start();
LampFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LampFill.svelte";
var root1273 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5.04.303A.5.5 0 0 1 5.5 0h5c.2 0 .38.12.46.303l3 7a.5.5 0 0 1-.363.687h-.002c-.15.03-.3.056-.45.081a32.731 32.731 0 0 1-4.645.425V13.5a.5.5 0 1 1-1 0V8.495a32.753 32.753 0 0 1-4.645-.425c-.15-.025-.3-.05-.45-.08h-.003a.5.5 0 0 1-.362-.688l3-7Z"></path><path d="M6.493 12.574a.5.5 0 0 1-.411.575c-.712.118-1.28.295-1.655.493a1.319 1.319 0 0 0-.37.265.301.301 0 0 0-.052.075l-.001.004-.004.01V14l.002.008a.147.147 0 0 0 .016.033.62.62 0 0 0 .145.15c.165.13.435.27.813.395.751.25 1.82.414 3.024.414s2.273-.163 3.024-.414c.378-.126.648-.265.813-.395a.62.62 0 0 0 .146-.15.148.148 0 0 0 .015-.033L12 14v-.004a.301.301 0 0 0-.057-.09 1.318 1.318 0 0 0-.37-.264c-.376-.198-.943-.375-1.655-.493a.5.5 0 1 1 .164-.986c.77.127 1.452.328 1.957.594C12.5 13 13 13.4 13 14c0 .426-.26.752-.544.977-.29.228-.68.413-1.116.558-.878.293-2.059.465-3.34.465-1.281 0-2.462-.172-3.34-.465-.436-.145-.826-.33-1.116-.558C3.26 14.752 3 14.426 3 14c0-.599.5-1 .961-1.243.505-.266 1.187-.467 1.957-.594a.5.5 0 0 1 .575.411Z"></path></svg>`), LampFill[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function LampFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LampFill);
  var svg = root1273();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lamp-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LampFill = hmr(LampFill, () => LampFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LampFill[HMR].source;
    set(LampFill[HMR].source, module.default[HMR].original);
  });
}
var LampFill_default = LampFill;
mark_module_end(LampFill);

// node_modules/svelte-bootstrap-icons/lib/Lamp.svelte
mark_module_start();
Lamp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Lamp.svelte";
var root1274 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5.04.303A.5.5 0 0 1 5.5 0h5c.2 0 .38.12.46.303l3 7a.5.5 0 0 1-.363.687h-.002c-.15.03-.3.056-.45.081a32.731 32.731 0 0 1-4.645.425V13.5a.5.5 0 1 1-1 0V8.495a32.753 32.753 0 0 1-4.645-.425c-.15-.025-.3-.05-.45-.08h-.003a.5.5 0 0 1-.362-.688l3-7ZM3.21 7.116A31.27 31.27 0 0 0 8 7.5a31.27 31.27 0 0 0 4.791-.384L10.171 1H5.83L3.209 7.116Z"></path><path d="M6.493 12.574a.5.5 0 0 1-.411.575c-.712.118-1.28.295-1.655.493a1.319 1.319 0 0 0-.37.265.301.301 0 0 0-.052.075l-.001.004-.004.01V14l.002.008a.147.147 0 0 0 .016.033.62.62 0 0 0 .145.15c.165.13.435.27.813.395.751.25 1.82.414 3.024.414s2.273-.163 3.024-.414c.378-.126.648-.265.813-.395a.62.62 0 0 0 .146-.15.148.148 0 0 0 .015-.033L12 14v-.004a.301.301 0 0 0-.057-.09 1.318 1.318 0 0 0-.37-.264c-.376-.198-.943-.375-1.655-.493a.5.5 0 1 1 .164-.986c.77.127 1.452.328 1.957.594C12.5 13 13 13.4 13 14c0 .426-.26.752-.544.977-.29.228-.68.413-1.116.558-.878.293-2.059.465-3.34.465-1.281 0-2.462-.172-3.34-.465-.436-.145-.826-.33-1.116-.558C3.26 14.752 3 14.426 3 14c0-.599.5-1 .961-1.243.505-.266 1.187-.467 1.957-.594a.5.5 0 0 1 .575.411Z"></path></svg>`), Lamp[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Lamp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Lamp);
  var svg = root1274();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lamp", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lamp = hmr(Lamp, () => Lamp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lamp[HMR].source;
    set(Lamp[HMR].source, module.default[HMR].original);
  });
}
var Lamp_default = Lamp;
mark_module_end(Lamp);

// node_modules/svelte-bootstrap-icons/lib/LaptopFill.svelte
mark_module_start();
LaptopFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LaptopFill.svelte";
var root1275 = add_locations(ns_template(`<svg><!><path d="M2.5 2A1.5 1.5 0 0 0 1 3.5V12h14V3.5A1.5 1.5 0 0 0 13.5 2h-11zM0 12.5h16a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5z"></path></svg>`), LaptopFill[FILENAME], [[1, 0, [[1, 172]]]]);
function LaptopFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LaptopFill);
  var svg = root1275();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-laptop-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LaptopFill = hmr(LaptopFill, () => LaptopFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LaptopFill[HMR].source;
    set(LaptopFill[HMR].source, module.default[HMR].original);
  });
}
var LaptopFill_default = LaptopFill;
mark_module_end(LaptopFill);

// node_modules/svelte-bootstrap-icons/lib/Laptop.svelte
mark_module_start();
Laptop[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Laptop.svelte";
var root1276 = add_locations(ns_template(`<svg><!><path d="M13.5 3a.5.5 0 0 1 .5.5V11H2V3.5a.5.5 0 0 1 .5-.5h11zm-11-1A1.5 1.5 0 0 0 1 3.5V12h14V3.5A1.5 1.5 0 0 0 13.5 2h-11zM0 12.5h16a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5z"></path></svg>`), Laptop[FILENAME], [[1, 0, [[1, 167]]]]);
function Laptop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Laptop);
  var svg = root1276();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-laptop", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Laptop = hmr(Laptop, () => Laptop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Laptop[HMR].source;
    set(Laptop[HMR].source, module.default[HMR].original);
  });
}
var Laptop_default = Laptop;
mark_module_end(Laptop);

// node_modules/svelte-bootstrap-icons/lib/LayerBackward.svelte
mark_module_start();
LayerBackward[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayerBackward.svelte";
var root1277 = add_locations(ns_template(`<svg><!><path d="M8.354 15.854a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 0-.708l1-1a.5.5 0 0 1 .708 0l.646.647V4H1a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H9v7.793l.646-.647a.5.5 0 0 1 .708 0l1 1a.5.5 0 0 1 0 .708l-3 3z"></path><path d="M1 9a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h4.5a.5.5 0 0 1 0 1H1v2h4.5a.5.5 0 0 1 0 1H1zm9.5 0a.5.5 0 0 1 0-1H15V6h-4.5a.5.5 0 0 1 0-1H15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4.5z"></path></svg>`), LayerBackward[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function LayerBackward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayerBackward);
  var svg = root1277();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layer-backward", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayerBackward = hmr(LayerBackward, () => LayerBackward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayerBackward[HMR].source;
    set(LayerBackward[HMR].source, module.default[HMR].original);
  });
}
var LayerBackward_default = LayerBackward;
mark_module_end(LayerBackward);

// node_modules/svelte-bootstrap-icons/lib/LayerForward.svelte
mark_module_start();
LayerForward[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayerForward.svelte";
var root1278 = add_locations(ns_template(`<svg><!><path d="M8.354.146a.5.5 0 0 0-.708 0l-3 3a.5.5 0 0 0 0 .708l1 1a.5.5 0 0 0 .708 0L7 4.207V12H1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H9V4.207l.646.647a.5.5 0 0 0 .708 0l1-1a.5.5 0 0 0 0-.708l-3-3z"></path><path d="M1 7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h4.5a.5.5 0 0 0 0-1H1V8h4.5a.5.5 0 0 0 0-1H1zm9.5 0a.5.5 0 0 0 0 1H15v2h-4.5a.5.5 0 0 0 0 1H15a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1h-4.5z"></path></svg>`), LayerForward[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function LayerForward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayerForward);
  var svg = root1278();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layer-forward", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayerForward = hmr(LayerForward, () => LayerForward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayerForward[HMR].source;
    set(LayerForward[HMR].source, module.default[HMR].original);
  });
}
var LayerForward_default = LayerForward;
mark_module_end(LayerForward);

// node_modules/svelte-bootstrap-icons/lib/LayersFill.svelte
mark_module_start();
LayersFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayersFill.svelte";
var root1279 = add_locations(ns_template(`<svg><!><path d="M7.765 1.559a.5.5 0 0 1 .47 0l7.5 4a.5.5 0 0 1 0 .882l-7.5 4a.5.5 0 0 1-.47 0l-7.5-4a.5.5 0 0 1 0-.882l7.5-4z"></path><path d="m2.125 8.567-1.86.992a.5.5 0 0 0 0 .882l7.5 4a.5.5 0 0 0 .47 0l7.5-4a.5.5 0 0 0 0-.882l-1.86-.992-5.17 2.756a1.5 1.5 0 0 1-1.41 0l-5.17-2.756z"></path></svg>`), LayersFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function LayersFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayersFill);
  var svg = root1279();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layers-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayersFill = hmr(LayersFill, () => LayersFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayersFill[HMR].source;
    set(LayersFill[HMR].source, module.default[HMR].original);
  });
}
var LayersFill_default = LayersFill;
mark_module_end(LayersFill);

// node_modules/svelte-bootstrap-icons/lib/LayersHalf.svelte
mark_module_start();
LayersHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayersHalf.svelte";
var root1280 = add_locations(ns_template(`<svg><!><path d="M8.235 1.559a.5.5 0 0 0-.47 0l-7.5 4a.5.5 0 0 0 0 .882L3.188 8 .264 9.559a.5.5 0 0 0 0 .882l7.5 4a.5.5 0 0 0 .47 0l7.5-4a.5.5 0 0 0 0-.882L12.813 8l2.922-1.559a.5.5 0 0 0 0-.882l-7.5-4zM8 9.433 1.562 6 8 2.567 14.438 6 8 9.433z"></path></svg>`), LayersHalf[FILENAME], [[1, 0, [[1, 172]]]]);
function LayersHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayersHalf);
  var svg = root1280();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layers-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayersHalf = hmr(LayersHalf, () => LayersHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayersHalf[HMR].source;
    set(LayersHalf[HMR].source, module.default[HMR].original);
  });
}
var LayersHalf_default = LayersHalf;
mark_module_end(LayersHalf);

// node_modules/svelte-bootstrap-icons/lib/Layers.svelte
mark_module_start();
Layers[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Layers.svelte";
var root1281 = add_locations(ns_template(`<svg><!><path d="M8.235 1.559a.5.5 0 0 0-.47 0l-7.5 4a.5.5 0 0 0 0 .882L3.188 8 .264 9.559a.5.5 0 0 0 0 .882l7.5 4a.5.5 0 0 0 .47 0l7.5-4a.5.5 0 0 0 0-.882L12.813 8l2.922-1.559a.5.5 0 0 0 0-.882l-7.5-4zm3.515 7.008L14.438 10 8 13.433 1.562 10 4.25 8.567l3.515 1.874a.5.5 0 0 0 .47 0l3.515-1.874zM8 9.433 1.562 6 8 2.567 14.438 6 8 9.433z"></path></svg>`), Layers[FILENAME], [[1, 0, [[1, 167]]]]);
function Layers($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Layers);
  var svg = root1281();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layers", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layers = hmr(Layers, () => Layers[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layers[HMR].source;
    set(Layers[HMR].source, module.default[HMR].original);
  });
}
var Layers_default = Layers;
mark_module_end(Layers);

// node_modules/svelte-bootstrap-icons/lib/LayoutSidebarInsetReverse.svelte
mark_module_start();
LayoutSidebarInsetReverse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutSidebarInsetReverse.svelte";
var root1282 = add_locations(ns_template(`<svg><!><path d="M2 2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2zm12-1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h12z"></path><path d="M13 4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V4z"></path></svg>`), LayoutSidebarInsetReverse[FILENAME], [
  [1, 0, [[1, 189], [2, 2]]]
]);
function LayoutSidebarInsetReverse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutSidebarInsetReverse);
  var svg = root1282();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-sidebar-inset-reverse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutSidebarInsetReverse = hmr(LayoutSidebarInsetReverse, () => LayoutSidebarInsetReverse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutSidebarInsetReverse[HMR].source;
    set(LayoutSidebarInsetReverse[HMR].source, module.default[HMR].original);
  });
}
var LayoutSidebarInsetReverse_default = LayoutSidebarInsetReverse;
mark_module_end(LayoutSidebarInsetReverse);

// node_modules/svelte-bootstrap-icons/lib/LayoutSidebarInset.svelte
mark_module_start();
LayoutSidebarInset[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutSidebarInset.svelte";
var root1283 = add_locations(ns_template(`<svg><!><path d="M14 2a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h12zM2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2z"></path><path d="M3 4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4z"></path></svg>`), LayoutSidebarInset[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function LayoutSidebarInset($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutSidebarInset);
  var svg = root1283();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-sidebar-inset", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutSidebarInset = hmr(LayoutSidebarInset, () => LayoutSidebarInset[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutSidebarInset[HMR].source;
    set(LayoutSidebarInset[HMR].source, module.default[HMR].original);
  });
}
var LayoutSidebarInset_default = LayoutSidebarInset;
mark_module_end(LayoutSidebarInset);

// node_modules/svelte-bootstrap-icons/lib/LayoutSidebarReverse.svelte
mark_module_start();
LayoutSidebarReverse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutSidebarReverse.svelte";
var root1284 = add_locations(ns_template(`<svg><!><path d="M16 3a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3zm-5-1v12H2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h9zm1 0h2a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1h-2V2z"></path></svg>`), LayoutSidebarReverse[FILENAME], [[1, 0, [[1, 183]]]]);
function LayoutSidebarReverse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutSidebarReverse);
  var svg = root1284();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-sidebar-reverse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutSidebarReverse = hmr(LayoutSidebarReverse, () => LayoutSidebarReverse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutSidebarReverse[HMR].source;
    set(LayoutSidebarReverse[HMR].source, module.default[HMR].original);
  });
}
var LayoutSidebarReverse_default = LayoutSidebarReverse;
mark_module_end(LayoutSidebarReverse);

// node_modules/svelte-bootstrap-icons/lib/LayoutSidebar.svelte
mark_module_start();
LayoutSidebar[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutSidebar.svelte";
var root1285 = add_locations(ns_template(`<svg><!><path d="M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3zm5-1v12h9a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H5zM4 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2V2z"></path></svg>`), LayoutSidebar[FILENAME], [[1, 0, [[1, 175]]]]);
function LayoutSidebar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutSidebar);
  var svg = root1285();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-sidebar", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutSidebar = hmr(LayoutSidebar, () => LayoutSidebar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutSidebar[HMR].source;
    set(LayoutSidebar[HMR].source, module.default[HMR].original);
  });
}
var LayoutSidebar_default = LayoutSidebar;
mark_module_end(LayoutSidebar);

// node_modules/svelte-bootstrap-icons/lib/LayoutSplit.svelte
mark_module_start();
LayoutSplit[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutSplit.svelte";
var root1286 = add_locations(ns_template(`<svg><!><path d="M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3zm8.5-1v12H14a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H8.5zm-1 0H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h5.5V2z"></path></svg>`), LayoutSplit[FILENAME], [[1, 0, [[1, 173]]]]);
function LayoutSplit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutSplit);
  var svg = root1286();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-split", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutSplit = hmr(LayoutSplit, () => LayoutSplit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutSplit[HMR].source;
    set(LayoutSplit[HMR].source, module.default[HMR].original);
  });
}
var LayoutSplit_default = LayoutSplit;
mark_module_end(LayoutSplit);

// node_modules/svelte-bootstrap-icons/lib/LayoutTextSidebarReverse.svelte
mark_module_start();
LayoutTextSidebarReverse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutTextSidebarReverse.svelte";
var root1287 = add_locations(ns_template(`<svg><!><path d="M12.5 3a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h5zm0 3a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h5zm.5 3.5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5zm-.5 2.5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h5z"></path><path d="M16 2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2zM4 1v14H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h2zm1 0h9a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5V1z"></path></svg>`), LayoutTextSidebarReverse[FILENAME], [
  [1, 0, [[1, 188], [2, 2]]]
]);
function LayoutTextSidebarReverse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutTextSidebarReverse);
  var svg = root1287();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-text-sidebar-reverse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutTextSidebarReverse = hmr(LayoutTextSidebarReverse, () => LayoutTextSidebarReverse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutTextSidebarReverse[HMR].source;
    set(LayoutTextSidebarReverse[HMR].source, module.default[HMR].original);
  });
}
var LayoutTextSidebarReverse_default = LayoutTextSidebarReverse;
mark_module_end(LayoutTextSidebarReverse);

// node_modules/svelte-bootstrap-icons/lib/LayoutTextSidebar.svelte
mark_module_start();
LayoutTextSidebar[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutTextSidebar.svelte";
var root1288 = add_locations(ns_template(`<svg><!><path d="M3.5 3a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zM3 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm.5 2.5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm12-1v14h2a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1h-2zm-1 0H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h9V1z"></path></svg>`), LayoutTextSidebar[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function LayoutTextSidebar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutTextSidebar);
  var svg = root1288();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-text-sidebar", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutTextSidebar = hmr(LayoutTextSidebar, () => LayoutTextSidebar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutTextSidebar[HMR].source;
    set(LayoutTextSidebar[HMR].source, module.default[HMR].original);
  });
}
var LayoutTextSidebar_default = LayoutTextSidebar;
mark_module_end(LayoutTextSidebar);

// node_modules/svelte-bootstrap-icons/lib/LayoutTextWindowReverse.svelte
mark_module_start();
LayoutTextWindowReverse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutTextWindowReverse.svelte";
var root1289 = add_locations(ns_template(`<svg><!><path d="M13 6.5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5zm0 3a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5zm-.5 2.5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h5z"></path><path d="M14 0a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12zM2 1a1 1 0 0 0-1 1v1h14V2a1 1 0 0 0-1-1H2zM1 4v10a1 1 0 0 0 1 1h2V4H1zm4 0v11h9a1 1 0 0 0 1-1V4H5z"></path></svg>`), LayoutTextWindowReverse[FILENAME], [
  [1, 0, [[1, 187], [2, 2]]]
]);
function LayoutTextWindowReverse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutTextWindowReverse);
  var svg = root1289();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-text-window-reverse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutTextWindowReverse = hmr(LayoutTextWindowReverse, () => LayoutTextWindowReverse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutTextWindowReverse[HMR].source;
    set(LayoutTextWindowReverse[HMR].source, module.default[HMR].original);
  });
}
var LayoutTextWindowReverse_default = LayoutTextWindowReverse;
mark_module_end(LayoutTextWindowReverse);

// node_modules/svelte-bootstrap-icons/lib/LayoutTextWindow.svelte
mark_module_start();
LayoutTextWindow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutTextWindow.svelte";
var root1290 = add_locations(ns_template(`<svg><!><path d="M3 6.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm.5 2.5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm12 1a1 1 0 0 1 1 1v1H1V2a1 1 0 0 1 1-1h12zm1 3v10a1 1 0 0 1-1 1h-2V4h3zm-4 0v11H2a1 1 0 0 1-1-1V4h10z"></path></svg>`), LayoutTextWindow[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function LayoutTextWindow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutTextWindow);
  var svg = root1290();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-text-window", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutTextWindow = hmr(LayoutTextWindow, () => LayoutTextWindow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutTextWindow[HMR].source;
    set(LayoutTextWindow[HMR].source, module.default[HMR].original);
  });
}
var LayoutTextWindow_default = LayoutTextWindow;
mark_module_end(LayoutTextWindow);

// node_modules/svelte-bootstrap-icons/lib/LayoutThreeColumns.svelte
mark_module_start();
LayoutThreeColumns[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutThreeColumns.svelte";
var root1291 = add_locations(ns_template(`<svg><!><path d="M0 1.5A1.5 1.5 0 0 1 1.5 0h13A1.5 1.5 0 0 1 16 1.5v13a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 14.5v-13zM1.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5H5V1H1.5zM10 15V1H6v14h4zm1 0h3.5a.5.5 0 0 0 .5-.5v-13a.5.5 0 0 0-.5-.5H11v14z"></path></svg>`), LayoutThreeColumns[FILENAME], [[1, 0, [[1, 181]]]]);
function LayoutThreeColumns($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutThreeColumns);
  var svg = root1291();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-three-columns", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutThreeColumns = hmr(LayoutThreeColumns, () => LayoutThreeColumns[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutThreeColumns[HMR].source;
    set(LayoutThreeColumns[HMR].source, module.default[HMR].original);
  });
}
var LayoutThreeColumns_default = LayoutThreeColumns;
mark_module_end(LayoutThreeColumns);

// node_modules/svelte-bootstrap-icons/lib/LayoutWtf.svelte
mark_module_start();
LayoutWtf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LayoutWtf.svelte";
var root1292 = add_locations(ns_template(`<svg><!><path d="M5 1v8H1V1h4zM1 0a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1H1zm13 2v5H9V2h5zM9 1a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9zM5 13v2H3v-2h2zm-2-1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H3zm12-1v2H9v-2h6zm-6-1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H9z"></path></svg>`), LayoutWtf[FILENAME], [[1, 0, [[1, 171]]]]);
function LayoutWtf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LayoutWtf);
  var svg = root1292();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-layout-wtf", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutWtf = hmr(LayoutWtf, () => LayoutWtf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutWtf[HMR].source;
    set(LayoutWtf[HMR].source, module.default[HMR].original);
  });
}
var LayoutWtf_default = LayoutWtf;
mark_module_end(LayoutWtf);

// node_modules/svelte-bootstrap-icons/lib/LifePreserver.svelte
mark_module_start();
LifePreserver[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LifePreserver.svelte";
var root1293 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm6.43-5.228a7.025 7.025 0 0 1-3.658 3.658l-1.115-2.788a4.015 4.015 0 0 0 1.985-1.985l2.788 1.115zM5.228 14.43a7.025 7.025 0 0 1-3.658-3.658l2.788-1.115a4.015 4.015 0 0 0 1.985 1.985L5.228 14.43zm9.202-9.202-2.788 1.115a4.015 4.015 0 0 0-1.985-1.985l1.115-2.788a7.025 7.025 0 0 1 3.658 3.658zm-8.087-.87a4.015 4.015 0 0 0-1.985 1.985L1.57 5.228A7.025 7.025 0 0 1 5.228 1.57l1.115 2.788zM8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"></path></svg>`), LifePreserver[FILENAME], [[1, 0, [[1, 175]]]]);
function LifePreserver($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LifePreserver);
  var svg = root1293();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-life-preserver", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LifePreserver = hmr(LifePreserver, () => LifePreserver[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LifePreserver[HMR].source;
    set(LifePreserver[HMR].source, module.default[HMR].original);
  });
}
var LifePreserver_default = LifePreserver;
mark_module_end(LifePreserver);

// node_modules/svelte-bootstrap-icons/lib/LightbulbFill.svelte
mark_module_start();
LightbulbFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LightbulbFill.svelte";
var root1294 = add_locations(ns_template(`<svg><!><path d="M2 6a6 6 0 1 1 10.174 4.31c-.203.196-.359.4-.453.619l-.762 1.769A.5.5 0 0 1 10.5 13h-5a.5.5 0 0 1-.46-.302l-.761-1.77a1.964 1.964 0 0 0-.453-.618A5.984 5.984 0 0 1 2 6zm3 8.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1l-.224.447a1 1 0 0 1-.894.553H6.618a1 1 0 0 1-.894-.553L5.5 15a.5.5 0 0 1-.5-.5z"></path></svg>`), LightbulbFill[FILENAME], [[1, 0, [[1, 175]]]]);
function LightbulbFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LightbulbFill);
  var svg = root1294();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lightbulb-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LightbulbFill = hmr(LightbulbFill, () => LightbulbFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LightbulbFill[HMR].source;
    set(LightbulbFill[HMR].source, module.default[HMR].original);
  });
}
var LightbulbFill_default = LightbulbFill;
mark_module_end(LightbulbFill);

// node_modules/svelte-bootstrap-icons/lib/LightbulbOffFill.svelte
mark_module_start();
LightbulbOffFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LightbulbOffFill.svelte";
var root1295 = add_locations(ns_template(`<svg><!><path d="M2 6c0-.572.08-1.125.23-1.65l8.558 8.559A.5.5 0 0 1 10.5 13h-5a.5.5 0 0 1-.46-.302l-.761-1.77a1.964 1.964 0 0 0-.453-.618A5.984 5.984 0 0 1 2 6zm10.303 4.181L3.818 1.697a6 6 0 0 1 8.484 8.484zM5 14.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1l-.224.447a1 1 0 0 1-.894.553H6.618a1 1 0 0 1-.894-.553L5.5 15a.5.5 0 0 1-.5-.5zM2.354 1.646a.5.5 0 1 0-.708.708l12 12a.5.5 0 0 0 .708-.708l-12-12z"></path></svg>`), LightbulbOffFill[FILENAME], [[1, 0, [[1, 179]]]]);
function LightbulbOffFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LightbulbOffFill);
  var svg = root1295();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lightbulb-off-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LightbulbOffFill = hmr(LightbulbOffFill, () => LightbulbOffFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LightbulbOffFill[HMR].source;
    set(LightbulbOffFill[HMR].source, module.default[HMR].original);
  });
}
var LightbulbOffFill_default = LightbulbOffFill;
mark_module_end(LightbulbOffFill);

// node_modules/svelte-bootstrap-icons/lib/LightbulbOff.svelte
mark_module_start();
LightbulbOff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LightbulbOff.svelte";
var root1296 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2.23 4.35A6.004 6.004 0 0 0 2 6c0 1.691.7 3.22 1.826 4.31.203.196.359.4.453.619l.762 1.769A.5.5 0 0 0 5.5 13a.5.5 0 0 0 0 1 .5.5 0 0 0 0 1l.224.447a1 1 0 0 0 .894.553h2.764a1 1 0 0 0 .894-.553L10.5 15a.5.5 0 0 0 0-1 .5.5 0 0 0 0-1 .5.5 0 0 0 .288-.091L9.878 12H5.83l-.632-1.467a2.954 2.954 0 0 0-.676-.941 4.984 4.984 0 0 1-1.455-4.405l-.837-.836zm1.588-2.653.708.707a5 5 0 0 1 7.07 7.07l.707.707a6 6 0 0 0-8.484-8.484zm-2.172-.051a.5.5 0 0 1 .708 0l12 12a.5.5 0 0 1-.708.708l-12-12a.5.5 0 0 1 0-.708z"></path></svg>`), LightbulbOff[FILENAME], [[1, 0, [[1, 174]]]]);
function LightbulbOff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LightbulbOff);
  var svg = root1296();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lightbulb-off", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LightbulbOff = hmr(LightbulbOff, () => LightbulbOff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LightbulbOff[HMR].source;
    set(LightbulbOff[HMR].source, module.default[HMR].original);
  });
}
var LightbulbOff_default = LightbulbOff;
mark_module_end(LightbulbOff);

// node_modules/svelte-bootstrap-icons/lib/Lightbulb.svelte
mark_module_start();
Lightbulb[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Lightbulb.svelte";
var root1297 = add_locations(ns_template(`<svg><!><path d="M2 6a6 6 0 1 1 10.174 4.31c-.203.196-.359.4-.453.619l-.762 1.769A.5.5 0 0 1 10.5 13a.5.5 0 0 1 0 1 .5.5 0 0 1 0 1l-.224.447a1 1 0 0 1-.894.553H6.618a1 1 0 0 1-.894-.553L5.5 15a.5.5 0 0 1 0-1 .5.5 0 0 1 0-1 .5.5 0 0 1-.46-.302l-.761-1.77a1.964 1.964 0 0 0-.453-.618A5.984 5.984 0 0 1 2 6zm6-5a5 5 0 0 0-3.479 8.592c.263.254.514.564.676.941L5.83 12h4.342l.632-1.467c.162-.377.413-.687.676-.941A5 5 0 0 0 8 1z"></path></svg>`), Lightbulb[FILENAME], [[1, 0, [[1, 170]]]]);
function Lightbulb($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Lightbulb);
  var svg = root1297();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lightbulb", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lightbulb = hmr(Lightbulb, () => Lightbulb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lightbulb[HMR].source;
    set(Lightbulb[HMR].source, module.default[HMR].original);
  });
}
var Lightbulb_default = Lightbulb;
mark_module_end(Lightbulb);

// node_modules/svelte-bootstrap-icons/lib/LightningChargeFill.svelte
mark_module_start();
LightningChargeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LightningChargeFill.svelte";
var root1298 = add_locations(ns_template(`<svg><!><path d="M11.251.068a.5.5 0 0 1 .227.58L9.677 6.5H13a.5.5 0 0 1 .364.843l-8 8.5a.5.5 0 0 1-.842-.49L6.323 9.5H3a.5.5 0 0 1-.364-.843l8-8.5a.5.5 0 0 1 .615-.09z"></path></svg>`), LightningChargeFill[FILENAME], [[1, 0, [[1, 182]]]]);
function LightningChargeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LightningChargeFill);
  var svg = root1298();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lightning-charge-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LightningChargeFill = hmr(LightningChargeFill, () => LightningChargeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LightningChargeFill[HMR].source;
    set(LightningChargeFill[HMR].source, module.default[HMR].original);
  });
}
var LightningChargeFill_default = LightningChargeFill;
mark_module_end(LightningChargeFill);

// node_modules/svelte-bootstrap-icons/lib/LightningCharge.svelte
mark_module_start();
LightningCharge[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LightningCharge.svelte";
var root1299 = add_locations(ns_template(`<svg><!><path d="M11.251.068a.5.5 0 0 1 .227.58L9.677 6.5H13a.5.5 0 0 1 .364.843l-8 8.5a.5.5 0 0 1-.842-.49L6.323 9.5H3a.5.5 0 0 1-.364-.843l8-8.5a.5.5 0 0 1 .615-.09zM4.157 8.5H7a.5.5 0 0 1 .478.647L6.11 13.59l5.732-6.09H9a.5.5 0 0 1-.478-.647L9.89 2.41 4.157 8.5z"></path></svg>`), LightningCharge[FILENAME], [[1, 0, [[1, 177]]]]);
function LightningCharge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LightningCharge);
  var svg = root1299();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lightning-charge", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LightningCharge = hmr(LightningCharge, () => LightningCharge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LightningCharge[HMR].source;
    set(LightningCharge[HMR].source, module.default[HMR].original);
  });
}
var LightningCharge_default = LightningCharge;
mark_module_end(LightningCharge);

// node_modules/svelte-bootstrap-icons/lib/LightningFill.svelte
mark_module_start();
LightningFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LightningFill.svelte";
var root1300 = add_locations(ns_template(`<svg><!><path d="M5.52.359A.5.5 0 0 1 6 0h4a.5.5 0 0 1 .474.658L8.694 6H12.5a.5.5 0 0 1 .395.807l-7 9a.5.5 0 0 1-.873-.454L6.823 9.5H3.5a.5.5 0 0 1-.48-.641l2.5-8.5z"></path></svg>`), LightningFill[FILENAME], [[1, 0, [[1, 175]]]]);
function LightningFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LightningFill);
  var svg = root1300();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lightning-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LightningFill = hmr(LightningFill, () => LightningFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LightningFill[HMR].source;
    set(LightningFill[HMR].source, module.default[HMR].original);
  });
}
var LightningFill_default = LightningFill;
mark_module_end(LightningFill);

// node_modules/svelte-bootstrap-icons/lib/Lightning.svelte
mark_module_start();
Lightning[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Lightning.svelte";
var root1301 = add_locations(ns_template(`<svg><!><path d="M5.52.359A.5.5 0 0 1 6 0h4a.5.5 0 0 1 .474.658L8.694 6H12.5a.5.5 0 0 1 .395.807l-7 9a.5.5 0 0 1-.873-.454L6.823 9.5H3.5a.5.5 0 0 1-.48-.641l2.5-8.5zM6.374 1 4.168 8.5H7.5a.5.5 0 0 1 .478.647L6.78 13.04 11.478 7H8a.5.5 0 0 1-.474-.658L9.306 1H6.374z"></path></svg>`), Lightning[FILENAME], [[1, 0, [[1, 170]]]]);
function Lightning($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Lightning);
  var svg = root1301();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lightning", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lightning = hmr(Lightning, () => Lightning[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lightning[HMR].source;
    set(Lightning[HMR].source, module.default[HMR].original);
  });
}
var Lightning_default = Lightning;
mark_module_end(Lightning);

// node_modules/svelte-bootstrap-icons/lib/Line.svelte
mark_module_start();
Line[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Line.svelte";
var root1302 = add_locations(ns_template(`<svg><!><path d="M8 0c4.411 0 8 2.912 8 6.492 0 1.433-.555 2.723-1.715 3.994-1.678 1.932-5.431 4.285-6.285 4.645-.83.35-.734-.197-.696-.413l.003-.018.114-.685c.027-.204.055-.521-.026-.723-.09-.223-.444-.339-.704-.395C2.846 12.39 0 9.701 0 6.492 0 2.912 3.59 0 8 0ZM5.022 7.686H3.497V4.918a.156.156 0 0 0-.155-.156H2.78a.156.156 0 0 0-.156.156v3.486c0 .041.017.08.044.107v.001l.002.002.002.002a.154.154 0 0 0 .108.043h2.242c.086 0 .155-.07.155-.156v-.56a.156.156 0 0 0-.155-.157Zm.791-2.924a.156.156 0 0 0-.156.156v3.486c0 .086.07.155.156.155h.562c.086 0 .155-.07.155-.155V4.918a.156.156 0 0 0-.155-.156h-.562Zm3.863 0a.156.156 0 0 0-.156.156v2.07L7.923 4.832a.17.17 0 0 0-.013-.015v-.001a.139.139 0 0 0-.01-.01l-.003-.003a.092.092 0 0 0-.011-.009h-.001L7.88 4.79l-.003-.002a.029.029 0 0 0-.005-.003l-.008-.005h-.002l-.003-.002-.01-.004-.004-.002a.093.093 0 0 0-.01-.003h-.002l-.003-.001-.009-.002h-.006l-.003-.001h-.004l-.002-.001h-.574a.156.156 0 0 0-.156.155v3.486c0 .086.07.155.156.155h.56c.087 0 .157-.07.157-.155v-2.07l1.6 2.16a.154.154 0 0 0 .039.038l.001.001.01.006.004.002a.066.066 0 0 0 .008.004l.007.003.005.002a.168.168 0 0 0 .01.003h.003a.155.155 0 0 0 .04.006h.56c.087 0 .157-.07.157-.155V4.918a.156.156 0 0 0-.156-.156h-.561Zm3.815.717v-.56a.156.156 0 0 0-.155-.157h-2.242a.155.155 0 0 0-.108.044h-.001l-.001.002-.002.003a.155.155 0 0 0-.044.107v3.486c0 .041.017.08.044.107l.002.003.002.002a.155.155 0 0 0 .108.043h2.242c.086 0 .155-.07.155-.156v-.56a.156.156 0 0 0-.155-.157H11.81v-.589h1.525c.086 0 .155-.07.155-.156v-.56a.156.156 0 0 0-.155-.157H11.81v-.589h1.525c.086 0 .155-.07.155-.156Z"></path></svg>`), Line[FILENAME], [[1, 0, [[1, 165]]]]);
function Line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Line);
  var svg = root1302();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-line", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Line = hmr(Line, () => Line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Line[HMR].source;
    set(Line[HMR].source, module.default[HMR].original);
  });
}
var Line_default = Line;
mark_module_end(Line);

// node_modules/svelte-bootstrap-icons/lib/Link45deg.svelte
mark_module_start();
Link45deg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Link45deg.svelte";
var root1303 = add_locations(ns_template(`<svg><!><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></svg>`), Link45deg[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Link45deg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Link45deg);
  var svg = root1303();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-link-45deg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Link45deg = hmr(Link45deg, () => Link45deg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Link45deg[HMR].source;
    set(Link45deg[HMR].source, module.default[HMR].original);
  });
}
var Link45deg_default = Link45deg;
mark_module_end(Link45deg);

// node_modules/svelte-bootstrap-icons/lib/Link.svelte
mark_module_start();
Link[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Link.svelte";
var root1304 = add_locations(ns_template(`<svg><!><path d="M6.354 5.5H4a3 3 0 0 0 0 6h3a3 3 0 0 0 2.83-4H9c-.086 0-.17.01-.25.031A2 2 0 0 1 7 10.5H4a2 2 0 1 1 0-4h1.535c.218-.376.495-.714.82-1z"></path><path d="M9 5.5a3 3 0 0 0-2.83 4h1.098A2 2 0 0 1 9 6.5h3a2 2 0 1 1 0 4h-1.535a4.02 4.02 0 0 1-.82 1H12a3 3 0 1 0 0-6H9z"></path></svg>`), Link[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Link($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Link);
  var svg = root1304();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-link", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Link = hmr(Link, () => Link[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Link[HMR].source;
    set(Link[HMR].source, module.default[HMR].original);
  });
}
var Link_default = Link;
mark_module_end(Link);

// node_modules/svelte-bootstrap-icons/lib/Linkedin.svelte
mark_module_start();
Linkedin[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Linkedin.svelte";
var root1305 = add_locations(ns_template(`<svg><!><path d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854V1.146zm4.943 12.248V6.169H2.542v7.225h2.401zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248-.822 0-1.359.54-1.359 1.248 0 .694.521 1.248 1.327 1.248h.016zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016a5.54 5.54 0 0 1 .016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225h2.4z"></path></svg>`), Linkedin[FILENAME], [[1, 0, [[1, 169]]]]);
function Linkedin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Linkedin);
  var svg = root1305();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-linkedin", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Linkedin = hmr(Linkedin, () => Linkedin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Linkedin[HMR].source;
    set(Linkedin[HMR].source, module.default[HMR].original);
  });
}
var Linkedin_default = Linkedin;
mark_module_end(Linkedin);

// node_modules/svelte-bootstrap-icons/lib/ListCheck.svelte
mark_module_start();
ListCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ListCheck.svelte";
var root1306 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3.854 2.146a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708L2 3.293l1.146-1.147a.5.5 0 0 1 .708 0zm0 4a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708L2 7.293l1.146-1.147a.5.5 0 0 1 .708 0zm0 4a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0z"></path></svg>`), ListCheck[FILENAME], [[1, 0, [[1, 171]]]]);
function ListCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ListCheck);
  var svg = root1306();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-list-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListCheck = hmr(ListCheck, () => ListCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListCheck[HMR].source;
    set(ListCheck[HMR].source, module.default[HMR].original);
  });
}
var ListCheck_default = ListCheck;
mark_module_end(ListCheck);

// node_modules/svelte-bootstrap-icons/lib/ListColumnsReverse.svelte
mark_module_start();
ListColumnsReverse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ListColumnsReverse.svelte";
var root1307 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 .5A.5.5 0 0 1 .5 0h2a.5.5 0 0 1 0 1h-2A.5.5 0 0 1 0 .5Zm4 0a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1h-10A.5.5 0 0 1 4 .5Zm-4 2A.5.5 0 0 1 .5 2h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm4 0a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm-4 2A.5.5 0 0 1 .5 4h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm4 0a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5Zm-4 2A.5.5 0 0 1 .5 6h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm4 0a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 0 1h-8a.5.5 0 0 1-.5-.5Zm-4 2A.5.5 0 0 1 .5 8h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm4 0a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 0 1h-8a.5.5 0 0 1-.5-.5Zm-4 2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm4 0a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1h-10a.5.5 0 0 1-.5-.5Zm-4 2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm4 0a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5Zm-4 2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm4 0a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5Z"></path></svg>`), ListColumnsReverse[FILENAME], [[1, 0, [[1, 181]]]]);
function ListColumnsReverse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ListColumnsReverse);
  var svg = root1307();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-list-columns-reverse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListColumnsReverse = hmr(ListColumnsReverse, () => ListColumnsReverse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListColumnsReverse[HMR].source;
    set(ListColumnsReverse[HMR].source, module.default[HMR].original);
  });
}
var ListColumnsReverse_default = ListColumnsReverse;
mark_module_end(ListColumnsReverse);

// node_modules/svelte-bootstrap-icons/lib/ListColumns.svelte
mark_module_start();
ListColumns[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ListColumns.svelte";
var root1308 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 .5A.5.5 0 0 1 .5 0h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 0 .5Zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm-13 2A.5.5 0 0 1 .5 2h8a.5.5 0 0 1 0 1h-8a.5.5 0 0 1-.5-.5Zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm-13 2A.5.5 0 0 1 .5 4h10a.5.5 0 0 1 0 1H.5a.5.5 0 0 1-.5-.5Zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm-13 2A.5.5 0 0 1 .5 6h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5Zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm-13 2A.5.5 0 0 1 .5 8h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5Zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm-13 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm-13 2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm-13 2a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H.5a.5.5 0 0 1-.5-.5Zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Z"></path></svg>`), ListColumns[FILENAME], [[1, 0, [[1, 173]]]]);
function ListColumns($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ListColumns);
  var svg = root1308();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-list-columns", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListColumns = hmr(ListColumns, () => ListColumns[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListColumns[HMR].source;
    set(ListColumns[HMR].source, module.default[HMR].original);
  });
}
var ListColumns_default = ListColumns;
mark_module_end(ListColumns);

// node_modules/svelte-bootstrap-icons/lib/ListNested.svelte
mark_module_start();
ListNested[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ListNested.svelte";
var root1309 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4.5 11.5A.5.5 0 0 1 5 11h10a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 1 3h10a.5.5 0 0 1 0 1H1a.5.5 0 0 1-.5-.5z"></path></svg>`), ListNested[FILENAME], [[1, 0, [[1, 172]]]]);
function ListNested($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ListNested);
  var svg = root1309();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-list-nested", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListNested = hmr(ListNested, () => ListNested[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListNested[HMR].source;
    set(ListNested[HMR].source, module.default[HMR].original);
  });
}
var ListNested_default = ListNested;
mark_module_end(ListNested);

// node_modules/svelte-bootstrap-icons/lib/ListOl.svelte
mark_module_start();
ListOl[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ListOl.svelte";
var root1310 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z"></path><path d="M1.713 11.865v-.474H2c.217 0 .363-.137.363-.317 0-.185-.158-.31-.361-.31-.223 0-.367.152-.373.31h-.59c.016-.467.373-.787.986-.787.588-.002.954.291.957.703a.595.595 0 0 1-.492.594v.033a.615.615 0 0 1 .569.631c.003.533-.502.8-1.051.8-.656 0-1-.37-1.008-.794h.582c.008.178.186.306.422.309.254 0 .424-.145.422-.35-.002-.195-.155-.348-.414-.348h-.3zm-.004-4.699h-.604v-.035c0-.408.295-.844.958-.844.583 0 .96.326.96.756 0 .389-.257.617-.476.848l-.537.572v.03h1.054V9H1.143v-.395l.957-.99c.138-.142.293-.304.293-.508 0-.18-.147-.32-.342-.32a.33.33 0 0 0-.342.338v.041zM2.564 5h-.635V2.924h-.031l-.598.42v-.567l.629-.443h.635V5z"></path></svg>`), ListOl[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function ListOl($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ListOl);
  var svg = root1310();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-list-ol", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListOl = hmr(ListOl, () => ListOl[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListOl[HMR].source;
    set(ListOl[HMR].source, module.default[HMR].original);
  });
}
var ListOl_default = ListOl;
mark_module_end(ListOl);

// node_modules/svelte-bootstrap-icons/lib/ListStars.svelte
mark_module_start();
ListStars[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ListStars.svelte";
var root1311 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z"></path><path d="M2.242 2.194a.27.27 0 0 1 .516 0l.162.53c.035.115.14.194.258.194h.551c.259 0 .37.333.164.493l-.468.363a.277.277 0 0 0-.094.3l.173.569c.078.256-.213.462-.423.3l-.417-.324a.267.267 0 0 0-.328 0l-.417.323c-.21.163-.5-.043-.423-.299l.173-.57a.277.277 0 0 0-.094-.299l-.468-.363c-.206-.16-.095-.493.164-.493h.55a.271.271 0 0 0 .259-.194l.162-.53zm0 4a.27.27 0 0 1 .516 0l.162.53c.035.115.14.194.258.194h.551c.259 0 .37.333.164.493l-.468.363a.277.277 0 0 0-.094.3l.173.569c.078.255-.213.462-.423.3l-.417-.324a.267.267 0 0 0-.328 0l-.417.323c-.21.163-.5-.043-.423-.299l.173-.57a.277.277 0 0 0-.094-.299l-.468-.363c-.206-.16-.095-.493.164-.493h.55a.271.271 0 0 0 .259-.194l.162-.53zm0 4a.27.27 0 0 1 .516 0l.162.53c.035.115.14.194.258.194h.551c.259 0 .37.333.164.493l-.468.363a.277.277 0 0 0-.094.3l.173.569c.078.255-.213.462-.423.3l-.417-.324a.267.267 0 0 0-.328 0l-.417.323c-.21.163-.5-.043-.423-.299l.173-.57a.277.277 0 0 0-.094-.299l-.468-.363c-.206-.16-.095-.493.164-.493h.55a.271.271 0 0 0 .259-.194l.162-.53z"></path></svg>`), ListStars[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function ListStars($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ListStars);
  var svg = root1311();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-list-stars", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListStars = hmr(ListStars, () => ListStars[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListStars[HMR].source;
    set(ListStars[HMR].source, module.default[HMR].original);
  });
}
var ListStars_default = ListStars;
mark_module_end(ListStars);

// node_modules/svelte-bootstrap-icons/lib/ListTask.svelte
mark_module_start();
ListTask[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ListTask.svelte";
var root1312 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 2.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5V3a.5.5 0 0 0-.5-.5H2zM3 3H2v1h1V3z"></path><path d="M5 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM5.5 7a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9zm0 4a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9z"></path><path fill-rule="evenodd" d="M1.5 7a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5V7zM2 7h1v1H2V7zm0 3.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5H2zm1 .5H2v1h1v-1z"></path></svg>`), ListTask[FILENAME], [
  [
    1,
    0,
    [[1, 170], [2, 2], [3, 2]]
  ]
]);
function ListTask($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ListTask);
  var svg = root1312();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-list-task", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListTask = hmr(ListTask, () => ListTask[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListTask[HMR].source;
    set(ListTask[HMR].source, module.default[HMR].original);
  });
}
var ListTask_default = ListTask;
mark_module_end(ListTask);

// node_modules/svelte-bootstrap-icons/lib/ListUl.svelte
mark_module_start();
ListUl[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ListUl.svelte";
var root1313 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), ListUl[FILENAME], [[1, 0, [[1, 168]]]]);
function ListUl($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ListUl);
  var svg = root1313();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-list-ul", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListUl = hmr(ListUl, () => ListUl[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListUl[HMR].source;
    set(ListUl[HMR].source, module.default[HMR].original);
  });
}
var ListUl_default = ListUl;
mark_module_end(ListUl);

// node_modules/svelte-bootstrap-icons/lib/List.svelte
mark_module_start();
List[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/List.svelte";
var root1314 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"></path></svg>`), List[FILENAME], [[1, 0, [[1, 165]]]]);
function List($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, List);
  var svg = root1314();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-list", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List = hmr(List, () => List[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List[HMR].source;
    set(List[HMR].source, module.default[HMR].original);
  });
}
var List_default = List;
mark_module_end(List);

// node_modules/svelte-bootstrap-icons/lib/LockFill.svelte
mark_module_start();
LockFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LockFill.svelte";
var root1315 = add_locations(ns_template(`<svg><!><path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2z"></path></svg>`), LockFill[FILENAME], [[1, 0, [[1, 170]]]]);
function LockFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LockFill);
  var svg = root1315();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lock-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LockFill = hmr(LockFill, () => LockFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LockFill[HMR].source;
    set(LockFill[HMR].source, module.default[HMR].original);
  });
}
var LockFill_default = LockFill;
mark_module_end(LockFill);

// node_modules/svelte-bootstrap-icons/lib/Lock.svelte
mark_module_start();
Lock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Lock.svelte";
var root1316 = add_locations(ns_template(`<svg><!><path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2zM5 8h6a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1z"></path></svg>`), Lock[FILENAME], [[1, 0, [[1, 165]]]]);
function Lock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Lock);
  var svg = root1316();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lock = hmr(Lock, () => Lock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lock[HMR].source;
    set(Lock[HMR].source, module.default[HMR].original);
  });
}
var Lock_default = Lock;
mark_module_end(Lock);

// node_modules/svelte-bootstrap-icons/lib/LuggageFill.svelte
mark_module_start();
LuggageFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LuggageFill.svelte";
var root1317 = add_locations(ns_template(`<svg><!><path d="M2 1.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5V5h.5A1.5 1.5 0 0 1 8 6.5V7H7v-.5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5H4v1H2.5v.25a.75.75 0 0 1-1.5 0v-.335A1.5 1.5 0 0 1 0 13.5v-7A1.5 1.5 0 0 1 1.5 5H2V1.5ZM3 5h2V2H3v3Z"></path><path d="M2.5 7a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-1 0v-5a.5.5 0 0 1 .5-.5Zm10 1v-.5A1.5 1.5 0 0 0 11 6h-1a1.5 1.5 0 0 0-1.5 1.5V8H8v8h5V8h-.5ZM10 7h1a.5.5 0 0 1 .5.5V8h-2v-.5A.5.5 0 0 1 10 7ZM5 9.5A1.5 1.5 0 0 1 6.5 8H7v8h-.5A1.5 1.5 0 0 1 5 14.5v-5Zm9 6.5V8h.5A1.5 1.5 0 0 1 16 9.5v5a1.5 1.5 0 0 1-1.5 1.5H14Z"></path></svg>`), LuggageFill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function LuggageFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LuggageFill);
  var svg = root1317();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-luggage-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LuggageFill = hmr(LuggageFill, () => LuggageFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LuggageFill[HMR].source;
    set(LuggageFill[HMR].source, module.default[HMR].original);
  });
}
var LuggageFill_default = LuggageFill;
mark_module_end(LuggageFill);

// node_modules/svelte-bootstrap-icons/lib/Luggage.svelte
mark_module_start();
Luggage[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Luggage.svelte";
var root1318 = add_locations(ns_template(`<svg><!><path d="M2.5 1a.5.5 0 0 0-.5.5V5h-.5A1.5 1.5 0 0 0 0 6.5v7a1.5 1.5 0 0 0 1 1.415v.335a.75.75 0 0 0 1.5 0V15H4v-1H1.5a.5.5 0 0 1-.5-.5v-7a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5V7h1v-.5A1.5 1.5 0 0 0 6.5 5H6V1.5a.5.5 0 0 0-.5-.5h-3ZM5 5H3V2h2v3Z"></path><path d="M3 7.5a.5.5 0 0 0-1 0v5a.5.5 0 0 0 1 0v-5ZM11 6a1.5 1.5 0 0 1 1.5 1.5V8h2A1.5 1.5 0 0 1 16 9.5v5a1.5 1.5 0 0 1-1.5 1.5h-8A1.5 1.5 0 0 1 5 14.5v-5A1.5 1.5 0 0 1 6.5 8h2v-.5A1.5 1.5 0 0 1 10 6h1ZM9.5 7.5V8h2v-.5A.5.5 0 0 0 11 7h-1a.5.5 0 0 0-.5.5ZM6 9.5v5a.5.5 0 0 0 .5.5H7V9h-.5a.5.5 0 0 0-.5.5Zm7 5.5V9H8v6h5Zm1.5 0a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5H14v6h.5Z"></path></svg>`), Luggage[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Luggage($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Luggage);
  var svg = root1318();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-luggage", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Luggage = hmr(Luggage, () => Luggage[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Luggage[HMR].source;
    set(Luggage[HMR].source, module.default[HMR].original);
  });
}
var Luggage_default = Luggage;
mark_module_end(Luggage);

// node_modules/svelte-bootstrap-icons/lib/LungsFill.svelte
mark_module_start();
LungsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/LungsFill.svelte";
var root1319 = add_locations(ns_template(`<svg><!><path d="M8 1a.5.5 0 0 1 .5.5v5.243L9 7.1V4.72C9 3.77 9.77 3 10.72 3c.524 0 1.023.27 1.443.592.431.332.847.773 1.216 1.229.736.908 1.347 1.946 1.58 2.48.176.405.393 1.16.556 2.011.165.857.283 1.857.24 2.759-.04.867-.232 1.79-.837 2.33-.67.6-1.622.556-2.741-.004l-1.795-.897A2.5 2.5 0 0 1 9 11.264V8.329l-1-.715-1 .715V7.214c-.1 0-.202.03-.29.093l-2.5 1.786a.5.5 0 1 0 .58.814L7 8.329v2.935A2.5 2.5 0 0 1 5.618 13.5l-1.795.897c-1.12.56-2.07.603-2.741.004-.605-.54-.798-1.463-.838-2.33-.042-.902.076-1.902.24-2.759.164-.852.38-1.606.558-2.012.232-.533.843-1.571 1.579-2.479.37-.456.785-.897 1.216-1.229C4.257 3.27 4.756 3 5.28 3 6.23 3 7 3.77 7 4.72V7.1l.5-.357V1.5A.5.5 0 0 1 8 1Zm3.21 8.907a.5.5 0 1 0 .58-.814l-2.5-1.786A.498.498 0 0 0 9 7.214V8.33l2.21 1.578Z"></path></svg>`), LungsFill[FILENAME], [[1, 0, [[1, 171]]]]);
function LungsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, LungsFill);
  var svg = root1319();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lungs-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LungsFill = hmr(LungsFill, () => LungsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LungsFill[HMR].source;
    set(LungsFill[HMR].source, module.default[HMR].original);
  });
}
var LungsFill_default = LungsFill;
mark_module_end(LungsFill);

// node_modules/svelte-bootstrap-icons/lib/Lungs.svelte
mark_module_start();
Lungs[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Lungs.svelte";
var root1320 = add_locations(ns_template(`<svg><!><path d="M8.5 1.5a.5.5 0 1 0-1 0v5.243L7 7.1V4.72C7 3.77 6.23 3 5.28 3c-.524 0-1.023.27-1.443.592-.431.332-.847.773-1.216 1.229-.736.908-1.347 1.946-1.58 2.48-.176.405-.393 1.16-.556 2.011-.165.857-.283 1.857-.241 2.759.04.867.233 1.79.838 2.33.67.6 1.622.556 2.741-.004l1.795-.897A2.5 2.5 0 0 0 7 11.264V10.5a.5.5 0 0 0-1 0v.764a1.5 1.5 0 0 1-.83 1.342l-1.794.897c-.978.489-1.415.343-1.628.152-.28-.25-.467-.801-.505-1.63-.037-.795.068-1.71.224-2.525.157-.82.357-1.491.491-1.8.19-.438.75-1.4 1.44-2.25.342-.422.703-.799 1.049-1.065.358-.276.639-.385.833-.385a.72.72 0 0 1 .72.72v3.094l-1.79 1.28a.5.5 0 0 0 .58.813L8 7.614l3.21 2.293a.5.5 0 1 0 .58-.814L10 7.814V4.72a.72.72 0 0 1 .72-.72c.194 0 .475.11.833.385.346.266.706.643 1.05 1.066.688.85 1.248 1.811 1.439 2.249.134.309.334.98.491 1.8.156.814.26 1.73.224 2.525-.038.829-.224 1.38-.505 1.63-.213.19-.65.337-1.628-.152l-1.795-.897A1.5 1.5 0 0 1 10 11.264V10.5a.5.5 0 0 0-1 0v.764a2.5 2.5 0 0 0 1.382 2.236l1.795.897c1.12.56 2.07.603 2.741.004.605-.54.798-1.463.838-2.33.042-.902-.076-1.902-.24-2.759-.164-.852-.38-1.606-.558-2.012-.232-.533-.843-1.571-1.579-2.479-.37-.456-.785-.897-1.216-1.229C11.743 3.27 11.244 3 10.72 3 9.77 3 9 3.77 9 4.72V7.1l-.5-.357V1.5Z"></path></svg>`), Lungs[FILENAME], [[1, 0, [[1, 166]]]]);
function Lungs($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Lungs);
  var svg = root1320();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-lungs", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lungs = hmr(Lungs, () => Lungs[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lungs[HMR].source;
    set(Lungs[HMR].source, module.default[HMR].original);
  });
}
var Lungs_default = Lungs;
mark_module_end(Lungs);

// node_modules/svelte-bootstrap-icons/lib/Magic.svelte
mark_module_start();
Magic[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Magic.svelte";
var root1321 = add_locations(ns_template(`<svg><!><path d="M9.5 2.672a.5.5 0 1 0 1 0V.843a.5.5 0 0 0-1 0v1.829Zm4.5.035A.5.5 0 0 0 13.293 2L12 3.293a.5.5 0 1 0 .707.707L14 2.707ZM7.293 4A.5.5 0 1 0 8 3.293L6.707 2A.5.5 0 0 0 6 2.707L7.293 4Zm-.621 2.5a.5.5 0 1 0 0-1H4.843a.5.5 0 1 0 0 1h1.829Zm8.485 0a.5.5 0 1 0 0-1h-1.829a.5.5 0 0 0 0 1h1.829ZM13.293 10A.5.5 0 1 0 14 9.293L12.707 8a.5.5 0 1 0-.707.707L13.293 10ZM9.5 11.157a.5.5 0 0 0 1 0V9.328a.5.5 0 0 0-1 0v1.829Zm1.854-5.097a.5.5 0 0 0 0-.706l-.708-.708a.5.5 0 0 0-.707 0L8.646 5.94a.5.5 0 0 0 0 .707l.708.708a.5.5 0 0 0 .707 0l1.293-1.293Zm-3 3a.5.5 0 0 0 0-.706l-.708-.708a.5.5 0 0 0-.707 0L.646 13.94a.5.5 0 0 0 0 .707l.708.708a.5.5 0 0 0 .707 0L8.354 9.06Z"></path></svg>`), Magic[FILENAME], [[1, 0, [[1, 166]]]]);
function Magic($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Magic);
  var svg = root1321();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-magic", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Magic = hmr(Magic, () => Magic[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Magic[HMR].source;
    set(Magic[HMR].source, module.default[HMR].original);
  });
}
var Magic_default = Magic;
mark_module_end(Magic);

// node_modules/svelte-bootstrap-icons/lib/MagnetFill.svelte
mark_module_start();
MagnetFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MagnetFill.svelte";
var root1322 = add_locations(ns_template(`<svg><!><path d="M15 12h-4v3h4v-3ZM5 12H1v3h4v-3ZM0 8a8 8 0 1 1 16 0v8h-6V8a2 2 0 1 0-4 0v8H0V8Z"></path></svg>`), MagnetFill[FILENAME], [[1, 0, [[1, 172]]]]);
function MagnetFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MagnetFill);
  var svg = root1322();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-magnet-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MagnetFill = hmr(MagnetFill, () => MagnetFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MagnetFill[HMR].source;
    set(MagnetFill[HMR].source, module.default[HMR].original);
  });
}
var MagnetFill_default = MagnetFill;
mark_module_end(MagnetFill);

// node_modules/svelte-bootstrap-icons/lib/Magnet.svelte
mark_module_start();
Magnet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Magnet.svelte";
var root1323 = add_locations(ns_template(`<svg><!><path d="M8 1a7 7 0 0 0-7 7v3h4V8a3 3 0 0 1 6 0v3h4V8a7 7 0 0 0-7-7Zm7 11h-4v3h4v-3ZM5 12H1v3h4v-3ZM0 8a8 8 0 1 1 16 0v8h-6V8a2 2 0 1 0-4 0v8H0V8Z"></path></svg>`), Magnet[FILENAME], [[1, 0, [[1, 167]]]]);
function Magnet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Magnet);
  var svg = root1323();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-magnet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Magnet = hmr(Magnet, () => Magnet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Magnet[HMR].source;
    set(Magnet[HMR].source, module.default[HMR].original);
  });
}
var Magnet_default = Magnet;
mark_module_end(Magnet);

// node_modules/svelte-bootstrap-icons/lib/MailboxFlag.svelte
mark_module_start();
MailboxFlag[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MailboxFlag.svelte";
var root1324 = add_locations(ns_template(`<svg><!><path d="M10.5 8.5V3.707l.854-.853A.5.5 0 0 0 11.5 2.5v-2A.5.5 0 0 0 11 0H9.5a.5.5 0 0 0-.5.5v8h1.5ZM5 7c0 .334-.164.264-.415.157C4.42 7.087 4.218 7 4 7c-.218 0-.42.086-.585.157C3.164 7.264 3 7.334 3 7a1 1 0 0 1 2 0Z"></path><path d="M4 3h4v1H6.646A3.99 3.99 0 0 1 8 7v6h7V7a3 3 0 0 0-3-3V3a4 4 0 0 1 4 4v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a4 4 0 0 1 4-4Zm0 1a3 3 0 0 0-3 3v6h6V7a3 3 0 0 0-3-3Z"></path></svg>`), MailboxFlag[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function MailboxFlag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MailboxFlag);
  var svg = root1324();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mailbox-flag", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MailboxFlag = hmr(MailboxFlag, () => MailboxFlag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MailboxFlag[HMR].source;
    set(MailboxFlag[HMR].source, module.default[HMR].original);
  });
}
var MailboxFlag_default = MailboxFlag;
mark_module_end(MailboxFlag);

// node_modules/svelte-bootstrap-icons/lib/Mailbox.svelte
mark_module_start();
Mailbox[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mailbox.svelte";
var root1325 = add_locations(ns_template(`<svg><!><path d="M4 4a3 3 0 0 0-3 3v6h6V7a3 3 0 0 0-3-3zm0-1h8a4 4 0 0 1 4 4v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a4 4 0 0 1 4-4zm2.646 1A3.99 3.99 0 0 1 8 7v6h7V7a3 3 0 0 0-3-3H6.646z"></path><path d="M11.793 8.5H9v-1h5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.354-.146l-.853-.854zM5 7c0 .552-.448 0-1 0s-1 .552-1 0a1 1 0 0 1 2 0z"></path></svg>`), Mailbox[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Mailbox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mailbox);
  var svg = root1325();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mailbox", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mailbox = hmr(Mailbox, () => Mailbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mailbox[HMR].source;
    set(Mailbox[HMR].source, module.default[HMR].original);
  });
}
var Mailbox_default = Mailbox;
mark_module_end(Mailbox);

// node_modules/svelte-bootstrap-icons/lib/Mailbox2Flag.svelte
mark_module_start();
Mailbox2Flag[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mailbox2Flag.svelte";
var root1326 = add_locations(ns_template(`<svg><!><path d="M10.5 8.5V3.707l.854-.853A.5.5 0 0 0 11.5 2.5v-2A.5.5 0 0 0 11 0H9.5a.5.5 0 0 0-.5.5v8h1.5Z"></path><path d="M4 3h4v1H6.646A3.99 3.99 0 0 1 8 7v6h7V7a3 3 0 0 0-3-3V3a4 4 0 0 1 4 4v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a4 4 0 0 1 4-4Zm.585 4.157C4.836 7.264 5 7.334 5 7a1 1 0 0 0-2 0c0 .334.164.264.415.157C3.58 7.087 3.782 7 4 7c.218 0 .42.086.585.157Z"></path></svg>`), Mailbox2Flag[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function Mailbox2Flag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mailbox2Flag);
  var svg = root1326();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mailbox2-flag", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mailbox2Flag = hmr(Mailbox2Flag, () => Mailbox2Flag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mailbox2Flag[HMR].source;
    set(Mailbox2Flag[HMR].source, module.default[HMR].original);
  });
}
var Mailbox2Flag_default = Mailbox2Flag;
mark_module_end(Mailbox2Flag);

// node_modules/svelte-bootstrap-icons/lib/Mailbox2.svelte
mark_module_start();
Mailbox2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mailbox2.svelte";
var root1327 = add_locations(ns_template(`<svg><!><path d="M9 8.5h2.793l.853.854A.5.5 0 0 0 13 9.5h1a.5.5 0 0 0 .5-.5V8a.5.5 0 0 0-.5-.5H9v1z"></path><path d="M12 3H4a4 4 0 0 0-4 4v6a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V7a4 4 0 0 0-4-4zM8 7a3.99 3.99 0 0 0-1.354-3H12a3 3 0 0 1 3 3v6H8V7zm-3.415.157C4.42 7.087 4.218 7 4 7c-.218 0-.42.086-.585.157C3.164 7.264 3 7.334 3 7a1 1 0 0 1 2 0c0 .334-.164.264-.415.157z"></path></svg>`), Mailbox2[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Mailbox2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mailbox2);
  var svg = root1327();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mailbox2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mailbox2 = hmr(Mailbox2, () => Mailbox2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mailbox2[HMR].source;
    set(Mailbox2[HMR].source, module.default[HMR].original);
  });
}
var Mailbox2_default = Mailbox2;
mark_module_end(Mailbox2);

// node_modules/svelte-bootstrap-icons/lib/MapFill.svelte
mark_module_start();
MapFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MapFill.svelte";
var root1328 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.598-.49L10.5.99 5.598.01a.5.5 0 0 0-.196 0l-5 1A.5.5 0 0 0 0 1.5v14a.5.5 0 0 0 .598.49l4.902-.98 4.902.98a.502.502 0 0 0 .196 0l5-1A.5.5 0 0 0 16 14.5V.5zM5 14.09V1.11l.5-.1.5.1v12.98l-.402-.08a.498.498 0 0 0-.196 0L5 14.09zm5 .8V1.91l.402.08a.5.5 0 0 0 .196 0L11 1.91v12.98l-.5.1-.5-.1z"></path></svg>`), MapFill[FILENAME], [[1, 0, [[1, 169]]]]);
function MapFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MapFill);
  var svg = root1328();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-map-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MapFill = hmr(MapFill, () => MapFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MapFill[HMR].source;
    set(MapFill[HMR].source, module.default[HMR].original);
  });
}
var MapFill_default = MapFill;
mark_module_end(MapFill);

// node_modules/svelte-bootstrap-icons/lib/Map.svelte
mark_module_start();
Map[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Map.svelte";
var root1329 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15.817.113A.5.5 0 0 1 16 .5v14a.5.5 0 0 1-.402.49l-5 1a.502.502 0 0 1-.196 0L5.5 15.01l-4.902.98A.5.5 0 0 1 0 15.5v-14a.5.5 0 0 1 .402-.49l5-1a.5.5 0 0 1 .196 0L10.5.99l4.902-.98a.5.5 0 0 1 .415.103zM10 1.91l-4-.8v12.98l4 .8V1.91zm1 12.98 4-.8V1.11l-4 .8v12.98zm-6-.8V1.11l-4 .8v12.98l4-.8z"></path></svg>`), Map[FILENAME], [[1, 0, [[1, 164]]]]);
function Map($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Map);
  var svg = root1329();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-map", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map = hmr(Map, () => Map[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map[HMR].source;
    set(Map[HMR].source, module.default[HMR].original);
  });
}
var Map_default = Map;
mark_module_end(Map);

// node_modules/svelte-bootstrap-icons/lib/MarkdownFill.svelte
mark_module_start();
MarkdownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MarkdownFill.svelte";
var root1330 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm11.5 1a.5.5 0 0 0-.5.5v3.793L9.854 8.146a.5.5 0 1 0-.708.708l2 2a.5.5 0 0 0 .708 0l2-2a.5.5 0 0 0-.708-.708L12 9.293V5.5a.5.5 0 0 0-.5-.5zM3.56 7.01h.056l1.428 3.239h.774l1.42-3.24h.056V11h1.073V5.001h-1.2l-1.71 3.894h-.039l-1.71-3.894H2.5V11h1.06V7.01z"></path></svg>`), MarkdownFill[FILENAME], [[1, 0, [[1, 174]]]]);
function MarkdownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MarkdownFill);
  var svg = root1330();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-markdown-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MarkdownFill = hmr(MarkdownFill, () => MarkdownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MarkdownFill[HMR].source;
    set(MarkdownFill[HMR].source, module.default[HMR].original);
  });
}
var MarkdownFill_default = MarkdownFill;
mark_module_end(MarkdownFill);

// node_modules/svelte-bootstrap-icons/lib/Markdown.svelte
mark_module_start();
Markdown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Markdown.svelte";
var root1331 = add_locations(ns_template(`<svg><!><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"></path><path fill-rule="evenodd" d="M9.146 8.146a.5.5 0 0 1 .708 0L11.5 9.793l1.646-1.647a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 0-.708z"></path><path fill-rule="evenodd" d="M11.5 5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 1 .5-.5z"></path><path d="M3.56 11V7.01h.056l1.428 3.239h.774l1.42-3.24h.056V11h1.073V5.001h-1.2l-1.71 3.894h-.039l-1.71-3.894H2.5V11h1.06z"></path></svg>`), Markdown[FILENAME], [
  [
    1,
    0,
    [
      [1, 169],
      [2, 2],
      [3, 2],
      [4, 2]
    ]
  ]
]);
function Markdown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Markdown);
  var svg = root1331();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(4);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-markdown", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Markdown = hmr(Markdown, () => Markdown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Markdown[HMR].source;
    set(Markdown[HMR].source, module.default[HMR].original);
  });
}
var Markdown_default = Markdown;
mark_module_end(Markdown);

// node_modules/svelte-bootstrap-icons/lib/MarkerTip.svelte
mark_module_start();
MarkerTip[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MarkerTip.svelte";
var root1332 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-4.5 6.064-1.281-4.696A.5.5 0 0 0 9.736 9H6.264a.5.5 0 0 0-.483.368l-1.28 4.696A6.968 6.968 0 0 0 8 15c1.275 0 2.47-.34 3.5-.936Zm.873-.598a7 7 0 1 0-8.746 0l1.19-4.36a1.5 1.5 0 0 1 1.31-1.1l1.155-3.851c.213-.713 1.223-.713 1.436 0l1.156 3.851a1.5 1.5 0 0 1 1.31 1.1l1.189 4.36Z"></path></svg>`), MarkerTip[FILENAME], [[1, 0, [[1, 171]]]]);
function MarkerTip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MarkerTip);
  var svg = root1332();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-marker-tip", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MarkerTip = hmr(MarkerTip, () => MarkerTip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MarkerTip[HMR].source;
    set(MarkerTip[HMR].source, module.default[HMR].original);
  });
}
var MarkerTip_default = MarkerTip;
mark_module_end(MarkerTip);

// node_modules/svelte-bootstrap-icons/lib/Mask.svelte
mark_module_start();
Mask[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mask.svelte";
var root1333 = add_locations(ns_template(`<svg><!><path d="M6.225 1.227A7.5 7.5 0 0 1 10.5 8a7.5 7.5 0 0 1-4.275 6.773 7 7 0 1 0 0-13.546zM4.187.966a8 8 0 1 1 7.627 14.069A8 8 0 0 1 4.186.964z"></path></svg>`), Mask[FILENAME], [[1, 0, [[1, 165]]]]);
function Mask($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mask);
  var svg = root1333();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mask", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mask = hmr(Mask, () => Mask[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mask[HMR].source;
    set(Mask[HMR].source, module.default[HMR].original);
  });
}
var Mask_default = Mask;
mark_module_end(Mask);

// node_modules/svelte-bootstrap-icons/lib/Mastodon.svelte
mark_module_start();
Mastodon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mastodon.svelte";
var root1334 = add_locations(ns_template(`<svg><!><path d="M11.19 12.195c2.016-.24 3.77-1.475 3.99-2.603.348-1.778.32-4.339.32-4.339 0-3.47-2.286-4.488-2.286-4.488C12.062.238 10.083.017 8.027 0h-.05C5.92.017 3.942.238 2.79.765c0 0-2.285 1.017-2.285 4.488l-.002.662c-.004.64-.007 1.35.011 2.091.083 3.394.626 6.74 3.78 7.57 1.454.383 2.703.463 3.709.408 1.823-.1 2.847-.647 2.847-.647l-.06-1.317s-1.303.41-2.767.36c-1.45-.05-2.98-.156-3.215-1.928a3.614 3.614 0 0 1-.033-.496s1.424.346 3.228.428c1.103.05 2.137-.064 3.188-.189zm1.613-2.47H11.13v-4.08c0-.859-.364-1.295-1.091-1.295-.804 0-1.207.517-1.207 1.541v2.233H7.168V5.89c0-1.024-.403-1.541-1.207-1.541-.727 0-1.091.436-1.091 1.296v4.079H3.197V5.522c0-.859.22-1.541.66-2.046.456-.505 1.052-.764 1.793-.764.856 0 1.504.328 1.933.983L8 4.39l.417-.695c.429-.655 1.077-.983 1.934-.983.74 0 1.336.259 1.791.764.442.505.661 1.187.661 2.046v4.203z"></path></svg>`), Mastodon[FILENAME], [[1, 0, [[1, 169]]]]);
function Mastodon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mastodon);
  var svg = root1334();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mastodon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mastodon = hmr(Mastodon, () => Mastodon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mastodon[HMR].source;
    set(Mastodon[HMR].source, module.default[HMR].original);
  });
}
var Mastodon_default = Mastodon;
mark_module_end(Mastodon);

// node_modules/svelte-bootstrap-icons/lib/Medium.svelte
mark_module_start();
Medium[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Medium.svelte";
var root1335 = add_locations(ns_template(`<svg><!><path d="M9.025 8c0 2.485-2.02 4.5-4.513 4.5A4.506 4.506 0 0 1 0 8c0-2.486 2.02-4.5 4.512-4.5A4.506 4.506 0 0 1 9.025 8zm4.95 0c0 2.34-1.01 4.236-2.256 4.236-1.246 0-2.256-1.897-2.256-4.236 0-2.34 1.01-4.236 2.256-4.236 1.246 0 2.256 1.897 2.256 4.236zM16 8c0 2.096-.355 3.795-.794 3.795-.438 0-.793-1.7-.793-3.795 0-2.096.355-3.795.794-3.795.438 0 .793 1.699.793 3.795z"></path></svg>`), Medium[FILENAME], [[1, 0, [[1, 167]]]]);
function Medium($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Medium);
  var svg = root1335();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-medium", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Medium = hmr(Medium, () => Medium[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Medium[HMR].source;
    set(Medium[HMR].source, module.default[HMR].original);
  });
}
var Medium_default = Medium;
mark_module_end(Medium);

// node_modules/svelte-bootstrap-icons/lib/MegaphoneFill.svelte
mark_module_start();
MegaphoneFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MegaphoneFill.svelte";
var root1336 = add_locations(ns_template(`<svg><!><path d="M13 2.5a1.5 1.5 0 0 1 3 0v11a1.5 1.5 0 0 1-3 0v-11zm-1 .724c-2.067.95-4.539 1.481-7 1.656v6.237a25.222 25.222 0 0 1 1.088.085c2.053.204 4.038.668 5.912 1.56V3.224zm-8 7.841V4.934c-.68.027-1.399.043-2.008.053A2.02 2.02 0 0 0 0 7v2c0 1.106.896 1.996 1.994 2.009a68.14 68.14 0 0 1 .496.008 64 64 0 0 1 1.51.048zm1.39 1.081c.285.021.569.047.85.078l.253 1.69a1 1 0 0 1-.983 1.187h-.548a1 1 0 0 1-.916-.599l-1.314-2.48a65.81 65.81 0 0 1 1.692.064c.327.017.65.037.966.06z"></path></svg>`), MegaphoneFill[FILENAME], [[1, 0, [[1, 175]]]]);
function MegaphoneFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MegaphoneFill);
  var svg = root1336();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-megaphone-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MegaphoneFill = hmr(MegaphoneFill, () => MegaphoneFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MegaphoneFill[HMR].source;
    set(MegaphoneFill[HMR].source, module.default[HMR].original);
  });
}
var MegaphoneFill_default = MegaphoneFill;
mark_module_end(MegaphoneFill);

// node_modules/svelte-bootstrap-icons/lib/Megaphone.svelte
mark_module_start();
Megaphone[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Megaphone.svelte";
var root1337 = add_locations(ns_template(`<svg><!><path d="M13 2.5a1.5 1.5 0 0 1 3 0v11a1.5 1.5 0 0 1-3 0v-.214c-2.162-1.241-4.49-1.843-6.912-2.083l.405 2.712A1 1 0 0 1 5.51 15.1h-.548a1 1 0 0 1-.916-.599l-1.85-3.49a68.14 68.14 0 0 0-.202-.003A2.014 2.014 0 0 1 0 9V7a2.02 2.02 0 0 1 1.992-2.013 74.663 74.663 0 0 0 2.483-.075c3.043-.154 6.148-.849 8.525-2.199V2.5zm1 0v11a.5.5 0 0 0 1 0v-11a.5.5 0 0 0-1 0zm-1 1.35c-2.344 1.205-5.209 1.842-8 2.033v4.233c.18.01.359.022.537.036 2.568.189 5.093.744 7.463 1.993V3.85zm-9 6.215v-4.13a95.09 95.09 0 0 1-1.992.052A1.02 1.02 0 0 0 1 7v2c0 .55.448 1.002 1.006 1.009A60.49 60.49 0 0 1 4 10.065zm-.657.975 1.609 3.037.01.024h.548l-.002-.014-.443-2.966a68.019 68.019 0 0 0-1.722-.082z"></path></svg>`), Megaphone[FILENAME], [[1, 0, [[1, 170]]]]);
function Megaphone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Megaphone);
  var svg = root1337();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-megaphone", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Megaphone = hmr(Megaphone, () => Megaphone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Megaphone[HMR].source;
    set(Megaphone[HMR].source, module.default[HMR].original);
  });
}
var Megaphone_default = Megaphone;
mark_module_end(Megaphone);

// node_modules/svelte-bootstrap-icons/lib/Memory.svelte
mark_module_start();
Memory[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Memory.svelte";
var root1338 = add_locations(ns_template(`<svg><!><path d="M1 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4.586a1 1 0 0 0 .707-.293l.353-.353a.5.5 0 0 1 .708 0l.353.353a1 1 0 0 0 .707.293H15a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H1Zm.5 1h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5Zm5 0h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5Zm4.5.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4ZM2 10v2H1v-2h1Zm2 0v2H3v-2h1Zm2 0v2H5v-2h1Zm3 0v2H8v-2h1Zm2 0v2h-1v-2h1Zm2 0v2h-1v-2h1Zm2 0v2h-1v-2h1Z"></path></svg>`), Memory[FILENAME], [[1, 0, [[1, 167]]]]);
function Memory($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Memory);
  var svg = root1338();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-memory", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Memory = hmr(Memory, () => Memory[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Memory[HMR].source;
    set(Memory[HMR].source, module.default[HMR].original);
  });
}
var Memory_default = Memory;
mark_module_end(Memory);

// node_modules/svelte-bootstrap-icons/lib/MenuAppFill.svelte
mark_module_start();
MenuAppFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MenuAppFill.svelte";
var root1339 = add_locations(ns_template(`<svg><!><path d="M0 1.5A1.5 1.5 0 0 1 1.5 0h2A1.5 1.5 0 0 1 5 1.5v2A1.5 1.5 0 0 1 3.5 5h-2A1.5 1.5 0 0 1 0 3.5v-2zM0 8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8zm1 3v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2H1zm14-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2h14zM2 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"></path></svg>`), MenuAppFill[FILENAME], [[1, 0, [[1, 174]]]]);
function MenuAppFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MenuAppFill);
  var svg = root1339();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-menu-app-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MenuAppFill = hmr(MenuAppFill, () => MenuAppFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MenuAppFill[HMR].source;
    set(MenuAppFill[HMR].source, module.default[HMR].original);
  });
}
var MenuAppFill_default = MenuAppFill;
mark_module_end(MenuAppFill);

// node_modules/svelte-bootstrap-icons/lib/MenuApp.svelte
mark_module_start();
MenuApp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MenuApp.svelte";
var root1340 = add_locations(ns_template(`<svg><!><path d="M0 1.5A1.5 1.5 0 0 1 1.5 0h2A1.5 1.5 0 0 1 5 1.5v2A1.5 1.5 0 0 1 3.5 5h-2A1.5 1.5 0 0 1 0 3.5v-2zM1.5 1a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5h-2zM0 8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8zm1 3v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2H1zm14-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2h14zM2 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"></path></svg>`), MenuApp[FILENAME], [[1, 0, [[1, 169]]]]);
function MenuApp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MenuApp);
  var svg = root1340();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-menu-app", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MenuApp = hmr(MenuApp, () => MenuApp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MenuApp[HMR].source;
    set(MenuApp[HMR].source, module.default[HMR].original);
  });
}
var MenuApp_default = MenuApp;
mark_module_end(MenuApp);

// node_modules/svelte-bootstrap-icons/lib/MenuButtonFill.svelte
mark_module_start();
MenuButtonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MenuButtonFill.svelte";
var root1341 = add_locations(ns_template(`<svg><!><path d="M1.5 0A1.5 1.5 0 0 0 0 1.5v2A1.5 1.5 0 0 0 1.5 5h8A1.5 1.5 0 0 0 11 3.5v-2A1.5 1.5 0 0 0 9.5 0h-8zm5.927 2.427A.25.25 0 0 1 7.604 2h.792a.25.25 0 0 1 .177.427l-.396.396a.25.25 0 0 1-.354 0l-.396-.396zM0 8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8zm1 3v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2H1zm14-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2h14zM2 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"></path></svg>`), MenuButtonFill[FILENAME], [[1, 0, [[1, 177]]]]);
function MenuButtonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MenuButtonFill);
  var svg = root1341();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-menu-button-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MenuButtonFill = hmr(MenuButtonFill, () => MenuButtonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MenuButtonFill[HMR].source;
    set(MenuButtonFill[HMR].source, module.default[HMR].original);
  });
}
var MenuButtonFill_default = MenuButtonFill;
mark_module_end(MenuButtonFill);

// node_modules/svelte-bootstrap-icons/lib/MenuButtonWideFill.svelte
mark_module_start();
MenuButtonWideFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MenuButtonWideFill.svelte";
var root1342 = add_locations(ns_template(`<svg><!><path d="M1.5 0A1.5 1.5 0 0 0 0 1.5v2A1.5 1.5 0 0 0 1.5 5h13A1.5 1.5 0 0 0 16 3.5v-2A1.5 1.5 0 0 0 14.5 0h-13zm1 2h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1zm9.927.427A.25.25 0 0 1 12.604 2h.792a.25.25 0 0 1 .177.427l-.396.396a.25.25 0 0 1-.354 0l-.396-.396zM0 8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8zm1 3v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2H1zm14-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2h14zM2 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"></path></svg>`), MenuButtonWideFill[FILENAME], [[1, 0, [[1, 182]]]]);
function MenuButtonWideFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MenuButtonWideFill);
  var svg = root1342();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-menu-button-wide-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MenuButtonWideFill = hmr(MenuButtonWideFill, () => MenuButtonWideFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MenuButtonWideFill[HMR].source;
    set(MenuButtonWideFill[HMR].source, module.default[HMR].original);
  });
}
var MenuButtonWideFill_default = MenuButtonWideFill;
mark_module_end(MenuButtonWideFill);

// node_modules/svelte-bootstrap-icons/lib/MenuButtonWide.svelte
mark_module_start();
MenuButtonWide[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MenuButtonWide.svelte";
var root1343 = add_locations(ns_template(`<svg><!><path d="M0 1.5A1.5 1.5 0 0 1 1.5 0h13A1.5 1.5 0 0 1 16 1.5v2A1.5 1.5 0 0 1 14.5 5h-13A1.5 1.5 0 0 1 0 3.5v-2zM1.5 1a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5h-13z"></path><path d="M2 2.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm10.823.323-.396-.396A.25.25 0 0 1 12.604 2h.792a.25.25 0 0 1 .177.427l-.396.396a.25.25 0 0 1-.354 0zM0 8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8zm1 3v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2H1zm14-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2h14zM2 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"></path></svg>`), MenuButtonWide[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function MenuButtonWide($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MenuButtonWide);
  var svg = root1343();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-menu-button-wide", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MenuButtonWide = hmr(MenuButtonWide, () => MenuButtonWide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MenuButtonWide[HMR].source;
    set(MenuButtonWide[HMR].source, module.default[HMR].original);
  });
}
var MenuButtonWide_default = MenuButtonWide;
mark_module_end(MenuButtonWide);

// node_modules/svelte-bootstrap-icons/lib/MenuButton.svelte
mark_module_start();
MenuButton[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MenuButton.svelte";
var root1344 = add_locations(ns_template(`<svg><!><path d="M0 1.5A1.5 1.5 0 0 1 1.5 0h8A1.5 1.5 0 0 1 11 1.5v2A1.5 1.5 0 0 1 9.5 5h-8A1.5 1.5 0 0 1 0 3.5v-2zM1.5 1a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5h-8z"></path><path d="m7.823 2.823-.396-.396A.25.25 0 0 1 7.604 2h.792a.25.25 0 0 1 .177.427l-.396.396a.25.25 0 0 1-.354 0zM0 8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8zm1 3v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2H1zm14-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2h14zM2 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"></path></svg>`), MenuButton[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function MenuButton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MenuButton);
  var svg = root1344();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-menu-button", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MenuButton = hmr(MenuButton, () => MenuButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MenuButton[HMR].source;
    set(MenuButton[HMR].source, module.default[HMR].original);
  });
}
var MenuButton_default = MenuButton;
mark_module_end(MenuButton);

// node_modules/svelte-bootstrap-icons/lib/MenuDown.svelte
mark_module_start();
MenuDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MenuDown.svelte";
var root1345 = add_locations(ns_template(`<svg><!><path d="M7.646.146a.5.5 0 0 1 .708 0L10.207 2H14a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h3.793L7.646.146zM1 7v3h14V7H1zm14-1V4a1 1 0 0 0-1-1h-3.793a1 1 0 0 1-.707-.293L8 1.207l-1.5 1.5A1 1 0 0 1 5.793 3H2a1 1 0 0 0-1 1v2h14zm0 5H1v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2zM2 4.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 0 1h-8a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"></path></svg>`), MenuDown[FILENAME], [[1, 0, [[1, 170]]]]);
function MenuDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MenuDown);
  var svg = root1345();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-menu-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MenuDown = hmr(MenuDown, () => MenuDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MenuDown[HMR].source;
    set(MenuDown[HMR].source, module.default[HMR].original);
  });
}
var MenuDown_default = MenuDown;
mark_module_end(MenuDown);

// node_modules/svelte-bootstrap-icons/lib/MenuUp.svelte
mark_module_start();
MenuUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MenuUp.svelte";
var root1346 = add_locations(ns_template(`<svg><!><path d="M7.646 15.854a.5.5 0 0 0 .708 0L10.207 14H14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h3.793l1.853 1.854zM1 9V6h14v3H1zm14 1v2a1 1 0 0 1-1 1h-3.793a1 1 0 0 0-.707.293l-1.5 1.5-1.5-1.5A1 1 0 0 0 5.793 13H2a1 1 0 0 1-1-1v-2h14zm0-5H1V3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v2zM2 11.5a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 0-1h-8a.5.5 0 0 0-.5.5zm0-4a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 0-1h-11a.5.5 0 0 0-.5.5zm0-4a.5.5 0 0 0 .5.5h6a.5.5 0 0 0 0-1h-6a.5.5 0 0 0-.5.5z"></path></svg>`), MenuUp[FILENAME], [[1, 0, [[1, 168]]]]);
function MenuUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MenuUp);
  var svg = root1346();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-menu-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MenuUp = hmr(MenuUp, () => MenuUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MenuUp[HMR].source;
    set(MenuUp[HMR].source, module.default[HMR].original);
  });
}
var MenuUp_default = MenuUp;
mark_module_end(MenuUp);

// node_modules/svelte-bootstrap-icons/lib/Messenger.svelte
mark_module_start();
Messenger[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Messenger.svelte";
var root1347 = add_locations(ns_template(`<svg><!><path d="M0 7.76C0 3.301 3.493 0 8 0s8 3.301 8 7.76-3.493 7.76-8 7.76c-.81 0-1.586-.107-2.316-.307a.639.639 0 0 0-.427.03l-1.588.702a.64.64 0 0 1-.898-.566l-.044-1.423a.639.639 0 0 0-.215-.456C.956 12.108 0 10.092 0 7.76zm5.546-1.459-2.35 3.728c-.225.358.214.761.551.506l2.525-1.916a.48.48 0 0 1 .578-.002l1.869 1.402a1.2 1.2 0 0 0 1.735-.32l2.35-3.728c.226-.358-.214-.761-.551-.506L9.728 7.381a.48.48 0 0 1-.578.002L7.281 5.98a1.2 1.2 0 0 0-1.735.32z"></path></svg>`), Messenger[FILENAME], [[1, 0, [[1, 170]]]]);
function Messenger($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Messenger);
  var svg = root1347();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-messenger", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Messenger = hmr(Messenger, () => Messenger[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Messenger[HMR].source;
    set(Messenger[HMR].source, module.default[HMR].original);
  });
}
var Messenger_default = Messenger;
mark_module_end(Messenger);

// node_modules/svelte-bootstrap-icons/lib/Meta.svelte
mark_module_start();
Meta[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Meta.svelte";
var root1348 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.217 5.243C9.145 3.988 10.171 3 11.483 3 13.96 3 16 6.153 16.001 9.907c0 2.29-.986 3.725-2.757 3.725-1.543 0-2.395-.866-3.924-3.424l-.667-1.123-.118-.197a54.944 54.944 0 0 0-.53-.877l-1.178 2.08c-1.673 2.925-2.615 3.541-3.923 3.541C1.086 13.632 0 12.217 0 9.973 0 6.388 1.995 3 4.598 3c.319 0 .625.039.924.122.31.086.611.22.913.407.577.359 1.154.915 1.782 1.714Zm1.516 2.224c-.252-.41-.494-.787-.727-1.133L9 6.326c.845-1.305 1.543-1.954 2.372-1.954 1.723 0 3.102 2.537 3.102 5.653 0 1.188-.39 1.877-1.195 1.877-.773 0-1.142-.51-2.61-2.87l-.937-1.565ZM4.846 4.756c.725.1 1.385.634 2.34 2.001A212.13 212.13 0 0 0 5.551 9.3c-1.357 2.126-1.826 2.603-2.581 2.603-.777 0-1.24-.682-1.24-1.9 0-2.602 1.298-5.264 2.846-5.264.091 0 .181.006.27.018Z"></path></svg>`), Meta[FILENAME], [[1, 0, [[1, 165]]]]);
function Meta($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Meta);
  var svg = root1348();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-meta", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Meta = hmr(Meta, () => Meta[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Meta[HMR].source;
    set(Meta[HMR].source, module.default[HMR].original);
  });
}
var Meta_default = Meta;
mark_module_end(Meta);

// node_modules/svelte-bootstrap-icons/lib/MicFill.svelte
mark_module_start();
MicFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MicFill.svelte";
var root1349 = add_locations(ns_template(`<svg><!><path d="M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z"></path><path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z"></path></svg>`), MicFill[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function MicFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MicFill);
  var svg = root1349();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mic-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MicFill = hmr(MicFill, () => MicFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MicFill[HMR].source;
    set(MicFill[HMR].source, module.default[HMR].original);
  });
}
var MicFill_default = MicFill;
mark_module_end(MicFill);

// node_modules/svelte-bootstrap-icons/lib/MicMuteFill.svelte
mark_module_start();
MicMuteFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MicMuteFill.svelte";
var root1350 = add_locations(ns_template(`<svg><!><path d="M13 8c0 .564-.094 1.107-.266 1.613l-.814-.814A4.02 4.02 0 0 0 12 8V7a.5.5 0 0 1 1 0v1zm-5 4c.818 0 1.578-.245 2.212-.667l.718.719a4.973 4.973 0 0 1-2.43.923V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 1 0v1a4 4 0 0 0 4 4zm3-9v4.879L5.158 2.037A3.001 3.001 0 0 1 11 3z"></path><path d="M9.486 10.607 5 6.12V8a3 3 0 0 0 4.486 2.607zm-7.84-9.253 12 12 .708-.708-12-12-.708.708z"></path></svg>`), MicMuteFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function MicMuteFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MicMuteFill);
  var svg = root1350();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mic-mute-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MicMuteFill = hmr(MicMuteFill, () => MicMuteFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MicMuteFill[HMR].source;
    set(MicMuteFill[HMR].source, module.default[HMR].original);
  });
}
var MicMuteFill_default = MicMuteFill;
mark_module_end(MicMuteFill);

// node_modules/svelte-bootstrap-icons/lib/MicMute.svelte
mark_module_start();
MicMute[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MicMute.svelte";
var root1351 = add_locations(ns_template(`<svg><!><path d="M13 8c0 .564-.094 1.107-.266 1.613l-.814-.814A4.02 4.02 0 0 0 12 8V7a.5.5 0 0 1 1 0v1zm-5 4c.818 0 1.578-.245 2.212-.667l.718.719a4.973 4.973 0 0 1-2.43.923V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 1 0v1a4 4 0 0 0 4 4zm3-9v4.879l-1-1V3a2 2 0 0 0-3.997-.118l-.845-.845A3.001 3.001 0 0 1 11 3z"></path><path d="m9.486 10.607-.748-.748A2 2 0 0 1 6 8v-.878l-1-1V8a3 3 0 0 0 4.486 2.607zm-7.84-9.253 12 12 .708-.708-12-12-.708.708z"></path></svg>`), MicMute[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function MicMute($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MicMute);
  var svg = root1351();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mic-mute", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MicMute = hmr(MicMute, () => MicMute[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MicMute[HMR].source;
    set(MicMute[HMR].source, module.default[HMR].original);
  });
}
var MicMute_default = MicMute;
mark_module_end(MicMute);

// node_modules/svelte-bootstrap-icons/lib/Mic.svelte
mark_module_start();
Mic[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mic.svelte";
var root1352 = add_locations(ns_template(`<svg><!><path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z"></path><path d="M10 8a2 2 0 1 1-4 0V3a2 2 0 1 1 4 0v5zM8 0a3 3 0 0 0-3 3v5a3 3 0 0 0 6 0V3a3 3 0 0 0-3-3z"></path></svg>`), Mic[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Mic($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mic);
  var svg = root1352();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mic", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mic = hmr(Mic, () => Mic[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mic[HMR].source;
    set(Mic[HMR].source, module.default[HMR].original);
  });
}
var Mic_default = Mic;
mark_module_end(Mic);

// node_modules/svelte-bootstrap-icons/lib/MicrosoftTeams.svelte
mark_module_start();
MicrosoftTeams[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MicrosoftTeams.svelte";
var root1353 = add_locations(ns_template(`<svg><!><path d="M9.186 4.797a2.42 2.42 0 1 0-2.86-2.448h1.178c.929 0 1.682.753 1.682 1.682v.766Zm-4.295 7.738h2.613c.929 0 1.682-.753 1.682-1.682V5.58h2.783a.7.7 0 0 1 .682.716v4.294a4.197 4.197 0 0 1-4.093 4.293c-1.618-.04-3-.99-3.667-2.35Zm10.737-9.372a1.674 1.674 0 1 1-3.349 0 1.674 1.674 0 0 1 3.349 0Zm-2.238 9.488c-.04 0-.08 0-.12-.002a5.19 5.19 0 0 0 .381-2.07V6.306a1.692 1.692 0 0 0-.15-.725h1.792c.39 0 .707.317.707.707v3.765a2.598 2.598 0 0 1-2.598 2.598h-.013Z"></path><path d="M.682 3.349h6.822c.377 0 .682.305.682.682v6.822a.682.682 0 0 1-.682.682H.682A.682.682 0 0 1 0 10.853V4.03c0-.377.305-.682.682-.682Zm5.206 2.596v-.72h-3.59v.72h1.357V9.66h.87V5.945h1.363Z"></path></svg>`), MicrosoftTeams[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function MicrosoftTeams($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MicrosoftTeams);
  var svg = root1353();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-microsoft-teams", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MicrosoftTeams = hmr(MicrosoftTeams, () => MicrosoftTeams[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MicrosoftTeams[HMR].source;
    set(MicrosoftTeams[HMR].source, module.default[HMR].original);
  });
}
var MicrosoftTeams_default = MicrosoftTeams;
mark_module_end(MicrosoftTeams);

// node_modules/svelte-bootstrap-icons/lib/Microsoft.svelte
mark_module_start();
Microsoft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Microsoft.svelte";
var root1354 = add_locations(ns_template(`<svg><!><path d="M7.462 0H0v7.19h7.462V0zM16 0H8.538v7.19H16V0zM7.462 8.211H0V16h7.462V8.211zm8.538 0H8.538V16H16V8.211z"></path></svg>`), Microsoft[FILENAME], [[1, 0, [[1, 170]]]]);
function Microsoft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Microsoft);
  var svg = root1354();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-microsoft", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Microsoft = hmr(Microsoft, () => Microsoft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Microsoft[HMR].source;
    set(Microsoft[HMR].source, module.default[HMR].original);
  });
}
var Microsoft_default = Microsoft;
mark_module_end(Microsoft);

// node_modules/svelte-bootstrap-icons/lib/MinecartLoaded.svelte
mark_module_start();
MinecartLoaded[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MinecartLoaded.svelte";
var root1355 = add_locations(ns_template(`<svg><!><path d="M4 15a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0 1a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm8-1a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0 1a2 2 0 1 0 0-4 2 2 0 0 0 0 4zM.115 3.18A.5.5 0 0 1 .5 3h15a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 14 12H2a.5.5 0 0 1-.491-.408l-1.5-8a.5.5 0 0 1 .106-.411zm.987.82 1.313 7h11.17l1.313-7H1.102z"></path><path fill-rule="evenodd" d="M6 1a2.498 2.498 0 0 1 4 0c.818 0 1.545.394 2 1 .67 0 1.552.57 2 1h-2c-.314 0-.611-.15-.8-.4-.274-.365-.71-.6-1.2-.6-.314 0-.611-.15-.8-.4a1.497 1.497 0 0 0-2.4 0c-.189.25-.486.4-.8.4-.507 0-.955.251-1.228.638-.09.13-.194.25-.308.362H3c.13-.147.401-.432.562-.545a1.63 1.63 0 0 0 .393-.393A2.498 2.498 0 0 1 6 1z"></path></svg>`), MinecartLoaded[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function MinecartLoaded($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MinecartLoaded);
  var svg = root1355();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-minecart-loaded", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MinecartLoaded = hmr(MinecartLoaded, () => MinecartLoaded[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MinecartLoaded[HMR].source;
    set(MinecartLoaded[HMR].source, module.default[HMR].original);
  });
}
var MinecartLoaded_default = MinecartLoaded;
mark_module_end(MinecartLoaded);

// node_modules/svelte-bootstrap-icons/lib/Minecart.svelte
mark_module_start();
Minecart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Minecart.svelte";
var root1356 = add_locations(ns_template(`<svg><!><path d="M4 15a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0 1a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm8-1a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0 1a2 2 0 1 0 0-4 2 2 0 0 0 0 4zM.115 3.18A.5.5 0 0 1 .5 3h15a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 14 12H2a.5.5 0 0 1-.491-.408l-1.5-8a.5.5 0 0 1 .106-.411zm.987.82 1.313 7h11.17l1.313-7H1.102z"></path></svg>`), Minecart[FILENAME], [[1, 0, [[1, 169]]]]);
function Minecart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Minecart);
  var svg = root1356();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-minecart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Minecart = hmr(Minecart, () => Minecart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Minecart[HMR].source;
    set(Minecart[HMR].source, module.default[HMR].original);
  });
}
var Minecart_default = Minecart;
mark_module_end(Minecart);

// node_modules/svelte-bootstrap-icons/lib/ModemFill.svelte
mark_module_start();
ModemFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ModemFill.svelte";
var root1357 = add_locations(ns_template(`<svg><!><path d="M7 0a1.5 1.5 0 0 0-1.5 1.5v11a1.5 1.5 0 0 0 1.404 1.497c-.35.305-.872.678-1.628 1.056A.5.5 0 0 0 5.5 16h5a.5.5 0 0 0 .224-.947c-.756-.378-1.278-.75-1.628-1.056A1.5 1.5 0 0 0 10.5 12.5v-11A1.5 1.5 0 0 0 9 0H7Zm1 3a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm0 2a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm.5 1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM8 9a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Z"></path></svg>`), ModemFill[FILENAME], [[1, 0, [[1, 171]]]]);
function ModemFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ModemFill);
  var svg = root1357();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-modem-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ModemFill = hmr(ModemFill, () => ModemFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ModemFill[HMR].source;
    set(ModemFill[HMR].source, module.default[HMR].original);
  });
}
var ModemFill_default = ModemFill;
mark_module_end(ModemFill);

// node_modules/svelte-bootstrap-icons/lib/Modem.svelte
mark_module_start();
Modem[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Modem.svelte";
var root1358 = add_locations(ns_template(`<svg><!><path d="M5.5 1.5A1.5 1.5 0 0 1 7 0h2a1.5 1.5 0 0 1 1.5 1.5v11a1.5 1.5 0 0 1-1.404 1.497c.35.305.872.678 1.628 1.056A.5.5 0 0 1 10.5 16h-5a.5.5 0 0 1-.224-.947c.756-.378 1.277-.75 1.628-1.056A1.5 1.5 0 0 1 5.5 12.5v-11ZM7 1a.5.5 0 0 0-.5.5v11a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-11A.5.5 0 0 0 9 1H7Z"></path><path d="M8.5 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 2a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 2a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 2a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`), Modem[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Modem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Modem);
  var svg = root1358();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-modem", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Modem = hmr(Modem, () => Modem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Modem[HMR].source;
    set(Modem[HMR].source, module.default[HMR].original);
  });
}
var Modem_default = Modem;
mark_module_end(Modem);

// node_modules/svelte-bootstrap-icons/lib/Moisture.svelte
mark_module_start();
Moisture[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Moisture.svelte";
var root1359 = add_locations(ns_template(`<svg><!><path d="M13.5 0a.5.5 0 0 0 0 1H15v2.75h-.5a.5.5 0 0 0 0 1h.5V7.5h-1.5a.5.5 0 0 0 0 1H15v2.75h-.5a.5.5 0 0 0 0 1h.5V15h-1.5a.5.5 0 0 0 0 1h2a.5.5 0 0 0 .5-.5V.5a.5.5 0 0 0-.5-.5h-2zM7 1.5l.364-.343a.5.5 0 0 0-.728 0l-.002.002-.006.007-.022.023-.08.088a28.458 28.458 0 0 0-1.274 1.517c-.769.983-1.714 2.325-2.385 3.727C2.368 7.564 2 8.682 2 9.733 2 12.614 4.212 15 7 15s5-2.386 5-5.267c0-1.05-.368-2.169-.867-3.212-.671-1.402-1.616-2.744-2.385-3.727a28.458 28.458 0 0 0-1.354-1.605l-.022-.023-.006-.007-.002-.001L7 1.5zm0 0-.364-.343L7 1.5zm-.016.766L7 2.247l.016.019c.24.274.572.667.944 1.144.611.781 1.32 1.776 1.901 2.827H4.14c.58-1.051 1.29-2.046 1.9-2.827.373-.477.706-.87.945-1.144zM3 9.733c0-.755.244-1.612.638-2.496h6.724c.395.884.638 1.741.638 2.496C11 12.117 9.182 14 7 14s-4-1.883-4-4.267z"></path></svg>`), Moisture[FILENAME], [[1, 0, [[1, 169]]]]);
function Moisture($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Moisture);
  var svg = root1359();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-moisture", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Moisture = hmr(Moisture, () => Moisture[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Moisture[HMR].source;
    set(Moisture[HMR].source, module.default[HMR].original);
  });
}
var Moisture_default = Moisture;
mark_module_end(Moisture);

// node_modules/svelte-bootstrap-icons/lib/MoonFill.svelte
mark_module_start();
MoonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MoonFill.svelte";
var root1360 = add_locations(ns_template(`<svg><!><path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"></path></svg>`), MoonFill[FILENAME], [[1, 0, [[1, 170]]]]);
function MoonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MoonFill);
  var svg = root1360();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-moon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MoonFill = hmr(MoonFill, () => MoonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MoonFill[HMR].source;
    set(MoonFill[HMR].source, module.default[HMR].original);
  });
}
var MoonFill_default = MoonFill;
mark_module_end(MoonFill);

// node_modules/svelte-bootstrap-icons/lib/MoonStarsFill.svelte
mark_module_start();
MoonStarsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MoonStarsFill.svelte";
var root1361 = add_locations(ns_template(`<svg><!><path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"></path><path d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.734 1.734 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.734 1.734 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.734 1.734 0 0 0 1.097-1.097l.387-1.162zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L13.863.1z"></path></svg>`), MoonStarsFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function MoonStarsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MoonStarsFill);
  var svg = root1361();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-moon-stars-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MoonStarsFill = hmr(MoonStarsFill, () => MoonStarsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MoonStarsFill[HMR].source;
    set(MoonStarsFill[HMR].source, module.default[HMR].original);
  });
}
var MoonStarsFill_default = MoonStarsFill;
mark_module_end(MoonStarsFill);

// node_modules/svelte-bootstrap-icons/lib/MoonStars.svelte
mark_module_start();
MoonStars[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MoonStars.svelte";
var root1362 = add_locations(ns_template(`<svg><!><path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278zM4.858 1.311A7.269 7.269 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.316 7.316 0 0 0 5.205-2.162c-.337.042-.68.063-1.029.063-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286z"></path><path d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.734 1.734 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.734 1.734 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.734 1.734 0 0 0 1.097-1.097l.387-1.162zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L13.863.1z"></path></svg>`), MoonStars[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function MoonStars($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MoonStars);
  var svg = root1362();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-moon-stars", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MoonStars = hmr(MoonStars, () => MoonStars[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MoonStars[HMR].source;
    set(MoonStars[HMR].source, module.default[HMR].original);
  });
}
var MoonStars_default = MoonStars;
mark_module_end(MoonStars);

// node_modules/svelte-bootstrap-icons/lib/Moon.svelte
mark_module_start();
Moon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Moon.svelte";
var root1363 = add_locations(ns_template(`<svg><!><path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278zM4.858 1.311A7.269 7.269 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.316 7.316 0 0 0 5.205-2.162c-.337.042-.68.063-1.029.063-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286z"></path></svg>`), Moon[FILENAME], [[1, 0, [[1, 165]]]]);
function Moon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Moon);
  var svg = root1363();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-moon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Moon = hmr(Moon, () => Moon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Moon[HMR].source;
    set(Moon[HMR].source, module.default[HMR].original);
  });
}
var Moon_default = Moon;
mark_module_end(Moon);

// node_modules/svelte-bootstrap-icons/lib/MortarboardFill.svelte
mark_module_start();
MortarboardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MortarboardFill.svelte";
var root1364 = add_locations(ns_template(`<svg><!><path d="M8.211 2.047a.5.5 0 0 0-.422 0l-7.5 3.5a.5.5 0 0 0 .025.917l7.5 3a.5.5 0 0 0 .372 0L14 7.14V13a1 1 0 0 0-1 1v2h3v-2a1 1 0 0 0-1-1V6.739l.686-.275a.5.5 0 0 0 .025-.917l-7.5-3.5Z"></path><path d="M4.176 9.032a.5.5 0 0 0-.656.327l-.5 1.7a.5.5 0 0 0 .294.605l4.5 1.8a.5.5 0 0 0 .372 0l4.5-1.8a.5.5 0 0 0 .294-.605l-.5-1.7a.5.5 0 0 0-.656-.327L8 10.466 4.176 9.032Z"></path></svg>`), MortarboardFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function MortarboardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MortarboardFill);
  var svg = root1364();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mortarboard-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MortarboardFill = hmr(MortarboardFill, () => MortarboardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MortarboardFill[HMR].source;
    set(MortarboardFill[HMR].source, module.default[HMR].original);
  });
}
var MortarboardFill_default = MortarboardFill;
mark_module_end(MortarboardFill);

// node_modules/svelte-bootstrap-icons/lib/Mortarboard.svelte
mark_module_start();
Mortarboard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mortarboard.svelte";
var root1365 = add_locations(ns_template(`<svg><!><path d="M8.211 2.047a.5.5 0 0 0-.422 0l-7.5 3.5a.5.5 0 0 0 .025.917l7.5 3a.5.5 0 0 0 .372 0L14 7.14V13a1 1 0 0 0-1 1v2h3v-2a1 1 0 0 0-1-1V6.739l.686-.275a.5.5 0 0 0 .025-.917l-7.5-3.5ZM8 8.46 1.758 5.965 8 3.052l6.242 2.913L8 8.46Z"></path><path d="M4.176 9.032a.5.5 0 0 0-.656.327l-.5 1.7a.5.5 0 0 0 .294.605l4.5 1.8a.5.5 0 0 0 .372 0l4.5-1.8a.5.5 0 0 0 .294-.605l-.5-1.7a.5.5 0 0 0-.656-.327L8 10.466 4.176 9.032Zm-.068 1.873.22-.748 3.496 1.311a.5.5 0 0 0 .352 0l3.496-1.311.22.748L8 12.46l-3.892-1.556Z"></path></svg>`), Mortarboard[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Mortarboard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mortarboard);
  var svg = root1365();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mortarboard", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mortarboard = hmr(Mortarboard, () => Mortarboard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mortarboard[HMR].source;
    set(Mortarboard[HMR].source, module.default[HMR].original);
  });
}
var Mortarboard_default = Mortarboard;
mark_module_end(Mortarboard);

// node_modules/svelte-bootstrap-icons/lib/MotherboardFill.svelte
mark_module_start();
MotherboardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MotherboardFill.svelte";
var root1366 = add_locations(ns_template(`<svg><!><path d="M5 7h3V4H5v3Z"></path><path d="M1 2a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-2H.5a.5.5 0 0 1-.5-.5v-1A.5.5 0 0 1 .5 9H1V8H.5a.5.5 0 0 1-.5-.5v-1A.5.5 0 0 1 .5 6H1V5H.5a.5.5 0 0 1-.5-.5v-2A.5.5 0 0 1 .5 2H1Zm11 .5a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7Zm2 0a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7ZM3.5 10a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6Zm0 2a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6ZM4 4h-.5a.5.5 0 0 0 0 1H4v1h-.5a.5.5 0 0 0 0 1H4a1 1 0 0 0 1 1v.5a.5.5 0 0 0 1 0V8h1v.5a.5.5 0 0 0 1 0V8a1 1 0 0 0 1-1h.5a.5.5 0 0 0 0-1H9V5h.5a.5.5 0 0 0 0-1H9a1 1 0 0 0-1-1v-.5a.5.5 0 0 0-1 0V3H6v-.5a.5.5 0 0 0-1 0V3a1 1 0 0 0-1 1Zm7 7.5v1a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-2a.5.5 0 0 0-.5.5Z"></path></svg>`), MotherboardFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function MotherboardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MotherboardFill);
  var svg = root1366();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-motherboard-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MotherboardFill = hmr(MotherboardFill, () => MotherboardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MotherboardFill[HMR].source;
    set(MotherboardFill[HMR].source, module.default[HMR].original);
  });
}
var MotherboardFill_default = MotherboardFill;
mark_module_end(MotherboardFill);

// node_modules/svelte-bootstrap-icons/lib/Motherboard.svelte
mark_module_start();
Motherboard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Motherboard.svelte";
var root1367 = add_locations(ns_template(`<svg><!><path d="M11.5 2a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5Zm2 0a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5Zm-10 8a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6Zm0 2a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6ZM5 3a1 1 0 0 0-1 1h-.5a.5.5 0 0 0 0 1H4v1h-.5a.5.5 0 0 0 0 1H4a1 1 0 0 0 1 1v.5a.5.5 0 0 0 1 0V8h1v.5a.5.5 0 0 0 1 0V8a1 1 0 0 0 1-1h.5a.5.5 0 0 0 0-1H9V5h.5a.5.5 0 0 0 0-1H9a1 1 0 0 0-1-1v-.5a.5.5 0 0 0-1 0V3H6v-.5a.5.5 0 0 0-1 0V3Zm0 1h3v3H5V4Zm6.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-2Z"></path><path d="M1 2a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-2H.5a.5.5 0 0 1-.5-.5v-1A.5.5 0 0 1 .5 9H1V8H.5a.5.5 0 0 1-.5-.5v-1A.5.5 0 0 1 .5 6H1V5H.5a.5.5 0 0 1-.5-.5v-2A.5.5 0 0 1 .5 2H1Zm1 11a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v11Z"></path></svg>`), Motherboard[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Motherboard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Motherboard);
  var svg = root1367();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-motherboard", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Motherboard = hmr(Motherboard, () => Motherboard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Motherboard[HMR].source;
    set(Motherboard[HMR].source, module.default[HMR].original);
  });
}
var Motherboard_default = Motherboard;
mark_module_end(Motherboard);

// node_modules/svelte-bootstrap-icons/lib/MouseFill.svelte
mark_module_start();
MouseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MouseFill.svelte";
var root1368 = add_locations(ns_template(`<svg><!><path d="M3 5a5 5 0 0 1 10 0v6a5 5 0 0 1-10 0V5zm5.5-1.5a.5.5 0 0 0-1 0v2a.5.5 0 0 0 1 0v-2z"></path></svg>`), MouseFill[FILENAME], [[1, 0, [[1, 171]]]]);
function MouseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MouseFill);
  var svg = root1368();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mouse-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MouseFill = hmr(MouseFill, () => MouseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MouseFill[HMR].source;
    set(MouseFill[HMR].source, module.default[HMR].original);
  });
}
var MouseFill_default = MouseFill;
mark_module_end(MouseFill);

// node_modules/svelte-bootstrap-icons/lib/Mouse.svelte
mark_module_start();
Mouse[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mouse.svelte";
var root1369 = add_locations(ns_template(`<svg><!><path d="M8 3a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 3zm4 8a4 4 0 0 1-8 0V5a4 4 0 1 1 8 0v6zM8 0a5 5 0 0 0-5 5v6a5 5 0 0 0 10 0V5a5 5 0 0 0-5-5z"></path></svg>`), Mouse[FILENAME], [[1, 0, [[1, 166]]]]);
function Mouse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mouse);
  var svg = root1369();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mouse", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse = hmr(Mouse, () => Mouse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse[HMR].source;
    set(Mouse[HMR].source, module.default[HMR].original);
  });
}
var Mouse_default = Mouse;
mark_module_end(Mouse);

// node_modules/svelte-bootstrap-icons/lib/Mouse2Fill.svelte
mark_module_start();
Mouse2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mouse2Fill.svelte";
var root1370 = add_locations(ns_template(`<svg><!><path d="M7.5.026C4.958.286 3 2.515 3 5.188V5.5h4.5V.026zm1 0V5.5H13v-.312C13 2.515 11.042.286 8.5.026zM13 6.5H3v4.313C3 13.658 5.22 16 8 16s5-2.342 5-5.188V6.5z"></path></svg>`), Mouse2Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Mouse2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mouse2Fill);
  var svg = root1370();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mouse2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse2Fill = hmr(Mouse2Fill, () => Mouse2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse2Fill[HMR].source;
    set(Mouse2Fill[HMR].source, module.default[HMR].original);
  });
}
var Mouse2Fill_default = Mouse2Fill;
mark_module_end(Mouse2Fill);

// node_modules/svelte-bootstrap-icons/lib/Mouse2.svelte
mark_module_start();
Mouse2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mouse2.svelte";
var root1371 = add_locations(ns_template(`<svg><!><path d="M3 5.188C3 2.341 5.22 0 8 0s5 2.342 5 5.188v5.625C13 13.658 10.78 16 8 16s-5-2.342-5-5.188V5.189zm4.5-4.155C5.541 1.289 4 3.035 4 5.188V5.5h3.5V1.033zm1 0V5.5H12v-.313c0-2.152-1.541-3.898-3.5-4.154zM12 6.5H4v4.313C4 13.145 5.81 15 8 15s4-1.855 4-4.188V6.5z"></path></svg>`), Mouse2[FILENAME], [[1, 0, [[1, 167]]]]);
function Mouse2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mouse2);
  var svg = root1371();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mouse2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse2 = hmr(Mouse2, () => Mouse2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse2[HMR].source;
    set(Mouse2[HMR].source, module.default[HMR].original);
  });
}
var Mouse2_default = Mouse2;
mark_module_end(Mouse2);

// node_modules/svelte-bootstrap-icons/lib/Mouse3Fill.svelte
mark_module_start();
Mouse3Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mouse3Fill.svelte";
var root1372 = add_locations(ns_template(`<svg><!><path d="M8.5.069A15.328 15.328 0 0 0 7 0c-.593 0-1.104.157-1.527.463-.418.302-.717.726-.93 1.208-.386.873-.522 2.01-.54 3.206l4.497 1V.069zM3.71 5.836 3.381 6A2.5 2.5 0 0 0 2 8.236v2.576C2 13.659 4.22 16 7 16h2c2.78 0 5-2.342 5-5.188V8.123l-9-2v.003l.008.353c.007.3.023.715.053 1.175.063.937.186 2.005.413 2.688a.5.5 0 1 1-.948.316c-.273-.817-.4-2-.462-2.937A30.16 30.16 0 0 1 4 6.003c0-.034.003-.067.01-.1l-.3-.067zM14 7.1V5.187c0-1.13-.272-2.044-.748-2.772-.474-.726-1.13-1.235-1.849-1.59A7.495 7.495 0 0 0 9.5.212v5.887l4.5 1z"></path></svg>`), Mouse3Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Mouse3Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mouse3Fill);
  var svg = root1372();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mouse3-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse3Fill = hmr(Mouse3Fill, () => Mouse3Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse3Fill[HMR].source;
    set(Mouse3Fill[HMR].source, module.default[HMR].original);
  });
}
var Mouse3Fill_default = Mouse3Fill;
mark_module_end(Mouse3Fill);

// node_modules/svelte-bootstrap-icons/lib/Mouse3.svelte
mark_module_start();
Mouse3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Mouse3.svelte";
var root1373 = add_locations(ns_template(`<svg><!><path d="M7 0c-.593 0-1.104.157-1.527.463-.418.302-.717.726-.93 1.208C4.123 2.619 4 3.879 4 5.187v.504L3.382 6A2.5 2.5 0 0 0 2 8.236v2.576C2 13.659 4.22 16 7 16h2c2.78 0 5-2.342 5-5.188V7.51a.71.71 0 0 0 0-.02V5.186c0-1.13-.272-2.044-.748-2.772-.474-.726-1.13-1.235-1.849-1.59C9.981.123 8.26 0 7 0zm2.5 6.099V1.232c.51.11 1.008.267 1.46.49.596.293 1.099.694 1.455 1.24.355.543.585 1.262.585 2.225v1.69l-3.5-.778zm-1-5.025v4.803L5 5.099c.006-1.242.134-2.293.457-3.024.162-.366.363-.63.602-.801C6.292 1.105 6.593 1 7 1c.468 0 .98.018 1.5.074zM5 6.124 13 7.9v2.912C13 13.145 11.19 15 9 15H7c-2.19 0-4-1.855-4-4.188V8.236a1.5 1.5 0 0 1 .83-1.342l.187-.093c.01.265.024.58.047.92.062.938.19 2.12.462 2.937a.5.5 0 1 0 .948-.316c-.227-.683-.35-1.75-.413-2.688a29.17 29.17 0 0 1-.06-1.528v-.002z"></path></svg>`), Mouse3[FILENAME], [[1, 0, [[1, 167]]]]);
function Mouse3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Mouse3);
  var svg = root1373();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-mouse3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse3 = hmr(Mouse3, () => Mouse3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse3[HMR].source;
    set(Mouse3[HMR].source, module.default[HMR].original);
  });
}
var Mouse3_default = Mouse3;
mark_module_end(Mouse3);

// node_modules/svelte-bootstrap-icons/lib/MusicNoteBeamed.svelte
mark_module_start();
MusicNoteBeamed[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MusicNoteBeamed.svelte";
var root1374 = add_locations(ns_template(`<svg><!><path d="M6 13c0 1.105-1.12 2-2.5 2S1 14.105 1 13c0-1.104 1.12-2 2.5-2s2.5.896 2.5 2zm9-2c0 1.105-1.12 2-2.5 2s-2.5-.895-2.5-2 1.12-2 2.5-2 2.5.895 2.5 2z"></path><path fill-rule="evenodd" d="M14 11V2h1v9h-1zM6 3v10H5V3h1z"></path><path d="M5 2.905a1 1 0 0 1 .9-.995l8-.8a1 1 0 0 1 1.1.995V3L5 4V2.905z"></path></svg>`), MusicNoteBeamed[FILENAME], [
  [
    1,
    0,
    [[1, 178], [2, 2], [3, 2]]
  ]
]);
function MusicNoteBeamed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MusicNoteBeamed);
  var svg = root1374();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-music-note-beamed", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MusicNoteBeamed = hmr(MusicNoteBeamed, () => MusicNoteBeamed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MusicNoteBeamed[HMR].source;
    set(MusicNoteBeamed[HMR].source, module.default[HMR].original);
  });
}
var MusicNoteBeamed_default = MusicNoteBeamed;
mark_module_end(MusicNoteBeamed);

// node_modules/svelte-bootstrap-icons/lib/MusicNoteList.svelte
mark_module_start();
MusicNoteList[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MusicNoteList.svelte";
var root1375 = add_locations(ns_template(`<svg><!><path d="M12 13c0 1.105-1.12 2-2.5 2S7 14.105 7 13s1.12-2 2.5-2 2.5.895 2.5 2z"></path><path fill-rule="evenodd" d="M12 3v10h-1V3h1z"></path><path d="M11 2.82a1 1 0 0 1 .804-.98l3-.6A1 1 0 0 1 16 2.22V4l-5 1V2.82z"></path><path fill-rule="evenodd" d="M0 11.5a.5.5 0 0 1 .5-.5H4a.5.5 0 0 1 0 1H.5a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 .5 7H8a.5.5 0 0 1 0 1H.5a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 .5 3H8a.5.5 0 0 1 0 1H.5a.5.5 0 0 1-.5-.5z"></path></svg>`), MusicNoteList[FILENAME], [
  [
    1,
    0,
    [
      [1, 176],
      [2, 2],
      [3, 2],
      [4, 2]
    ]
  ]
]);
function MusicNoteList($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MusicNoteList);
  var svg = root1375();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(4);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-music-note-list", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MusicNoteList = hmr(MusicNoteList, () => MusicNoteList[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MusicNoteList[HMR].source;
    set(MusicNoteList[HMR].source, module.default[HMR].original);
  });
}
var MusicNoteList_default = MusicNoteList;
mark_module_end(MusicNoteList);

// node_modules/svelte-bootstrap-icons/lib/MusicNote.svelte
mark_module_start();
MusicNote[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MusicNote.svelte";
var root1376 = add_locations(ns_template(`<svg><!><path d="M9 13c0 1.105-1.12 2-2.5 2S4 14.105 4 13s1.12-2 2.5-2 2.5.895 2.5 2z"></path><path fill-rule="evenodd" d="M9 3v10H8V3h1z"></path><path d="M8 2.82a1 1 0 0 1 .804-.98l3-.6A1 1 0 0 1 13 2.22V4L8 5V2.82z"></path></svg>`), MusicNote[FILENAME], [
  [
    1,
    0,
    [[1, 171], [2, 2], [3, 2]]
  ]
]);
function MusicNote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MusicNote);
  var svg = root1376();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-music-note", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MusicNote = hmr(MusicNote, () => MusicNote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MusicNote[HMR].source;
    set(MusicNote[HMR].source, module.default[HMR].original);
  });
}
var MusicNote_default = MusicNote;
mark_module_end(MusicNote);

// node_modules/svelte-bootstrap-icons/lib/MusicPlayerFill.svelte
mark_module_start();
MusicPlayerFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MusicPlayerFill.svelte";
var root1377 = add_locations(ns_template(`<svg><!><path d="M8 12a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm1 2h6a1 1 0 0 1 1 1v2.5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1zm3 12a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"></path></svg>`), MusicPlayerFill[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function MusicPlayerFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MusicPlayerFill);
  var svg = root1377();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-music-player-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MusicPlayerFill = hmr(MusicPlayerFill, () => MusicPlayerFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MusicPlayerFill[HMR].source;
    set(MusicPlayerFill[HMR].source, module.default[HMR].original);
  });
}
var MusicPlayerFill_default = MusicPlayerFill;
mark_module_end(MusicPlayerFill);

// node_modules/svelte-bootstrap-icons/lib/MusicPlayer.svelte
mark_module_start();
MusicPlayer[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/MusicPlayer.svelte";
var root1378 = add_locations(ns_template(`<svg><!><path d="M4 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V3zm1 0v3h6V3H5zm3 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path><path d="M11 11a3 3 0 1 1-6 0 3 3 0 0 1 6 0zm-3 2a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"></path><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H4z"></path></svg>`), MusicPlayer[FILENAME], [
  [
    1,
    0,
    [[1, 173], [2, 2], [3, 2]]
  ]
]);
function MusicPlayer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, MusicPlayer);
  var svg = root1378();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-music-player", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MusicPlayer = hmr(MusicPlayer, () => MusicPlayer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MusicPlayer[HMR].source;
    set(MusicPlayer[HMR].source, module.default[HMR].original);
  });
}
var MusicPlayer_default = MusicPlayer;
mark_module_end(MusicPlayer);

// node_modules/svelte-bootstrap-icons/lib/Newspaper.svelte
mark_module_start();
Newspaper[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Newspaper.svelte";
var root1379 = add_locations(ns_template(`<svg><!><path d="M0 2.5A1.5 1.5 0 0 1 1.5 1h11A1.5 1.5 0 0 1 14 2.5v10.528c0 .3-.05.654-.238.972h.738a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 1 1 0v9a1.5 1.5 0 0 1-1.5 1.5H1.497A1.497 1.497 0 0 1 0 13.5v-11zM12 14c.37 0 .654-.211.853-.441.092-.106.147-.279.147-.531V2.5a.5.5 0 0 0-.5-.5h-11a.5.5 0 0 0-.5.5v11c0 .278.223.5.497.5H12z"></path><path d="M2 3h10v2H2V3zm0 3h4v3H2V6zm0 4h4v1H2v-1zm0 2h4v1H2v-1zm5-6h2v1H7V6zm3 0h2v1h-2V6zM7 8h2v1H7V8zm3 0h2v1h-2V8zm-3 2h2v1H7v-1zm3 0h2v1h-2v-1zm-3 2h2v1H7v-1zm3 0h2v1h-2v-1z"></path></svg>`), Newspaper[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Newspaper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Newspaper);
  var svg = root1379();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-newspaper", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Newspaper = hmr(Newspaper, () => Newspaper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Newspaper[HMR].source;
    set(Newspaper[HMR].source, module.default[HMR].original);
  });
}
var Newspaper_default = Newspaper;
mark_module_end(Newspaper);

// node_modules/svelte-bootstrap-icons/lib/NintendoSwitch.svelte
mark_module_start();
NintendoSwitch[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/NintendoSwitch.svelte";
var root1380 = add_locations(ns_template(`<svg><!><path d="M9.34 8.005c0-4.38.01-7.972.023-7.982C9.373.01 10.036 0 10.831 0c1.153 0 1.51.01 1.743.05 1.73.298 3.045 1.6 3.373 3.326.046.242.053.809.053 4.61 0 4.06.005 4.537-.123 4.976-.022.076-.048.15-.08.242a4.136 4.136 0 0 1-3.426 2.767c-.317.033-2.889.046-2.978.013-.05-.02-.053-.752-.053-7.979Zm4.675.269a1.621 1.621 0 0 0-1.113-1.034 1.609 1.609 0 0 0-1.938 1.073 1.9 1.9 0 0 0-.014.935 1.632 1.632 0 0 0 1.952 1.107c.51-.136.908-.504 1.11-1.028.11-.285.113-.742.003-1.053ZM3.71 3.317c-.208.04-.526.199-.695.348-.348.301-.52.729-.494 1.232.013.262.03.332.136.544.155.321.39.556.712.715.222.11.278.123.567.133.261.01.354 0 .53-.06.719-.242 1.153-.94 1.03-1.656-.142-.852-.95-1.422-1.786-1.256Z"></path><path d="M3.425.053a4.136 4.136 0 0 0-3.28 3.015C0 3.628-.01 3.956.005 8.3c.01 3.99.014 4.082.08 4.39.368 1.66 1.548 2.844 3.224 3.235.22.05.497.06 2.29.07 1.856.012 2.048.009 2.097-.04.05-.05.053-.69.053-7.94 0-5.374-.01-7.906-.033-7.952-.033-.06-.09-.063-2.03-.06-1.578.004-2.052.014-2.26.05Zm3 14.665-1.35-.016c-1.242-.013-1.375-.02-1.623-.083a2.81 2.81 0 0 1-2.08-2.167c-.074-.335-.074-8.579-.004-8.907a2.845 2.845 0 0 1 1.716-2.05c.438-.176.64-.196 2.058-.2l1.282-.003v13.426Z"></path></svg>`), NintendoSwitch[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function NintendoSwitch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, NintendoSwitch);
  var svg = root1380();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-nintendo-switch", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NintendoSwitch = hmr(NintendoSwitch, () => NintendoSwitch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NintendoSwitch[HMR].source;
    set(NintendoSwitch[HMR].source, module.default[HMR].original);
  });
}
var NintendoSwitch_default = NintendoSwitch;
mark_module_end(NintendoSwitch);

// node_modules/svelte-bootstrap-icons/lib/NodeMinusFill.svelte
mark_module_start();
NodeMinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/NodeMinusFill.svelte";
var root1381 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M16 8a5 5 0 0 1-9.975.5H4A1.5 1.5 0 0 1 2.5 10h-1A1.5 1.5 0 0 1 0 8.5v-1A1.5 1.5 0 0 1 1.5 6h1A1.5 1.5 0 0 1 4 7.5h2.025A5 5 0 0 1 16 8zm-2 0a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h5A.5.5 0 0 0 14 8z"></path></svg>`), NodeMinusFill[FILENAME], [[1, 0, [[1, 176]]]]);
function NodeMinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, NodeMinusFill);
  var svg = root1381();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-node-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NodeMinusFill = hmr(NodeMinusFill, () => NodeMinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NodeMinusFill[HMR].source;
    set(NodeMinusFill[HMR].source, module.default[HMR].original);
  });
}
var NodeMinusFill_default = NodeMinusFill;
mark_module_end(NodeMinusFill);

// node_modules/svelte-bootstrap-icons/lib/NodeMinus.svelte
mark_module_start();
NodeMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/NodeMinus.svelte";
var root1382 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8zM6.025 7.5a5 5 0 1 1 0 1H4A1.5 1.5 0 0 1 2.5 10h-1A1.5 1.5 0 0 1 0 8.5v-1A1.5 1.5 0 0 1 1.5 6h1A1.5 1.5 0 0 1 4 7.5h2.025zM1.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zM8 8a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5A.5.5 0 0 1 8 8z"></path></svg>`), NodeMinus[FILENAME], [[1, 0, [[1, 171]]]]);
function NodeMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, NodeMinus);
  var svg = root1382();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-node-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NodeMinus = hmr(NodeMinus, () => NodeMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NodeMinus[HMR].source;
    set(NodeMinus[HMR].source, module.default[HMR].original);
  });
}
var NodeMinus_default = NodeMinus;
mark_module_end(NodeMinus);

// node_modules/svelte-bootstrap-icons/lib/NodePlusFill.svelte
mark_module_start();
NodePlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/NodePlusFill.svelte";
var root1383 = add_locations(ns_template(`<svg><!><path d="M11 13a5 5 0 1 0-4.975-5.5H4A1.5 1.5 0 0 0 2.5 6h-1A1.5 1.5 0 0 0 0 7.5v1A1.5 1.5 0 0 0 1.5 10h1A1.5 1.5 0 0 0 4 8.5h2.025A5 5 0 0 0 11 13zm.5-7.5v2h2a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0v-2h-2a.5.5 0 0 1 0-1h2v-2a.5.5 0 0 1 1 0z"></path></svg>`), NodePlusFill[FILENAME], [[1, 0, [[1, 175]]]]);
function NodePlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, NodePlusFill);
  var svg = root1383();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-node-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NodePlusFill = hmr(NodePlusFill, () => NodePlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NodePlusFill[HMR].source;
    set(NodePlusFill[HMR].source, module.default[HMR].original);
  });
}
var NodePlusFill_default = NodePlusFill;
mark_module_end(NodePlusFill);

// node_modules/svelte-bootstrap-icons/lib/NodePlus.svelte
mark_module_start();
NodePlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/NodePlus.svelte";
var root1384 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8zM6.025 7.5a5 5 0 1 1 0 1H4A1.5 1.5 0 0 1 2.5 10h-1A1.5 1.5 0 0 1 0 8.5v-1A1.5 1.5 0 0 1 1.5 6h1A1.5 1.5 0 0 1 4 7.5h2.025zM11 5a.5.5 0 0 1 .5.5v2h2a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0v-2h-2a.5.5 0 0 1 0-1h2v-2A.5.5 0 0 1 11 5zM1.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1z"></path></svg>`), NodePlus[FILENAME], [[1, 0, [[1, 170]]]]);
function NodePlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, NodePlus);
  var svg = root1384();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-node-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NodePlus = hmr(NodePlus, () => NodePlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NodePlus[HMR].source;
    set(NodePlus[HMR].source, module.default[HMR].original);
  });
}
var NodePlus_default = NodePlus;
mark_module_end(NodePlus);

// node_modules/svelte-bootstrap-icons/lib/NoiseReduction.svelte
mark_module_start();
NoiseReduction[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/NoiseReduction.svelte";
var root1385 = add_locations(ns_template(`<svg><!><path d="M13 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm.5-.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1-1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1-1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1-1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1-1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1-1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1-1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm-5 7a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1.5-1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1-1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1-1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1-1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1-1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-3 5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm.5-.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1-1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm1-1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path><path fill-rule="evenodd" d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM1 8a7 7 0 0 1 12.83-3.875.5.5 0 1 0 .15.235c.131.214.251.437.359.667a.5.5 0 1 0 .359.932c.133.438.225.894.27 1.364a.5.5 0 1 0 .021.282 7.096 7.096 0 0 1-.091 1.592.5.5 0 1 0-.172.75 6.95 6.95 0 0 1-.418 1.091.5.5 0 0 0-.3.555 7.056 7.056 0 0 1-.296.454.499.499 0 0 0-.712.453c0 .111.036.214.098.297a6.99 6.99 0 0 1-.3.3.5.5 0 0 0-.75.614 7.056 7.056 0 0 1-.455.298.503.503 0 0 0-.555.3 6.95 6.95 0 0 1-1.092.417.5.5 0 1 0-.749.172 7.04 7.04 0 0 1-1.592.091.5.5 0 1 0-.282-.021 6.971 6.971 0 0 1-1.364-.27A.498.498 0 0 0 5.5 14a.5.5 0 0 0-.473.339 6.976 6.976 0 0 1-.668-.36A.499.499 0 0 0 5 13.5a.5.5 0 1 0-.875.33A6.993 6.993 0 0 1 1 8Z"></path></svg>`), NoiseReduction[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function NoiseReduction($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, NoiseReduction);
  var svg = root1385();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-noise-reduction", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NoiseReduction = hmr(NoiseReduction, () => NoiseReduction[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NoiseReduction[HMR].source;
    set(NoiseReduction[HMR].source, module.default[HMR].original);
  });
}
var NoiseReduction_default = NoiseReduction;
mark_module_end(NoiseReduction);

// node_modules/svelte-bootstrap-icons/lib/NutFill.svelte
mark_module_start();
NutFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/NutFill.svelte";
var root1386 = add_locations(ns_template(`<svg><!><path d="M4.58 1a1 1 0 0 0-.868.504l-3.428 6a1 1 0 0 0 0 .992l3.428 6A1 1 0 0 0 4.58 15h6.84a1 1 0 0 0 .868-.504l3.429-6a1 1 0 0 0 0-.992l-3.429-6A1 1 0 0 0 11.42 1H4.58zm5.018 9.696a3 3 0 1 1-3-5.196 3 3 0 0 1 3 5.196z"></path></svg>`), NutFill[FILENAME], [[1, 0, [[1, 169]]]]);
function NutFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, NutFill);
  var svg = root1386();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-nut-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NutFill = hmr(NutFill, () => NutFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NutFill[HMR].source;
    set(NutFill[HMR].source, module.default[HMR].original);
  });
}
var NutFill_default = NutFill;
mark_module_end(NutFill);

// node_modules/svelte-bootstrap-icons/lib/Nut.svelte
mark_module_start();
Nut[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Nut.svelte";
var root1387 = add_locations(ns_template(`<svg><!><path d="m11.42 2 3.428 6-3.428 6H4.58L1.152 8 4.58 2h6.84zM4.58 1a1 1 0 0 0-.868.504l-3.428 6a1 1 0 0 0 0 .992l3.428 6A1 1 0 0 0 4.58 15h6.84a1 1 0 0 0 .868-.504l3.429-6a1 1 0 0 0 0-.992l-3.429-6A1 1 0 0 0 11.42 1H4.58z"></path><path d="M6.848 5.933a2.5 2.5 0 1 0 2.5 4.33 2.5 2.5 0 0 0-2.5-4.33zm-1.78 3.915a3.5 3.5 0 1 1 6.061-3.5 3.5 3.5 0 0 1-6.062 3.5z"></path></svg>`), Nut[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Nut($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Nut);
  var svg = root1387();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-nut", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Nut = hmr(Nut, () => Nut[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Nut[HMR].source;
    set(Nut[HMR].source, module.default[HMR].original);
  });
}
var Nut_default = Nut;
mark_module_end(Nut);

// node_modules/svelte-bootstrap-icons/lib/Nvidia.svelte
mark_module_start();
Nvidia[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Nvidia.svelte";
var root1388 = add_locations(ns_template(`<svg><!><path d="M1.635 7.146S3.08 5.012 5.97 4.791v-.774C2.77 4.273 0 6.983 0 6.983s1.57 4.536 5.97 4.952v-.824c-3.23-.406-4.335-3.965-4.335-3.965ZM5.97 9.475v.753c-2.44-.435-3.118-2.972-3.118-2.972S4.023 5.958 5.97 5.747v.828h-.004c-1.021-.123-1.82.83-1.82.83s.448 1.607 1.824 2.07ZM6 2l-.03 2.017A6.64 6.64 0 0 1 6.252 4c3.637-.123 6.007 2.983 6.007 2.983s-2.722 3.31-5.557 3.31c-.26 0-.504-.024-.732-.065v.883c.195.025.398.04.61.04 2.638 0 4.546-1.348 6.394-2.943.307.246 1.561.842 1.819 1.104-1.757 1.47-5.852 2.657-8.173 2.657a6.84 6.84 0 0 1-.65-.034V14H16l.03-12H6Zm-.03 3.747v-.956a6.4 6.4 0 0 1 .282-.015c2.616-.082 4.332 2.248 4.332 2.248S8.73 9.598 6.743 9.598c-.286 0-.542-.046-.773-.123v-2.9c1.018.123 1.223.572 1.835 1.593L9.167 7.02s-.994-1.304-2.67-1.304a4.9 4.9 0 0 0-.527.031Z"></path></svg>`), Nvidia[FILENAME], [[1, 0, [[1, 167]]]]);
function Nvidia($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Nvidia);
  var svg = root1388();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-nvidia", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Nvidia = hmr(Nvidia, () => Nvidia[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Nvidia[HMR].source;
    set(Nvidia[HMR].source, module.default[HMR].original);
  });
}
var Nvidia_default = Nvidia;
mark_module_end(Nvidia);

// node_modules/svelte-bootstrap-icons/lib/NvmeFill.svelte
mark_module_start();
NvmeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/NvmeFill.svelte";
var root1389 = add_locations(ns_template(`<svg><!><path d="M6 7H5v2h1V7Zm6 0H9v2h3V7Z"></path><path d="M2 4a.5.5 0 0 0-.5.5h-1A.5.5 0 0 0 0 5v1a.5.5 0 0 0 .5.5h1a.25.25 0 0 1 0 .5h-1a.5.5 0 0 0-.5.5V11a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5.5h13.5a.5.5 0 0 0 .5-.5V9a.5.5 0 0 0-.5-.5.5.5 0 0 1 0-1A.5.5 0 0 0 16 7V4.5a.5.5 0 0 0-.5-.5H2Zm2 2.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-3Zm4 0a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-4a.5.5 0 0 1-.5-.5v-3Z"></path></svg>`), NvmeFill[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function NvmeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, NvmeFill);
  var svg = root1389();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-nvme-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NvmeFill = hmr(NvmeFill, () => NvmeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NvmeFill[HMR].source;
    set(NvmeFill[HMR].source, module.default[HMR].original);
  });
}
var NvmeFill_default = NvmeFill;
mark_module_end(NvmeFill);

// node_modules/svelte-bootstrap-icons/lib/Nvme.svelte
mark_module_start();
Nvme[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Nvme.svelte";
var root1390 = add_locations(ns_template(`<svg><!><path d="M1.5 4.5A.5.5 0 0 1 2 4h13.5a.5.5 0 0 1 .5.5V7a.5.5 0 0 1-.5.5.5.5 0 0 0 0 1 .5.5 0 0 1 .5.5v2.5a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5h-1A.5.5 0 0 1 0 11V7.5A.5.5 0 0 1 .5 7h1a.25.25 0 0 0 0-.5h-1A.5.5 0 0 1 0 6V5a.5.5 0 0 1 .5-.5h1Zm1 .5a.5.5 0 0 1-.5.5h-.5a1.25 1.25 0 1 1 0 2.5H1v2.5h1a.5.5 0 0 1 .5.5H15V9.415a1.5 1.5 0 0 1 0-2.83V5H2.5Z"></path><path d="M4 6.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-3ZM5 7v2h1V7H5Zm3-.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-4a.5.5 0 0 1-.5-.5v-3ZM9 7v2h3V7H9Z"></path></svg>`), Nvme[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Nvme($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Nvme);
  var svg = root1390();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-nvme", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Nvme = hmr(Nvme, () => Nvme[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Nvme[HMR].source;
    set(Nvme[HMR].source, module.default[HMR].original);
  });
}
var Nvme_default = Nvme;
mark_module_end(Nvme);

// node_modules/svelte-bootstrap-icons/lib/OctagonFill.svelte
mark_module_start();
OctagonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/OctagonFill.svelte";
var root1391 = add_locations(ns_template(`<svg><!><path d="M11.107 0a.5.5 0 0 1 .353.146l4.394 4.394a.5.5 0 0 1 .146.353v6.214a.5.5 0 0 1-.146.353l-4.394 4.394a.5.5 0 0 1-.353.146H4.893a.5.5 0 0 1-.353-.146L.146 11.46A.5.5 0 0 1 0 11.107V4.893a.5.5 0 0 1 .146-.353L4.54.146A.5.5 0 0 1 4.893 0h6.214z"></path></svg>`), OctagonFill[FILENAME], [[1, 0, [[1, 173]]]]);
function OctagonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, OctagonFill);
  var svg = root1391();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-octagon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  OctagonFill = hmr(OctagonFill, () => OctagonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = OctagonFill[HMR].source;
    set(OctagonFill[HMR].source, module.default[HMR].original);
  });
}
var OctagonFill_default = OctagonFill;
mark_module_end(OctagonFill);

// node_modules/svelte-bootstrap-icons/lib/OctagonHalf.svelte
mark_module_start();
OctagonHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/OctagonHalf.svelte";
var root1392 = add_locations(ns_template(`<svg><!><path d="M4.54.146A.5.5 0 0 1 4.893 0h6.214a.5.5 0 0 1 .353.146l4.394 4.394a.5.5 0 0 1 .146.353v6.214a.5.5 0 0 1-.146.353l-4.394 4.394a.5.5 0 0 1-.353.146H4.893a.5.5 0 0 1-.353-.146L.146 11.46A.5.5 0 0 1 0 11.107V4.893a.5.5 0 0 1 .146-.353L4.54.146zM8 15h2.9l4.1-4.1V5.1L10.9 1H8v14z"></path></svg>`), OctagonHalf[FILENAME], [[1, 0, [[1, 173]]]]);
function OctagonHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, OctagonHalf);
  var svg = root1392();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-octagon-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  OctagonHalf = hmr(OctagonHalf, () => OctagonHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = OctagonHalf[HMR].source;
    set(OctagonHalf[HMR].source, module.default[HMR].original);
  });
}
var OctagonHalf_default = OctagonHalf;
mark_module_end(OctagonHalf);

// node_modules/svelte-bootstrap-icons/lib/Octagon.svelte
mark_module_start();
Octagon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Octagon.svelte";
var root1393 = add_locations(ns_template(`<svg><!><path d="M4.54.146A.5.5 0 0 1 4.893 0h6.214a.5.5 0 0 1 .353.146l4.394 4.394a.5.5 0 0 1 .146.353v6.214a.5.5 0 0 1-.146.353l-4.394 4.394a.5.5 0 0 1-.353.146H4.893a.5.5 0 0 1-.353-.146L.146 11.46A.5.5 0 0 1 0 11.107V4.893a.5.5 0 0 1 .146-.353L4.54.146zM5.1 1 1 5.1v5.8L5.1 15h5.8l4.1-4.1V5.1L10.9 1H5.1z"></path></svg>`), Octagon[FILENAME], [[1, 0, [[1, 168]]]]);
function Octagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Octagon);
  var svg = root1393();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-octagon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Octagon = hmr(Octagon, () => Octagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Octagon[HMR].source;
    set(Octagon[HMR].source, module.default[HMR].original);
  });
}
var Octagon_default = Octagon;
mark_module_end(Octagon);

// node_modules/svelte-bootstrap-icons/lib/Opencollective.svelte
mark_module_start();
Opencollective[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Opencollective.svelte";
var root1394 = add_locations(ns_template(`<svg><!><path fill-opacity=".4" d="M12.995 8.195c0 .937-.312 1.912-.78 2.693l1.99 1.99c.976-1.327 1.6-2.966 1.6-4.683 0-1.795-.624-3.434-1.561-4.76l-2.068 2.028c.468.781.78 1.679.78 2.732h.04Z"></path><path d="M8 13.151a4.995 4.995 0 1 1 0-9.99c1.015 0 1.951.273 2.732.82l1.95-2.03a7.805 7.805 0 1 0 .04 12.449l-1.951-2.03a5.072 5.072 0 0 1-2.732.781H8Z"></path></svg>`), Opencollective[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function Opencollective($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Opencollective);
  var svg = root1394();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-opencollective", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Opencollective = hmr(Opencollective, () => Opencollective[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Opencollective[HMR].source;
    set(Opencollective[HMR].source, module.default[HMR].original);
  });
}
var Opencollective_default = Opencollective;
mark_module_end(Opencollective);

// node_modules/svelte-bootstrap-icons/lib/OpticalAudioFill.svelte
mark_module_start();
OpticalAudioFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/OpticalAudioFill.svelte";
var root1395 = add_locations(ns_template(`<svg><!><path d="M8 6a3 3 0 1 1 0 6 3 3 0 0 1 0-6Zm1 3a1 1 0 1 0-2 0 1 1 0 0 0 2 0Z"></path><path d="M2.5 15a.5.5 0 0 1-.5-.5v-3.05a2.5 2.5 0 0 1 0-4.9V4.5a.5.5 0 0 1 .146-.354l2-2A.5.5 0 0 1 4.5 2h7a.5.5 0 0 1 .354.146l2 2A.5.5 0 0 1 14 4.5v2.05a2.5 2.5 0 0 1 0 4.9v3.05a.5.5 0 0 1-.5.5h-11ZM8 5a4 4 0 1 0 0 8 4 4 0 0 0 0-8Z"></path></svg>`), OpticalAudioFill[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function OpticalAudioFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, OpticalAudioFill);
  var svg = root1395();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-optical-audio-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  OpticalAudioFill = hmr(OpticalAudioFill, () => OpticalAudioFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = OpticalAudioFill[HMR].source;
    set(OpticalAudioFill[HMR].source, module.default[HMR].original);
  });
}
var OpticalAudioFill_default = OpticalAudioFill;
mark_module_end(OpticalAudioFill);

// node_modules/svelte-bootstrap-icons/lib/OpticalAudio.svelte
mark_module_start();
OpticalAudio[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/OpticalAudio.svelte";
var root1396 = add_locations(ns_template(`<svg><!><path d="M8 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"></path><path d="M4.5 9a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0ZM8 6.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Z"></path><path d="M2 14.5a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5v-3.05a2.5 2.5 0 0 0 0-4.9V4.5a.5.5 0 0 0-.146-.354l-2-2A.5.5 0 0 0 11.5 2h-7a.5.5 0 0 0-.354.146l-2 2A.5.5 0 0 0 2 4.5v2.05a2.5 2.5 0 0 0 0 4.9v3.05Zm1-.5v-3a.5.5 0 0 0-.5-.5 1.5 1.5 0 1 1 0-3A.5.5 0 0 0 3 7V4.707L4.707 3h6.586L13 4.707V7a.5.5 0 0 0 .5.5 1.5 1.5 0 0 1 0 3 .5.5 0 0 0-.5.5v3H3Z"></path></svg>`), OpticalAudio[FILENAME], [
  [
    1,
    0,
    [[1, 174], [2, 2], [3, 2]]
  ]
]);
function OpticalAudio($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, OpticalAudio);
  var svg = root1396();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-optical-audio", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  OpticalAudio = hmr(OpticalAudio, () => OpticalAudio[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = OpticalAudio[HMR].source;
    set(OpticalAudio[HMR].source, module.default[HMR].original);
  });
}
var OpticalAudio_default = OpticalAudio;
mark_module_end(OpticalAudio);

// node_modules/svelte-bootstrap-icons/lib/Option.svelte
mark_module_start();
Option[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Option.svelte";
var root1397 = add_locations(ns_template(`<svg><!><path d="M1 2.5a.5.5 0 0 1 .5-.5h3.797a.5.5 0 0 1 .439.26L11 13h3.5a.5.5 0 0 1 0 1h-3.797a.5.5 0 0 1-.439-.26L5 3H1.5a.5.5 0 0 1-.5-.5zm10 0a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5z"></path></svg>`), Option[FILENAME], [[1, 0, [[1, 167]]]]);
function Option($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Option);
  var svg = root1397();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-option", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Option = hmr(Option, () => Option[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Option[HMR].source;
    set(Option[HMR].source, module.default[HMR].original);
  });
}
var Option_default = Option;
mark_module_end(Option);

// node_modules/svelte-bootstrap-icons/lib/Outlet.svelte
mark_module_start();
Outlet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Outlet.svelte";
var root1398 = add_locations(ns_template(`<svg><!><path d="M3.34 2.994c.275-.338.68-.494 1.074-.494h7.172c.393 0 .798.156 1.074.494.578.708 1.84 2.534 1.84 5.006 0 2.472-1.262 4.297-1.84 5.006-.276.338-.68.494-1.074.494H4.414c-.394 0-.799-.156-1.074-.494C2.762 12.297 1.5 10.472 1.5 8c0-2.472 1.262-4.297 1.84-5.006zm1.074.506a.376.376 0 0 0-.299.126C3.599 4.259 2.5 5.863 2.5 8c0 2.137 1.099 3.74 1.615 4.374.06.073.163.126.3.126h7.17c.137 0 .24-.053.3-.126.516-.633 1.615-2.237 1.615-4.374 0-2.137-1.099-3.74-1.615-4.374a.376.376 0 0 0-.3-.126h-7.17z"></path><path d="M6 5.5a.5.5 0 0 1 .5.5v1.5a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm4 0a.5.5 0 0 1 .5.5v1.5a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zM7 10v1h2v-1a1 1 0 0 0-2 0z"></path></svg>`), Outlet[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Outlet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Outlet);
  var svg = root1398();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-outlet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Outlet = hmr(Outlet, () => Outlet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Outlet[HMR].source;
    set(Outlet[HMR].source, module.default[HMR].original);
  });
}
var Outlet_default = Outlet;
mark_module_end(Outlet);

// node_modules/svelte-bootstrap-icons/lib/PCircleFill.svelte
mark_module_start();
PCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PCircleFill.svelte";
var root1399 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM5.5 4.002V12h1.283V9.164h1.668C10.033 9.164 11 8.08 11 6.586c0-1.482-.955-2.584-2.538-2.584H5.5Zm2.77 4.072c.893 0 1.419-.545 1.419-1.488s-.526-1.482-1.42-1.482H6.778v2.97H8.27Z"></path></svg>`), PCircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function PCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PCircleFill);
  var svg = root1399();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-p-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PCircleFill = hmr(PCircleFill, () => PCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PCircleFill[HMR].source;
    set(PCircleFill[HMR].source, module.default[HMR].original);
  });
}
var PCircleFill_default = PCircleFill;
mark_module_end(PCircleFill);

// node_modules/svelte-bootstrap-icons/lib/PCircle.svelte
mark_module_start();
PCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PCircle.svelte";
var root1400 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM5.5 4.002h2.962C10.045 4.002 11 5.104 11 6.586c0 1.494-.967 2.578-2.55 2.578H6.784V12H5.5V4.002Zm2.77 4.072c.893 0 1.419-.545 1.419-1.488s-.526-1.482-1.42-1.482H6.778v2.97H8.27Z"></path></svg>`), PCircle[FILENAME], [[1, 0, [[1, 169]]]]);
function PCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PCircle);
  var svg = root1400();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-p-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PCircle = hmr(PCircle, () => PCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PCircle[HMR].source;
    set(PCircle[HMR].source, module.default[HMR].original);
  });
}
var PCircle_default = PCircle;
mark_module_end(PCircle);

// node_modules/svelte-bootstrap-icons/lib/PSquareFill.svelte
mark_module_start();
PSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PSquareFill.svelte";
var root1401 = add_locations(ns_template(`<svg><!><path d="M8.27 8.074c.893 0 1.419-.545 1.419-1.488s-.526-1.482-1.42-1.482H6.778v2.97H8.27Z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm3.5 4.002h2.962C10.045 4.002 11 5.104 11 6.586c0 1.494-.967 2.578-2.55 2.578H6.784V12H5.5V4.002Z"></path></svg>`), PSquareFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PSquareFill);
  var svg = root1401();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-p-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PSquareFill = hmr(PSquareFill, () => PSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PSquareFill[HMR].source;
    set(PSquareFill[HMR].source, module.default[HMR].original);
  });
}
var PSquareFill_default = PSquareFill;
mark_module_end(PSquareFill);

// node_modules/svelte-bootstrap-icons/lib/PSquare.svelte
mark_module_start();
PSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PSquare.svelte";
var root1402 = add_locations(ns_template(`<svg><!><path d="M5.5 4.002h2.962C10.045 4.002 11 5.104 11 6.586c0 1.494-.967 2.578-2.55 2.578H6.784V12H5.5V4.002Zm2.77 4.072c.893 0 1.419-.545 1.419-1.488s-.526-1.482-1.42-1.482H6.778v2.97H8.27Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), PSquare[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function PSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PSquare);
  var svg = root1402();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-p-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PSquare = hmr(PSquare, () => PSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PSquare[HMR].source;
    set(PSquare[HMR].source, module.default[HMR].original);
  });
}
var PSquare_default = PSquare;
mark_module_end(PSquare);

// node_modules/svelte-bootstrap-icons/lib/PaintBucket.svelte
mark_module_start();
PaintBucket[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PaintBucket.svelte";
var root1403 = add_locations(ns_template(`<svg><!><path d="M6.192 2.78c-.458-.677-.927-1.248-1.35-1.643a2.972 2.972 0 0 0-.71-.515c-.217-.104-.56-.205-.882-.02-.367.213-.427.63-.43.896-.003.304.064.664.173 1.044.196.687.556 1.528 1.035 2.402L.752 8.22c-.277.277-.269.656-.218.918.055.283.187.593.36.903.348.627.92 1.361 1.626 2.068.707.707 1.441 1.278 2.068 1.626.31.173.62.305.903.36.262.05.64.059.918-.218l5.615-5.615c.118.257.092.512.05.939-.03.292-.068.665-.073 1.176v.123h.003a1 1 0 0 0 1.993 0H14v-.057a1.01 1.01 0 0 0-.004-.117c-.055-1.25-.7-2.738-1.86-3.494a4.322 4.322 0 0 0-.211-.434c-.349-.626-.92-1.36-1.627-2.067-.707-.707-1.441-1.279-2.068-1.627-.31-.172-.62-.304-.903-.36-.262-.05-.64-.058-.918.219l-.217.216zM4.16 1.867c.381.356.844.922 1.311 1.632l-.704.705c-.382-.727-.66-1.402-.813-1.938a3.283 3.283 0 0 1-.131-.673c.091.061.204.15.337.274zm.394 3.965c.54.852 1.107 1.567 1.607 2.033a.5.5 0 1 0 .682-.732c-.453-.422-1.017-1.136-1.564-2.027l1.088-1.088c.054.12.115.243.183.365.349.627.92 1.361 1.627 2.068.706.707 1.44 1.278 2.068 1.626.122.068.244.13.365.183l-4.861 4.862a.571.571 0 0 1-.068-.01c-.137-.027-.342-.104-.608-.252-.524-.292-1.186-.8-1.846-1.46-.66-.66-1.168-1.32-1.46-1.846-.147-.265-.225-.47-.251-.607a.573.573 0 0 1-.01-.068l3.048-3.047zm2.87-1.935a2.44 2.44 0 0 1-.241-.561c.135.033.324.11.562.241.524.292 1.186.8 1.846 1.46.45.45.83.901 1.118 1.31a3.497 3.497 0 0 0-1.066.091 11.27 11.27 0 0 1-.76-.694c-.66-.66-1.167-1.322-1.458-1.847z"></path></svg>`), PaintBucket[FILENAME], [[1, 0, [[1, 173]]]]);
function PaintBucket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PaintBucket);
  var svg = root1403();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-paint-bucket", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PaintBucket = hmr(PaintBucket, () => PaintBucket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaintBucket[HMR].source;
    set(PaintBucket[HMR].source, module.default[HMR].original);
  });
}
var PaintBucket_default = PaintBucket;
mark_module_end(PaintBucket);

// node_modules/svelte-bootstrap-icons/lib/PaletteFill.svelte
mark_module_start();
PaletteFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PaletteFill.svelte";
var root1404 = add_locations(ns_template(`<svg><!><path d="M12.433 10.07C14.133 10.585 16 11.15 16 8a8 8 0 1 0-8 8c1.996 0 1.826-1.504 1.649-3.08-.124-1.101-.252-2.237.351-2.92.465-.527 1.42-.237 2.433.07zM8 5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM5 6.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm.5 6.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), PaletteFill[FILENAME], [[1, 0, [[1, 173]]]]);
function PaletteFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PaletteFill);
  var svg = root1404();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-palette-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PaletteFill = hmr(PaletteFill, () => PaletteFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaletteFill[HMR].source;
    set(PaletteFill[HMR].source, module.default[HMR].original);
  });
}
var PaletteFill_default = PaletteFill;
mark_module_end(PaletteFill);

// node_modules/svelte-bootstrap-icons/lib/Palette.svelte
mark_module_start();
Palette[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Palette.svelte";
var root1405 = add_locations(ns_template(`<svg><!><path d="M8 5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm4 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM5.5 7a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm.5 6a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"></path><path d="M16 8c0 3.15-1.866 2.585-3.567 2.07C11.42 9.763 10.465 9.473 10 10c-.603.683-.475 1.819-.351 2.92C9.826 14.495 9.996 16 8 16a8 8 0 1 1 8-8zm-8 7c.611 0 .654-.171.655-.176.078-.146.124-.464.07-1.119-.014-.168-.037-.37-.061-.591-.052-.464-.112-1.005-.118-1.462-.01-.707.083-1.61.704-2.314.369-.417.845-.578 1.272-.618.404-.038.812.026 1.16.104.343.077.702.186 1.025.284l.028.008c.346.105.658.199.953.266.653.148.904.083.991.024C14.717 9.38 15 9.161 15 8a7 7 0 1 0-7 7z"></path></svg>`), Palette[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Palette($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Palette);
  var svg = root1405();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-palette", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Palette = hmr(Palette, () => Palette[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Palette[HMR].source;
    set(Palette[HMR].source, module.default[HMR].original);
  });
}
var Palette_default = Palette;
mark_module_end(Palette);

// node_modules/svelte-bootstrap-icons/lib/Palette2.svelte
mark_module_start();
Palette2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Palette2.svelte";
var root1406 = add_locations(ns_template(`<svg><!><path d="M0 .5A.5.5 0 0 1 .5 0h5a.5.5 0 0 1 .5.5v5.277l4.147-4.131a.5.5 0 0 1 .707 0l3.535 3.536a.5.5 0 0 1 0 .708L10.261 10H15.5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5H3a2.99 2.99 0 0 1-2.121-.879A2.99 2.99 0 0 1 0 13.044m6-.21 7.328-7.3-2.829-2.828L6 7.188v5.647zM4.5 13a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0zM15 15v-4H9.258l-4.015 4H15zM0 .5v12.495V.5z"></path><path d="M0 12.995V13a3.07 3.07 0 0 0 0-.005z"></path></svg>`), Palette2[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Palette2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Palette2);
  var svg = root1406();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-palette2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Palette2 = hmr(Palette2, () => Palette2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Palette2[HMR].source;
    set(Palette2[HMR].source, module.default[HMR].original);
  });
}
var Palette2_default = Palette2;
mark_module_end(Palette2);

// node_modules/svelte-bootstrap-icons/lib/Paperclip.svelte
mark_module_start();
Paperclip[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Paperclip.svelte";
var root1407 = add_locations(ns_template(`<svg><!><path d="M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0V3z"></path></svg>`), Paperclip[FILENAME], [[1, 0, [[1, 170]]]]);
function Paperclip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Paperclip);
  var svg = root1407();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-paperclip", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paperclip = hmr(Paperclip, () => Paperclip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paperclip[HMR].source;
    set(Paperclip[HMR].source, module.default[HMR].original);
  });
}
var Paperclip_default = Paperclip;
mark_module_end(Paperclip);

// node_modules/svelte-bootstrap-icons/lib/Paragraph.svelte
mark_module_start();
Paragraph[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Paragraph.svelte";
var root1408 = add_locations(ns_template(`<svg><!><path d="M10.5 15a.5.5 0 0 1-.5-.5V2H9v12.5a.5.5 0 0 1-1 0V9H7a4 4 0 1 1 0-8h5.5a.5.5 0 0 1 0 1H11v12.5a.5.5 0 0 1-.5.5z"></path></svg>`), Paragraph[FILENAME], [[1, 0, [[1, 170]]]]);
function Paragraph($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Paragraph);
  var svg = root1408();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-paragraph", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paragraph = hmr(Paragraph, () => Paragraph[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paragraph[HMR].source;
    set(Paragraph[HMR].source, module.default[HMR].original);
  });
}
var Paragraph_default = Paragraph;
mark_module_end(Paragraph);

// node_modules/svelte-bootstrap-icons/lib/PassFill.svelte
mark_module_start();
PassFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PassFill.svelte";
var root1409 = add_locations(ns_template(`<svg><!><path d="M10 0a2 2 0 1 1-4 0H3.5A1.5 1.5 0 0 0 2 1.5v13A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-13A1.5 1.5 0 0 0 12.5 0H10ZM4.5 5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1Zm0 2h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1 0-1Z"></path></svg>`), PassFill[FILENAME], [[1, 0, [[1, 170]]]]);
function PassFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PassFill);
  var svg = root1409();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pass-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PassFill = hmr(PassFill, () => PassFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PassFill[HMR].source;
    set(PassFill[HMR].source, module.default[HMR].original);
  });
}
var PassFill_default = PassFill;
mark_module_end(PassFill);

// node_modules/svelte-bootstrap-icons/lib/Pass.svelte
mark_module_start();
Pass[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Pass.svelte";
var root1410 = add_locations(ns_template(`<svg><!><path d="M5.5 5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5Zm0 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3Z"></path><path d="M8 2a2 2 0 0 0 2-2h2.5A1.5 1.5 0 0 1 14 1.5v13a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-13A1.5 1.5 0 0 1 3.5 0H6a2 2 0 0 0 2 2Zm0 1a3.001 3.001 0 0 1-2.83-2H3.5a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-13a.5.5 0 0 0-.5-.5h-1.67A3.001 3.001 0 0 1 8 3Z"></path></svg>`), Pass[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Pass($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Pass);
  var svg = root1410();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pass", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pass = hmr(Pass, () => Pass[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pass[HMR].source;
    set(Pass[HMR].source, module.default[HMR].original);
  });
}
var Pass_default = Pass;
mark_module_end(Pass);

// node_modules/svelte-bootstrap-icons/lib/PassportFill.svelte
mark_module_start();
PassportFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PassportFill.svelte";
var root1411 = add_locations(ns_template(`<svg><!><path d="M8 6a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z"></path><path d="M2 3.252a1.5 1.5 0 0 1 1.232-1.476l8-1.454A1.5 1.5 0 0 1 13 1.797v.47A2 2 0 0 1 14 4v10a2 2 0 0 1-2 2H4a1.995 1.995 0 0 1-1.51-.688 1.493 1.493 0 0 1-.49-1.11V3.253ZM5 8a3 3 0 1 0 6 0 3 3 0 0 0-6 0Zm0 4.5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 0-1h-5a.5.5 0 0 0-.5.5Z"></path></svg>`), PassportFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PassportFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PassportFill);
  var svg = root1411();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-passport-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PassportFill = hmr(PassportFill, () => PassportFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PassportFill[HMR].source;
    set(PassportFill[HMR].source, module.default[HMR].original);
  });
}
var PassportFill_default = PassportFill;
mark_module_end(PassportFill);

// node_modules/svelte-bootstrap-icons/lib/Passport.svelte
mark_module_start();
Passport[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Passport.svelte";
var root1412 = add_locations(ns_template(`<svg><!><path d="M8 5a3 3 0 1 0 0 6 3 3 0 0 0 0-6ZM6 8a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm-.5 4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5Z"></path><path d="M3.232 1.776A1.5 1.5 0 0 0 2 3.252v10.95c0 .445.191.838.49 1.11.367.422.908.688 1.51.688h8a2 2 0 0 0 2-2V4a2 2 0 0 0-1-1.732v-.47A1.5 1.5 0 0 0 11.232.321l-8 1.454ZM4 3h8a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1Z"></path></svg>`), Passport[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Passport($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Passport);
  var svg = root1412();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-passport", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Passport = hmr(Passport, () => Passport[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Passport[HMR].source;
    set(Passport[HMR].source, module.default[HMR].original);
  });
}
var Passport_default = Passport;
mark_module_end(Passport);

// node_modules/svelte-bootstrap-icons/lib/PatchCheckFill.svelte
mark_module_start();
PatchCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchCheckFill.svelte";
var root1413 = add_locations(ns_template(`<svg><!><path d="M10.067.87a2.89 2.89 0 0 0-4.134 0l-.622.638-.89-.011a2.89 2.89 0 0 0-2.924 2.924l.01.89-.636.622a2.89 2.89 0 0 0 0 4.134l.637.622-.011.89a2.89 2.89 0 0 0 2.924 2.924l.89-.01.622.636a2.89 2.89 0 0 0 4.134 0l.622-.637.89.011a2.89 2.89 0 0 0 2.924-2.924l-.01-.89.636-.622a2.89 2.89 0 0 0 0-4.134l-.637-.622.011-.89a2.89 2.89 0 0 0-2.924-2.924l-.89.01-.622-.636zm.287 5.984-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708.708z"></path></svg>`), PatchCheckFill[FILENAME], [[1, 0, [[1, 177]]]]);
function PatchCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchCheckFill);
  var svg = root1413();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchCheckFill = hmr(PatchCheckFill, () => PatchCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchCheckFill[HMR].source;
    set(PatchCheckFill[HMR].source, module.default[HMR].original);
  });
}
var PatchCheckFill_default = PatchCheckFill;
mark_module_end(PatchCheckFill);

// node_modules/svelte-bootstrap-icons/lib/PatchCheck.svelte
mark_module_start();
PatchCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchCheck.svelte";
var root1414 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.354 6.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="m10.273 2.513-.921-.944.715-.698.622.637.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636a2.89 2.89 0 0 1 4.134 0l-.715.698a1.89 1.89 0 0 0-2.704 0l-.92.944-1.32-.016a1.89 1.89 0 0 0-1.911 1.912l.016 1.318-.944.921a1.89 1.89 0 0 0 0 2.704l.944.92-.016 1.32a1.89 1.89 0 0 0 1.912 1.911l1.318-.016.921.944a1.89 1.89 0 0 0 2.704 0l.92-.944 1.32.016a1.89 1.89 0 0 0 1.911-1.912l-.016-1.318.944-.921a1.89 1.89 0 0 0 0-2.704l-.944-.92.016-1.32a1.89 1.89 0 0 0-1.912-1.911l-1.318.016z"></path></svg>`), PatchCheck[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function PatchCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchCheck);
  var svg = root1414();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchCheck = hmr(PatchCheck, () => PatchCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchCheck[HMR].source;
    set(PatchCheck[HMR].source, module.default[HMR].original);
  });
}
var PatchCheck_default = PatchCheck;
mark_module_end(PatchCheck);

// node_modules/svelte-bootstrap-icons/lib/PatchExclamationFill.svelte
mark_module_start();
PatchExclamationFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchExclamationFill.svelte";
var root1415 = add_locations(ns_template(`<svg><!><path d="M10.067.87a2.89 2.89 0 0 0-4.134 0l-.622.638-.89-.011a2.89 2.89 0 0 0-2.924 2.924l.01.89-.636.622a2.89 2.89 0 0 0 0 4.134l.637.622-.011.89a2.89 2.89 0 0 0 2.924 2.924l.89-.01.622.636a2.89 2.89 0 0 0 4.134 0l.622-.637.89.011a2.89 2.89 0 0 0 2.924-2.924l-.01-.89.636-.622a2.89 2.89 0 0 0 0-4.134l-.637-.622.011-.89a2.89 2.89 0 0 0-2.924-2.924l-.89.01-.622-.636zM8 4c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995A.905.905 0 0 1 8 4zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path></svg>`), PatchExclamationFill[FILENAME], [[1, 0, [[1, 183]]]]);
function PatchExclamationFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchExclamationFill);
  var svg = root1415();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-exclamation-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchExclamationFill = hmr(PatchExclamationFill, () => PatchExclamationFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchExclamationFill[HMR].source;
    set(PatchExclamationFill[HMR].source, module.default[HMR].original);
  });
}
var PatchExclamationFill_default = PatchExclamationFill;
mark_module_end(PatchExclamationFill);

// node_modules/svelte-bootstrap-icons/lib/PatchExclamation.svelte
mark_module_start();
PatchExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchExclamation.svelte";
var root1416 = add_locations(ns_template(`<svg><!><path d="M7.001 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.553.553 0 0 1-1.1 0L7.1 4.995z"></path><path d="m10.273 2.513-.921-.944.715-.698.622.637.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636a2.89 2.89 0 0 1 4.134 0l-.715.698a1.89 1.89 0 0 0-2.704 0l-.92.944-1.32-.016a1.89 1.89 0 0 0-1.911 1.912l.016 1.318-.944.921a1.89 1.89 0 0 0 0 2.704l.944.92-.016 1.32a1.89 1.89 0 0 0 1.912 1.911l1.318-.016.921.944a1.89 1.89 0 0 0 2.704 0l.92-.944 1.32.016a1.89 1.89 0 0 0 1.911-1.912l-.016-1.318.944-.921a1.89 1.89 0 0 0 0-2.704l-.944-.92.016-1.32a1.89 1.89 0 0 0-1.912-1.911l-1.318.016z"></path></svg>`), PatchExclamation[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function PatchExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchExclamation);
  var svg = root1416();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchExclamation = hmr(PatchExclamation, () => PatchExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchExclamation[HMR].source;
    set(PatchExclamation[HMR].source, module.default[HMR].original);
  });
}
var PatchExclamation_default = PatchExclamation;
mark_module_end(PatchExclamation);

// node_modules/svelte-bootstrap-icons/lib/PatchMinusFill.svelte
mark_module_start();
PatchMinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchMinusFill.svelte";
var root1417 = add_locations(ns_template(`<svg><!><path d="M10.067.87a2.89 2.89 0 0 0-4.134 0l-.622.638-.89-.011a2.89 2.89 0 0 0-2.924 2.924l.01.89-.636.622a2.89 2.89 0 0 0 0 4.134l.637.622-.011.89a2.89 2.89 0 0 0 2.924 2.924l.89-.01.622.636a2.89 2.89 0 0 0 4.134 0l.622-.637.89.011a2.89 2.89 0 0 0 2.924-2.924l-.01-.89.636-.622a2.89 2.89 0 0 0 0-4.134l-.637-.622.011-.89a2.89 2.89 0 0 0-2.924-2.924l-.89.01-.622-.636zM6 7.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1 0-1z"></path></svg>`), PatchMinusFill[FILENAME], [[1, 0, [[1, 177]]]]);
function PatchMinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchMinusFill);
  var svg = root1417();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchMinusFill = hmr(PatchMinusFill, () => PatchMinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchMinusFill[HMR].source;
    set(PatchMinusFill[HMR].source, module.default[HMR].original);
  });
}
var PatchMinusFill_default = PatchMinusFill;
mark_module_end(PatchMinusFill);

// node_modules/svelte-bootstrap-icons/lib/PatchMinus.svelte
mark_module_start();
PatchMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchMinus.svelte";
var root1418 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M5.5 8a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path><path d="m10.273 2.513-.921-.944.715-.698.622.637.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636a2.89 2.89 0 0 1 4.134 0l-.715.698a1.89 1.89 0 0 0-2.704 0l-.92.944-1.32-.016a1.89 1.89 0 0 0-1.911 1.912l.016 1.318-.944.921a1.89 1.89 0 0 0 0 2.704l.944.92-.016 1.32a1.89 1.89 0 0 0 1.912 1.911l1.318-.016.921.944a1.89 1.89 0 0 0 2.704 0l.92-.944 1.32.016a1.89 1.89 0 0 0 1.911-1.912l-.016-1.318.944-.921a1.89 1.89 0 0 0 0-2.704l-.944-.92.016-1.32a1.89 1.89 0 0 0-1.912-1.911l-1.318.016z"></path></svg>`), PatchMinus[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function PatchMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchMinus);
  var svg = root1418();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchMinus = hmr(PatchMinus, () => PatchMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchMinus[HMR].source;
    set(PatchMinus[HMR].source, module.default[HMR].original);
  });
}
var PatchMinus_default = PatchMinus;
mark_module_end(PatchMinus);

// node_modules/svelte-bootstrap-icons/lib/PatchPlusFill.svelte
mark_module_start();
PatchPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchPlusFill.svelte";
var root1419 = add_locations(ns_template(`<svg><!><path d="M10.067.87a2.89 2.89 0 0 0-4.134 0l-.622.638-.89-.011a2.89 2.89 0 0 0-2.924 2.924l.01.89-.636.622a2.89 2.89 0 0 0 0 4.134l.637.622-.011.89a2.89 2.89 0 0 0 2.924 2.924l.89-.01.622.636a2.89 2.89 0 0 0 4.134 0l.622-.637.89.011a2.89 2.89 0 0 0 2.924-2.924l-.01-.89.636-.622a2.89 2.89 0 0 0 0-4.134l-.637-.622.011-.89a2.89 2.89 0 0 0-2.924-2.924l-.89.01-.622-.636zM8.5 6v1.5H10a.5.5 0 0 1 0 1H8.5V10a.5.5 0 0 1-1 0V8.5H6a.5.5 0 0 1 0-1h1.5V6a.5.5 0 0 1 1 0z"></path></svg>`), PatchPlusFill[FILENAME], [[1, 0, [[1, 176]]]]);
function PatchPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchPlusFill);
  var svg = root1419();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchPlusFill = hmr(PatchPlusFill, () => PatchPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchPlusFill[HMR].source;
    set(PatchPlusFill[HMR].source, module.default[HMR].original);
  });
}
var PatchPlusFill_default = PatchPlusFill;
mark_module_end(PatchPlusFill);

// node_modules/svelte-bootstrap-icons/lib/PatchPlus.svelte
mark_module_start();
PatchPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchPlus.svelte";
var root1420 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 5.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V10a.5.5 0 0 1-1 0V8.5H6a.5.5 0 0 1 0-1h1.5V6a.5.5 0 0 1 .5-.5z"></path><path d="m10.273 2.513-.921-.944.715-.698.622.637.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636a2.89 2.89 0 0 1 4.134 0l-.715.698a1.89 1.89 0 0 0-2.704 0l-.92.944-1.32-.016a1.89 1.89 0 0 0-1.911 1.912l.016 1.318-.944.921a1.89 1.89 0 0 0 0 2.704l.944.92-.016 1.32a1.89 1.89 0 0 0 1.912 1.911l1.318-.016.921.944a1.89 1.89 0 0 0 2.704 0l.92-.944 1.32.016a1.89 1.89 0 0 0 1.911-1.912l-.016-1.318.944-.921a1.89 1.89 0 0 0 0-2.704l-.944-.92.016-1.32a1.89 1.89 0 0 0-1.912-1.911l-1.318.016z"></path></svg>`), PatchPlus[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function PatchPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchPlus);
  var svg = root1420();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchPlus = hmr(PatchPlus, () => PatchPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchPlus[HMR].source;
    set(PatchPlus[HMR].source, module.default[HMR].original);
  });
}
var PatchPlus_default = PatchPlus;
mark_module_end(PatchPlus);

// node_modules/svelte-bootstrap-icons/lib/PatchQuestionFill.svelte
mark_module_start();
PatchQuestionFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchQuestionFill.svelte";
var root1421 = add_locations(ns_template(`<svg><!><path d="M5.933.87a2.89 2.89 0 0 1 4.134 0l.622.638.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636zM7.002 11a1 1 0 1 0 2 0 1 1 0 0 0-2 0zm1.602-2.027c.04-.534.198-.815.846-1.26.674-.475 1.05-1.09 1.05-1.986 0-1.325-.92-2.227-2.262-2.227-1.02 0-1.792.492-2.1 1.29A1.71 1.71 0 0 0 6 5.48c0 .393.203.64.545.64.272 0 .455-.147.564-.51.158-.592.525-.915 1.074-.915.61 0 1.03.446 1.03 1.084 0 .563-.208.885-.822 1.325-.619.433-.926.914-.926 1.64v.111c0 .428.208.745.585.745.336 0 .504-.24.554-.627z"></path></svg>`), PatchQuestionFill[FILENAME], [[1, 0, [[1, 180]]]]);
function PatchQuestionFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchQuestionFill);
  var svg = root1421();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-question-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchQuestionFill = hmr(PatchQuestionFill, () => PatchQuestionFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchQuestionFill[HMR].source;
    set(PatchQuestionFill[HMR].source, module.default[HMR].original);
  });
}
var PatchQuestionFill_default = PatchQuestionFill;
mark_module_end(PatchQuestionFill);

// node_modules/svelte-bootstrap-icons/lib/PatchQuestion.svelte
mark_module_start();
PatchQuestion[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PatchQuestion.svelte";
var root1422 = add_locations(ns_template(`<svg><!><path d="M8.05 9.6c.336 0 .504-.24.554-.627.04-.534.198-.815.847-1.26.673-.475 1.049-1.09 1.049-1.986 0-1.325-.92-2.227-2.262-2.227-1.02 0-1.792.492-2.1 1.29A1.71 1.71 0 0 0 6 5.48c0 .393.203.64.545.64.272 0 .455-.147.564-.51.158-.592.525-.915 1.074-.915.61 0 1.03.446 1.03 1.084 0 .563-.208.885-.822 1.325-.619.433-.926.914-.926 1.64v.111c0 .428.208.745.585.745z"></path><path d="m10.273 2.513-.921-.944.715-.698.622.637.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636a2.89 2.89 0 0 1 4.134 0l-.715.698a1.89 1.89 0 0 0-2.704 0l-.92.944-1.32-.016a1.89 1.89 0 0 0-1.911 1.912l.016 1.318-.944.921a1.89 1.89 0 0 0 0 2.704l.944.92-.016 1.32a1.89 1.89 0 0 0 1.912 1.911l1.318-.016.921.944a1.89 1.89 0 0 0 2.704 0l.92-.944 1.32.016a1.89 1.89 0 0 0 1.911-1.912l-.016-1.318.944-.921a1.89 1.89 0 0 0 0-2.704l-.944-.92.016-1.32a1.89 1.89 0 0 0-1.912-1.911l-1.318.016z"></path><path d="M7.001 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0z"></path></svg>`), PatchQuestion[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function PatchQuestion($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PatchQuestion);
  var svg = root1422();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-patch-question", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PatchQuestion = hmr(PatchQuestion, () => PatchQuestion[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PatchQuestion[HMR].source;
    set(PatchQuestion[HMR].source, module.default[HMR].original);
  });
}
var PatchQuestion_default = PatchQuestion;
mark_module_end(PatchQuestion);

// node_modules/svelte-bootstrap-icons/lib/PauseBtnFill.svelte
mark_module_start();
PauseBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PauseBtnFill.svelte";
var root1423 = add_locations(ns_template(`<svg><!><path d="M0 12V4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm6.25-7C5.56 5 5 5.56 5 6.25v3.5a1.25 1.25 0 1 0 2.5 0v-3.5C7.5 5.56 6.94 5 6.25 5zm3.5 0c-.69 0-1.25.56-1.25 1.25v3.5a1.25 1.25 0 1 0 2.5 0v-3.5C11 5.56 10.44 5 9.75 5z"></path></svg>`), PauseBtnFill[FILENAME], [[1, 0, [[1, 175]]]]);
function PauseBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PauseBtnFill);
  var svg = root1423();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pause-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PauseBtnFill = hmr(PauseBtnFill, () => PauseBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PauseBtnFill[HMR].source;
    set(PauseBtnFill[HMR].source, module.default[HMR].original);
  });
}
var PauseBtnFill_default = PauseBtnFill;
mark_module_end(PauseBtnFill);

// node_modules/svelte-bootstrap-icons/lib/PauseBtn.svelte
mark_module_start();
PauseBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PauseBtn.svelte";
var root1424 = add_locations(ns_template(`<svg><!><path d="M6.25 5C5.56 5 5 5.56 5 6.25v3.5a1.25 1.25 0 1 0 2.5 0v-3.5C7.5 5.56 6.94 5 6.25 5zm3.5 0c-.69 0-1.25.56-1.25 1.25v3.5a1.25 1.25 0 1 0 2.5 0v-3.5C11 5.56 10.44 5 9.75 5z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"></path></svg>`), PauseBtn[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function PauseBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PauseBtn);
  var svg = root1424();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pause-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PauseBtn = hmr(PauseBtn, () => PauseBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PauseBtn[HMR].source;
    set(PauseBtn[HMR].source, module.default[HMR].original);
  });
}
var PauseBtn_default = PauseBtn;
mark_module_end(PauseBtn);

// node_modules/svelte-bootstrap-icons/lib/PauseCircleFill.svelte
mark_module_start();
PauseCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PauseCircleFill.svelte";
var root1425 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.25 5C5.56 5 5 5.56 5 6.25v3.5a1.25 1.25 0 1 0 2.5 0v-3.5C7.5 5.56 6.94 5 6.25 5zm3.5 0c-.69 0-1.25.56-1.25 1.25v3.5a1.25 1.25 0 1 0 2.5 0v-3.5C11 5.56 10.44 5 9.75 5z"></path></svg>`), PauseCircleFill[FILENAME], [[1, 0, [[1, 178]]]]);
function PauseCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PauseCircleFill);
  var svg = root1425();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pause-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PauseCircleFill = hmr(PauseCircleFill, () => PauseCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PauseCircleFill[HMR].source;
    set(PauseCircleFill[HMR].source, module.default[HMR].original);
  });
}
var PauseCircleFill_default = PauseCircleFill;
mark_module_end(PauseCircleFill);

// node_modules/svelte-bootstrap-icons/lib/PauseCircle.svelte
mark_module_start();
PauseCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PauseCircle.svelte";
var root1426 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M5 6.25a1.25 1.25 0 1 1 2.5 0v3.5a1.25 1.25 0 1 1-2.5 0v-3.5zm3.5 0a1.25 1.25 0 1 1 2.5 0v3.5a1.25 1.25 0 1 1-2.5 0v-3.5z"></path></svg>`), PauseCircle[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function PauseCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PauseCircle);
  var svg = root1426();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pause-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PauseCircle = hmr(PauseCircle, () => PauseCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PauseCircle[HMR].source;
    set(PauseCircle[HMR].source, module.default[HMR].original);
  });
}
var PauseCircle_default = PauseCircle;
mark_module_end(PauseCircle);

// node_modules/svelte-bootstrap-icons/lib/PauseFill.svelte
mark_module_start();
PauseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PauseFill.svelte";
var root1427 = add_locations(ns_template(`<svg><!><path d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5zm5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5z"></path></svg>`), PauseFill[FILENAME], [[1, 0, [[1, 171]]]]);
function PauseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PauseFill);
  var svg = root1427();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pause-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PauseFill = hmr(PauseFill, () => PauseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PauseFill[HMR].source;
    set(PauseFill[HMR].source, module.default[HMR].original);
  });
}
var PauseFill_default = PauseFill;
mark_module_end(PauseFill);

// node_modules/svelte-bootstrap-icons/lib/Pause.svelte
mark_module_start();
Pause[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Pause.svelte";
var root1428 = add_locations(ns_template(`<svg><!><path d="M6 3.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5zm4 0a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5z"></path></svg>`), Pause[FILENAME], [[1, 0, [[1, 166]]]]);
function Pause($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Pause);
  var svg = root1428();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pause", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pause = hmr(Pause, () => Pause[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pause[HMR].source;
    set(Pause[HMR].source, module.default[HMR].original);
  });
}
var Pause_default = Pause;
mark_module_end(Pause);

// node_modules/svelte-bootstrap-icons/lib/Paypal.svelte
mark_module_start();
Paypal[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Paypal.svelte";
var root1429 = add_locations(ns_template(`<svg><!><path d="M14.06 3.713c.12-1.071-.093-1.832-.702-2.526C12.628.356 11.312 0 9.626 0H4.734a.7.7 0 0 0-.691.59L2.005 13.509a.42.42 0 0 0 .415.486h2.756l-.202 1.28a.628.628 0 0 0 .62.726H8.14c.429 0 .793-.31.862-.731l.025-.13.48-3.043.03-.164.001-.007a.351.351 0 0 1 .348-.297h.38c1.266 0 2.425-.256 3.345-.91.379-.27.712-.603.993-1.005a4.942 4.942 0 0 0 .88-2.195c.242-1.246.13-2.356-.57-3.154a2.687 2.687 0 0 0-.76-.59l-.094-.061ZM6.543 8.82a.695.695 0 0 1 .321-.079H8.3c2.82 0 5.027-1.144 5.672-4.456l.003-.016c.217.124.4.27.548.438.546.623.679 1.535.45 2.71-.272 1.397-.866 2.307-1.663 2.874-.802.57-1.842.815-3.043.815h-.38a.873.873 0 0 0-.863.734l-.03.164-.48 3.043-.024.13-.001.004a.352.352 0 0 1-.348.296H5.595a.106.106 0 0 1-.105-.123l.208-1.32.845-5.214Z"></path></svg>`), Paypal[FILENAME], [[1, 0, [[1, 167]]]]);
function Paypal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Paypal);
  var svg = root1429();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-paypal", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paypal = hmr(Paypal, () => Paypal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paypal[HMR].source;
    set(Paypal[HMR].source, module.default[HMR].original);
  });
}
var Paypal_default = Paypal;
mark_module_end(Paypal);

// node_modules/svelte-bootstrap-icons/lib/PcDisplayHorizontal.svelte
mark_module_start();
PcDisplayHorizontal[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PcDisplayHorizontal.svelte";
var root1430 = add_locations(ns_template(`<svg><!><path d="M1.5 0A1.5 1.5 0 0 0 0 1.5v7A1.5 1.5 0 0 0 1.5 10H6v1H1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-5v-1h4.5A1.5 1.5 0 0 0 16 8.5v-7A1.5 1.5 0 0 0 14.5 0h-13Zm0 1h13a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-7a.5.5 0 0 1 .5-.5ZM12 12.5a.5.5 0 1 1 1 0 .5.5 0 0 1-1 0Zm2 0a.5.5 0 1 1 1 0 .5.5 0 0 1-1 0ZM1.5 12h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1ZM1 14.25a.25.25 0 0 1 .25-.25h5.5a.25.25 0 1 1 0 .5h-5.5a.25.25 0 0 1-.25-.25Z"></path></svg>`), PcDisplayHorizontal[FILENAME], [[1, 0, [[1, 182]]]]);
function PcDisplayHorizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PcDisplayHorizontal);
  var svg = root1430();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pc-display-horizontal", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PcDisplayHorizontal = hmr(PcDisplayHorizontal, () => PcDisplayHorizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PcDisplayHorizontal[HMR].source;
    set(PcDisplayHorizontal[HMR].source, module.default[HMR].original);
  });
}
var PcDisplayHorizontal_default = PcDisplayHorizontal;
mark_module_end(PcDisplayHorizontal);

// node_modules/svelte-bootstrap-icons/lib/PcDisplay.svelte
mark_module_start();
PcDisplay[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PcDisplay.svelte";
var root1431 = add_locations(ns_template(`<svg><!><path d="M8 1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1V1Zm1 13.5a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0Zm2 0a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0ZM9.5 1a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5ZM9 3.5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 0-1h-5a.5.5 0 0 0-.5.5ZM1.5 2A1.5 1.5 0 0 0 0 3.5v7A1.5 1.5 0 0 0 1.5 12H6v2h-.5a.5.5 0 0 0 0 1H7v-4H1.5a.5.5 0 0 1-.5-.5v-7a.5.5 0 0 1 .5-.5H7V2H1.5Z"></path></svg>`), PcDisplay[FILENAME], [[1, 0, [[1, 171]]]]);
function PcDisplay($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PcDisplay);
  var svg = root1431();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pc-display", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PcDisplay = hmr(PcDisplay, () => PcDisplay[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PcDisplay[HMR].source;
    set(PcDisplay[HMR].source, module.default[HMR].original);
  });
}
var PcDisplay_default = PcDisplay;
mark_module_end(PcDisplay);

// node_modules/svelte-bootstrap-icons/lib/PcHorizontal.svelte
mark_module_start();
PcHorizontal[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PcHorizontal.svelte";
var root1432 = add_locations(ns_template(`<svg><!><path d="M1 6a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H1Zm11.5 1a.5.5 0 1 1 0 1 .5.5 0 0 1 0-1Zm2 0a.5.5 0 1 1 0 1 .5.5 0 0 1 0-1ZM1 7.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5ZM1.25 9h5.5a.25.25 0 0 1 0 .5h-5.5a.25.25 0 0 1 0-.5Z"></path></svg>`), PcHorizontal[FILENAME], [[1, 0, [[1, 174]]]]);
function PcHorizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PcHorizontal);
  var svg = root1432();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pc-horizontal", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PcHorizontal = hmr(PcHorizontal, () => PcHorizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PcHorizontal[HMR].source;
    set(PcHorizontal[HMR].source, module.default[HMR].original);
  });
}
var PcHorizontal_default = PcHorizontal;
mark_module_end(PcHorizontal);

// node_modules/svelte-bootstrap-icons/lib/Pc.svelte
mark_module_start();
Pc[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Pc.svelte";
var root1433 = add_locations(ns_template(`<svg><!><path d="M5 0a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1H5Zm.5 14a.5.5 0 1 1 0 1 .5.5 0 0 1 0-1Zm2 0a.5.5 0 1 1 0 1 .5.5 0 0 1 0-1ZM5 1.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5ZM5.5 3h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1Z"></path></svg>`), Pc[FILENAME], [[1, 0, [[1, 163]]]]);
function Pc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Pc);
  var svg = root1433();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pc", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pc = hmr(Pc, () => Pc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pc[HMR].source;
    set(Pc[HMR].source, module.default[HMR].original);
  });
}
var Pc_default = Pc;
mark_module_end(Pc);

// node_modules/svelte-bootstrap-icons/lib/PciCardNetwork.svelte
mark_module_start();
PciCardNetwork[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PciCardNetwork.svelte";
var root1434 = add_locations(ns_template(`<svg><!><path d="M6.5 9.5v-2h.214a.5.5 0 0 0 .5-.5v-.5h2.572V7a.5.5 0 0 0 .5.5h.214v2h-4Z"></path><path d="M0 1.5A.5.5 0 0 1 .5 1h1a.5.5 0 0 1 .5.5V4h13.5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5H2v2.5a.5.5 0 0 1-1 0V2H.5a.5.5 0 0 1-.5-.5Zm6.714 4a.5.5 0 0 0-.5.5v.5H6a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5V7a.5.5 0 0 0-.5-.5h-.214V6a.5.5 0 0 0-.5-.5H6.714Z"></path><path d="M3 12.5h3.5v1a.5.5 0 0 1-.5.5H3.5a.5.5 0 0 1-.5-.5v-1Zm8 0H7v1a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-1Z"></path></svg>`), PciCardNetwork[FILENAME], [
  [
    1,
    0,
    [[1, 177], [2, 2], [3, 2]]
  ]
]);
function PciCardNetwork($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PciCardNetwork);
  var svg = root1434();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pci-card-network", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PciCardNetwork = hmr(PciCardNetwork, () => PciCardNetwork[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PciCardNetwork[HMR].source;
    set(PciCardNetwork[HMR].source, module.default[HMR].original);
  });
}
var PciCardNetwork_default = PciCardNetwork;
mark_module_end(PciCardNetwork);

// node_modules/svelte-bootstrap-icons/lib/PciCardSound.svelte
mark_module_start();
PciCardSound[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PciCardSound.svelte";
var root1435 = add_locations(ns_template(`<svg><!><path d="M7.562 7.39 8 7.04v1.92l-.438-.35a.5.5 0 0 0-.312-.11H6.5v-1h.75a.5.5 0 0 0 .312-.11Z"></path><path d="M.5 1a.5.5 0 0 0 0 1H1v12.5a.5.5 0 0 0 1 0V12h13.5a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.5-.5H2V1.5a.5.5 0 0 0-.5-.5h-1Zm11.619 3.881c.1.115.194.238.28.367.484.726.768 1.7.768 2.752 0 1.051-.284 2.026-.768 2.752-.086.13-.18.252-.28.367l-.71-.71c.055-.064.107-.135.158-.212.36-.54.6-1.315.6-2.197 0-.882-.24-1.657-.6-2.198a2.57 2.57 0 0 0-.157-.212l.709-.709Zm-1.375 4.863L10 9c.057 0 .17-.035.291-.217.12-.178.209-.454.209-.783 0-.33-.09-.605-.209-.783C10.17 7.035 10.057 7 10 7l.744-.744c.15.113.278.254.38.406.242.364.376.839.376 1.338 0 .5-.134.974-.377 1.338a1.653 1.653 0 0 1-.379.406ZM9 6v4a.5.5 0 0 1-.812.39L7.075 9.5H6a.5.5 0 0 1-.5-.5V7a.5.5 0 0 1 .5-.5h1.075l1.113-.89A.5.5 0 0 1 9 6Z"></path><path d="M6.5 12.5H3v1a.5.5 0 0 0 .5.5H6a.5.5 0 0 0 .5-.5v-1Zm.5 1v-1h4v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5Z"></path></svg>`), PciCardSound[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function PciCardSound($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PciCardSound);
  var svg = root1435();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pci-card-sound", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PciCardSound = hmr(PciCardSound, () => PciCardSound[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PciCardSound[HMR].source;
    set(PciCardSound[HMR].source, module.default[HMR].original);
  });
}
var PciCardSound_default = PciCardSound;
mark_module_end(PciCardSound);

// node_modules/svelte-bootstrap-icons/lib/PciCard.svelte
mark_module_start();
PciCard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PciCard.svelte";
var root1436 = add_locations(ns_template(`<svg><!><path d="M0 1.5A.5.5 0 0 1 .5 1h1a.5.5 0 0 1 .5.5V4h13.5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5H2v2.5a.5.5 0 0 1-1 0V2H.5a.5.5 0 0 1-.5-.5Z"></path><path d="M3 12.5h3.5v1a.5.5 0 0 1-.5.5H3.5a.5.5 0 0 1-.5-.5v-1Zm4 0h4v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1Z"></path></svg>`), PciCard[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function PciCard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PciCard);
  var svg = root1436();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pci-card", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PciCard = hmr(PciCard, () => PciCard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PciCard[HMR].source;
    set(PciCard[HMR].source, module.default[HMR].original);
  });
}
var PciCard_default = PciCard;
mark_module_end(PciCard);

// node_modules/svelte-bootstrap-icons/lib/PeaceFill.svelte
mark_module_start();
PeaceFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PeaceFill.svelte";
var root1437 = add_locations(ns_template(`<svg><!><path d="M14 13.292A8 8 0 0 0 8.5.015v7.778l5.5 5.5zm-.708.708L8.5 9.206v6.778a7.967 7.967 0 0 0 4.792-1.986zM7.5 15.985V9.207L2.708 14A7.967 7.967 0 0 0 7.5 15.985zM2 13.292A8 8 0 0 1 7.5.015v7.778l-5.5 5.5z"></path></svg>`), PeaceFill[FILENAME], [[1, 0, [[1, 171]]]]);
function PeaceFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PeaceFill);
  var svg = root1437();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-peace-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PeaceFill = hmr(PeaceFill, () => PeaceFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PeaceFill[HMR].source;
    set(PeaceFill[HMR].source, module.default[HMR].original);
  });
}
var PeaceFill_default = PeaceFill;
mark_module_end(PeaceFill);

// node_modules/svelte-bootstrap-icons/lib/Peace.svelte
mark_module_start();
Peace[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Peace.svelte";
var root1438 = add_locations(ns_template(`<svg><!><path d="M7.5 1.018a7 7 0 0 0-4.79 11.566L7.5 7.793V1.018zm1 0v6.775l4.79 4.79A7 7 0 0 0 8.5 1.018zm4.084 12.273L8.5 9.207v5.775a6.97 6.97 0 0 0 4.084-1.691zM7.5 14.982V9.207l-4.084 4.084A6.97 6.97 0 0 0 7.5 14.982zM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8z"></path></svg>`), Peace[FILENAME], [[1, 0, [[1, 166]]]]);
function Peace($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Peace);
  var svg = root1438();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-peace", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Peace = hmr(Peace, () => Peace[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Peace[HMR].source;
    set(Peace[HMR].source, module.default[HMR].original);
  });
}
var Peace_default = Peace;
mark_module_end(Peace);

// node_modules/svelte-bootstrap-icons/lib/PenFill.svelte
mark_module_start();
PenFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PenFill.svelte";
var root1439 = add_locations(ns_template(`<svg><!><path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001z"></path></svg>`), PenFill[FILENAME], [[1, 0, [[1, 169]]]]);
function PenFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PenFill);
  var svg = root1439();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pen-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PenFill = hmr(PenFill, () => PenFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PenFill[HMR].source;
    set(PenFill[HMR].source, module.default[HMR].original);
  });
}
var PenFill_default = PenFill;
mark_module_end(PenFill);

// node_modules/svelte-bootstrap-icons/lib/Pen.svelte
mark_module_start();
Pen[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Pen.svelte";
var root1440 = add_locations(ns_template(`<svg><!><path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001zm-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708l-1.585-1.585z"></path></svg>`), Pen[FILENAME], [[1, 0, [[1, 164]]]]);
function Pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Pen);
  var svg = root1440();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pen", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pen = hmr(Pen, () => Pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pen[HMR].source;
    set(Pen[HMR].source, module.default[HMR].original);
  });
}
var Pen_default = Pen;
mark_module_end(Pen);

// node_modules/svelte-bootstrap-icons/lib/PencilFill.svelte
mark_module_start();
PencilFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PencilFill.svelte";
var root1441 = add_locations(ns_template(`<svg><!><path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z"></path></svg>`), PencilFill[FILENAME], [[1, 0, [[1, 172]]]]);
function PencilFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PencilFill);
  var svg = root1441();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pencil-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PencilFill = hmr(PencilFill, () => PencilFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PencilFill[HMR].source;
    set(PencilFill[HMR].source, module.default[HMR].original);
  });
}
var PencilFill_default = PencilFill;
mark_module_end(PencilFill);

// node_modules/svelte-bootstrap-icons/lib/PencilSquare.svelte
mark_module_start();
PencilSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PencilSquare.svelte";
var root1442 = add_locations(ns_template(`<svg><!><path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path><path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"></path></svg>`), PencilSquare[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PencilSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PencilSquare);
  var svg = root1442();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pencil-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PencilSquare = hmr(PencilSquare, () => PencilSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PencilSquare[HMR].source;
    set(PencilSquare[HMR].source, module.default[HMR].original);
  });
}
var PencilSquare_default = PencilSquare;
mark_module_end(PencilSquare);

// node_modules/svelte-bootstrap-icons/lib/Pencil.svelte
mark_module_start();
Pencil[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Pencil.svelte";
var root1443 = add_locations(ns_template(`<svg><!><path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"></path></svg>`), Pencil[FILENAME], [[1, 0, [[1, 167]]]]);
function Pencil($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Pencil);
  var svg = root1443();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pencil", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pencil = hmr(Pencil, () => Pencil[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pencil[HMR].source;
    set(Pencil[HMR].source, module.default[HMR].original);
  });
}
var Pencil_default = Pencil;
mark_module_end(Pencil);

// node_modules/svelte-bootstrap-icons/lib/PentagonFill.svelte
mark_module_start();
PentagonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PentagonFill.svelte";
var root1444 = add_locations(ns_template(`<svg><!><path d="M7.685.256a.5.5 0 0 1 .63 0l7.421 6.03a.5.5 0 0 1 .162.538l-2.788 8.827a.5.5 0 0 1-.476.349H3.366a.5.5 0 0 1-.476-.35L.102 6.825a.5.5 0 0 1 .162-.538l7.42-6.03Z"></path></svg>`), PentagonFill[FILENAME], [[1, 0, [[1, 174]]]]);
function PentagonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PentagonFill);
  var svg = root1444();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pentagon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PentagonFill = hmr(PentagonFill, () => PentagonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PentagonFill[HMR].source;
    set(PentagonFill[HMR].source, module.default[HMR].original);
  });
}
var PentagonFill_default = PentagonFill;
mark_module_end(PentagonFill);

// node_modules/svelte-bootstrap-icons/lib/PentagonHalf.svelte
mark_module_start();
PentagonHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PentagonHalf.svelte";
var root1445 = add_locations(ns_template(`<svg><!><path d="m8 1.288 6.578 5.345a.5.5 0 0 1 .161.539l-2.362 7.479a.5.5 0 0 1-.476.349H8V1.288Zm7.898 5.536a.5.5 0 0 0-.162-.538L8.316.256a.5.5 0 0 0-.631 0L.264 6.286a.5.5 0 0 0-.162.538l2.788 8.827a.5.5 0 0 0 .476.349h9.268a.5.5 0 0 0 .476-.35l2.788-8.826Z"></path></svg>`), PentagonHalf[FILENAME], [[1, 0, [[1, 174]]]]);
function PentagonHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PentagonHalf);
  var svg = root1445();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pentagon-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PentagonHalf = hmr(PentagonHalf, () => PentagonHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PentagonHalf[HMR].source;
    set(PentagonHalf[HMR].source, module.default[HMR].original);
  });
}
var PentagonHalf_default = PentagonHalf;
mark_module_end(PentagonHalf);

// node_modules/svelte-bootstrap-icons/lib/Pentagon.svelte
mark_module_start();
Pentagon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Pentagon.svelte";
var root1446 = add_locations(ns_template(`<svg><!><path d="M7.685 1.545a.5.5 0 0 1 .63 0l6.263 5.088a.5.5 0 0 1 .161.539l-2.362 7.479a.5.5 0 0 1-.476.349H4.099a.5.5 0 0 1-.476-.35L1.26 7.173a.5.5 0 0 1 .161-.54l6.263-5.087Zm8.213 5.28a.5.5 0 0 0-.162-.54L8.316.257a.5.5 0 0 0-.631 0L.264 6.286a.5.5 0 0 0-.162.538l2.788 8.827a.5.5 0 0 0 .476.349h9.268a.5.5 0 0 0 .476-.35l2.788-8.826Z"></path></svg>`), Pentagon[FILENAME], [[1, 0, [[1, 169]]]]);
function Pentagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Pentagon);
  var svg = root1446();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pentagon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pentagon = hmr(Pentagon, () => Pentagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pentagon[HMR].source;
    set(Pentagon[HMR].source, module.default[HMR].original);
  });
}
var Pentagon_default = Pentagon;
mark_module_end(Pentagon);

// node_modules/svelte-bootstrap-icons/lib/PeopleFill.svelte
mark_module_start();
PeopleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PeopleFill.svelte";
var root1447 = add_locations(ns_template(`<svg><!><path d="M7 14s-1 0-1-1 1-4 5-4 5 3 5 4-1 1-1 1H7Zm4-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm-5.784 6A2.238 2.238 0 0 1 5 13c0-1.355.68-2.75 1.936-3.72A6.325 6.325 0 0 0 5 9c-4 0-5 3-5 4s1 1 1 1h4.216ZM4.5 8a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"></path></svg>`), PeopleFill[FILENAME], [[1, 0, [[1, 172]]]]);
function PeopleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PeopleFill);
  var svg = root1447();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-people-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PeopleFill = hmr(PeopleFill, () => PeopleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PeopleFill[HMR].source;
    set(PeopleFill[HMR].source, module.default[HMR].original);
  });
}
var PeopleFill_default = PeopleFill;
mark_module_end(PeopleFill);

// node_modules/svelte-bootstrap-icons/lib/People.svelte
mark_module_start();
People[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/People.svelte";
var root1448 = add_locations(ns_template(`<svg><!><path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8Zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022ZM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816ZM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275ZM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z"></path></svg>`), People[FILENAME], [[1, 0, [[1, 167]]]]);
function People($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, People);
  var svg = root1448();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-people", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  People = hmr(People, () => People[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = People[HMR].source;
    set(People[HMR].source, module.default[HMR].original);
  });
}
var People_default = People;
mark_module_end(People);

// node_modules/svelte-bootstrap-icons/lib/Percent.svelte
mark_module_start();
Percent[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Percent.svelte";
var root1449 = add_locations(ns_template(`<svg><!><path d="M13.442 2.558a.625.625 0 0 1 0 .884l-10 10a.625.625 0 1 1-.884-.884l10-10a.625.625 0 0 1 .884 0zM4.5 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 1a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5zm7 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 1a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5z"></path></svg>`), Percent[FILENAME], [[1, 0, [[1, 168]]]]);
function Percent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Percent);
  var svg = root1449();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-percent", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Percent = hmr(Percent, () => Percent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Percent[HMR].source;
    set(Percent[HMR].source, module.default[HMR].original);
  });
}
var Percent_default = Percent;
mark_module_end(Percent);

// node_modules/svelte-bootstrap-icons/lib/PersonAdd.svelte
mark_module_start();
PersonAdd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonAdd.svelte";
var root1450 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0Zm-2-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path><path d="M8.256 14a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"></path></svg>`), PersonAdd[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function PersonAdd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonAdd);
  var svg = root1450();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-add", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonAdd = hmr(PersonAdd, () => PersonAdd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonAdd[HMR].source;
    set(PersonAdd[HMR].source, module.default[HMR].original);
  });
}
var PersonAdd_default = PersonAdd;
mark_module_end(PersonAdd);

// node_modules/svelte-bootstrap-icons/lib/PersonArmsUp.svelte
mark_module_start();
PersonArmsUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonArmsUp.svelte";
var root1451 = add_locations(ns_template(`<svg><!><path d="M8 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="m5.93 6.704-.846 8.451a.768.768 0 0 0 1.523.203l.81-4.865a.59.59 0 0 1 1.165 0l.81 4.865a.768.768 0 0 0 1.523-.203l-.845-8.451A1.492 1.492 0 0 1 10.5 5.5L13 2.284a.796.796 0 0 0-1.239-.998L9.634 3.84a.72.72 0 0 1-.33.235c-.23.074-.665.176-1.304.176-.64 0-1.074-.102-1.305-.176a.72.72 0 0 1-.329-.235L4.239 1.286a.796.796 0 0 0-1.24.998l2.5 3.216c.317.316.475.758.43 1.204Z"></path></svg>`), PersonArmsUp[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function PersonArmsUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonArmsUp);
  var svg = root1451();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-arms-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonArmsUp = hmr(PersonArmsUp, () => PersonArmsUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonArmsUp[HMR].source;
    set(PersonArmsUp[HMR].source, module.default[HMR].original);
  });
}
var PersonArmsUp_default = PersonArmsUp;
mark_module_end(PersonArmsUp);

// node_modules/svelte-bootstrap-icons/lib/PersonBadgeFill.svelte
mark_module_start();
PersonBadgeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonBadgeFill.svelte";
var root1452 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm4.5 0a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zM8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm5 2.755C12.146 12.825 10.623 12 8 12s-4.146.826-5 1.755V14a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-.245z"></path></svg>`), PersonBadgeFill[FILENAME], [[1, 0, [[1, 178]]]]);
function PersonBadgeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonBadgeFill);
  var svg = root1452();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-badge-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonBadgeFill = hmr(PersonBadgeFill, () => PersonBadgeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonBadgeFill[HMR].source;
    set(PersonBadgeFill[HMR].source, module.default[HMR].original);
  });
}
var PersonBadgeFill_default = PersonBadgeFill;
mark_module_end(PersonBadgeFill);

// node_modules/svelte-bootstrap-icons/lib/PersonBadge.svelte
mark_module_start();
PersonBadge[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonBadge.svelte";
var root1453 = add_locations(ns_template(`<svg><!><path d="M6.5 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"></path><path d="M4.5 0A2.5 2.5 0 0 0 2 2.5V14a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2.5A2.5 2.5 0 0 0 11.5 0h-7zM3 2.5A1.5 1.5 0 0 1 4.5 1h7A1.5 1.5 0 0 1 13 2.5v10.795a4.2 4.2 0 0 0-.776-.492C11.392 12.387 10.063 12 8 12s-3.392.387-4.224.803a4.2 4.2 0 0 0-.776.492V2.5z"></path></svg>`), PersonBadge[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function PersonBadge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonBadge);
  var svg = root1453();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-badge", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonBadge = hmr(PersonBadge, () => PersonBadge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonBadge[HMR].source;
    set(PersonBadge[HMR].source, module.default[HMR].original);
  });
}
var PersonBadge_default = PersonBadge;
mark_module_end(PersonBadge);

// node_modules/svelte-bootstrap-icons/lib/PersonBoundingBox.svelte
mark_module_start();
PersonBoundingBox[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonBoundingBox.svelte";
var root1454 = add_locations(ns_template(`<svg><!><path d="M1.5 1a.5.5 0 0 0-.5.5v3a.5.5 0 0 1-1 0v-3A1.5 1.5 0 0 1 1.5 0h3a.5.5 0 0 1 0 1h-3zM11 .5a.5.5 0 0 1 .5-.5h3A1.5 1.5 0 0 1 16 1.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 1-.5-.5zM.5 11a.5.5 0 0 1 .5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 1 0 1h-3A1.5 1.5 0 0 1 0 14.5v-3a.5.5 0 0 1 .5-.5zm15 0a.5.5 0 0 1 .5.5v3a1.5 1.5 0 0 1-1.5 1.5h-3a.5.5 0 0 1 0-1h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 1 .5-.5z"></path><path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm8-9a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"></path></svg>`), PersonBoundingBox[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function PersonBoundingBox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonBoundingBox);
  var svg = root1454();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-bounding-box", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonBoundingBox = hmr(PersonBoundingBox, () => PersonBoundingBox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonBoundingBox[HMR].source;
    set(PersonBoundingBox[HMR].source, module.default[HMR].original);
  });
}
var PersonBoundingBox_default = PersonBoundingBox;
mark_module_end(PersonBoundingBox);

// node_modules/svelte-bootstrap-icons/lib/PersonCheckFill.svelte
mark_module_start();
PersonCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonCheckFill.svelte";
var root1455 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15.854 5.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L12.5 7.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path><path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path></svg>`), PersonCheckFill[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function PersonCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonCheckFill);
  var svg = root1455();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonCheckFill = hmr(PersonCheckFill, () => PersonCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonCheckFill[HMR].source;
    set(PersonCheckFill[HMR].source, module.default[HMR].original);
  });
}
var PersonCheckFill_default = PersonCheckFill;
mark_module_end(PersonCheckFill);

// node_modules/svelte-bootstrap-icons/lib/PersonCheck.svelte
mark_module_start();
PersonCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonCheck.svelte";
var root1456 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.708l.547.548 1.17-1.951a.5.5 0 1 1 .858.514ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path><path d="M8.256 14a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"></path></svg>`), PersonCheck[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function PersonCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonCheck);
  var svg = root1456();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonCheck = hmr(PersonCheck, () => PersonCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonCheck[HMR].source;
    set(PersonCheck[HMR].source, module.default[HMR].original);
  });
}
var PersonCheck_default = PersonCheck;
mark_module_end(PersonCheck);

// node_modules/svelte-bootstrap-icons/lib/PersonCircle.svelte
mark_module_start();
PersonCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonCircle.svelte";
var root1457 = add_locations(ns_template(`<svg><!><path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"></path><path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"></path></svg>`), PersonCircle[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PersonCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonCircle);
  var svg = root1457();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonCircle = hmr(PersonCircle, () => PersonCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonCircle[HMR].source;
    set(PersonCircle[HMR].source, module.default[HMR].original);
  });
}
var PersonCircle_default = PersonCircle;
mark_module_end(PersonCircle);

// node_modules/svelte-bootstrap-icons/lib/PersonDashFill.svelte
mark_module_start();
PersonDashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonDashFill.svelte";
var root1458 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11 7.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5z"></path><path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path></svg>`), PersonDashFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function PersonDashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonDashFill);
  var svg = root1458();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-dash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonDashFill = hmr(PersonDashFill, () => PersonDashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonDashFill[HMR].source;
    set(PersonDashFill[HMR].source, module.default[HMR].original);
  });
}
var PersonDashFill_default = PersonDashFill;
mark_module_end(PersonDashFill);

// node_modules/svelte-bootstrap-icons/lib/PersonDash.svelte
mark_module_start();
PersonDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonDash.svelte";
var root1459 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7ZM11 12h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1Zm0-7a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path><path d="M8.256 14a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"></path></svg>`), PersonDash[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function PersonDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonDash);
  var svg = root1459();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonDash = hmr(PersonDash, () => PersonDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonDash[HMR].source;
    set(PersonDash[HMR].source, module.default[HMR].original);
  });
}
var PersonDash_default = PersonDash;
mark_module_end(PersonDash);

// node_modules/svelte-bootstrap-icons/lib/PersonDown.svelte
mark_module_start();
PersonDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonDown.svelte";
var root1460 = add_locations(ns_template(`<svg><!><path d="M12.5 9a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7Zm.354 5.854 1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V10.5a.5.5 0 0 0-1 0v2.793l-.646-.647a.5.5 0 0 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path><path d="M8.256 14a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"></path></svg>`), PersonDown[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function PersonDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonDown);
  var svg = root1460();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonDown = hmr(PersonDown, () => PersonDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonDown[HMR].source;
    set(PersonDown[HMR].source, module.default[HMR].original);
  });
}
var PersonDown_default = PersonDown;
mark_module_end(PersonDown);

// node_modules/svelte-bootstrap-icons/lib/PersonExclamation.svelte
mark_module_start();
PersonExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonExclamation.svelte";
var root1461 = add_locations(ns_template(`<svg><!><path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm.256 7a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1.5a.5.5 0 0 0 1 0V11a.5.5 0 0 0-.5-.5Zm0 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path></svg>`), PersonExclamation[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function PersonExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonExclamation);
  var svg = root1461();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonExclamation = hmr(PersonExclamation, () => PersonExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonExclamation[HMR].source;
    set(PersonExclamation[HMR].source, module.default[HMR].original);
  });
}
var PersonExclamation_default = PersonExclamation;
mark_module_end(PersonExclamation);

// node_modules/svelte-bootstrap-icons/lib/PersonFillAdd.svelte
mark_module_start();
PersonFillAdd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillAdd.svelte";
var root1462 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0Zm-2-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path><path d="M2 13c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"></path></svg>`), PersonFillAdd[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function PersonFillAdd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillAdd);
  var svg = root1462();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-add", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillAdd = hmr(PersonFillAdd, () => PersonFillAdd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillAdd[HMR].source;
    set(PersonFillAdd[HMR].source, module.default[HMR].original);
  });
}
var PersonFillAdd_default = PersonFillAdd;
mark_module_end(PersonFillAdd);

// node_modules/svelte-bootstrap-icons/lib/PersonFillCheck.svelte
mark_module_start();
PersonFillCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillCheck.svelte";
var root1463 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.708l.547.548 1.17-1.951a.5.5 0 1 1 .858.514ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path><path d="M2 13c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"></path></svg>`), PersonFillCheck[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function PersonFillCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillCheck);
  var svg = root1463();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillCheck = hmr(PersonFillCheck, () => PersonFillCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillCheck[HMR].source;
    set(PersonFillCheck[HMR].source, module.default[HMR].original);
  });
}
var PersonFillCheck_default = PersonFillCheck;
mark_module_end(PersonFillCheck);

// node_modules/svelte-bootstrap-icons/lib/PersonFillDash.svelte
mark_module_start();
PersonFillDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillDash.svelte";
var root1464 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7ZM11 12h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1Zm0-7a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path><path d="M2 13c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"></path></svg>`), PersonFillDash[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function PersonFillDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillDash);
  var svg = root1464();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillDash = hmr(PersonFillDash, () => PersonFillDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillDash[HMR].source;
    set(PersonFillDash[HMR].source, module.default[HMR].original);
  });
}
var PersonFillDash_default = PersonFillDash;
mark_module_end(PersonFillDash);

// node_modules/svelte-bootstrap-icons/lib/PersonFillDown.svelte
mark_module_start();
PersonFillDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillDown.svelte";
var root1465 = add_locations(ns_template(`<svg><!><path d="M12.5 9a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7Zm.354 5.854 1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V10.5a.5.5 0 0 0-1 0v2.793l-.646-.647a.5.5 0 0 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path><path d="M2 13c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"></path></svg>`), PersonFillDown[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function PersonFillDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillDown);
  var svg = root1465();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillDown = hmr(PersonFillDown, () => PersonFillDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillDown[HMR].source;
    set(PersonFillDown[HMR].source, module.default[HMR].original);
  });
}
var PersonFillDown_default = PersonFillDown;
mark_module_end(PersonFillDown);

// node_modules/svelte-bootstrap-icons/lib/PersonFillExclamation.svelte
mark_module_start();
PersonFillExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillExclamation.svelte";
var root1466 = add_locations(ns_template(`<svg><!><path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-9 8c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1.5a.5.5 0 0 0 1 0V11a.5.5 0 0 0-.5-.5Zm0 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path></svg>`), PersonFillExclamation[FILENAME], [
  [1, 0, [[1, 184], [2, 2]]]
]);
function PersonFillExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillExclamation);
  var svg = root1466();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillExclamation = hmr(PersonFillExclamation, () => PersonFillExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillExclamation[HMR].source;
    set(PersonFillExclamation[HMR].source, module.default[HMR].original);
  });
}
var PersonFillExclamation_default = PersonFillExclamation;
mark_module_end(PersonFillExclamation);

// node_modules/svelte-bootstrap-icons/lib/PersonFillGear.svelte
mark_module_start();
PersonFillGear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillGear.svelte";
var root1467 = add_locations(ns_template(`<svg><!><path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-9 8c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Zm9.886-3.54c.18-.613 1.048-.613 1.229 0l.043.148a.64.64 0 0 0 .921.382l.136-.074c.561-.306 1.175.308.87.869l-.075.136a.64.64 0 0 0 .382.92l.149.045c.612.18.612 1.048 0 1.229l-.15.043a.64.64 0 0 0-.38.921l.074.136c.305.561-.309 1.175-.87.87l-.136-.075a.64.64 0 0 0-.92.382l-.045.149c-.18.612-1.048.612-1.229 0l-.043-.15a.64.64 0 0 0-.921-.38l-.136.074c-.561.305-1.175-.309-.87-.87l.075-.136a.64.64 0 0 0-.382-.92l-.148-.045c-.613-.18-.613-1.048 0-1.229l.148-.043a.64.64 0 0 0 .382-.921l-.074-.136c-.306-.561.308-1.175.869-.87l.136.075a.64.64 0 0 0 .92-.382l.045-.148ZM14 12.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0Z"></path></svg>`), PersonFillGear[FILENAME], [[1, 0, [[1, 177]]]]);
function PersonFillGear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillGear);
  var svg = root1467();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-gear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillGear = hmr(PersonFillGear, () => PersonFillGear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillGear[HMR].source;
    set(PersonFillGear[HMR].source, module.default[HMR].original);
  });
}
var PersonFillGear_default = PersonFillGear;
mark_module_end(PersonFillGear);

// node_modules/svelte-bootstrap-icons/lib/PersonFillLock.svelte
mark_module_start();
PersonFillLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillLock.svelte";
var root1468 = add_locations(ns_template(`<svg><!><path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-9 8c0 1 1 1 1 1h5v-1a1.9 1.9 0 0 1 .01-.2 4.49 4.49 0 0 1 1.534-3.693C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Zm7 0a1 1 0 0 1 1-1v-1a2 2 0 1 1 4 0v1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2Zm3-3a1 1 0 0 0-1 1v1h2v-1a1 1 0 0 0-1-1Z"></path></svg>`), PersonFillLock[FILENAME], [[1, 0, [[1, 177]]]]);
function PersonFillLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillLock);
  var svg = root1468();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillLock = hmr(PersonFillLock, () => PersonFillLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillLock[HMR].source;
    set(PersonFillLock[HMR].source, module.default[HMR].original);
  });
}
var PersonFillLock_default = PersonFillLock;
mark_module_end(PersonFillLock);

// node_modules/svelte-bootstrap-icons/lib/PersonFillSlash.svelte
mark_module_start();
PersonFillSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillSlash.svelte";
var root1469 = add_locations(ns_template(`<svg><!><path d="M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-9 8c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"></path></svg>`), PersonFillSlash[FILENAME], [[1, 0, [[1, 178]]]]);
function PersonFillSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillSlash);
  var svg = root1469();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillSlash = hmr(PersonFillSlash, () => PersonFillSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillSlash[HMR].source;
    set(PersonFillSlash[HMR].source, module.default[HMR].original);
  });
}
var PersonFillSlash_default = PersonFillSlash;
mark_module_end(PersonFillSlash);

// node_modules/svelte-bootstrap-icons/lib/PersonFillUp.svelte
mark_module_start();
PersonFillUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillUp.svelte";
var root1470 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.854 1.5 1.5a.5.5 0 0 1-.708.708L13 11.707V14.5a.5.5 0 0 1-1 0v-2.793l-.646.647a.5.5 0 0 1-.708-.708l1.5-1.5a.5.5 0 0 1 .708 0ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path><path d="M2 13c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"></path></svg>`), PersonFillUp[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function PersonFillUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillUp);
  var svg = root1470();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillUp = hmr(PersonFillUp, () => PersonFillUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillUp[HMR].source;
    set(PersonFillUp[HMR].source, module.default[HMR].original);
  });
}
var PersonFillUp_default = PersonFillUp;
mark_module_end(PersonFillUp);

// node_modules/svelte-bootstrap-icons/lib/PersonFillX.svelte
mark_module_start();
PersonFillX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFillX.svelte";
var root1471 = add_locations(ns_template(`<svg><!><path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-9 8c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm-.646-4.854.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 .708-.708Z"></path></svg>`), PersonFillX[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PersonFillX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFillX);
  var svg = root1471();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFillX = hmr(PersonFillX, () => PersonFillX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFillX[HMR].source;
    set(PersonFillX[HMR].source, module.default[HMR].original);
  });
}
var PersonFillX_default = PersonFillX;
mark_module_end(PersonFillX);

// node_modules/svelte-bootstrap-icons/lib/PersonFill.svelte
mark_module_start();
PersonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonFill.svelte";
var root1472 = add_locations(ns_template(`<svg><!><path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3Zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"></path></svg>`), PersonFill[FILENAME], [[1, 0, [[1, 172]]]]);
function PersonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonFill);
  var svg = root1472();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonFill = hmr(PersonFill, () => PersonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonFill[HMR].source;
    set(PersonFill[HMR].source, module.default[HMR].original);
  });
}
var PersonFill_default = PersonFill;
mark_module_end(PersonFill);

// node_modules/svelte-bootstrap-icons/lib/PersonGear.svelte
mark_module_start();
PersonGear[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonGear.svelte";
var root1473 = add_locations(ns_template(`<svg><!><path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm.256 7a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Zm3.63-4.54c.18-.613 1.048-.613 1.229 0l.043.148a.64.64 0 0 0 .921.382l.136-.074c.561-.306 1.175.308.87.869l-.075.136a.64.64 0 0 0 .382.92l.149.045c.612.18.612 1.048 0 1.229l-.15.043a.64.64 0 0 0-.38.921l.074.136c.305.561-.309 1.175-.87.87l-.136-.075a.64.64 0 0 0-.92.382l-.045.149c-.18.612-1.048.612-1.229 0l-.043-.15a.64.64 0 0 0-.921-.38l-.136.074c-.561.305-1.175-.309-.87-.87l.075-.136a.64.64 0 0 0-.382-.92l-.148-.045c-.613-.18-.613-1.048 0-1.229l.148-.043a.64.64 0 0 0 .382-.921l-.074-.136c-.306-.561.308-1.175.869-.87l.136.075a.64.64 0 0 0 .92-.382l.045-.148ZM14 12.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0Z"></path></svg>`), PersonGear[FILENAME], [[1, 0, [[1, 172]]]]);
function PersonGear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonGear);
  var svg = root1473();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-gear", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonGear = hmr(PersonGear, () => PersonGear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonGear[HMR].source;
    set(PersonGear[HMR].source, module.default[HMR].original);
  });
}
var PersonGear_default = PersonGear;
mark_module_end(PersonGear);

// node_modules/svelte-bootstrap-icons/lib/PersonHeart.svelte
mark_module_start();
PersonHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonHeart.svelte";
var root1474 = add_locations(ns_template(`<svg><!><path d="M9 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-9 8c0 1 1 1 1 1h10s1 0 1-1-1-4-6-4-6 3-6 4Zm13.5-8.09c1.387-1.425 4.855 1.07 0 4.277-4.854-3.207-1.387-5.702 0-4.276Z"></path></svg>`), PersonHeart[FILENAME], [[1, 0, [[1, 173]]]]);
function PersonHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonHeart);
  var svg = root1474();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonHeart = hmr(PersonHeart, () => PersonHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonHeart[HMR].source;
    set(PersonHeart[HMR].source, module.default[HMR].original);
  });
}
var PersonHeart_default = PersonHeart;
mark_module_end(PersonHeart);

// node_modules/svelte-bootstrap-icons/lib/PersonHearts.svelte
mark_module_start();
PersonHearts[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonHearts.svelte";
var root1475 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11.5 1.246c.832-.855 2.913.642 0 2.566-2.913-1.924-.832-3.421 0-2.566ZM9 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-9 8c0 1 1 1 1 1h10s1 0 1-1-1-4-6-4-6 3-6 4Zm13.5-8.09c1.387-1.425 4.855 1.07 0 4.277-4.854-3.207-1.387-5.702 0-4.276ZM15 2.165c.555-.57 1.942.428 0 1.711-1.942-1.283-.555-2.281 0-1.71Z"></path></svg>`), PersonHearts[FILENAME], [[1, 0, [[1, 174]]]]);
function PersonHearts($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonHearts);
  var svg = root1475();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-hearts", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonHearts = hmr(PersonHearts, () => PersonHearts[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonHearts[HMR].source;
    set(PersonHearts[HMR].source, module.default[HMR].original);
  });
}
var PersonHearts_default = PersonHearts;
mark_module_end(PersonHearts);

// node_modules/svelte-bootstrap-icons/lib/PersonLinesFill.svelte
mark_module_start();
PersonLinesFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonLinesFill.svelte";
var root1476 = add_locations(ns_template(`<svg><!><path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-5 6s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zM11 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5zm.5 2.5a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1h-4zm2 3a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1h-2zm0 3a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1h-2z"></path></svg>`), PersonLinesFill[FILENAME], [[1, 0, [[1, 178]]]]);
function PersonLinesFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonLinesFill);
  var svg = root1476();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-lines-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonLinesFill = hmr(PersonLinesFill, () => PersonLinesFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonLinesFill[HMR].source;
    set(PersonLinesFill[HMR].source, module.default[HMR].original);
  });
}
var PersonLinesFill_default = PersonLinesFill;
mark_module_end(PersonLinesFill);

// node_modules/svelte-bootstrap-icons/lib/PersonLock.svelte
mark_module_start();
PersonLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonLock.svelte";
var root1477 = add_locations(ns_template(`<svg><!><path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 5.996V14H3s-1 0-1-1 1-4 6-4c.564 0 1.077.038 1.544.107a4.524 4.524 0 0 0-.803.918A10.46 10.46 0 0 0 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h5ZM9 13a1 1 0 0 1 1-1v-1a2 2 0 1 1 4 0v1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2Zm3-3a1 1 0 0 0-1 1v1h2v-1a1 1 0 0 0-1-1Z"></path></svg>`), PersonLock[FILENAME], [[1, 0, [[1, 172]]]]);
function PersonLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonLock);
  var svg = root1477();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonLock = hmr(PersonLock, () => PersonLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonLock[HMR].source;
    set(PersonLock[HMR].source, module.default[HMR].original);
  });
}
var PersonLock_default = PersonLock;
mark_module_end(PersonLock);

// node_modules/svelte-bootstrap-icons/lib/PersonPlusFill.svelte
mark_module_start();
PersonPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonPlusFill.svelte";
var root1478 = add_locations(ns_template(`<svg><!><path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path><path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z"></path></svg>`), PersonPlusFill[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function PersonPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonPlusFill);
  var svg = root1478();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonPlusFill = hmr(PersonPlusFill, () => PersonPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonPlusFill[HMR].source;
    set(PersonPlusFill[HMR].source, module.default[HMR].original);
  });
}
var PersonPlusFill_default = PersonPlusFill;
mark_module_end(PersonPlusFill);

// node_modules/svelte-bootstrap-icons/lib/PersonPlus.svelte
mark_module_start();
PersonPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonPlus.svelte";
var root1479 = add_locations(ns_template(`<svg><!><path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H1s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C9.516 10.68 8.289 10 6 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"></path><path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z"></path></svg>`), PersonPlus[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function PersonPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonPlus);
  var svg = root1479();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonPlus = hmr(PersonPlus, () => PersonPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonPlus[HMR].source;
    set(PersonPlus[HMR].source, module.default[HMR].original);
  });
}
var PersonPlus_default = PersonPlus;
mark_module_end(PersonPlus);

// node_modules/svelte-bootstrap-icons/lib/PersonRaisedHand.svelte
mark_module_start();
PersonRaisedHand[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonRaisedHand.svelte";
var root1480 = add_locations(ns_template(`<svg><!><path d="M6 6.207v9.043a.75.75 0 0 0 1.5 0V10.5a.5.5 0 0 1 1 0v4.75a.75.75 0 0 0 1.5 0v-8.5a.25.25 0 1 1 .5 0v2.5a.75.75 0 0 0 1.5 0V6.5a3 3 0 0 0-3-3H6.236a.998.998 0 0 1-.447-.106l-.33-.165A.83.83 0 0 1 5 2.488V.75a.75.75 0 0 0-1.5 0v2.083c0 .715.404 1.37 1.044 1.689L5.5 5c.32.32.5.754.5 1.207Z"></path><path d="M8 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path></svg>`), PersonRaisedHand[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function PersonRaisedHand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonRaisedHand);
  var svg = root1480();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-raised-hand", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonRaisedHand = hmr(PersonRaisedHand, () => PersonRaisedHand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonRaisedHand[HMR].source;
    set(PersonRaisedHand[HMR].source, module.default[HMR].original);
  });
}
var PersonRaisedHand_default = PersonRaisedHand;
mark_module_end(PersonRaisedHand);

// node_modules/svelte-bootstrap-icons/lib/PersonRolodex.svelte
mark_module_start();
PersonRolodex[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonRolodex.svelte";
var root1481 = add_locations(ns_template(`<svg><!><path d="M8 9.05a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"></path><path d="M1 1a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h.5a.5.5 0 0 0 .5-.5.5.5 0 0 1 1 0 .5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5.5.5 0 0 1 1 0 .5.5 0 0 0 .5.5h.5a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H6.707L6 1.293A1 1 0 0 0 5.293 1H1Zm0 1h4.293L6 2.707A1 1 0 0 0 6.707 3H15v10h-.085a1.5 1.5 0 0 0-2.4-.63C11.885 11.223 10.554 10 8 10c-2.555 0-3.886 1.224-4.514 2.37a1.5 1.5 0 0 0-2.4.63H1V2Z"></path></svg>`), PersonRolodex[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function PersonRolodex($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonRolodex);
  var svg = root1481();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-rolodex", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonRolodex = hmr(PersonRolodex, () => PersonRolodex[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonRolodex[HMR].source;
    set(PersonRolodex[HMR].source, module.default[HMR].original);
  });
}
var PersonRolodex_default = PersonRolodex;
mark_module_end(PersonRolodex);

// node_modules/svelte-bootstrap-icons/lib/PersonSlash.svelte
mark_module_start();
PersonSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonSlash.svelte";
var root1482 = add_locations(ns_template(`<svg><!><path d="M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm.256 7a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"></path></svg>`), PersonSlash[FILENAME], [[1, 0, [[1, 173]]]]);
function PersonSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonSlash);
  var svg = root1482();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonSlash = hmr(PersonSlash, () => PersonSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonSlash[HMR].source;
    set(PersonSlash[HMR].source, module.default[HMR].original);
  });
}
var PersonSlash_default = PersonSlash;
mark_module_end(PersonSlash);

// node_modules/svelte-bootstrap-icons/lib/PersonSquare.svelte
mark_module_start();
PersonSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonSquare.svelte";
var root1483 = add_locations(ns_template(`<svg><!><path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1v-1c0-1-1-4-6-4s-6 3-6 4v1a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12z"></path></svg>`), PersonSquare[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PersonSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonSquare);
  var svg = root1483();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonSquare = hmr(PersonSquare, () => PersonSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonSquare[HMR].source;
    set(PersonSquare[HMR].source, module.default[HMR].original);
  });
}
var PersonSquare_default = PersonSquare;
mark_module_end(PersonSquare);

// node_modules/svelte-bootstrap-icons/lib/PersonStandingDress.svelte
mark_module_start();
PersonStandingDress[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonStandingDress.svelte";
var root1484 = add_locations(ns_template(`<svg><!><path d="M8 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm-.5 12.25V12h1v3.25a.75.75 0 0 0 1.5 0V12h1l-1-5v-.215a.285.285 0 0 1 .56-.078l.793 2.777a.711.711 0 1 0 1.364-.405l-1.065-3.461A3 3 0 0 0 8.784 3.5H7.216a3 3 0 0 0-2.868 2.118L3.283 9.079a.711.711 0 1 0 1.365.405l.793-2.777a.285.285 0 0 1 .56.078V7l-1 5h1v3.25a.75.75 0 0 0 1.5 0Z"></path></svg>`), PersonStandingDress[FILENAME], [[1, 0, [[1, 182]]]]);
function PersonStandingDress($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonStandingDress);
  var svg = root1484();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-standing-dress", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonStandingDress = hmr(PersonStandingDress, () => PersonStandingDress[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonStandingDress[HMR].source;
    set(PersonStandingDress[HMR].source, module.default[HMR].original);
  });
}
var PersonStandingDress_default = PersonStandingDress;
mark_module_end(PersonStandingDress);

// node_modules/svelte-bootstrap-icons/lib/PersonStanding.svelte
mark_module_start();
PersonStanding[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonStanding.svelte";
var root1485 = add_locations(ns_template(`<svg><!><path d="M8 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM6 6.75v8.5a.75.75 0 0 0 1.5 0V10.5a.5.5 0 0 1 1 0v4.75a.75.75 0 0 0 1.5 0v-8.5a.25.25 0 1 1 .5 0v2.5a.75.75 0 0 0 1.5 0V6.5a3 3 0 0 0-3-3H7a3 3 0 0 0-3 3v2.75a.75.75 0 0 0 1.5 0v-2.5a.25.25 0 0 1 .5 0Z"></path></svg>`), PersonStanding[FILENAME], [[1, 0, [[1, 176]]]]);
function PersonStanding($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonStanding);
  var svg = root1485();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-standing", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonStanding = hmr(PersonStanding, () => PersonStanding[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonStanding[HMR].source;
    set(PersonStanding[HMR].source, module.default[HMR].original);
  });
}
var PersonStanding_default = PersonStanding;
mark_module_end(PersonStanding);

// node_modules/svelte-bootstrap-icons/lib/PersonUp.svelte
mark_module_start();
PersonUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonUp.svelte";
var root1486 = add_locations(ns_template(`<svg><!><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.854 1.5 1.5a.5.5 0 0 1-.708.708L13 11.707V14.5a.5.5 0 0 1-1 0v-2.793l-.646.647a.5.5 0 0 1-.708-.708l1.5-1.5a.5.5 0 0 1 .708 0ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path><path d="M8.256 14a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"></path></svg>`), PersonUp[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function PersonUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonUp);
  var svg = root1486();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonUp = hmr(PersonUp, () => PersonUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonUp[HMR].source;
    set(PersonUp[HMR].source, module.default[HMR].original);
  });
}
var PersonUp_default = PersonUp;
mark_module_end(PersonUp);

// node_modules/svelte-bootstrap-icons/lib/PersonVcardFill.svelte
mark_module_start();
PersonVcardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonVcardFill.svelte";
var root1487 = add_locations(ns_template(`<svg><!><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm9 1.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 0-1h-4a.5.5 0 0 0-.5.5ZM9 8a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 0-1h-4A.5.5 0 0 0 9 8Zm1 2.5a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 0-1h-3a.5.5 0 0 0-.5.5Zm-1 2C9 10.567 7.21 9 5 9c-2.086 0-3.8 1.398-3.984 3.181A1 1 0 0 0 2 13h6.96c.026-.163.04-.33.04-.5ZM7 6a2 2 0 1 0-4 0 2 2 0 0 0 4 0Z"></path></svg>`), PersonVcardFill[FILENAME], [[1, 0, [[1, 178]]]]);
function PersonVcardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonVcardFill);
  var svg = root1487();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-vcard-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonVcardFill = hmr(PersonVcardFill, () => PersonVcardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonVcardFill[HMR].source;
    set(PersonVcardFill[HMR].source, module.default[HMR].original);
  });
}
var PersonVcardFill_default = PersonVcardFill;
mark_module_end(PersonVcardFill);

// node_modules/svelte-bootstrap-icons/lib/PersonVcard.svelte
mark_module_start();
PersonVcard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonVcard.svelte";
var root1488 = add_locations(ns_template(`<svg><!><path d="M5 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm4-2.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5ZM9 8a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4A.5.5 0 0 1 9 8Zm1 2.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5Z"></path><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2ZM1 4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H8.96c.026-.163.04-.33.04-.5C9 10.567 7.21 9 5 9c-2.086 0-3.8 1.398-3.984 3.181A1.006 1.006 0 0 1 1 12V4Z"></path></svg>`), PersonVcard[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function PersonVcard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonVcard);
  var svg = root1488();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-vcard", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonVcard = hmr(PersonVcard, () => PersonVcard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonVcard[HMR].source;
    set(PersonVcard[HMR].source, module.default[HMR].original);
  });
}
var PersonVcard_default = PersonVcard;
mark_module_end(PersonVcard);

// node_modules/svelte-bootstrap-icons/lib/PersonVideo.svelte
mark_module_start();
PersonVideo[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonVideo.svelte";
var root1489 = add_locations(ns_template(`<svg><!><path d="M8 9.05a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"></path><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2Zm10.798 11c-.453-1.27-1.76-3-4.798-3-3.037 0-4.345 1.73-4.798 3H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-1.202Z"></path></svg>`), PersonVideo[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function PersonVideo($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonVideo);
  var svg = root1489();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-video", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonVideo = hmr(PersonVideo, () => PersonVideo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonVideo[HMR].source;
    set(PersonVideo[HMR].source, module.default[HMR].original);
  });
}
var PersonVideo_default = PersonVideo;
mark_module_end(PersonVideo);

// node_modules/svelte-bootstrap-icons/lib/PersonVideo2.svelte
mark_module_start();
PersonVideo2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonVideo2.svelte";
var root1490 = add_locations(ns_template(`<svg><!><path d="M10 9.05a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"></path><path d="M2 1a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2ZM1 3a1 1 0 0 1 1-1h2v2H1V3Zm4 10V2h9a1 1 0 0 1 1 1v9c0 .285-.12.543-.31.725C14.15 11.494 12.822 10 10 10c-3.037 0-4.345 1.73-4.798 3H5Zm-4-2h3v2H2a1 1 0 0 1-1-1v-1Zm3-1H1V8h3v2Zm0-3H1V5h3v2Z"></path></svg>`), PersonVideo2[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PersonVideo2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonVideo2);
  var svg = root1490();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-video2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonVideo2 = hmr(PersonVideo2, () => PersonVideo2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonVideo2[HMR].source;
    set(PersonVideo2[HMR].source, module.default[HMR].original);
  });
}
var PersonVideo2_default = PersonVideo2;
mark_module_end(PersonVideo2);

// node_modules/svelte-bootstrap-icons/lib/PersonVideo3.svelte
mark_module_start();
PersonVideo3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonVideo3.svelte";
var root1491 = add_locations(ns_template(`<svg><!><path d="M14 9.5a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm-6 5.7c0 .8.8.8.8.8h6.4s.8 0 .8-.8-.8-3.2-4-3.2-4 2.4-4 3.2Z"></path><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h5.243c.122-.326.295-.668.526-1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v7.81c.353.23.656.496.91.783.059-.187.09-.386.09-.593V4a2 2 0 0 0-2-2H2Z"></path></svg>`), PersonVideo3[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PersonVideo3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonVideo3);
  var svg = root1491();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-video3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonVideo3 = hmr(PersonVideo3, () => PersonVideo3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonVideo3[HMR].source;
    set(PersonVideo3[HMR].source, module.default[HMR].original);
  });
}
var PersonVideo3_default = PersonVideo3;
mark_module_end(PersonVideo3);

// node_modules/svelte-bootstrap-icons/lib/PersonWalking.svelte
mark_module_start();
PersonWalking[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonWalking.svelte";
var root1492 = add_locations(ns_template(`<svg><!><path d="M9.5 1.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM6.44 3.752A.75.75 0 0 1 7 3.5h1.445c.742 0 1.32.643 1.243 1.38l-.43 4.083a1.75 1.75 0 0 1-.088.395l-.318.906.213.242a.75.75 0 0 1 .114.175l2 4.25a.75.75 0 1 1-1.357.638l-1.956-4.154-1.68-1.921A.75.75 0 0 1 6 8.96l.138-2.613-.435.489-.464 2.786a.75.75 0 1 1-1.48-.246l.5-3a.75.75 0 0 1 .18-.375l2-2.25Z"></path><path d="M6.25 11.745v-1.418l1.204 1.375.261.524a.75.75 0 0 1-.12.231l-2.5 3.25a.75.75 0 1 1-1.19-.914l2.345-3.048Zm4.22-4.215-.494-.494.205-1.843a1.93 1.93 0 0 0 .006-.067l1.124 1.124h1.44a.75.75 0 0 1 0 1.5H11a.75.75 0 0 1-.531-.22Z"></path></svg>`), PersonWalking[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function PersonWalking($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonWalking);
  var svg = root1492();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-walking", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonWalking = hmr(PersonWalking, () => PersonWalking[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonWalking[HMR].source;
    set(PersonWalking[HMR].source, module.default[HMR].original);
  });
}
var PersonWalking_default = PersonWalking;
mark_module_end(PersonWalking);

// node_modules/svelte-bootstrap-icons/lib/PersonWheelchair.svelte
mark_module_start();
PersonWheelchair[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonWheelchair.svelte";
var root1493 = add_locations(ns_template(`<svg><!><path d="M12 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm-.663 2.146a1.5 1.5 0 0 0-.47-2.115l-2.5-1.508a1.5 1.5 0 0 0-1.676.086l-2.329 1.75a.866.866 0 0 0 1.051 1.375L7.361 3.37l.922.71-2.038 2.445A4.732 4.732 0 0 0 2.628 7.67l1.064 1.065a3.25 3.25 0 0 1 4.574 4.574l1.064 1.063a4.732 4.732 0 0 0 1.09-3.998l1.043-.292-.187 2.991a.872.872 0 1 0 1.741.098l.206-4.121A1 1 0 0 0 12.224 8h-2.79l1.903-2.854ZM3.023 9.48a3.25 3.25 0 0 0 4.496 4.496l1.077 1.077a4.75 4.75 0 0 1-6.65-6.65l1.077 1.078Z"></path></svg>`), PersonWheelchair[FILENAME], [[1, 0, [[1, 178]]]]);
function PersonWheelchair($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonWheelchair);
  var svg = root1493();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-wheelchair", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonWheelchair = hmr(PersonWheelchair, () => PersonWheelchair[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonWheelchair[HMR].source;
    set(PersonWheelchair[HMR].source, module.default[HMR].original);
  });
}
var PersonWheelchair_default = PersonWheelchair;
mark_module_end(PersonWheelchair);

// node_modules/svelte-bootstrap-icons/lib/PersonWorkspace.svelte
mark_module_start();
PersonWorkspace[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonWorkspace.svelte";
var root1494 = add_locations(ns_template(`<svg><!><path d="M4 16s-1 0-1-1 1-4 5-4 5 3 5 4-1 1-1 1H4Zm4-5.95a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"></path><path d="M2 1a2 2 0 0 0-2 2v9.5A1.5 1.5 0 0 0 1.5 14h.653a5.373 5.373 0 0 1 1.066-2H1V3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v9h-2.219c.554.654.89 1.373 1.066 2h.653a1.5 1.5 0 0 0 1.5-1.5V3a2 2 0 0 0-2-2H2Z"></path></svg>`), PersonWorkspace[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function PersonWorkspace($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonWorkspace);
  var svg = root1494();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-workspace", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonWorkspace = hmr(PersonWorkspace, () => PersonWorkspace[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonWorkspace[HMR].source;
    set(PersonWorkspace[HMR].source, module.default[HMR].original);
  });
}
var PersonWorkspace_default = PersonWorkspace;
mark_module_end(PersonWorkspace);

// node_modules/svelte-bootstrap-icons/lib/PersonXFill.svelte
mark_module_start();
PersonXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonXFill.svelte";
var root1495 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm6.146-2.854a.5.5 0 0 1 .708 0L14 6.293l1.146-1.147a.5.5 0 0 1 .708.708L14.707 7l1.147 1.146a.5.5 0 0 1-.708.708L14 7.707l-1.146 1.147a.5.5 0 0 1-.708-.708L13.293 7l-1.147-1.146a.5.5 0 0 1 0-.708z"></path></svg>`), PersonXFill[FILENAME], [[1, 0, [[1, 174]]]]);
function PersonXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonXFill);
  var svg = root1495();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonXFill = hmr(PersonXFill, () => PersonXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonXFill[HMR].source;
    set(PersonXFill[HMR].source, module.default[HMR].original);
  });
}
var PersonXFill_default = PersonXFill;
mark_module_end(PersonXFill);

// node_modules/svelte-bootstrap-icons/lib/PersonX.svelte
mark_module_start();
PersonX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PersonX.svelte";
var root1496 = add_locations(ns_template(`<svg><!><path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm.256 7a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm-.646-4.854.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 .708-.708Z"></path></svg>`), PersonX[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function PersonX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PersonX);
  var svg = root1496();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PersonX = hmr(PersonX, () => PersonX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PersonX[HMR].source;
    set(PersonX[HMR].source, module.default[HMR].original);
  });
}
var PersonX_default = PersonX;
mark_module_end(PersonX);

// node_modules/svelte-bootstrap-icons/lib/Person.svelte
mark_module_start();
Person[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Person.svelte";
var root1497 = add_locations(ns_template(`<svg><!><path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z"></path></svg>`), Person[FILENAME], [[1, 0, [[1, 167]]]]);
function Person($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Person);
  var svg = root1497();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-person", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Person = hmr(Person, () => Person[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Person[HMR].source;
    set(Person[HMR].source, module.default[HMR].original);
  });
}
var Person_default = Person;
mark_module_end(Person);

// node_modules/svelte-bootstrap-icons/lib/PhoneFill.svelte
mark_module_start();
PhoneFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PhoneFill.svelte";
var root1498 = add_locations(ns_template(`<svg><!><path d="M3 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V2zm6 11a1 1 0 1 0-2 0 1 1 0 0 0 2 0z"></path></svg>`), PhoneFill[FILENAME], [[1, 0, [[1, 171]]]]);
function PhoneFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PhoneFill);
  var svg = root1498();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-phone-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneFill = hmr(PhoneFill, () => PhoneFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneFill[HMR].source;
    set(PhoneFill[HMR].source, module.default[HMR].original);
  });
}
var PhoneFill_default = PhoneFill;
mark_module_end(PhoneFill);

// node_modules/svelte-bootstrap-icons/lib/PhoneFlip.svelte
mark_module_start();
PhoneFlip[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PhoneFlip.svelte";
var root1499 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11 1H5a1 1 0 0 0-1 1v6a.5.5 0 0 1-1 0V2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v6a.5.5 0 0 1-1 0V2a1 1 0 0 0-1-1Zm1 13a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-2a.5.5 0 0 0-1 0v2a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-2a.5.5 0 0 0-1 0v2ZM1.713 7.954a.5.5 0 1 0-.419-.908c-.347.16-.654.348-.882.57C.184 7.842 0 8.139 0 8.5c0 .546.408.94.823 1.201.44.278 1.043.51 1.745.696C3.978 10.773 5.898 11 8 11c.099 0 .197 0 .294-.002l-1.148 1.148a.5.5 0 0 0 .708.708l2-2a.5.5 0 0 0 0-.708l-2-2a.5.5 0 1 0-.708.708l1.145 1.144L8 10c-2.04 0-3.87-.221-5.174-.569-.656-.175-1.151-.374-1.47-.575C1.012 8.639 1 8.506 1 8.5c0-.003 0-.059.112-.17.115-.112.31-.242.6-.376Zm12.993-.908a.5.5 0 0 0-.419.908c.292.134.486.264.6.377.113.11.113.166.113.169 0 .003 0 .065-.13.187-.132.122-.352.26-.677.4-.645.28-1.596.523-2.763.687a.5.5 0 0 0 .14.99c1.212-.17 2.26-.43 3.02-.758.38-.164.713-.357.96-.587.246-.229.45-.537.45-.919 0-.362-.184-.66-.412-.883-.228-.223-.535-.411-.882-.571ZM7.5 2a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1Z"></path></svg>`), PhoneFlip[FILENAME], [[1, 0, [[1, 171]]]]);
function PhoneFlip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PhoneFlip);
  var svg = root1499();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-phone-flip", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneFlip = hmr(PhoneFlip, () => PhoneFlip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneFlip[HMR].source;
    set(PhoneFlip[HMR].source, module.default[HMR].original);
  });
}
var PhoneFlip_default = PhoneFlip;
mark_module_end(PhoneFlip);

// node_modules/svelte-bootstrap-icons/lib/PhoneLandscapeFill.svelte
mark_module_start();
PhoneLandscapeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PhoneLandscapeFill.svelte";
var root1500 = add_locations(ns_template(`<svg><!><path d="M2 12.5a2 2 0 0 1-2-2v-6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H2zm11-6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"></path></svg>`), PhoneLandscapeFill[FILENAME], [[1, 0, [[1, 181]]]]);
function PhoneLandscapeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PhoneLandscapeFill);
  var svg = root1500();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-phone-landscape-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneLandscapeFill = hmr(PhoneLandscapeFill, () => PhoneLandscapeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneLandscapeFill[HMR].source;
    set(PhoneLandscapeFill[HMR].source, module.default[HMR].original);
  });
}
var PhoneLandscapeFill_default = PhoneLandscapeFill;
mark_module_end(PhoneLandscapeFill);

// node_modules/svelte-bootstrap-icons/lib/PhoneLandscape.svelte
mark_module_start();
PhoneLandscape[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PhoneLandscape.svelte";
var root1501 = add_locations(ns_template(`<svg><!><path d="M1 4.5a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-6zm-1 6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v6z"></path><path d="M14 7.5a1 1 0 1 0-2 0 1 1 0 0 0 2 0z"></path></svg>`), PhoneLandscape[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function PhoneLandscape($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PhoneLandscape);
  var svg = root1501();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-phone-landscape", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneLandscape = hmr(PhoneLandscape, () => PhoneLandscape[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneLandscape[HMR].source;
    set(PhoneLandscape[HMR].source, module.default[HMR].original);
  });
}
var PhoneLandscape_default = PhoneLandscape;
mark_module_end(PhoneLandscape);

// node_modules/svelte-bootstrap-icons/lib/PhoneVibrateFill.svelte
mark_module_start();
PhoneVibrateFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PhoneVibrateFill.svelte";
var root1502 = add_locations(ns_template(`<svg><!><path d="M4 4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4zm5 7a1 1 0 1 0-2 0 1 1 0 0 0 2 0zM1.807 4.734a.5.5 0 1 0-.884-.468A7.967 7.967 0 0 0 0 8c0 1.347.334 2.618.923 3.734a.5.5 0 1 0 .884-.468A6.967 6.967 0 0 1 1 8c0-1.18.292-2.292.807-3.266zm13.27-.468a.5.5 0 0 0-.884.468C14.708 5.708 15 6.819 15 8c0 1.18-.292 2.292-.807 3.266a.5.5 0 0 0 .884.468A7.967 7.967 0 0 0 16 8a7.967 7.967 0 0 0-.923-3.734zM3.34 6.182a.5.5 0 1 0-.93-.364A5.986 5.986 0 0 0 2 8c0 .769.145 1.505.41 2.182a.5.5 0 1 0 .93-.364A4.986 4.986 0 0 1 3 8c0-.642.12-1.255.34-1.818zm10.25-.364a.5.5 0 0 0-.93.364c.22.563.34 1.176.34 1.818 0 .642-.12 1.255-.34 1.818a.5.5 0 0 0 .93.364C13.856 9.505 14 8.769 14 8c0-.769-.145-1.505-.41-2.182z"></path></svg>`), PhoneVibrateFill[FILENAME], [[1, 0, [[1, 179]]]]);
function PhoneVibrateFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PhoneVibrateFill);
  var svg = root1502();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-phone-vibrate-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneVibrateFill = hmr(PhoneVibrateFill, () => PhoneVibrateFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneVibrateFill[HMR].source;
    set(PhoneVibrateFill[HMR].source, module.default[HMR].original);
  });
}
var PhoneVibrateFill_default = PhoneVibrateFill;
mark_module_end(PhoneVibrateFill);

// node_modules/svelte-bootstrap-icons/lib/PhoneVibrate.svelte
mark_module_start();
PhoneVibrate[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PhoneVibrate.svelte";
var root1503 = add_locations(ns_template(`<svg><!><path d="M10 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h4zM6 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H6z"></path><path d="M8 12a1 1 0 1 0 0-2 1 1 0 0 0 0 2zM1.599 4.058a.5.5 0 0 1 .208.676A6.967 6.967 0 0 0 1 8c0 1.18.292 2.292.807 3.266a.5.5 0 0 1-.884.468A7.968 7.968 0 0 1 0 8c0-1.347.334-2.619.923-3.734a.5.5 0 0 1 .676-.208zm12.802 0a.5.5 0 0 1 .676.208A7.967 7.967 0 0 1 16 8a7.967 7.967 0 0 1-.923 3.734.5.5 0 0 1-.884-.468A6.967 6.967 0 0 0 15 8c0-1.18-.292-2.292-.807-3.266a.5.5 0 0 1 .208-.676zM3.057 5.534a.5.5 0 0 1 .284.648A4.986 4.986 0 0 0 3 8c0 .642.12 1.255.34 1.818a.5.5 0 1 1-.93.364A5.986 5.986 0 0 1 2 8c0-.769.145-1.505.41-2.182a.5.5 0 0 1 .647-.284zm9.886 0a.5.5 0 0 1 .648.284C13.855 6.495 14 7.231 14 8c0 .769-.145 1.505-.41 2.182a.5.5 0 0 1-.93-.364C12.88 9.255 13 8.642 13 8c0-.642-.12-1.255-.34-1.818a.5.5 0 0 1 .283-.648z"></path></svg>`), PhoneVibrate[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PhoneVibrate($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PhoneVibrate);
  var svg = root1503();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-phone-vibrate", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneVibrate = hmr(PhoneVibrate, () => PhoneVibrate[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneVibrate[HMR].source;
    set(PhoneVibrate[HMR].source, module.default[HMR].original);
  });
}
var PhoneVibrate_default = PhoneVibrate;
mark_module_end(PhoneVibrate);

// node_modules/svelte-bootstrap-icons/lib/Phone.svelte
mark_module_start();
Phone[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Phone.svelte";
var root1504 = add_locations(ns_template(`<svg><!><path d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z"></path><path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), Phone[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Phone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Phone);
  var svg = root1504();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-phone", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Phone = hmr(Phone, () => Phone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Phone[HMR].source;
    set(Phone[HMR].source, module.default[HMR].original);
  });
}
var Phone_default = Phone;
mark_module_end(Phone);

// node_modules/svelte-bootstrap-icons/lib/PieChartFill.svelte
mark_module_start();
PieChartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PieChartFill.svelte";
var root1505 = add_locations(ns_template(`<svg><!><path d="M15.985 8.5H8.207l-5.5 5.5a8 8 0 0 0 13.277-5.5zM2 13.292A8 8 0 0 1 7.5.015v7.778l-5.5 5.5zM8.5.015V7.5h7.485A8.001 8.001 0 0 0 8.5.015z"></path></svg>`), PieChartFill[FILENAME], [[1, 0, [[1, 175]]]]);
function PieChartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PieChartFill);
  var svg = root1505();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pie-chart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PieChartFill = hmr(PieChartFill, () => PieChartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PieChartFill[HMR].source;
    set(PieChartFill[HMR].source, module.default[HMR].original);
  });
}
var PieChartFill_default = PieChartFill;
mark_module_end(PieChartFill);

// node_modules/svelte-bootstrap-icons/lib/PieChart.svelte
mark_module_start();
PieChart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PieChart.svelte";
var root1506 = add_locations(ns_template(`<svg><!><path d="M7.5 1.018a7 7 0 0 0-4.79 11.566L7.5 7.793V1.018zm1 0V7.5h6.482A7.001 7.001 0 0 0 8.5 1.018zM14.982 8.5H8.207l-4.79 4.79A7 7 0 0 0 14.982 8.5zM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8z"></path></svg>`), PieChart[FILENAME], [[1, 0, [[1, 170]]]]);
function PieChart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PieChart);
  var svg = root1506();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pie-chart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PieChart = hmr(PieChart, () => PieChart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PieChart[HMR].source;
    set(PieChart[HMR].source, module.default[HMR].original);
  });
}
var PieChart_default = PieChart;
mark_module_end(PieChart);

// node_modules/svelte-bootstrap-icons/lib/PiggyBankFill.svelte
mark_module_start();
PiggyBankFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PiggyBankFill.svelte";
var root1507 = add_locations(ns_template(`<svg><!><path d="M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595Zm7.173 3.876a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199Zm-8.999-.65a.5.5 0 1 1-.276-.96A7.613 7.613 0 0 1 7.964 3.5c.763 0 1.497.11 2.18.315a.5.5 0 1 1-.287.958A6.602 6.602 0 0 0 7.964 4.5c-.64 0-1.255.09-1.826.254ZM5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path></svg>`), PiggyBankFill[FILENAME], [[1, 0, [[1, 176]]]]);
function PiggyBankFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PiggyBankFill);
  var svg = root1507();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-piggy-bank-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PiggyBankFill = hmr(PiggyBankFill, () => PiggyBankFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PiggyBankFill[HMR].source;
    set(PiggyBankFill[HMR].source, module.default[HMR].original);
  });
}
var PiggyBankFill_default = PiggyBankFill;
mark_module_end(PiggyBankFill);

// node_modules/svelte-bootstrap-icons/lib/PiggyBank.svelte
mark_module_start();
PiggyBank[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PiggyBank.svelte";
var root1508 = add_locations(ns_template(`<svg><!><path d="M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z"></path><path fill-rule="evenodd" d="M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z"></path></svg>`), PiggyBank[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function PiggyBank($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PiggyBank);
  var svg = root1508();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-piggy-bank", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PiggyBank = hmr(PiggyBank, () => PiggyBank[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PiggyBank[HMR].source;
    set(PiggyBank[HMR].source, module.default[HMR].original);
  });
}
var PiggyBank_default = PiggyBank;
mark_module_end(PiggyBank);

// node_modules/svelte-bootstrap-icons/lib/PinAngleFill.svelte
mark_module_start();
PinAngleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PinAngleFill.svelte";
var root1509 = add_locations(ns_template(`<svg><!><path d="M9.828.722a.5.5 0 0 1 .354.146l4.95 4.95a.5.5 0 0 1 0 .707c-.48.48-1.072.588-1.503.588-.177 0-.335-.018-.46-.039l-3.134 3.134a5.927 5.927 0 0 1 .16 1.013c.046.702-.032 1.687-.72 2.375a.5.5 0 0 1-.707 0l-2.829-2.828-3.182 3.182c-.195.195-1.219.902-1.414.707-.195-.195.512-1.22.707-1.414l3.182-3.182-2.828-2.829a.5.5 0 0 1 0-.707c.688-.688 1.673-.767 2.375-.72a5.922 5.922 0 0 1 1.013.16l3.134-3.133a2.772 2.772 0 0 1-.04-.461c0-.43.108-1.022.589-1.503a.5.5 0 0 1 .353-.146z"></path></svg>`), PinAngleFill[FILENAME], [[1, 0, [[1, 175]]]]);
function PinAngleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PinAngleFill);
  var svg = root1509();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pin-angle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PinAngleFill = hmr(PinAngleFill, () => PinAngleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PinAngleFill[HMR].source;
    set(PinAngleFill[HMR].source, module.default[HMR].original);
  });
}
var PinAngleFill_default = PinAngleFill;
mark_module_end(PinAngleFill);

// node_modules/svelte-bootstrap-icons/lib/PinAngle.svelte
mark_module_start();
PinAngle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PinAngle.svelte";
var root1510 = add_locations(ns_template(`<svg><!><path d="M9.828.722a.5.5 0 0 1 .354.146l4.95 4.95a.5.5 0 0 1 0 .707c-.48.48-1.072.588-1.503.588-.177 0-.335-.018-.46-.039l-3.134 3.134a5.927 5.927 0 0 1 .16 1.013c.046.702-.032 1.687-.72 2.375a.5.5 0 0 1-.707 0l-2.829-2.828-3.182 3.182c-.195.195-1.219.902-1.414.707-.195-.195.512-1.22.707-1.414l3.182-3.182-2.828-2.829a.5.5 0 0 1 0-.707c.688-.688 1.673-.767 2.375-.72a5.922 5.922 0 0 1 1.013.16l3.134-3.133a2.772 2.772 0 0 1-.04-.461c0-.43.108-1.022.589-1.503a.5.5 0 0 1 .353-.146zm.122 2.112v-.002.002zm0-.002v.002a.5.5 0 0 1-.122.51L6.293 6.878a.5.5 0 0 1-.511.12H5.78l-.014-.004a4.507 4.507 0 0 0-.288-.076 4.922 4.922 0 0 0-.765-.116c-.422-.028-.836.008-1.175.15l5.51 5.509c.141-.34.177-.753.149-1.175a4.924 4.924 0 0 0-.192-1.054l-.004-.013v-.001a.5.5 0 0 1 .12-.512l3.536-3.535a.5.5 0 0 1 .532-.115l.096.022c.087.017.208.034.344.034.114 0 .23-.011.343-.04L9.927 2.028c-.029.113-.04.23-.04.343a1.779 1.779 0 0 0 .062.46z"></path></svg>`), PinAngle[FILENAME], [[1, 0, [[1, 170]]]]);
function PinAngle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PinAngle);
  var svg = root1510();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pin-angle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PinAngle = hmr(PinAngle, () => PinAngle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PinAngle[HMR].source;
    set(PinAngle[HMR].source, module.default[HMR].original);
  });
}
var PinAngle_default = PinAngle;
mark_module_end(PinAngle);

// node_modules/svelte-bootstrap-icons/lib/PinFill.svelte
mark_module_start();
PinFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PinFill.svelte";
var root1511 = add_locations(ns_template(`<svg><!><path d="M4.146.146A.5.5 0 0 1 4.5 0h7a.5.5 0 0 1 .5.5c0 .68-.342 1.174-.646 1.479-.126.125-.25.224-.354.298v4.431l.078.048c.203.127.476.314.751.555C12.36 7.775 13 8.527 13 9.5a.5.5 0 0 1-.5.5h-4v4.5c0 .276-.224 1.5-.5 1.5s-.5-1.224-.5-1.5V10h-4a.5.5 0 0 1-.5-.5c0-.973.64-1.725 1.17-2.189A5.921 5.921 0 0 1 5 6.708V2.277a2.77 2.77 0 0 1-.354-.298C4.342 1.674 4 1.179 4 .5a.5.5 0 0 1 .146-.354z"></path></svg>`), PinFill[FILENAME], [[1, 0, [[1, 169]]]]);
function PinFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PinFill);
  var svg = root1511();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pin-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PinFill = hmr(PinFill, () => PinFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PinFill[HMR].source;
    set(PinFill[HMR].source, module.default[HMR].original);
  });
}
var PinFill_default = PinFill;
mark_module_end(PinFill);

// node_modules/svelte-bootstrap-icons/lib/PinMapFill.svelte
mark_module_start();
PinMapFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PinMapFill.svelte";
var root1512 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.1 11.2a.5.5 0 0 1 .4-.2H6a.5.5 0 0 1 0 1H3.75L1.5 15h13l-2.25-3H10a.5.5 0 0 1 0-1h2.5a.5.5 0 0 1 .4.2l3 4a.5.5 0 0 1-.4.8H.5a.5.5 0 0 1-.4-.8l3-4z"></path><path fill-rule="evenodd" d="M4 4a4 4 0 1 1 4.5 3.969V13.5a.5.5 0 0 1-1 0V7.97A4 4 0 0 1 4 3.999z"></path></svg>`), PinMapFill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function PinMapFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PinMapFill);
  var svg = root1512();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pin-map-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PinMapFill = hmr(PinMapFill, () => PinMapFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PinMapFill[HMR].source;
    set(PinMapFill[HMR].source, module.default[HMR].original);
  });
}
var PinMapFill_default = PinMapFill;
mark_module_end(PinMapFill);

// node_modules/svelte-bootstrap-icons/lib/PinMap.svelte
mark_module_start();
PinMap[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PinMap.svelte";
var root1513 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.1 11.2a.5.5 0 0 1 .4-.2H6a.5.5 0 0 1 0 1H3.75L1.5 15h13l-2.25-3H10a.5.5 0 0 1 0-1h2.5a.5.5 0 0 1 .4.2l3 4a.5.5 0 0 1-.4.8H.5a.5.5 0 0 1-.4-.8l3-4z"></path><path fill-rule="evenodd" d="M8 1a3 3 0 1 0 0 6 3 3 0 0 0 0-6zM4 4a4 4 0 1 1 4.5 3.969V13.5a.5.5 0 0 1-1 0V7.97A4 4 0 0 1 4 3.999z"></path></svg>`), PinMap[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function PinMap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PinMap);
  var svg = root1513();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pin-map", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PinMap = hmr(PinMap, () => PinMap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PinMap[HMR].source;
    set(PinMap[HMR].source, module.default[HMR].original);
  });
}
var PinMap_default = PinMap;
mark_module_end(PinMap);

// node_modules/svelte-bootstrap-icons/lib/Pin.svelte
mark_module_start();
Pin[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Pin.svelte";
var root1514 = add_locations(ns_template(`<svg><!><path d="M4.146.146A.5.5 0 0 1 4.5 0h7a.5.5 0 0 1 .5.5c0 .68-.342 1.174-.646 1.479-.126.125-.25.224-.354.298v4.431l.078.048c.203.127.476.314.751.555C12.36 7.775 13 8.527 13 9.5a.5.5 0 0 1-.5.5h-4v4.5c0 .276-.224 1.5-.5 1.5s-.5-1.224-.5-1.5V10h-4a.5.5 0 0 1-.5-.5c0-.973.64-1.725 1.17-2.189A5.921 5.921 0 0 1 5 6.708V2.277a2.77 2.77 0 0 1-.354-.298C4.342 1.674 4 1.179 4 .5a.5.5 0 0 1 .146-.354zm1.58 1.408-.002-.001.002.001zm-.002-.001.002.001A.5.5 0 0 1 6 2v5a.5.5 0 0 1-.276.447h-.002l-.012.007-.054.03a4.922 4.922 0 0 0-.827.58c-.318.278-.585.596-.725.936h7.792c-.14-.34-.407-.658-.725-.936a4.915 4.915 0 0 0-.881-.61l-.012-.006h-.002A.5.5 0 0 1 10 7V2a.5.5 0 0 1 .295-.458 1.775 1.775 0 0 0 .351-.271c.08-.08.155-.17.214-.271H5.14c.06.1.133.191.214.271a1.78 1.78 0 0 0 .37.282z"></path></svg>`), Pin[FILENAME], [[1, 0, [[1, 164]]]]);
function Pin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Pin);
  var svg = root1514();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pin", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pin = hmr(Pin, () => Pin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pin[HMR].source;
    set(Pin[HMR].source, module.default[HMR].original);
  });
}
var Pin_default = Pin;
mark_module_end(Pin);

// node_modules/svelte-bootstrap-icons/lib/Pinterest.svelte
mark_module_start();
Pinterest[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Pinterest.svelte";
var root1515 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 0 0-2.915 15.452c-.07-.633-.134-1.606.027-2.297.146-.625.938-3.977.938-3.977s-.239-.479-.239-1.187c0-1.113.645-1.943 1.448-1.943.682 0 1.012.512 1.012 1.127 0 .686-.437 1.712-.663 2.663-.188.796.4 1.446 1.185 1.446 1.422 0 2.515-1.5 2.515-3.664 0-1.915-1.377-3.254-3.342-3.254-2.276 0-3.612 1.707-3.612 3.471 0 .688.265 1.425.595 1.826a.24.24 0 0 1 .056.23c-.061.252-.196.796-.222.907-.035.146-.116.177-.268.107-1-.465-1.624-1.926-1.624-3.1 0-2.523 1.834-4.84 5.286-4.84 2.775 0 4.932 1.977 4.932 4.62 0 2.757-1.739 4.976-4.151 4.976-.811 0-1.573-.421-1.834-.919l-.498 1.902c-.181.695-.669 1.566-.995 2.097A8 8 0 1 0 8 0z"></path></svg>`), Pinterest[FILENAME], [[1, 0, [[1, 170]]]]);
function Pinterest($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Pinterest);
  var svg = root1515();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pinterest", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pinterest = hmr(Pinterest, () => Pinterest[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pinterest[HMR].source;
    set(Pinterest[HMR].source, module.default[HMR].original);
  });
}
var Pinterest_default = Pinterest;
mark_module_end(Pinterest);

// node_modules/svelte-bootstrap-icons/lib/PipFill.svelte
mark_module_start();
PipFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PipFill.svelte";
var root1516 = add_locations(ns_template(`<svg><!><path d="M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13zm7 6h5a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-3a.5.5 0 0 1 .5-.5z"></path></svg>`), PipFill[FILENAME], [[1, 0, [[1, 169]]]]);
function PipFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PipFill);
  var svg = root1516();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pip-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PipFill = hmr(PipFill, () => PipFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PipFill[HMR].source;
    set(PipFill[HMR].source, module.default[HMR].original);
  });
}
var PipFill_default = PipFill;
mark_module_end(PipFill);

// node_modules/svelte-bootstrap-icons/lib/Pip.svelte
mark_module_start();
Pip[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Pip.svelte";
var root1517 = add_locations(ns_template(`<svg><!><path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5v-9zM1.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-13z"></path><path d="M8 8.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-3z"></path></svg>`), Pip[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Pip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Pip);
  var svg = root1517();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-pip", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pip = hmr(Pip, () => Pip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pip[HMR].source;
    set(Pip[HMR].source, module.default[HMR].original);
  });
}
var Pip_default = Pip;
mark_module_end(Pip);

// node_modules/svelte-bootstrap-icons/lib/PlayBtnFill.svelte
mark_module_start();
PlayBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlayBtnFill.svelte";
var root1518 = add_locations(ns_template(`<svg><!><path d="M0 12V4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm6.79-6.907A.5.5 0 0 0 6 5.5v5a.5.5 0 0 0 .79.407l3.5-2.5a.5.5 0 0 0 0-.814l-3.5-2.5z"></path></svg>`), PlayBtnFill[FILENAME], [[1, 0, [[1, 174]]]]);
function PlayBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlayBtnFill);
  var svg = root1518();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-play-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlayBtnFill = hmr(PlayBtnFill, () => PlayBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlayBtnFill[HMR].source;
    set(PlayBtnFill[HMR].source, module.default[HMR].original);
  });
}
var PlayBtnFill_default = PlayBtnFill;
mark_module_end(PlayBtnFill);

// node_modules/svelte-bootstrap-icons/lib/PlayBtn.svelte
mark_module_start();
PlayBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlayBtn.svelte";
var root1519 = add_locations(ns_template(`<svg><!><path d="M6.79 5.093A.5.5 0 0 0 6 5.5v5a.5.5 0 0 0 .79.407l3.5-2.5a.5.5 0 0 0 0-.814l-3.5-2.5z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"></path></svg>`), PlayBtn[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function PlayBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlayBtn);
  var svg = root1519();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-play-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlayBtn = hmr(PlayBtn, () => PlayBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlayBtn[HMR].source;
    set(PlayBtn[HMR].source, module.default[HMR].original);
  });
}
var PlayBtn_default = PlayBtn;
mark_module_end(PlayBtn);

// node_modules/svelte-bootstrap-icons/lib/PlayCircleFill.svelte
mark_module_start();
PlayCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlayCircleFill.svelte";
var root1520 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.79 5.093A.5.5 0 0 0 6 5.5v5a.5.5 0 0 0 .79.407l3.5-2.5a.5.5 0 0 0 0-.814l-3.5-2.5z"></path></svg>`), PlayCircleFill[FILENAME], [[1, 0, [[1, 177]]]]);
function PlayCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlayCircleFill);
  var svg = root1520();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-play-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlayCircleFill = hmr(PlayCircleFill, () => PlayCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlayCircleFill[HMR].source;
    set(PlayCircleFill[HMR].source, module.default[HMR].original);
  });
}
var PlayCircleFill_default = PlayCircleFill;
mark_module_end(PlayCircleFill);

// node_modules/svelte-bootstrap-icons/lib/PlayCircle.svelte
mark_module_start();
PlayCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlayCircle.svelte";
var root1521 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M6.271 5.055a.5.5 0 0 1 .52.038l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .271-.445z"></path></svg>`), PlayCircle[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function PlayCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlayCircle);
  var svg = root1521();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-play-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlayCircle = hmr(PlayCircle, () => PlayCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlayCircle[HMR].source;
    set(PlayCircle[HMR].source, module.default[HMR].original);
  });
}
var PlayCircle_default = PlayCircle;
mark_module_end(PlayCircle);

// node_modules/svelte-bootstrap-icons/lib/PlayFill.svelte
mark_module_start();
PlayFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlayFill.svelte";
var root1522 = add_locations(ns_template(`<svg><!><path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z"></path></svg>`), PlayFill[FILENAME], [[1, 0, [[1, 170]]]]);
function PlayFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlayFill);
  var svg = root1522();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-play-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlayFill = hmr(PlayFill, () => PlayFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlayFill[HMR].source;
    set(PlayFill[HMR].source, module.default[HMR].original);
  });
}
var PlayFill_default = PlayFill;
mark_module_end(PlayFill);

// node_modules/svelte-bootstrap-icons/lib/Play.svelte
mark_module_start();
Play[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Play.svelte";
var root1523 = add_locations(ns_template(`<svg><!><path d="M10.804 8 5 4.633v6.734L10.804 8zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C4.713 12.69 4 12.345 4 11.692V4.308c0-.653.713-.998 1.233-.696l6.363 3.692z"></path></svg>`), Play[FILENAME], [[1, 0, [[1, 165]]]]);
function Play($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Play);
  var svg = root1523();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-play", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Play = hmr(Play, () => Play[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Play[HMR].source;
    set(Play[HMR].source, module.default[HMR].original);
  });
}
var Play_default = Play;
mark_module_end(Play);

// node_modules/svelte-bootstrap-icons/lib/Playstation.svelte
mark_module_start();
Playstation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Playstation.svelte";
var root1524 = add_locations(ns_template(`<svg><!><path d="M15.858 11.451c-.313.395-1.079.676-1.079.676l-5.696 2.046v-1.509l4.192-1.493c.476-.17.549-.412.162-.538-.386-.127-1.085-.09-1.56.08l-2.794.984v-1.566l.161-.054s.807-.286 1.942-.412c1.135-.125 2.525.017 3.616.43 1.23.39 1.368.962 1.056 1.356ZM9.625 8.883v-3.86c0-.453-.083-.87-.508-.988-.326-.105-.528.198-.528.65v9.664l-2.606-.827V2c1.108.206 2.722.692 3.59.985 2.207.757 2.955 1.7 2.955 3.825 0 2.071-1.278 2.856-2.903 2.072Zm-8.424 3.625C-.061 12.15-.271 11.41.304 10.984c.532-.394 1.436-.69 1.436-.69l3.737-1.33v1.515l-2.69.963c-.474.17-.547.411-.161.538.386.126 1.085.09 1.56-.08l1.29-.469v1.356l-.257.043a8.454 8.454 0 0 1-4.018-.323Z"></path></svg>`), Playstation[FILENAME], [[1, 0, [[1, 172]]]]);
function Playstation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Playstation);
  var svg = root1524();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-playstation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Playstation = hmr(Playstation, () => Playstation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Playstation[HMR].source;
    set(Playstation[HMR].source, module.default[HMR].original);
  });
}
var Playstation_default = Playstation;
mark_module_end(Playstation);

// node_modules/svelte-bootstrap-icons/lib/PlugFill.svelte
mark_module_start();
PlugFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlugFill.svelte";
var root1525 = add_locations(ns_template(`<svg><!><path d="M6 0a.5.5 0 0 1 .5.5V3h3V.5a.5.5 0 0 1 1 0V3h1a.5.5 0 0 1 .5.5v3A3.5 3.5 0 0 1 8.5 10c-.002.434-.01.845-.04 1.22-.041.514-.126 1.003-.317 1.424a2.083 2.083 0 0 1-.97 1.028C6.725 13.9 6.169 14 5.5 14c-.998 0-1.61.33-1.974.718A1.922 1.922 0 0 0 3 16H2c0-.616.232-1.367.797-1.968C3.374 13.42 4.261 13 5.5 13c.581 0 .962-.088 1.218-.219.241-.123.4-.3.514-.55.121-.266.193-.621.23-1.09.027-.34.035-.718.037-1.141A3.5 3.5 0 0 1 4 6.5v-3a.5.5 0 0 1 .5-.5h1V.5A.5.5 0 0 1 6 0z"></path></svg>`), PlugFill[FILENAME], [[1, 0, [[1, 170]]]]);
function PlugFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlugFill);
  var svg = root1525();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plug-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlugFill = hmr(PlugFill, () => PlugFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlugFill[HMR].source;
    set(PlugFill[HMR].source, module.default[HMR].original);
  });
}
var PlugFill_default = PlugFill;
mark_module_end(PlugFill);

// node_modules/svelte-bootstrap-icons/lib/Plug.svelte
mark_module_start();
Plug[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Plug.svelte";
var root1526 = add_locations(ns_template(`<svg><!><path d="M6 0a.5.5 0 0 1 .5.5V3h3V.5a.5.5 0 0 1 1 0V3h1a.5.5 0 0 1 .5.5v3A3.5 3.5 0 0 1 8.5 10c-.002.434-.01.845-.04 1.22-.041.514-.126 1.003-.317 1.424a2.083 2.083 0 0 1-.97 1.028C6.725 13.9 6.169 14 5.5 14c-.998 0-1.61.33-1.974.718A1.922 1.922 0 0 0 3 16H2c0-.616.232-1.367.797-1.968C3.374 13.42 4.261 13 5.5 13c.581 0 .962-.088 1.218-.219.241-.123.4-.3.514-.55.121-.266.193-.621.23-1.09.027-.34.035-.718.037-1.141A3.5 3.5 0 0 1 4 6.5v-3a.5.5 0 0 1 .5-.5h1V.5A.5.5 0 0 1 6 0zM5 4v2.5A2.5 2.5 0 0 0 7.5 9h1A2.5 2.5 0 0 0 11 6.5V4H5z"></path></svg>`), Plug[FILENAME], [[1, 0, [[1, 165]]]]);
function Plug($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Plug);
  var svg = root1526();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plug", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plug = hmr(Plug, () => Plug[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plug[HMR].source;
    set(Plug[HMR].source, module.default[HMR].original);
  });
}
var Plug_default = Plug;
mark_module_end(Plug);

// node_modules/svelte-bootstrap-icons/lib/Plugin.svelte
mark_module_start();
Plugin[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Plugin.svelte";
var root1527 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1 8a7 7 0 1 1 2.898 5.673c-.167-.121-.216-.406-.002-.62l1.8-1.8a3.5 3.5 0 0 0 4.572-.328l1.414-1.415a.5.5 0 0 0 0-.707l-.707-.707 1.559-1.563a.5.5 0 1 0-.708-.706l-1.559 1.562-1.414-1.414 1.56-1.562a.5.5 0 1 0-.707-.706l-1.56 1.56-.707-.706a.5.5 0 0 0-.707 0L5.318 5.975a3.5 3.5 0 0 0-.328 4.571l-1.8 1.8c-.58.58-.62 1.6.121 2.137A8 8 0 1 0 0 8a.5.5 0 0 0 1 0Z"></path></svg>`), Plugin[FILENAME], [[1, 0, [[1, 167]]]]);
function Plugin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Plugin);
  var svg = root1527();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plugin", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plugin = hmr(Plugin, () => Plugin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plugin[HMR].source;
    set(Plugin[HMR].source, module.default[HMR].original);
  });
}
var Plugin_default = Plugin;
mark_module_end(Plugin);

// node_modules/svelte-bootstrap-icons/lib/PlusCircleDotted.svelte
mark_module_start();
PlusCircleDotted[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlusCircleDotted.svelte";
var root1528 = add_locations(ns_template(`<svg><!><path d="M8 0c-.176 0-.35.006-.523.017l.064.998a7.117 7.117 0 0 1 .918 0l.064-.998A8.113 8.113 0 0 0 8 0zM6.44.152c-.346.069-.684.16-1.012.27l.321.948c.287-.098.582-.177.884-.237L6.44.153zm4.132.271a7.946 7.946 0 0 0-1.011-.27l-.194.98c.302.06.597.14.884.237l.321-.947zm1.873.925a8 8 0 0 0-.906-.524l-.443.896c.275.136.54.29.793.459l.556-.831zM4.46.824c-.314.155-.616.33-.905.524l.556.83a7.07 7.07 0 0 1 .793-.458L4.46.824zM2.725 1.985c-.262.23-.51.478-.74.74l.752.66c.202-.23.418-.446.648-.648l-.66-.752zm11.29.74a8.058 8.058 0 0 0-.74-.74l-.66.752c.23.202.447.418.648.648l.752-.66zm1.161 1.735a7.98 7.98 0 0 0-.524-.905l-.83.556c.169.253.322.518.458.793l.896-.443zM1.348 3.555c-.194.289-.37.591-.524.906l.896.443c.136-.275.29-.54.459-.793l-.831-.556zM.423 5.428a7.945 7.945 0 0 0-.27 1.011l.98.194c.06-.302.14-.597.237-.884l-.947-.321zM15.848 6.44a7.943 7.943 0 0 0-.27-1.012l-.948.321c.098.287.177.582.237.884l.98-.194zM.017 7.477a8.113 8.113 0 0 0 0 1.046l.998-.064a7.117 7.117 0 0 1 0-.918l-.998-.064zM16 8a8.1 8.1 0 0 0-.017-.523l-.998.064a7.11 7.11 0 0 1 0 .918l.998.064A8.1 8.1 0 0 0 16 8zM.152 9.56c.069.346.16.684.27 1.012l.948-.321a6.944 6.944 0 0 1-.237-.884l-.98.194zm15.425 1.012c.112-.328.202-.666.27-1.011l-.98-.194c-.06.302-.14.597-.237.884l.947.321zM.824 11.54a8 8 0 0 0 .524.905l.83-.556a6.999 6.999 0 0 1-.458-.793l-.896.443zm13.828.905c.194-.289.37-.591.524-.906l-.896-.443c-.136.275-.29.54-.459.793l.831.556zm-12.667.83c.23.262.478.51.74.74l.66-.752a7.047 7.047 0 0 1-.648-.648l-.752.66zm11.29.74c.262-.23.51-.478.74-.74l-.752-.66c-.201.23-.418.447-.648.648l.66.752zm-1.735 1.161c.314-.155.616-.33.905-.524l-.556-.83a7.07 7.07 0 0 1-.793.458l.443.896zm-7.985-.524c.289.194.591.37.906.524l.443-.896a6.998 6.998 0 0 1-.793-.459l-.556.831zm1.873.925c.328.112.666.202 1.011.27l.194-.98a6.953 6.953 0 0 1-.884-.237l-.321.947zm4.132.271a7.944 7.944 0 0 0 1.012-.27l-.321-.948a6.954 6.954 0 0 1-.884.237l.194.98zm-2.083.135a8.1 8.1 0 0 0 1.046 0l-.064-.998a7.11 7.11 0 0 1-.918 0l-.064.998zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z"></path></svg>`), PlusCircleDotted[FILENAME], [[1, 0, [[1, 179]]]]);
function PlusCircleDotted($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlusCircleDotted);
  var svg = root1528();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plus-circle-dotted", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusCircleDotted = hmr(PlusCircleDotted, () => PlusCircleDotted[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusCircleDotted[HMR].source;
    set(PlusCircleDotted[HMR].source, module.default[HMR].original);
  });
}
var PlusCircleDotted_default = PlusCircleDotted;
mark_module_end(PlusCircleDotted);

// node_modules/svelte-bootstrap-icons/lib/PlusCircleFill.svelte
mark_module_start();
PlusCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlusCircleFill.svelte";
var root1529 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z"></path></svg>`), PlusCircleFill[FILENAME], [[1, 0, [[1, 177]]]]);
function PlusCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlusCircleFill);
  var svg = root1529();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plus-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusCircleFill = hmr(PlusCircleFill, () => PlusCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusCircleFill[HMR].source;
    set(PlusCircleFill[HMR].source, module.default[HMR].original);
  });
}
var PlusCircleFill_default = PlusCircleFill;
mark_module_end(PlusCircleFill);

// node_modules/svelte-bootstrap-icons/lib/PlusCircle.svelte
mark_module_start();
PlusCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlusCircle.svelte";
var root1530 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"></path></svg>`), PlusCircle[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function PlusCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlusCircle);
  var svg = root1530();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plus-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusCircle = hmr(PlusCircle, () => PlusCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusCircle[HMR].source;
    set(PlusCircle[HMR].source, module.default[HMR].original);
  });
}
var PlusCircle_default = PlusCircle;
mark_module_end(PlusCircle);

// node_modules/svelte-bootstrap-icons/lib/PlusLg.svelte
mark_module_start();
PlusLg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlusLg.svelte";
var root1531 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"></path></svg>`), PlusLg[FILENAME], [[1, 0, [[1, 168]]]]);
function PlusLg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlusLg);
  var svg = root1531();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plus-lg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusLg = hmr(PlusLg, () => PlusLg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusLg[HMR].source;
    set(PlusLg[HMR].source, module.default[HMR].original);
  });
}
var PlusLg_default = PlusLg;
mark_module_end(PlusLg);

// node_modules/svelte-bootstrap-icons/lib/PlusSlashMinus.svelte
mark_module_start();
PlusSlashMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlusSlashMinus.svelte";
var root1532 = add_locations(ns_template(`<svg><!><path d="m1.854 14.854 13-13a.5.5 0 0 0-.708-.708l-13 13a.5.5 0 0 0 .708.708ZM4 1a.5.5 0 0 1 .5.5v2h2a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0v-2h-2a.5.5 0 0 1 0-1h2v-2A.5.5 0 0 1 4 1Zm5 11a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5A.5.5 0 0 1 9 12Z"></path></svg>`), PlusSlashMinus[FILENAME], [[1, 0, [[1, 177]]]]);
function PlusSlashMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlusSlashMinus);
  var svg = root1532();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plus-slash-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusSlashMinus = hmr(PlusSlashMinus, () => PlusSlashMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusSlashMinus[HMR].source;
    set(PlusSlashMinus[HMR].source, module.default[HMR].original);
  });
}
var PlusSlashMinus_default = PlusSlashMinus;
mark_module_end(PlusSlashMinus);

// node_modules/svelte-bootstrap-icons/lib/PlusSquareDotted.svelte
mark_module_start();
PlusSquareDotted[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlusSquareDotted.svelte";
var root1533 = add_locations(ns_template(`<svg><!><path d="M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z"></path></svg>`), PlusSquareDotted[FILENAME], [[1, 0, [[1, 179]]]]);
function PlusSquareDotted($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlusSquareDotted);
  var svg = root1533();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plus-square-dotted", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusSquareDotted = hmr(PlusSquareDotted, () => PlusSquareDotted[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusSquareDotted[HMR].source;
    set(PlusSquareDotted[HMR].source, module.default[HMR].original);
  });
}
var PlusSquareDotted_default = PlusSquareDotted;
mark_module_end(PlusSquareDotted);

// node_modules/svelte-bootstrap-icons/lib/PlusSquareFill.svelte
mark_module_start();
PlusSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlusSquareFill.svelte";
var root1534 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0z"></path></svg>`), PlusSquareFill[FILENAME], [[1, 0, [[1, 177]]]]);
function PlusSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlusSquareFill);
  var svg = root1534();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plus-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusSquareFill = hmr(PlusSquareFill, () => PlusSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusSquareFill[HMR].source;
    set(PlusSquareFill[HMR].source, module.default[HMR].original);
  });
}
var PlusSquareFill_default = PlusSquareFill;
mark_module_end(PlusSquareFill);

// node_modules/svelte-bootstrap-icons/lib/PlusSquare.svelte
mark_module_start();
PlusSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PlusSquare.svelte";
var root1535 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"></path></svg>`), PlusSquare[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function PlusSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PlusSquare);
  var svg = root1535();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plus-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusSquare = hmr(PlusSquare, () => PlusSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusSquare[HMR].source;
    set(PlusSquare[HMR].source, module.default[HMR].original);
  });
}
var PlusSquare_default = PlusSquare;
mark_module_end(PlusSquare);

// node_modules/svelte-bootstrap-icons/lib/Plus.svelte
mark_module_start();
Plus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Plus.svelte";
var root1536 = add_locations(ns_template(`<svg><!><path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"></path></svg>`), Plus[FILENAME], [[1, 0, [[1, 165]]]]);
function Plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Plus);
  var svg = root1536();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plus = hmr(Plus, () => Plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plus[HMR].source;
    set(Plus[HMR].source, module.default[HMR].original);
  });
}
var Plus_default = Plus;
mark_module_end(Plus);

// node_modules/svelte-bootstrap-icons/lib/PostageFill.svelte
mark_module_start();
PostageFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PostageFill.svelte";
var root1537 = add_locations(ns_template(`<svg><!><path d="M4.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-7Z"></path><path d="M3.5 1a1 1 0 0 0 1-1h1a1 1 0 0 0 2 0h1a1 1 0 0 0 2 0h1a1 1 0 1 0 2 0H15v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1h-1.5a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0H1v-1a1 1 0 1 0 0-2v-1a1 1 0 1 0 0-2V9a1 1 0 1 0 0-2V6a1 1 0 0 0 0-2V3a1 1 0 0 0 0-2V0h1.5a1 1 0 0 0 1 1ZM3 3v10a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Z"></path></svg>`), PostageFill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function PostageFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PostageFill);
  var svg = root1537();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-postage-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PostageFill = hmr(PostageFill, () => PostageFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PostageFill[HMR].source;
    set(PostageFill[HMR].source, module.default[HMR].original);
  });
}
var PostageFill_default = PostageFill;
mark_module_end(PostageFill);

// node_modules/svelte-bootstrap-icons/lib/PostageHeartFill.svelte
mark_module_start();
PostageHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PostageHeartFill.svelte";
var root1538 = add_locations(ns_template(`<svg><!><path d="M4.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-7ZM8 11C2.175 7.236 6.336 4.31 8 5.982 9.664 4.309 13.825 7.236 8 11Z"></path><path d="M4.5 0a1 1 0 0 1-2 0H1v1a1 1 0 0 1 0 2v1a1 1 0 0 1 0 2v1a1 1 0 0 1 0 2v1a1 1 0 1 1 0 2v1a1 1 0 1 1 0 2v1h1.5a1 1 0 1 1 2 0h1a1 1 0 1 1 2 0h1a1 1 0 1 1 2 0h1a1 1 0 1 1 2 0H15v-1a1 1 0 1 1 0-2v-1a1 1 0 1 1 0-2V9a1 1 0 1 1 0-2V6a1 1 0 1 1 0-2V3a1 1 0 1 1 0-2V0h-1.5a1 1 0 1 1-2 0h-1a1 1 0 1 1-2 0h-1a1 1 0 0 1-2 0h-1ZM4 14a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H4Z"></path></svg>`), PostageHeartFill[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function PostageHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PostageHeartFill);
  var svg = root1538();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-postage-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PostageHeartFill = hmr(PostageHeartFill, () => PostageHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PostageHeartFill[HMR].source;
    set(PostageHeartFill[HMR].source, module.default[HMR].original);
  });
}
var PostageHeartFill_default = PostageHeartFill;
mark_module_end(PostageHeartFill);

// node_modules/svelte-bootstrap-icons/lib/PostageHeart.svelte
mark_module_start();
PostageHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PostageHeart.svelte";
var root1539 = add_locations(ns_template(`<svg><!><path d="M3.5 1a1 1 0 0 0 1-1h1a1 1 0 0 0 2 0h1a1 1 0 0 0 2 0h1a1 1 0 1 0 2 0H15v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1h-1.5a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0H1v-1a1 1 0 1 0 0-2v-1a1 1 0 1 0 0-2V9a1 1 0 1 0 0-2V6a1 1 0 0 0 0-2V3a1 1 0 0 0 0-2V0h1.5a1 1 0 0 0 1 1ZM3 3v10a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Z"></path><path d="M8 11C2.175 7.236 6.336 4.31 8 5.982 9.664 4.309 13.825 7.236 8 11Z"></path></svg>`), PostageHeart[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PostageHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PostageHeart);
  var svg = root1539();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-postage-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PostageHeart = hmr(PostageHeart, () => PostageHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PostageHeart[HMR].source;
    set(PostageHeart[HMR].source, module.default[HMR].original);
  });
}
var PostageHeart_default = PostageHeart;
mark_module_end(PostageHeart);

// node_modules/svelte-bootstrap-icons/lib/Postage.svelte
mark_module_start();
Postage[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Postage.svelte";
var root1540 = add_locations(ns_template(`<svg><!><path d="M4.75 3a.75.75 0 0 0-.75.75v8.5c0 .414.336.75.75.75h6.5a.75.75 0 0 0 .75-.75v-8.5a.75.75 0 0 0-.75-.75h-6.5ZM11 12H5V4h6v8Z"></path><path d="M3.5 1a1 1 0 0 0 1-1h1a1 1 0 0 0 2 0h1a1 1 0 0 0 2 0h1a1 1 0 1 0 2 0H15v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1h-1.5a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0H1v-1a1 1 0 1 0 0-2v-1a1 1 0 1 0 0-2V9a1 1 0 1 0 0-2V6a1 1 0 0 0 0-2V3a1 1 0 0 0 0-2V0h1.5a1 1 0 0 0 1 1ZM3 3v10a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Z"></path></svg>`), Postage[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Postage($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Postage);
  var svg = root1540();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-postage", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Postage = hmr(Postage, () => Postage[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Postage[HMR].source;
    set(Postage[HMR].source, module.default[HMR].original);
  });
}
var Postage_default = Postage;
mark_module_end(Postage);

// node_modules/svelte-bootstrap-icons/lib/PostcardFill.svelte
mark_module_start();
PostcardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PostcardFill.svelte";
var root1541 = add_locations(ns_template(`<svg><!><path d="M11 8h2V6h-2v2Z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm8.5.5a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7ZM2 5.5a.5.5 0 0 0 .5.5H6a.5.5 0 0 0 0-1H2.5a.5.5 0 0 0-.5.5ZM2.5 7a.5.5 0 0 0 0 1H6a.5.5 0 0 0 0-1H2.5ZM2 9.5a.5.5 0 0 0 .5.5H6a.5.5 0 0 0 0-1H2.5a.5.5 0 0 0-.5.5Zm8-4v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5Z"></path></svg>`), PostcardFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function PostcardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PostcardFill);
  var svg = root1541();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-postcard-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PostcardFill = hmr(PostcardFill, () => PostcardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PostcardFill[HMR].source;
    set(PostcardFill[HMR].source, module.default[HMR].original);
  });
}
var PostcardFill_default = PostcardFill;
mark_module_end(PostcardFill);

// node_modules/svelte-bootstrap-icons/lib/PostcardHeartFill.svelte
mark_module_start();
PostcardHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PostcardHeartFill.svelte";
var root1542 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2Zm6 2.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0Zm3.5.878c1.482-1.42 4.795 1.392 0 4.622-4.795-3.23-1.482-6.043 0-4.622ZM2 5.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5Z"></path></svg>`), PostcardHeartFill[FILENAME], [[1, 0, [[1, 180]]]]);
function PostcardHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PostcardHeartFill);
  var svg = root1542();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-postcard-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PostcardHeartFill = hmr(PostcardHeartFill, () => PostcardHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PostcardHeartFill[HMR].source;
    set(PostcardHeartFill[HMR].source, module.default[HMR].original);
  });
}
var PostcardHeartFill_default = PostcardHeartFill;
mark_module_end(PostcardHeartFill);

// node_modules/svelte-bootstrap-icons/lib/PostcardHeart.svelte
mark_module_start();
PostcardHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PostcardHeart.svelte";
var root1543 = add_locations(ns_template(`<svg><!><path d="M8 4.5a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7Zm3.5.878c1.482-1.42 4.795 1.392 0 4.622-4.795-3.23-1.482-6.043 0-4.622ZM2.5 5a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3Zm0 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3Zm0 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3Z"></path><path fill-rule="evenodd" d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H2Z"></path></svg>`), PostcardHeart[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function PostcardHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PostcardHeart);
  var svg = root1543();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-postcard-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PostcardHeart = hmr(PostcardHeart, () => PostcardHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PostcardHeart[HMR].source;
    set(PostcardHeart[HMR].source, module.default[HMR].original);
  });
}
var PostcardHeart_default = PostcardHeart;
mark_module_end(PostcardHeart);

// node_modules/svelte-bootstrap-icons/lib/Postcard.svelte
mark_module_start();
Postcard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Postcard.svelte";
var root1544 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2ZM1 4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4Zm7.5.5a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7ZM2 5.5a.5.5 0 0 1 .5-.5H6a.5.5 0 0 1 0 1H2.5a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5H6a.5.5 0 0 1 0 1H2.5a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5H6a.5.5 0 0 1 0 1H2.5a.5.5 0 0 1-.5-.5ZM10.5 5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3ZM13 8h-2V6h2v2Z"></path></svg>`), Postcard[FILENAME], [[1, 0, [[1, 169]]]]);
function Postcard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Postcard);
  var svg = root1544();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-postcard", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Postcard = hmr(Postcard, () => Postcard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Postcard[HMR].source;
    set(Postcard[HMR].source, module.default[HMR].original);
  });
}
var Postcard_default = Postcard;
mark_module_end(Postcard);

// node_modules/svelte-bootstrap-icons/lib/Power.svelte
mark_module_start();
Power[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Power.svelte";
var root1545 = add_locations(ns_template(`<svg><!><path d="M7.5 1v7h1V1h-1z"></path><path d="M3 8.812a4.999 4.999 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812z"></path></svg>`), Power[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Power($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Power);
  var svg = root1545();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-power", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Power = hmr(Power, () => Power[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Power[HMR].source;
    set(Power[HMR].source, module.default[HMR].original);
  });
}
var Power_default = Power;
mark_module_end(Power);

// node_modules/svelte-bootstrap-icons/lib/Prescription.svelte
mark_module_start();
Prescription[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Prescription.svelte";
var root1546 = add_locations(ns_template(`<svg><!><path d="M5.5 6a.5.5 0 0 0-.5.5v4a.5.5 0 0 0 1 0V9h.293l2 2-1.147 1.146a.5.5 0 0 0 .708.708L9 11.707l1.146 1.147a.5.5 0 0 0 .708-.708L9.707 11l1.147-1.146a.5.5 0 0 0-.708-.708L9 10.293 7.695 8.987A1.5 1.5 0 0 0 7.5 6h-2ZM6 7h1.5a.5.5 0 0 1 0 1H6V7Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1v10.5a1.5 1.5 0 0 1-1.5 1.5h-7A1.5 1.5 0 0 1 3 14.5V4a1 1 0 0 1-1-1V1Zm2 3v10.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5V4H4ZM3 3h10V1H3v2Z"></path></svg>`), Prescription[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function Prescription($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Prescription);
  var svg = root1546();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-prescription", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Prescription = hmr(Prescription, () => Prescription[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Prescription[HMR].source;
    set(Prescription[HMR].source, module.default[HMR].original);
  });
}
var Prescription_default = Prescription;
mark_module_end(Prescription);

// node_modules/svelte-bootstrap-icons/lib/Prescription2.svelte
mark_module_start();
Prescription2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Prescription2.svelte";
var root1547 = add_locations(ns_template(`<svg><!><path d="M7 6h2v2h2v2H9v2H7v-2H5V8h2V6Z"></path><path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1v10.5a1.5 1.5 0 0 1-1.5 1.5h-7A1.5 1.5 0 0 1 3 14.5V4a1 1 0 0 1-1-1V1Zm2 3v10.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5V4H4ZM3 3h10V1H3v2Z"></path></svg>`), Prescription2[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function Prescription2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Prescription2);
  var svg = root1547();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-prescription2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Prescription2 = hmr(Prescription2, () => Prescription2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Prescription2[HMR].source;
    set(Prescription2[HMR].source, module.default[HMR].original);
  });
}
var Prescription2_default = Prescription2;
mark_module_end(Prescription2);

// node_modules/svelte-bootstrap-icons/lib/PrinterFill.svelte
mark_module_start();
PrinterFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PrinterFill.svelte";
var root1548 = add_locations(ns_template(`<svg><!><path d="M5 1a2 2 0 0 0-2 2v1h10V3a2 2 0 0 0-2-2H5zm6 8H5a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1z"></path><path d="M0 7a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2h-1v-2a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2H2a2 2 0 0 1-2-2V7zm2.5 1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1z"></path></svg>`), PrinterFill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function PrinterFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PrinterFill);
  var svg = root1548();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-printer-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PrinterFill = hmr(PrinterFill, () => PrinterFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PrinterFill[HMR].source;
    set(PrinterFill[HMR].source, module.default[HMR].original);
  });
}
var PrinterFill_default = PrinterFill;
mark_module_end(PrinterFill);

// node_modules/svelte-bootstrap-icons/lib/Printer.svelte
mark_module_start();
Printer[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Printer.svelte";
var root1549 = add_locations(ns_template(`<svg><!><path d="M2.5 8a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1z"></path><path d="M5 1a2 2 0 0 0-2 2v2H2a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h1v1a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-1h1a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-1V3a2 2 0 0 0-2-2H5zM4 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v2H4V3zm1 5a2 2 0 0 0-2 2v1H2a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-1v-1a2 2 0 0 0-2-2H5zm7 2v3a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1z"></path></svg>`), Printer[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Printer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Printer);
  var svg = root1549();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-printer", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Printer = hmr(Printer, () => Printer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Printer[HMR].source;
    set(Printer[HMR].source, module.default[HMR].original);
  });
}
var Printer_default = Printer;
mark_module_end(Printer);

// node_modules/svelte-bootstrap-icons/lib/ProjectorFill.svelte
mark_module_start();
ProjectorFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ProjectorFill.svelte";
var root1550 = add_locations(ns_template(`<svg><!><path d="M2 4a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2 1 1 0 0 0 1 1h1a1 1 0 0 0 1-1h6a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1 2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H2Zm.5 2h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1 0-1ZM14 7.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Zm-12 1a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5Z"></path></svg>`), ProjectorFill[FILENAME], [[1, 0, [[1, 175]]]]);
function ProjectorFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ProjectorFill);
  var svg = root1550();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-projector-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ProjectorFill = hmr(ProjectorFill, () => ProjectorFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ProjectorFill[HMR].source;
    set(ProjectorFill[HMR].source, module.default[HMR].original);
  });
}
var ProjectorFill_default = ProjectorFill;
mark_module_end(ProjectorFill);

// node_modules/svelte-bootstrap-icons/lib/Projector.svelte
mark_module_start();
Projector[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Projector.svelte";
var root1551 = add_locations(ns_template(`<svg><!><path d="M14 7.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM2.5 6a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1h-4Zm0 2a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1h-4Z"></path><path d="M0 6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2 1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1H5a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1 2 2 0 0 1-2-2V6Zm2-1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H2Z"></path></svg>`), Projector[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Projector($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Projector);
  var svg = root1551();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-projector", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Projector = hmr(Projector, () => Projector[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Projector[HMR].source;
    set(Projector[HMR].source, module.default[HMR].original);
  });
}
var Projector_default = Projector;
mark_module_end(Projector);

// node_modules/svelte-bootstrap-icons/lib/PuzzleFill.svelte
mark_module_start();
PuzzleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/PuzzleFill.svelte";
var root1552 = add_locations(ns_template(`<svg><!><path d="M3.112 3.645A1.5 1.5 0 0 1 4.605 2H7a.5.5 0 0 1 .5.5v.382c0 .696-.497 1.182-.872 1.469a.459.459 0 0 0-.115.118.113.113 0 0 0-.012.025L6.5 4.5v.003l.003.01c.004.01.014.028.036.053a.86.86 0 0 0 .27.194C7.09 4.9 7.51 5 8 5c.492 0 .912-.1 1.19-.24a.86.86 0 0 0 .271-.194.213.213 0 0 0 .036-.054l.003-.01v-.008a.112.112 0 0 0-.012-.025.459.459 0 0 0-.115-.118c-.375-.287-.872-.773-.872-1.469V2.5A.5.5 0 0 1 9 2h2.395a1.5 1.5 0 0 1 1.493 1.645L12.645 6.5h.237c.195 0 .42-.147.675-.48.21-.274.528-.52.943-.52.568 0 .947.447 1.154.862C15.877 6.807 16 7.387 16 8s-.123 1.193-.346 1.638c-.207.415-.586.862-1.154.862-.415 0-.733-.246-.943-.52-.255-.333-.48-.48-.675-.48h-.237l.243 2.855A1.5 1.5 0 0 1 11.395 14H9a.5.5 0 0 1-.5-.5v-.382c0-.696.497-1.182.872-1.469a.459.459 0 0 0 .115-.118.113.113 0 0 0 .012-.025L9.5 11.5v-.003l-.003-.01a.214.214 0 0 0-.036-.053.859.859 0 0 0-.27-.194C8.91 11.1 8.49 11 8 11c-.491 0-.912.1-1.19.24a.859.859 0 0 0-.271.194.214.214 0 0 0-.036.054l-.003.01v.002l.001.006a.113.113 0 0 0 .012.025c.016.027.05.068.115.118.375.287.872.773.872 1.469v.382a.5.5 0 0 1-.5.5H4.605a1.5 1.5 0 0 1-1.493-1.645L3.356 9.5h-.238c-.195 0-.42.147-.675.48-.21.274-.528.52-.943.52-.568 0-.947-.447-1.154-.862C.123 9.193 0 8.613 0 8s.123-1.193.346-1.638C.553 5.947.932 5.5 1.5 5.5c.415 0 .733.246.943.52.255.333.48.48.675.48h.238l-.244-2.855z"></path></svg>`), PuzzleFill[FILENAME], [[1, 0, [[1, 172]]]]);
function PuzzleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, PuzzleFill);
  var svg = root1552();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-puzzle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PuzzleFill = hmr(PuzzleFill, () => PuzzleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PuzzleFill[HMR].source;
    set(PuzzleFill[HMR].source, module.default[HMR].original);
  });
}
var PuzzleFill_default = PuzzleFill;
mark_module_end(PuzzleFill);

// node_modules/svelte-bootstrap-icons/lib/Puzzle.svelte
mark_module_start();
Puzzle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Puzzle.svelte";
var root1553 = add_locations(ns_template(`<svg><!><path d="M3.112 3.645A1.5 1.5 0 0 1 4.605 2H7a.5.5 0 0 1 .5.5v.382c0 .696-.497 1.182-.872 1.469a.459.459 0 0 0-.115.118.113.113 0 0 0-.012.025L6.5 4.5v.003l.003.01c.004.01.014.028.036.053a.86.86 0 0 0 .27.194C7.09 4.9 7.51 5 8 5c.492 0 .912-.1 1.19-.24a.86.86 0 0 0 .271-.194.213.213 0 0 0 .039-.063v-.009a.112.112 0 0 0-.012-.025.459.459 0 0 0-.115-.118c-.375-.287-.872-.773-.872-1.469V2.5A.5.5 0 0 1 9 2h2.395a1.5 1.5 0 0 1 1.493 1.645L12.645 6.5h.237c.195 0 .42-.147.675-.48.21-.274.528-.52.943-.52.568 0 .947.447 1.154.862C15.877 6.807 16 7.387 16 8s-.123 1.193-.346 1.638c-.207.415-.586.862-1.154.862-.415 0-.733-.246-.943-.52-.255-.333-.48-.48-.675-.48h-.237l.243 2.855A1.5 1.5 0 0 1 11.395 14H9a.5.5 0 0 1-.5-.5v-.382c0-.696.497-1.182.872-1.469a.459.459 0 0 0 .115-.118.113.113 0 0 0 .012-.025L9.5 11.5v-.003a.214.214 0 0 0-.039-.064.859.859 0 0 0-.27-.193C8.91 11.1 8.49 11 8 11c-.491 0-.912.1-1.19.24a.859.859 0 0 0-.271.194.214.214 0 0 0-.039.063v.003l.001.006a.113.113 0 0 0 .012.025c.016.027.05.068.115.118.375.287.872.773.872 1.469v.382a.5.5 0 0 1-.5.5H4.605a1.5 1.5 0 0 1-1.493-1.645L3.356 9.5h-.238c-.195 0-.42.147-.675.48-.21.274-.528.52-.943.52-.568 0-.947-.447-1.154-.862C.123 9.193 0 8.613 0 8s.123-1.193.346-1.638C.553 5.947.932 5.5 1.5 5.5c.415 0 .733.246.943.52.255.333.48.48.675.48h.238l-.244-2.855zM4.605 3a.5.5 0 0 0-.498.55l.001.007.29 3.4A.5.5 0 0 1 3.9 7.5h-.782c-.696 0-1.182-.497-1.469-.872a.459.459 0 0 0-.118-.115.112.112 0 0 0-.025-.012L1.5 6.5h-.003a.213.213 0 0 0-.064.039.86.86 0 0 0-.193.27C1.1 7.09 1 7.51 1 8c0 .491.1.912.24 1.19.07.14.14.225.194.271a.213.213 0 0 0 .063.039H1.5l.006-.001a.112.112 0 0 0 .025-.012.459.459 0 0 0 .118-.115c.287-.375.773-.872 1.469-.872H3.9a.5.5 0 0 1 .498.542l-.29 3.408a.5.5 0 0 0 .497.55h1.878c-.048-.166-.195-.352-.463-.557-.274-.21-.52-.528-.52-.943 0-.568.447-.947.862-1.154C6.807 10.123 7.387 10 8 10s1.193.123 1.638.346c.415.207.862.586.862 1.154 0 .415-.246.733-.52.943-.268.205-.415.39-.463.557h1.878a.5.5 0 0 0 .498-.55l-.001-.007-.29-3.4A.5.5 0 0 1 12.1 8.5h.782c.696 0 1.182.497 1.469.872.05.065.091.099.118.115.013.008.021.01.025.012a.02.02 0 0 0 .006.001h.003a.214.214 0 0 0 .064-.039.86.86 0 0 0 .193-.27c.14-.28.24-.7.24-1.191 0-.492-.1-.912-.24-1.19a.86.86 0 0 0-.194-.271.215.215 0 0 0-.063-.039H14.5l-.006.001a.113.113 0 0 0-.025.012.459.459 0 0 0-.118.115c-.287.375-.773.872-1.469.872H12.1a.5.5 0 0 1-.498-.543l.29-3.407a.5.5 0 0 0-.497-.55H9.517c.048.166.195.352.463.557.274.21.52.528.52.943 0 .568-.447.947-.862 1.154C9.193 5.877 8.613 6 8 6s-1.193-.123-1.638-.346C5.947 5.447 5.5 5.068 5.5 4.5c0-.415.246-.733.52-.943.268-.205.415-.39.463-.557H4.605z"></path></svg>`), Puzzle[FILENAME], [[1, 0, [[1, 167]]]]);
function Puzzle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Puzzle);
  var svg = root1553();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-puzzle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Puzzle = hmr(Puzzle, () => Puzzle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Puzzle[HMR].source;
    set(Puzzle[HMR].source, module.default[HMR].original);
  });
}
var Puzzle_default = Puzzle;
mark_module_end(Puzzle);

// node_modules/svelte-bootstrap-icons/lib/QrCodeScan.svelte
mark_module_start();
QrCodeScan[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QrCodeScan.svelte";
var root1554 = add_locations(ns_template(`<svg><!><path d="M0 .5A.5.5 0 0 1 .5 0h3a.5.5 0 0 1 0 1H1v2.5a.5.5 0 0 1-1 0v-3Zm12 0a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0V1h-2.5a.5.5 0 0 1-.5-.5ZM.5 12a.5.5 0 0 1 .5.5V15h2.5a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5v-3a.5.5 0 0 1 .5-.5Zm15 0a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1 0-1H15v-2.5a.5.5 0 0 1 .5-.5ZM4 4h1v1H4V4Z"></path><path d="M7 2H2v5h5V2ZM3 3h3v3H3V3Zm2 8H4v1h1v-1Z"></path><path d="M7 9H2v5h5V9Zm-4 1h3v3H3v-3Zm8-6h1v1h-1V4Z"></path><path d="M9 2h5v5H9V2Zm1 1v3h3V3h-3ZM8 8v2h1v1H8v1h2v-2h1v2h1v-1h2v-1h-3V8H8Zm2 2H9V9h1v1Zm4 2h-1v1h-2v1h3v-2Zm-4 2v-1H8v1h2Z"></path><path d="M12 9h2V8h-2v1Z"></path></svg>`), QrCodeScan[FILENAME], [
  [
    1,
    0,
    [
      [1, 173],
      [2, 2],
      [3, 2],
      [4, 2],
      [5, 2]
    ]
  ]
]);
function QrCodeScan($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QrCodeScan);
  var svg = root1554();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(5);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-qr-code-scan", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QrCodeScan = hmr(QrCodeScan, () => QrCodeScan[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QrCodeScan[HMR].source;
    set(QrCodeScan[HMR].source, module.default[HMR].original);
  });
}
var QrCodeScan_default = QrCodeScan;
mark_module_end(QrCodeScan);

// node_modules/svelte-bootstrap-icons/lib/QrCode.svelte
mark_module_start();
QrCode[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QrCode.svelte";
var root1555 = add_locations(ns_template(`<svg><!><path d="M2 2h2v2H2V2Z"></path><path d="M6 0v6H0V0h6ZM5 1H1v4h4V1ZM4 12H2v2h2v-2Z"></path><path d="M6 10v6H0v-6h6Zm-5 1v4h4v-4H1Zm11-9h2v2h-2V2Z"></path><path d="M10 0v6h6V0h-6Zm5 1v4h-4V1h4ZM8 1V0h1v2H8v2H7V1h1Zm0 5V4h1v2H8ZM6 8V7h1V6h1v2h1V7h5v1h-4v1H7V8H6Zm0 0v1H2V8H1v1H0V7h3v1h3Zm10 1h-1V7h1v2Zm-1 0h-1v2h2v-1h-1V9Zm-4 0h2v1h-1v1h-1V9Zm2 3v-1h-1v1h-1v1H9v1h3v-2h1Zm0 0h3v1h-2v1h-1v-2Zm-4-1v1h1v-2H7v1h2Z"></path><path d="M7 12h1v3h4v1H7v-4Zm9 2v2h-3v-1h2v-1h1Z"></path></svg>`), QrCode[FILENAME], [
  [
    1,
    0,
    [
      [1, 168],
      [2, 2],
      [3, 2],
      [4, 2],
      [5, 2]
    ]
  ]
]);
function QrCode($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QrCode);
  var svg = root1555();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(5);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-qr-code", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QrCode = hmr(QrCode, () => QrCode[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QrCode[HMR].source;
    set(QrCode[HMR].source, module.default[HMR].original);
  });
}
var QrCode_default = QrCode;
mark_module_end(QrCode);

// node_modules/svelte-bootstrap-icons/lib/QuestionCircleFill.svelte
mark_module_start();
QuestionCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QuestionCircleFill.svelte";
var root1556 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.496 6.033h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286a.237.237 0 0 0 .241.247zm2.325 6.443c.61 0 1.029-.394 1.029-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94 0 .533.425.927 1.01.927z"></path></svg>`), QuestionCircleFill[FILENAME], [[1, 0, [[1, 181]]]]);
function QuestionCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QuestionCircleFill);
  var svg = root1556();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QuestionCircleFill = hmr(QuestionCircleFill, () => QuestionCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QuestionCircleFill[HMR].source;
    set(QuestionCircleFill[HMR].source, module.default[HMR].original);
  });
}
var QuestionCircleFill_default = QuestionCircleFill;
mark_module_end(QuestionCircleFill);

// node_modules/svelte-bootstrap-icons/lib/QuestionCircle.svelte
mark_module_start();
QuestionCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QuestionCircle.svelte";
var root1557 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"></path></svg>`), QuestionCircle[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function QuestionCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QuestionCircle);
  var svg = root1557();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QuestionCircle = hmr(QuestionCircle, () => QuestionCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QuestionCircle[HMR].source;
    set(QuestionCircle[HMR].source, module.default[HMR].original);
  });
}
var QuestionCircle_default = QuestionCircle;
mark_module_end(QuestionCircle);

// node_modules/svelte-bootstrap-icons/lib/QuestionDiamondFill.svelte
mark_module_start();
QuestionDiamondFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QuestionDiamondFill.svelte";
var root1558 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435zM5.495 6.033a.237.237 0 0 1-.24-.247C5.35 4.091 6.737 3.5 8.005 3.5c1.396 0 2.672.73 2.672 2.24 0 1.08-.635 1.594-1.244 2.057-.737.559-1.01.768-1.01 1.486v.105a.25.25 0 0 1-.25.25h-.81a.25.25 0 0 1-.25-.246l-.004-.217c-.038-.927.495-1.498 1.168-1.987.59-.444.965-.736.965-1.371 0-.825-.628-1.168-1.314-1.168-.803 0-1.253.478-1.342 1.134-.018.137-.128.25-.266.25h-.825zm2.325 6.443c-.584 0-1.009-.394-1.009-.927 0-.552.425-.94 1.01-.94.609 0 1.028.388 1.028.94 0 .533-.42.927-1.029.927z"></path></svg>`), QuestionDiamondFill[FILENAME], [[1, 0, [[1, 182]]]]);
function QuestionDiamondFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QuestionDiamondFill);
  var svg = root1558();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question-diamond-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QuestionDiamondFill = hmr(QuestionDiamondFill, () => QuestionDiamondFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QuestionDiamondFill[HMR].source;
    set(QuestionDiamondFill[HMR].source, module.default[HMR].original);
  });
}
var QuestionDiamondFill_default = QuestionDiamondFill;
mark_module_end(QuestionDiamondFill);

// node_modules/svelte-bootstrap-icons/lib/QuestionDiamond.svelte
mark_module_start();
QuestionDiamond[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QuestionDiamond.svelte";
var root1559 = add_locations(ns_template(`<svg><!><path d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435zm1.4.7a.495.495 0 0 0-.7 0L1.134 7.65a.495.495 0 0 0 0 .7l6.516 6.516a.495.495 0 0 0 .7 0l6.516-6.516a.495.495 0 0 0 0-.7L8.35 1.134z"></path><path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"></path></svg>`), QuestionDiamond[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function QuestionDiamond($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QuestionDiamond);
  var svg = root1559();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question-diamond", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QuestionDiamond = hmr(QuestionDiamond, () => QuestionDiamond[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QuestionDiamond[HMR].source;
    set(QuestionDiamond[HMR].source, module.default[HMR].original);
  });
}
var QuestionDiamond_default = QuestionDiamond;
mark_module_end(QuestionDiamond);

// node_modules/svelte-bootstrap-icons/lib/QuestionLg.svelte
mark_module_start();
QuestionLg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QuestionLg.svelte";
var root1560 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4.475 5.458c-.284 0-.514-.237-.47-.517C4.28 3.24 5.576 2 7.825 2c2.25 0 3.767 1.36 3.767 3.215 0 1.344-.665 2.288-1.79 2.973-1.1.659-1.414 1.118-1.414 2.01v.03a.5.5 0 0 1-.5.5h-.77a.5.5 0 0 1-.5-.495l-.003-.2c-.043-1.221.477-2.001 1.645-2.712 1.03-.632 1.397-1.135 1.397-2.028 0-.979-.758-1.698-1.926-1.698-1.009 0-1.71.529-1.938 1.402-.066.254-.278.461-.54.461h-.777ZM7.496 14c.622 0 1.095-.474 1.095-1.09 0-.618-.473-1.092-1.095-1.092-.606 0-1.087.474-1.087 1.091S6.89 14 7.496 14Z"></path></svg>`), QuestionLg[FILENAME], [[1, 0, [[1, 172]]]]);
function QuestionLg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QuestionLg);
  var svg = root1560();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question-lg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QuestionLg = hmr(QuestionLg, () => QuestionLg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QuestionLg[HMR].source;
    set(QuestionLg[HMR].source, module.default[HMR].original);
  });
}
var QuestionLg_default = QuestionLg;
mark_module_end(QuestionLg);

// node_modules/svelte-bootstrap-icons/lib/QuestionOctagonFill.svelte
mark_module_start();
QuestionOctagonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QuestionOctagonFill.svelte";
var root1561 = add_locations(ns_template(`<svg><!><path d="M11.46.146A.5.5 0 0 0 11.107 0H4.893a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146zM5.496 6.033a.237.237 0 0 1-.24-.247C5.35 4.091 6.737 3.5 8.005 3.5c1.396 0 2.672.73 2.672 2.24 0 1.08-.635 1.594-1.244 2.057-.737.559-1.01.768-1.01 1.486v.105a.25.25 0 0 1-.25.25h-.81a.25.25 0 0 1-.25-.246l-.004-.217c-.038-.927.495-1.498 1.168-1.987.59-.444.965-.736.965-1.371 0-.825-.628-1.168-1.314-1.168-.803 0-1.253.478-1.342 1.134-.018.137-.128.25-.266.25h-.825zm2.325 6.443c-.584 0-1.009-.394-1.009-.927 0-.552.425-.94 1.01-.94.609 0 1.028.388 1.028.94 0 .533-.42.927-1.029.927z"></path></svg>`), QuestionOctagonFill[FILENAME], [[1, 0, [[1, 182]]]]);
function QuestionOctagonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QuestionOctagonFill);
  var svg = root1561();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question-octagon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QuestionOctagonFill = hmr(QuestionOctagonFill, () => QuestionOctagonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QuestionOctagonFill[HMR].source;
    set(QuestionOctagonFill[HMR].source, module.default[HMR].original);
  });
}
var QuestionOctagonFill_default = QuestionOctagonFill;
mark_module_end(QuestionOctagonFill);

// node_modules/svelte-bootstrap-icons/lib/QuestionOctagon.svelte
mark_module_start();
QuestionOctagon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QuestionOctagon.svelte";
var root1562 = add_locations(ns_template(`<svg><!><path d="M4.54.146A.5.5 0 0 1 4.893 0h6.214a.5.5 0 0 1 .353.146l4.394 4.394a.5.5 0 0 1 .146.353v6.214a.5.5 0 0 1-.146.353l-4.394 4.394a.5.5 0 0 1-.353.146H4.893a.5.5 0 0 1-.353-.146L.146 11.46A.5.5 0 0 1 0 11.107V4.893a.5.5 0 0 1 .146-.353L4.54.146zM5.1 1 1 5.1v5.8L5.1 15h5.8l4.1-4.1V5.1L10.9 1H5.1z"></path><path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"></path></svg>`), QuestionOctagon[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function QuestionOctagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QuestionOctagon);
  var svg = root1562();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question-octagon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QuestionOctagon = hmr(QuestionOctagon, () => QuestionOctagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QuestionOctagon[HMR].source;
    set(QuestionOctagon[HMR].source, module.default[HMR].original);
  });
}
var QuestionOctagon_default = QuestionOctagon;
mark_module_end(QuestionOctagon);

// node_modules/svelte-bootstrap-icons/lib/QuestionSquareFill.svelte
mark_module_start();
QuestionSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QuestionSquareFill.svelte";
var root1563 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm3.496 6.033a.237.237 0 0 1-.24-.247C5.35 4.091 6.737 3.5 8.005 3.5c1.396 0 2.672.73 2.672 2.24 0 1.08-.635 1.594-1.244 2.057-.737.559-1.01.768-1.01 1.486v.105a.25.25 0 0 1-.25.25h-.81a.25.25 0 0 1-.25-.246l-.004-.217c-.038-.927.495-1.498 1.168-1.987.59-.444.965-.736.965-1.371 0-.825-.628-1.168-1.314-1.168-.803 0-1.253.478-1.342 1.134-.018.137-.128.25-.266.25h-.825zm2.325 6.443c-.584 0-1.009-.394-1.009-.927 0-.552.425-.94 1.01-.94.609 0 1.028.388 1.028.94 0 .533-.42.927-1.029.927z"></path></svg>`), QuestionSquareFill[FILENAME], [[1, 0, [[1, 181]]]]);
function QuestionSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QuestionSquareFill);
  var svg = root1563();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QuestionSquareFill = hmr(QuestionSquareFill, () => QuestionSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QuestionSquareFill[HMR].source;
    set(QuestionSquareFill[HMR].source, module.default[HMR].original);
  });
}
var QuestionSquareFill_default = QuestionSquareFill;
mark_module_end(QuestionSquareFill);

// node_modules/svelte-bootstrap-icons/lib/QuestionSquare.svelte
mark_module_start();
QuestionSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/QuestionSquare.svelte";
var root1564 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"></path></svg>`), QuestionSquare[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function QuestionSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, QuestionSquare);
  var svg = root1564();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  QuestionSquare = hmr(QuestionSquare, () => QuestionSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = QuestionSquare[HMR].source;
    set(QuestionSquare[HMR].source, module.default[HMR].original);
  });
}
var QuestionSquare_default = QuestionSquare;
mark_module_end(QuestionSquare);

// node_modules/svelte-bootstrap-icons/lib/Question.svelte
mark_module_start();
Question[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Question.svelte";
var root1565 = add_locations(ns_template(`<svg><!><path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"></path></svg>`), Question[FILENAME], [[1, 0, [[1, 169]]]]);
function Question($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Question);
  var svg = root1565();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-question", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Question = hmr(Question, () => Question[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Question[HMR].source;
    set(Question[HMR].source, module.default[HMR].original);
  });
}
var Question_default = Question;
mark_module_end(Question);

// node_modules/svelte-bootstrap-icons/lib/Quora.svelte
mark_module_start();
Quora[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Quora.svelte";
var root1566 = add_locations(ns_template(`<svg><!><path d="M8.73 12.476c-.554-1.091-1.204-2.193-2.473-2.193-.242 0-.484.04-.707.142l-.43-.863c.525-.45 1.373-.808 2.464-.808 1.697 0 2.568.818 3.26 1.86.41-.89.605-2.093.605-3.584 0-3.724-1.165-5.636-3.885-5.636-2.68 0-3.839 1.912-3.839 5.636 0 3.704 1.159 5.596 3.84 5.596.425 0 .811-.046 1.166-.15Zm.665 1.3a7.127 7.127 0 0 1-1.83.244C3.994 14.02.5 11.172.5 7.03.5 2.849 3.995 0 7.564 0c3.63 0 7.09 2.828 7.09 7.03 0 2.337-1.09 4.236-2.675 5.464.512.767 1.04 1.277 1.773 1.277.802 0 1.125-.62 1.179-1.105h1.043c.061.647-.262 3.334-3.178 3.334-1.767 0-2.7-1.024-3.4-2.224Z"></path></svg>`), Quora[FILENAME], [[1, 0, [[1, 166]]]]);
function Quora($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Quora);
  var svg = root1566();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-quora", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Quora = hmr(Quora, () => Quora[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Quora[HMR].source;
    set(Quora[HMR].source, module.default[HMR].original);
  });
}
var Quora_default = Quora;
mark_module_end(Quora);

// node_modules/svelte-bootstrap-icons/lib/Quote.svelte
mark_module_start();
Quote[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Quote.svelte";
var root1567 = add_locations(ns_template(`<svg><!><path d="M12 12a1 1 0 0 0 1-1V8.558a1 1 0 0 0-1-1h-1.388c0-.351.021-.703.062-1.054.062-.372.166-.703.31-.992.145-.29.331-.517.559-.683.227-.186.516-.279.868-.279V3c-.579 0-1.085.124-1.52.372a3.322 3.322 0 0 0-1.085.992 4.92 4.92 0 0 0-.62 1.458A7.712 7.712 0 0 0 9 7.558V11a1 1 0 0 0 1 1h2Zm-6 0a1 1 0 0 0 1-1V8.558a1 1 0 0 0-1-1H4.612c0-.351.021-.703.062-1.054.062-.372.166-.703.31-.992.145-.29.331-.517.559-.683.227-.186.516-.279.868-.279V3c-.579 0-1.085.124-1.52.372a3.322 3.322 0 0 0-1.085.992 4.92 4.92 0 0 0-.62 1.458A7.712 7.712 0 0 0 3 7.558V11a1 1 0 0 0 1 1h2Z"></path></svg>`), Quote[FILENAME], [[1, 0, [[1, 166]]]]);
function Quote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Quote);
  var svg = root1567();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-quote", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Quote = hmr(Quote, () => Quote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Quote[HMR].source;
    set(Quote[HMR].source, module.default[HMR].original);
  });
}
var Quote_default = Quote;
mark_module_end(Quote);

// node_modules/svelte-bootstrap-icons/lib/RCircleFill.svelte
mark_module_start();
RCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RCircleFill.svelte";
var root1568 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM5.5 4.002V12h1.335V8.924H8.52L9.98 12h1.52L9.856 8.701c.828-.299 1.495-1.101 1.495-2.238 0-1.488-1.03-2.461-2.74-2.461H5.5Zm1.335 1.09v2.777h1.549c.995 0 1.573-.463 1.573-1.36 0-.913-.596-1.417-1.537-1.417H6.835Z"></path></svg>`), RCircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function RCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RCircleFill);
  var svg = root1568();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-r-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RCircleFill = hmr(RCircleFill, () => RCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RCircleFill[HMR].source;
    set(RCircleFill[HMR].source, module.default[HMR].original);
  });
}
var RCircleFill_default = RCircleFill;
mark_module_end(RCircleFill);

// node_modules/svelte-bootstrap-icons/lib/RCircle.svelte
mark_module_start();
RCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RCircle.svelte";
var root1569 = add_locations(ns_template(`<svg><!><path d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM5.5 4.002h3.11c1.71 0 2.741.973 2.741 2.46 0 1.138-.667 1.94-1.495 2.24L11.5 12H9.98L8.52 8.924H6.836V12H5.5V4.002Zm1.335 1.09v2.777h1.549c.995 0 1.573-.463 1.573-1.36 0-.913-.596-1.417-1.537-1.417H6.835Z"></path></svg>`), RCircle[FILENAME], [[1, 0, [[1, 169]]]]);
function RCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RCircle);
  var svg = root1569();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-r-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RCircle = hmr(RCircle, () => RCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RCircle[HMR].source;
    set(RCircle[HMR].source, module.default[HMR].original);
  });
}
var RCircle_default = RCircle;
mark_module_end(RCircle);

// node_modules/svelte-bootstrap-icons/lib/RSquareFill.svelte
mark_module_start();
RSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RSquareFill.svelte";
var root1570 = add_locations(ns_template(`<svg><!><path d="M6.835 5.092v2.777h1.549c.995 0 1.573-.463 1.573-1.36 0-.913-.596-1.417-1.537-1.417H6.835Z"></path><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm3.5 4.002h3.11c1.71 0 2.741.973 2.741 2.46 0 1.138-.667 1.94-1.495 2.24L11.5 12H9.98L8.52 8.924H6.836V12H5.5V4.002Z"></path></svg>`), RSquareFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function RSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RSquareFill);
  var svg = root1570();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-r-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RSquareFill = hmr(RSquareFill, () => RSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RSquareFill[HMR].source;
    set(RSquareFill[HMR].source, module.default[HMR].original);
  });
}
var RSquareFill_default = RSquareFill;
mark_module_end(RSquareFill);

// node_modules/svelte-bootstrap-icons/lib/RSquare.svelte
mark_module_start();
RSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RSquare.svelte";
var root1571 = add_locations(ns_template(`<svg><!><path d="M5.5 4.002h3.11c1.71 0 2.741.973 2.741 2.46 0 1.138-.667 1.94-1.495 2.24L11.5 12H9.98L8.52 8.924H6.836V12H5.5V4.002Zm1.335 1.09v2.777h1.549c.995 0 1.573-.463 1.573-1.36 0-.913-.596-1.417-1.537-1.417H6.835Z"></path><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2Z"></path></svg>`), RSquare[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function RSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RSquare);
  var svg = root1571();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-r-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RSquare = hmr(RSquare, () => RSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RSquare[HMR].source;
    set(RSquare[HMR].source, module.default[HMR].original);
  });
}
var RSquare_default = RSquare;
mark_module_end(RSquare);

// node_modules/svelte-bootstrap-icons/lib/Radar.svelte
mark_module_start();
Radar[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Radar.svelte";
var root1572 = add_locations(ns_template(`<svg><!><path d="M6.634 1.135A7 7 0 0 1 15 8a.5.5 0 0 1-1 0 6 6 0 1 0-6.5 5.98v-1.005A5 5 0 1 1 13 8a.5.5 0 0 1-1 0 4 4 0 1 0-4.5 3.969v-1.011A2.999 2.999 0 1 1 11 8a.5.5 0 0 1-1 0 2 2 0 1 0-2.5 1.936v-1.07a1 1 0 1 1 1 0V15.5a.5.5 0 0 1-1 0v-.518a7 7 0 0 1-.866-13.847Z"></path></svg>`), Radar[FILENAME], [[1, 0, [[1, 166]]]]);
function Radar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Radar);
  var svg = root1572();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-radar", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radar = hmr(Radar, () => Radar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radar[HMR].source;
    set(Radar[HMR].source, module.default[HMR].original);
  });
}
var Radar_default = Radar;
mark_module_end(Radar);

// node_modules/svelte-bootstrap-icons/lib/Radioactive.svelte
mark_module_start();
Radioactive[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Radioactive.svelte";
var root1573 = add_locations(ns_template(`<svg><!><path d="M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Z"></path><path d="M9.653 5.496A2.986 2.986 0 0 0 8 5c-.61 0-1.179.183-1.653.496L4.694 2.992A5.972 5.972 0 0 1 8 2c1.222 0 2.358.365 3.306.992L9.653 5.496Zm1.342 2.324a2.986 2.986 0 0 1-.884 2.312 3.01 3.01 0 0 1-.769.552l1.342 2.683c.57-.286 1.09-.66 1.538-1.103a5.986 5.986 0 0 0 1.767-4.624l-2.994.18Zm-5.679 5.548 1.342-2.684A3 3 0 0 1 5.005 7.82l-2.994-.18a6 6 0 0 0 3.306 5.728ZM10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`), Radioactive[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Radioactive($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Radioactive);
  var svg = root1573();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-radioactive", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radioactive = hmr(Radioactive, () => Radioactive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radioactive[HMR].source;
    set(Radioactive[HMR].source, module.default[HMR].original);
  });
}
var Radioactive_default = Radioactive;
mark_module_end(Radioactive);

// node_modules/svelte-bootstrap-icons/lib/Rainbow.svelte
mark_module_start();
Rainbow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Rainbow.svelte";
var root1574 = add_locations(ns_template(`<svg><!><path d="M8 4.5a7 7 0 0 0-7 7 .5.5 0 0 1-1 0 8 8 0 1 1 16 0 .5.5 0 0 1-1 0 7 7 0 0 0-7-7zm0 2a5 5 0 0 0-5 5 .5.5 0 0 1-1 0 6 6 0 1 1 12 0 .5.5 0 0 1-1 0 5 5 0 0 0-5-5zm0 2a3 3 0 0 0-3 3 .5.5 0 0 1-1 0 4 4 0 1 1 8 0 .5.5 0 0 1-1 0 3 3 0 0 0-3-3zm0 2a1 1 0 0 0-1 1 .5.5 0 0 1-1 0 2 2 0 1 1 4 0 .5.5 0 0 1-1 0 1 1 0 0 0-1-1z"></path></svg>`), Rainbow[FILENAME], [[1, 0, [[1, 168]]]]);
function Rainbow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Rainbow);
  var svg = root1574();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rainbow", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rainbow = hmr(Rainbow, () => Rainbow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rainbow[HMR].source;
    set(Rainbow[HMR].source, module.default[HMR].original);
  });
}
var Rainbow_default = Rainbow;
mark_module_end(Rainbow);

// node_modules/svelte-bootstrap-icons/lib/ReceiptCutoff.svelte
mark_module_start();
ReceiptCutoff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ReceiptCutoff.svelte";
var root1575 = add_locations(ns_template(`<svg><!><path d="M3 4.5a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zM11.5 4a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1zm0 2a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1zm0 2a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1zm0 2a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1zm0 2a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path><path d="M2.354.646a.5.5 0 0 0-.801.13l-.5 1A.5.5 0 0 0 1 2v13H.5a.5.5 0 0 0 0 1h15a.5.5 0 0 0 0-1H15V2a.5.5 0 0 0-.053-.224l-.5-1a.5.5 0 0 0-.8-.13L13 1.293l-.646-.647a.5.5 0 0 0-.708 0L11 1.293l-.646-.647a.5.5 0 0 0-.708 0L9 1.293 8.354.646a.5.5 0 0 0-.708 0L7 1.293 6.354.646a.5.5 0 0 0-.708 0L5 1.293 4.354.646a.5.5 0 0 0-.708 0L3 1.293 2.354.646zm-.217 1.198.51.51a.5.5 0 0 0 .707 0L4 1.707l.646.647a.5.5 0 0 0 .708 0L6 1.707l.646.647a.5.5 0 0 0 .708 0L8 1.707l.646.647a.5.5 0 0 0 .708 0L10 1.707l.646.647a.5.5 0 0 0 .708 0L12 1.707l.646.647a.5.5 0 0 0 .708 0l.509-.51.137.274V15H2V2.118l.137-.274z"></path></svg>`), ReceiptCutoff[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function ReceiptCutoff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ReceiptCutoff);
  var svg = root1575();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-receipt-cutoff", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ReceiptCutoff = hmr(ReceiptCutoff, () => ReceiptCutoff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ReceiptCutoff[HMR].source;
    set(ReceiptCutoff[HMR].source, module.default[HMR].original);
  });
}
var ReceiptCutoff_default = ReceiptCutoff;
mark_module_end(ReceiptCutoff);

// node_modules/svelte-bootstrap-icons/lib/Receipt.svelte
mark_module_start();
Receipt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Receipt.svelte";
var root1576 = add_locations(ns_template(`<svg><!><path d="M1.92.506a.5.5 0 0 1 .434.14L3 1.293l.646-.647a.5.5 0 0 1 .708 0L5 1.293l.646-.647a.5.5 0 0 1 .708 0L7 1.293l.646-.647a.5.5 0 0 1 .708 0L9 1.293l.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .801.13l.5 1A.5.5 0 0 1 15 2v12a.5.5 0 0 1-.053.224l-.5 1a.5.5 0 0 1-.8.13L13 14.707l-.646.647a.5.5 0 0 1-.708 0L11 14.707l-.646.647a.5.5 0 0 1-.708 0L9 14.707l-.646.647a.5.5 0 0 1-.708 0L7 14.707l-.646.647a.5.5 0 0 1-.708 0L5 14.707l-.646.647a.5.5 0 0 1-.708 0L3 14.707l-.646.647a.5.5 0 0 1-.801-.13l-.5-1A.5.5 0 0 1 1 14V2a.5.5 0 0 1 .053-.224l.5-1a.5.5 0 0 1 .367-.27zm.217 1.338L2 2.118v11.764l.137.274.51-.51a.5.5 0 0 1 .707 0l.646.647.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.509.509.137-.274V2.118l-.137-.274-.51.51a.5.5 0 0 1-.707 0L12 1.707l-.646.647a.5.5 0 0 1-.708 0L10 1.707l-.646.647a.5.5 0 0 1-.708 0L8 1.707l-.646.647a.5.5 0 0 1-.708 0L6 1.707l-.646.647a.5.5 0 0 1-.708 0L4 1.707l-.646.647a.5.5 0 0 1-.708 0l-.509-.51z"></path><path d="M3 4.5a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm8-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5z"></path></svg>`), Receipt[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Receipt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Receipt);
  var svg = root1576();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-receipt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt = hmr(Receipt, () => Receipt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt[HMR].source;
    set(Receipt[HMR].source, module.default[HMR].original);
  });
}
var Receipt_default = Receipt;
mark_module_end(Receipt);

// node_modules/svelte-bootstrap-icons/lib/Reception0.svelte
mark_module_start();
Reception0[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Reception0.svelte";
var root1577 = add_locations(ns_template(`<svg><!><path d="M0 13.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm4 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm4 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm4 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path></svg>`), Reception0[FILENAME], [[1, 0, [[1, 172]]]]);
function Reception0($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Reception0);
  var svg = root1577();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reception-0", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Reception0 = hmr(Reception0, () => Reception0[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Reception0[HMR].source;
    set(Reception0[HMR].source, module.default[HMR].original);
  });
}
var Reception0_default = Reception0;
mark_module_end(Reception0);

// node_modules/svelte-bootstrap-icons/lib/Reception1.svelte
mark_module_start();
Reception1[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Reception1.svelte";
var root1578 = add_locations(ns_template(`<svg><!><path d="M0 11.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2zm4 2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm4 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm4 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path></svg>`), Reception1[FILENAME], [[1, 0, [[1, 172]]]]);
function Reception1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Reception1);
  var svg = root1578();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reception-1", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Reception1 = hmr(Reception1, () => Reception1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Reception1[HMR].source;
    set(Reception1[HMR].source, module.default[HMR].original);
  });
}
var Reception1_default = Reception1;
mark_module_end(Reception1);

// node_modules/svelte-bootstrap-icons/lib/Reception2.svelte
mark_module_start();
Reception2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Reception2.svelte";
var root1579 = add_locations(ns_template(`<svg><!><path d="M0 11.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2zm4-3a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-5zm4 5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm4 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path></svg>`), Reception2[FILENAME], [[1, 0, [[1, 172]]]]);
function Reception2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Reception2);
  var svg = root1579();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reception-2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Reception2 = hmr(Reception2, () => Reception2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Reception2[HMR].source;
    set(Reception2[HMR].source, module.default[HMR].original);
  });
}
var Reception2_default = Reception2;
mark_module_end(Reception2);

// node_modules/svelte-bootstrap-icons/lib/Reception3.svelte
mark_module_start();
Reception3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Reception3.svelte";
var root1580 = add_locations(ns_template(`<svg><!><path d="M0 11.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2zm4-3a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-5zm4-3a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-8zm4 8a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path></svg>`), Reception3[FILENAME], [[1, 0, [[1, 172]]]]);
function Reception3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Reception3);
  var svg = root1580();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reception-3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Reception3 = hmr(Reception3, () => Reception3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Reception3[HMR].source;
    set(Reception3[HMR].source, module.default[HMR].original);
  });
}
var Reception3_default = Reception3;
mark_module_end(Reception3);

// node_modules/svelte-bootstrap-icons/lib/Reception4.svelte
mark_module_start();
Reception4[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Reception4.svelte";
var root1581 = add_locations(ns_template(`<svg><!><path d="M0 11.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2zm4-3a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-5zm4-3a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-8zm4-3a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v11a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-11z"></path></svg>`), Reception4[FILENAME], [[1, 0, [[1, 172]]]]);
function Reception4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Reception4);
  var svg = root1581();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reception-4", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Reception4 = hmr(Reception4, () => Reception4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Reception4[HMR].source;
    set(Reception4[HMR].source, module.default[HMR].original);
  });
}
var Reception4_default = Reception4;
mark_module_end(Reception4);

// node_modules/svelte-bootstrap-icons/lib/RecordBtnFill.svelte
mark_module_start();
RecordBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RecordBtnFill.svelte";
var root1582 = add_locations(ns_template(`<svg><!><path d="M0 12V4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm8-1a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path></svg>`), RecordBtnFill[FILENAME], [[1, 0, [[1, 176]]]]);
function RecordBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RecordBtnFill);
  var svg = root1582();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-record-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RecordBtnFill = hmr(RecordBtnFill, () => RecordBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RecordBtnFill[HMR].source;
    set(RecordBtnFill[HMR].source, module.default[HMR].original);
  });
}
var RecordBtnFill_default = RecordBtnFill;
mark_module_end(RecordBtnFill);

// node_modules/svelte-bootstrap-icons/lib/RecordBtn.svelte
mark_module_start();
RecordBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RecordBtn.svelte";
var root1583 = add_locations(ns_template(`<svg><!><path d="M8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"></path></svg>`), RecordBtn[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function RecordBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RecordBtn);
  var svg = root1583();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-record-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RecordBtn = hmr(RecordBtn, () => RecordBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RecordBtn[HMR].source;
    set(RecordBtn[HMR].source, module.default[HMR].original);
  });
}
var RecordBtn_default = RecordBtn;
mark_module_end(RecordBtn);

// node_modules/svelte-bootstrap-icons/lib/RecordCircleFill.svelte
mark_module_start();
RecordCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RecordCircleFill.svelte";
var root1584 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-8 3a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path></svg>`), RecordCircleFill[FILENAME], [[1, 0, [[1, 179]]]]);
function RecordCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RecordCircleFill);
  var svg = root1584();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-record-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RecordCircleFill = hmr(RecordCircleFill, () => RecordCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RecordCircleFill[HMR].source;
    set(RecordCircleFill[HMR].source, module.default[HMR].original);
  });
}
var RecordCircleFill_default = RecordCircleFill;
mark_module_end(RecordCircleFill);

// node_modules/svelte-bootstrap-icons/lib/RecordCircle.svelte
mark_module_start();
RecordCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RecordCircle.svelte";
var root1585 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"></path></svg>`), RecordCircle[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function RecordCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RecordCircle);
  var svg = root1585();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-record-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RecordCircle = hmr(RecordCircle, () => RecordCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RecordCircle[HMR].source;
    set(RecordCircle[HMR].source, module.default[HMR].original);
  });
}
var RecordCircle_default = RecordCircle;
mark_module_end(RecordCircle);

// node_modules/svelte-bootstrap-icons/lib/RecordFill.svelte
mark_module_start();
RecordFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RecordFill.svelte";
var root1586 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10z"></path></svg>`), RecordFill[FILENAME], [[1, 0, [[1, 172]]]]);
function RecordFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RecordFill);
  var svg = root1586();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-record-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RecordFill = hmr(RecordFill, () => RecordFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RecordFill[HMR].source;
    set(RecordFill[HMR].source, module.default[HMR].original);
  });
}
var RecordFill_default = RecordFill;
mark_module_end(RecordFill);

// node_modules/svelte-bootstrap-icons/lib/Record.svelte
mark_module_start();
Record[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Record.svelte";
var root1587 = add_locations(ns_template(`<svg><!><path d="M8 12a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm0 1A5 5 0 1 0 8 3a5 5 0 0 0 0 10z"></path></svg>`), Record[FILENAME], [[1, 0, [[1, 167]]]]);
function Record($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Record);
  var svg = root1587();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-record", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Record = hmr(Record, () => Record[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Record[HMR].source;
    set(Record[HMR].source, module.default[HMR].original);
  });
}
var Record_default = Record;
mark_module_end(Record);

// node_modules/svelte-bootstrap-icons/lib/Record2Fill.svelte
mark_module_start();
Record2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Record2Fill.svelte";
var root1588 = add_locations(ns_template(`<svg><!><path d="M10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"></path><path d="M8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10zm0-2a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"></path></svg>`), Record2Fill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function Record2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Record2Fill);
  var svg = root1588();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-record2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Record2Fill = hmr(Record2Fill, () => Record2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Record2Fill[HMR].source;
    set(Record2Fill[HMR].source, module.default[HMR].original);
  });
}
var Record2Fill_default = Record2Fill;
mark_module_end(Record2Fill);

// node_modules/svelte-bootstrap-icons/lib/Record2.svelte
mark_module_start();
Record2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Record2.svelte";
var root1589 = add_locations(ns_template(`<svg><!><path d="M8 12a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm0 1A5 5 0 1 0 8 3a5 5 0 0 0 0 10z"></path><path d="M10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"></path></svg>`), Record2[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Record2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Record2);
  var svg = root1589();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-record2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Record2 = hmr(Record2, () => Record2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Record2[HMR].source;
    set(Record2[HMR].source, module.default[HMR].original);
  });
}
var Record2_default = Record2;
mark_module_end(Record2);

// node_modules/svelte-bootstrap-icons/lib/Recycle.svelte
mark_module_start();
Recycle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Recycle.svelte";
var root1590 = add_locations(ns_template(`<svg><!><path d="M9.302 1.256a1.5 1.5 0 0 0-2.604 0l-1.704 2.98a.5.5 0 0 0 .869.497l1.703-2.981a.5.5 0 0 1 .868 0l2.54 4.444-1.256-.337a.5.5 0 1 0-.26.966l2.415.647a.5.5 0 0 0 .613-.353l.647-2.415a.5.5 0 1 0-.966-.259l-.333 1.242-2.532-4.431zM2.973 7.773l-1.255.337a.5.5 0 1 1-.26-.966l2.416-.647a.5.5 0 0 1 .612.353l.647 2.415a.5.5 0 0 1-.966.259l-.333-1.242-2.545 4.454a.5.5 0 0 0 .434.748H5a.5.5 0 0 1 0 1H1.723A1.5 1.5 0 0 1 .421 12.24l2.552-4.467zm10.89 1.463a.5.5 0 1 0-.868.496l1.716 3.004a.5.5 0 0 1-.434.748h-5.57l.647-.646a.5.5 0 1 0-.708-.707l-1.5 1.5a.498.498 0 0 0 0 .707l1.5 1.5a.5.5 0 1 0 .708-.707l-.647-.647h5.57a1.5 1.5 0 0 0 1.302-2.244l-1.716-3.004z"></path></svg>`), Recycle[FILENAME], [[1, 0, [[1, 168]]]]);
function Recycle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Recycle);
  var svg = root1590();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-recycle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Recycle = hmr(Recycle, () => Recycle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Recycle[HMR].source;
    set(Recycle[HMR].source, module.default[HMR].original);
  });
}
var Recycle_default = Recycle;
mark_module_end(Recycle);

// node_modules/svelte-bootstrap-icons/lib/Reddit.svelte
mark_module_start();
Reddit[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Reddit.svelte";
var root1591 = add_locations(ns_template(`<svg><!><path d="M6.167 8a.831.831 0 0 0-.83.83c0 .459.372.84.83.831a.831.831 0 0 0 0-1.661zm1.843 3.647c.315 0 1.403-.038 1.976-.611a.232.232 0 0 0 0-.306.213.213 0 0 0-.306 0c-.353.363-1.126.487-1.67.487-.545 0-1.308-.124-1.671-.487a.213.213 0 0 0-.306 0 .213.213 0 0 0 0 .306c.564.563 1.652.61 1.977.61zm.992-2.807c0 .458.373.83.831.83.458 0 .83-.381.83-.83a.831.831 0 0 0-1.66 0z"></path><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.828-1.165c-.315 0-.602.124-.812.325-.801-.573-1.9-.945-3.121-.993l.534-2.501 1.738.372a.83.83 0 1 0 .83-.869.83.83 0 0 0-.744.468l-1.938-.41a.203.203 0 0 0-.153.028.186.186 0 0 0-.086.134l-.592 2.788c-1.24.038-2.358.41-3.17.992-.21-.2-.496-.324-.81-.324a1.163 1.163 0 0 0-.478 2.224c-.02.115-.029.23-.029.353 0 1.795 2.091 3.256 4.669 3.256 2.577 0 4.668-1.451 4.668-3.256 0-.114-.01-.238-.029-.353.401-.181.688-.592.688-1.069 0-.65-.525-1.165-1.165-1.165z"></path></svg>`), Reddit[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Reddit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Reddit);
  var svg = root1591();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reddit", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Reddit = hmr(Reddit, () => Reddit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Reddit[HMR].source;
    set(Reddit[HMR].source, module.default[HMR].original);
  });
}
var Reddit_default = Reddit;
mark_module_end(Reddit);

// node_modules/svelte-bootstrap-icons/lib/Regex.svelte
mark_module_start();
Regex[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Regex.svelte";
var root1592 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 1 1 .707.707Zm9.9-.707a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.314.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707ZM6 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm5-6.5a.5.5 0 0 0-1 0v2.117L8.257 5.57a.5.5 0 0 0-.514.858L9.528 7.5 7.743 8.571a.5.5 0 1 0 .514.858L10 8.383V10.5a.5.5 0 1 0 1 0V8.383l1.743 1.046a.5.5 0 0 0 .514-.858L11.472 7.5l1.785-1.071a.5.5 0 1 0-.514-.858L11 6.617V4.5Z"></path></svg>`), Regex[FILENAME], [[1, 0, [[1, 166]]]]);
function Regex($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Regex);
  var svg = root1592();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-regex", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Regex = hmr(Regex, () => Regex[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Regex[HMR].source;
    set(Regex[HMR].source, module.default[HMR].original);
  });
}
var Regex_default = Regex;
mark_module_end(Regex);

// node_modules/svelte-bootstrap-icons/lib/Repeat1.svelte
mark_module_start();
Repeat1[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Repeat1.svelte";
var root1593 = add_locations(ns_template(`<svg><!><path d="M11 4v1.466a.25.25 0 0 0 .41.192l2.36-1.966a.25.25 0 0 0 0-.384l-2.36-1.966a.25.25 0 0 0-.41.192V3H5a5 5 0 0 0-4.48 7.223.5.5 0 0 0 .896-.446A4 4 0 0 1 5 4h6Zm4.48 1.777a.5.5 0 0 0-.896.446A4 4 0 0 1 11 12H5.001v-1.466a.25.25 0 0 0-.41-.192l-2.36 1.966a.25.25 0 0 0 0 .384l2.36 1.966a.25.25 0 0 0 .41-.192V13h6a5 5 0 0 0 4.48-7.223Z"></path><path d="M9 5.5a.5.5 0 0 0-.854-.354l-1.75 1.75a.5.5 0 1 0 .708.708L8 6.707V10.5a.5.5 0 0 0 1 0v-5Z"></path></svg>`), Repeat1[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Repeat1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Repeat1);
  var svg = root1593();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-repeat-1", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Repeat1 = hmr(Repeat1, () => Repeat1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Repeat1[HMR].source;
    set(Repeat1[HMR].source, module.default[HMR].original);
  });
}
var Repeat1_default = Repeat1;
mark_module_end(Repeat1);

// node_modules/svelte-bootstrap-icons/lib/Repeat.svelte
mark_module_start();
Repeat[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Repeat.svelte";
var root1594 = add_locations(ns_template(`<svg><!><path d="M11 5.466V4H5a4 4 0 0 0-3.584 5.777.5.5 0 1 1-.896.446A5 5 0 0 1 5 3h6V1.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192Zm3.81.086a.5.5 0 0 1 .67.225A5 5 0 0 1 11 13H5v1.466a.25.25 0 0 1-.41.192l-2.36-1.966a.25.25 0 0 1 0-.384l2.36-1.966a.25.25 0 0 1 .41.192V12h6a4 4 0 0 0 3.585-5.777.5.5 0 0 1 .225-.67Z"></path></svg>`), Repeat[FILENAME], [[1, 0, [[1, 167]]]]);
function Repeat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Repeat);
  var svg = root1594();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-repeat", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Repeat = hmr(Repeat, () => Repeat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Repeat[HMR].source;
    set(Repeat[HMR].source, module.default[HMR].original);
  });
}
var Repeat_default = Repeat;
mark_module_end(Repeat);

// node_modules/svelte-bootstrap-icons/lib/ReplyAllFill.svelte
mark_module_start();
ReplyAllFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ReplyAllFill.svelte";
var root1595 = add_locations(ns_template(`<svg><!><path d="M8.021 11.9 3.453 8.62a.719.719 0 0 1 0-1.238L8.021 4.1a.716.716 0 0 1 1.079.619V6c1.5 0 6 0 7 8-2.5-4.5-7-4-7-4v1.281c0 .56-.606.898-1.079.62z"></path><path d="M5.232 4.293a.5.5 0 0 1-.106.7L1.114 7.945a.5.5 0 0 1-.042.028.147.147 0 0 0 0 .252.503.503 0 0 1 .042.028l4.012 2.954a.5.5 0 1 1-.593.805L.539 9.073a1.147 1.147 0 0 1 0-1.946l3.994-2.94a.5.5 0 0 1 .699.106z"></path></svg>`), ReplyAllFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function ReplyAllFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ReplyAllFill);
  var svg = root1595();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reply-all-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ReplyAllFill = hmr(ReplyAllFill, () => ReplyAllFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ReplyAllFill[HMR].source;
    set(ReplyAllFill[HMR].source, module.default[HMR].original);
  });
}
var ReplyAllFill_default = ReplyAllFill;
mark_module_end(ReplyAllFill);

// node_modules/svelte-bootstrap-icons/lib/ReplyAll.svelte
mark_module_start();
ReplyAll[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ReplyAll.svelte";
var root1596 = add_locations(ns_template(`<svg><!><path d="M8.098 5.013a.144.144 0 0 1 .202.134V6.3a.5.5 0 0 0 .5.5c.667 0 2.013.005 3.3.822.984.624 1.99 1.76 2.595 3.876-1.02-.983-2.185-1.516-3.205-1.799a8.74 8.74 0 0 0-1.921-.306 7.404 7.404 0 0 0-.798.008h-.013l-.005.001h-.001L8.8 9.9l-.05-.498a.5.5 0 0 0-.45.498v1.153c0 .108-.11.176-.202.134L4.114 8.254a.502.502 0 0 0-.042-.028.147.147 0 0 1 0-.252.497.497 0 0 0 .042-.028l3.984-2.933zM9.3 10.386c.068 0 .143.003.223.006.434.02 1.034.086 1.7.271 1.326.368 2.896 1.202 3.94 3.08a.5.5 0 0 0 .933-.305c-.464-3.71-1.886-5.662-3.46-6.66-1.245-.79-2.527-.942-3.336-.971v-.66a1.144 1.144 0 0 0-1.767-.96l-3.994 2.94a1.147 1.147 0 0 0 0 1.946l3.994 2.94a1.144 1.144 0 0 0 1.767-.96v-.667z"></path><path d="M5.232 4.293a.5.5 0 0 0-.7-.106L.54 7.127a1.147 1.147 0 0 0 0 1.946l3.994 2.94a.5.5 0 1 0 .593-.805L1.114 8.254a.503.503 0 0 0-.042-.028.147.147 0 0 1 0-.252.5.5 0 0 0 .042-.028l4.012-2.954a.5.5 0 0 0 .106-.699z"></path></svg>`), ReplyAll[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function ReplyAll($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ReplyAll);
  var svg = root1596();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reply-all", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ReplyAll = hmr(ReplyAll, () => ReplyAll[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ReplyAll[HMR].source;
    set(ReplyAll[HMR].source, module.default[HMR].original);
  });
}
var ReplyAll_default = ReplyAll;
mark_module_end(ReplyAll);

// node_modules/svelte-bootstrap-icons/lib/ReplyFill.svelte
mark_module_start();
ReplyFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ReplyFill.svelte";
var root1597 = add_locations(ns_template(`<svg><!><path d="M5.921 11.9 1.353 8.62a.719.719 0 0 1 0-1.238L5.921 4.1A.716.716 0 0 1 7 4.719V6c1.5 0 6 0 7 8-2.5-4.5-7-4-7-4v1.281c0 .56-.606.898-1.079.62z"></path></svg>`), ReplyFill[FILENAME], [[1, 0, [[1, 171]]]]);
function ReplyFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ReplyFill);
  var svg = root1597();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reply-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ReplyFill = hmr(ReplyFill, () => ReplyFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ReplyFill[HMR].source;
    set(ReplyFill[HMR].source, module.default[HMR].original);
  });
}
var ReplyFill_default = ReplyFill;
mark_module_end(ReplyFill);

// node_modules/svelte-bootstrap-icons/lib/Reply.svelte
mark_module_start();
Reply[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Reply.svelte";
var root1598 = add_locations(ns_template(`<svg><!><path d="M6.598 5.013a.144.144 0 0 1 .202.134V6.3a.5.5 0 0 0 .5.5c.667 0 2.013.005 3.3.822.984.624 1.99 1.76 2.595 3.876-1.02-.983-2.185-1.516-3.205-1.799a8.74 8.74 0 0 0-1.921-.306 7.404 7.404 0 0 0-.798.008h-.013l-.005.001h-.001L7.3 9.9l-.05-.498a.5.5 0 0 0-.45.498v1.153c0 .108-.11.176-.202.134L2.614 8.254a.503.503 0 0 0-.042-.028.147.147 0 0 1 0-.252.499.499 0 0 0 .042-.028l3.984-2.933zM7.8 10.386c.068 0 .143.003.223.006.434.02 1.034.086 1.7.271 1.326.368 2.896 1.202 3.94 3.08a.5.5 0 0 0 .933-.305c-.464-3.71-1.886-5.662-3.46-6.66-1.245-.79-2.527-.942-3.336-.971v-.66a1.144 1.144 0 0 0-1.767-.96l-3.994 2.94a1.147 1.147 0 0 0 0 1.946l3.994 2.94a1.144 1.144 0 0 0 1.767-.96v-.667z"></path></svg>`), Reply[FILENAME], [[1, 0, [[1, 166]]]]);
function Reply($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Reply);
  var svg = root1598();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-reply", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Reply = hmr(Reply, () => Reply[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Reply[HMR].source;
    set(Reply[HMR].source, module.default[HMR].original);
  });
}
var Reply_default = Reply;
mark_module_end(Reply);

// node_modules/svelte-bootstrap-icons/lib/RewindBtnFill.svelte
mark_module_start();
RewindBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RewindBtnFill.svelte";
var root1599 = add_locations(ns_template(`<svg><!><path d="M0 4v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2Zm7.729 1.055A.5.5 0 0 1 8 5.5v1.886l3.21-2.293A.5.5 0 0 1 12 5.5v5a.5.5 0 0 1-.79.407L8 8.614V10.5a.5.5 0 0 1-.79.407l-3.5-2.5a.5.5 0 0 1 0-.814l3.5-2.5a.5.5 0 0 1 .519-.038Z"></path></svg>`), RewindBtnFill[FILENAME], [[1, 0, [[1, 176]]]]);
function RewindBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RewindBtnFill);
  var svg = root1599();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rewind-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RewindBtnFill = hmr(RewindBtnFill, () => RewindBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RewindBtnFill[HMR].source;
    set(RewindBtnFill[HMR].source, module.default[HMR].original);
  });
}
var RewindBtnFill_default = RewindBtnFill;
mark_module_end(RewindBtnFill);

// node_modules/svelte-bootstrap-icons/lib/RewindBtn.svelte
mark_module_start();
RewindBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RewindBtn.svelte";
var root1600 = add_locations(ns_template(`<svg><!><path d="M7.21 5.093A.5.5 0 0 1 8 5.5v1.886l3.21-2.293A.5.5 0 0 1 12 5.5v5a.5.5 0 0 1-.79.407L8 8.614V10.5a.5.5 0 0 1-.79.407l-3.5-2.5a.5.5 0 0 1 0-.814l3.5-2.5Z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4Z"></path></svg>`), RewindBtn[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function RewindBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RewindBtn);
  var svg = root1600();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rewind-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RewindBtn = hmr(RewindBtn, () => RewindBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RewindBtn[HMR].source;
    set(RewindBtn[HMR].source, module.default[HMR].original);
  });
}
var RewindBtn_default = RewindBtn;
mark_module_end(RewindBtn);

// node_modules/svelte-bootstrap-icons/lib/RewindCircleFill.svelte
mark_module_start();
RewindCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RewindCircleFill.svelte";
var root1601 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16ZM7.729 5.055A.5.5 0 0 1 8 5.5v1.886l3.21-2.293A.5.5 0 0 1 12 5.5v5a.5.5 0 0 1-.79.407L8 8.614V10.5a.5.5 0 0 1-.79.407l-3.5-2.5a.5.5 0 0 1 0-.814l3.5-2.5a.5.5 0 0 1 .519-.038Z"></path></svg>`), RewindCircleFill[FILENAME], [[1, 0, [[1, 179]]]]);
function RewindCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RewindCircleFill);
  var svg = root1601();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rewind-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RewindCircleFill = hmr(RewindCircleFill, () => RewindCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RewindCircleFill[HMR].source;
    set(RewindCircleFill[HMR].source, module.default[HMR].original);
  });
}
var RewindCircleFill_default = RewindCircleFill;
mark_module_end(RewindCircleFill);

// node_modules/svelte-bootstrap-icons/lib/RewindCircle.svelte
mark_module_start();
RewindCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RewindCircle.svelte";
var root1602 = add_locations(ns_template(`<svg><!><path d="M7.729 5.055a.5.5 0 0 0-.52.038l-3.5 2.5a.5.5 0 0 0 0 .814l3.5 2.5A.5.5 0 0 0 8 10.5V8.614l3.21 2.293A.5.5 0 0 0 12 10.5v-5a.5.5 0 0 0-.79-.407L8 7.386V5.5a.5.5 0 0 0-.271-.445Z"></path><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0ZM1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8Z"></path></svg>`), RewindCircle[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function RewindCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RewindCircle);
  var svg = root1602();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rewind-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RewindCircle = hmr(RewindCircle, () => RewindCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RewindCircle[HMR].source;
    set(RewindCircle[HMR].source, module.default[HMR].original);
  });
}
var RewindCircle_default = RewindCircle;
mark_module_end(RewindCircle);

// node_modules/svelte-bootstrap-icons/lib/RewindFill.svelte
mark_module_start();
RewindFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RewindFill.svelte";
var root1603 = add_locations(ns_template(`<svg><!><path d="M8.404 7.304a.802.802 0 0 0 0 1.392l6.363 3.692c.52.302 1.233-.043 1.233-.696V4.308c0-.653-.713-.998-1.233-.696L8.404 7.304Z"></path><path d="M.404 7.304a.802.802 0 0 0 0 1.392l6.363 3.692c.52.302 1.233-.043 1.233-.696V4.308c0-.653-.713-.998-1.233-.696L.404 7.304Z"></path></svg>`), RewindFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function RewindFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RewindFill);
  var svg = root1603();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rewind-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RewindFill = hmr(RewindFill, () => RewindFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RewindFill[HMR].source;
    set(RewindFill[HMR].source, module.default[HMR].original);
  });
}
var RewindFill_default = RewindFill;
mark_module_end(RewindFill);

// node_modules/svelte-bootstrap-icons/lib/Rewind.svelte
mark_module_start();
Rewind[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Rewind.svelte";
var root1604 = add_locations(ns_template(`<svg><!><path d="M9.196 8 15 4.633v6.734L9.196 8Zm-.792-.696a.802.802 0 0 0 0 1.392l6.363 3.692c.52.302 1.233-.043 1.233-.696V4.308c0-.653-.713-.998-1.233-.696L8.404 7.304Z"></path><path d="M1.196 8 7 4.633v6.734L1.196 8Zm-.792-.696a.802.802 0 0 0 0 1.392l6.363 3.692c.52.302 1.233-.043 1.233-.696V4.308c0-.653-.713-.998-1.233-.696L.404 7.304Z"></path></svg>`), Rewind[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Rewind($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Rewind);
  var svg = root1604();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rewind", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rewind = hmr(Rewind, () => Rewind[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rewind[HMR].source;
    set(Rewind[HMR].source, module.default[HMR].original);
  });
}
var Rewind_default = Rewind;
mark_module_end(Rewind);

// node_modules/svelte-bootstrap-icons/lib/Robot.svelte
mark_module_start();
Robot[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Robot.svelte";
var root1605 = add_locations(ns_template(`<svg><!><path d="M6 12.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5ZM3 8.062C3 6.76 4.235 5.765 5.53 5.886a26.58 26.58 0 0 0 4.94 0C11.765 5.765 13 6.76 13 8.062v1.157a.933.933 0 0 1-.765.935c-.845.147-2.34.346-4.235.346-1.895 0-3.39-.2-4.235-.346A.933.933 0 0 1 3 9.219V8.062Zm4.542-.827a.25.25 0 0 0-.217.068l-.92.9a24.767 24.767 0 0 1-1.871-.183.25.25 0 0 0-.068.495c.55.076 1.232.149 2.02.193a.25.25 0 0 0 .189-.071l.754-.736.847 1.71a.25.25 0 0 0 .404.062l.932-.97a25.286 25.286 0 0 0 1.922-.188.25.25 0 0 0-.068-.495c-.538.074-1.207.145-1.98.189a.25.25 0 0 0-.166.076l-.754.785-.842-1.7a.25.25 0 0 0-.182-.135Z"></path><path d="M8.5 1.866a1 1 0 1 0-1 0V3h-2A4.5 4.5 0 0 0 1 7.5V8a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1v1a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-1a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1v-.5A4.5 4.5 0 0 0 10.5 3h-2V1.866ZM14 7.5V13a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7.5A3.5 3.5 0 0 1 5.5 4h5A3.5 3.5 0 0 1 14 7.5Z"></path></svg>`), Robot[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Robot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Robot);
  var svg = root1605();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-robot", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Robot = hmr(Robot, () => Robot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Robot[HMR].source;
    set(Robot[HMR].source, module.default[HMR].original);
  });
}
var Robot_default = Robot;
mark_module_end(Robot);

// node_modules/svelte-bootstrap-icons/lib/RocketFill.svelte
mark_module_start();
RocketFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RocketFill.svelte";
var root1606 = add_locations(ns_template(`<svg><!><path d="M10.175 1.991c.81 1.312 1.583 3.43 1.778 6.819l1.5 1.83A2.5 2.5 0 0 1 14 12.202V15.5a.5.5 0 0 1-.9.3l-1.125-1.5c-.166-.222-.42-.4-.752-.57-.214-.108-.414-.192-.627-.282l-.196-.083C9.7 13.793 8.85 14 8 14c-.85 0-1.7-.207-2.4-.635-.068.03-.133.057-.198.084-.211.089-.411.173-.625.281-.332.17-.586.348-.752.57L2.9 15.8a.5.5 0 0 1-.9-.3v-3.298a2.5 2.5 0 0 1 .548-1.562l.004-.005L4.049 8.81c.197-3.323.969-5.434 1.774-6.756.466-.767.94-1.262 1.31-1.57a3.67 3.67 0 0 1 .601-.41A.549.549 0 0 1 8 0c.101 0 .17.027.25.064.037.017.086.041.145.075.118.066.277.167.463.315.373.297.85.779 1.317 1.537ZM9.5 6c0-1.105-.672-2-1.5-2s-1.5.895-1.5 2S7.172 8 8 8s1.5-.895 1.5-2Z"></path><path d="M8 14.5c.5 0 .999-.046 1.479-.139L8.4 15.8a.5.5 0 0 1-.8 0l-1.079-1.439c.48.093.98.139 1.479.139Z"></path></svg>`), RocketFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function RocketFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RocketFill);
  var svg = root1606();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rocket-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RocketFill = hmr(RocketFill, () => RocketFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RocketFill[HMR].source;
    set(RocketFill[HMR].source, module.default[HMR].original);
  });
}
var RocketFill_default = RocketFill;
mark_module_end(RocketFill);

// node_modules/svelte-bootstrap-icons/lib/RocketTakeoffFill.svelte
mark_module_start();
RocketTakeoffFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RocketTakeoffFill.svelte";
var root1607 = add_locations(ns_template(`<svg><!><path d="M12.17 9.53c2.307-2.592 3.278-4.684 3.641-6.218.21-.887.214-1.58.16-2.065a3.578 3.578 0 0 0-.108-.563 2.22 2.22 0 0 0-.078-.23V.453c-.073-.164-.168-.234-.352-.295a2.35 2.35 0 0 0-.16-.045 3.797 3.797 0 0 0-.57-.093c-.49-.044-1.19-.03-2.08.188-1.536.374-3.618 1.343-6.161 3.604l-2.4.238h-.006a2.552 2.552 0 0 0-1.524.734L.15 7.17a.512.512 0 0 0 .433.868l1.896-.271c.28-.04.592.013.955.132.232.076.437.16.655.248l.203.083c.196.816.66 1.58 1.275 2.195.613.614 1.376 1.08 2.191 1.277l.082.202c.089.218.173.424.249.657.118.363.172.676.132.956l-.271 1.9a.512.512 0 0 0 .867.433l2.382-2.386c.41-.41.668-.949.732-1.526l.24-2.408Zm.11-3.699c-.797.8-1.93.961-2.528.362-.598-.6-.436-1.733.361-2.532.798-.799 1.93-.96 2.528-.361.599.599.437 1.732-.36 2.531Z"></path><path d="M5.205 10.787a7.632 7.632 0 0 0 1.804 1.352c-1.118 1.007-4.929 2.028-5.054 1.903-.126-.127.737-4.189 1.839-5.18.346.69.837 1.35 1.411 1.925Z"></path></svg>`), RocketTakeoffFill[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function RocketTakeoffFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RocketTakeoffFill);
  var svg = root1607();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rocket-takeoff-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RocketTakeoffFill = hmr(RocketTakeoffFill, () => RocketTakeoffFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RocketTakeoffFill[HMR].source;
    set(RocketTakeoffFill[HMR].source, module.default[HMR].original);
  });
}
var RocketTakeoffFill_default = RocketTakeoffFill;
mark_module_end(RocketTakeoffFill);

// node_modules/svelte-bootstrap-icons/lib/RocketTakeoff.svelte
mark_module_start();
RocketTakeoff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RocketTakeoff.svelte";
var root1608 = add_locations(ns_template(`<svg><!><path d="M9.752 6.193c.599.6 1.73.437 2.528-.362.798-.799.96-1.932.362-2.531-.599-.6-1.73-.438-2.528.361-.798.8-.96 1.933-.362 2.532Z"></path><path d="M15.811 3.312c-.363 1.534-1.334 3.626-3.64 6.218l-.24 2.408a2.56 2.56 0 0 1-.732 1.526L8.817 15.85a.51.51 0 0 1-.867-.434l.27-1.899c.04-.28-.013-.593-.131-.956a9.42 9.42 0 0 0-.249-.657l-.082-.202c-.815-.197-1.578-.662-2.191-1.277-.614-.615-1.079-1.379-1.275-2.195l-.203-.083a9.556 9.556 0 0 0-.655-.248c-.363-.119-.675-.172-.955-.132l-1.896.27A.51.51 0 0 1 .15 7.17l2.382-2.386c.41-.41.947-.67 1.524-.734h.006l2.4-.238C9.005 1.55 11.087.582 12.623.208c.89-.217 1.59-.232 2.08-.188.244.023.435.06.57.093.067.017.12.033.16.045.184.06.279.13.351.295l.029.073a3.475 3.475 0 0 1 .157.721c.055.485.051 1.178-.159 2.065Zm-4.828 7.475.04-.04-.107 1.081a1.536 1.536 0 0 1-.44.913l-1.298 1.3.054-.38c.072-.506-.034-.993-.172-1.418a8.548 8.548 0 0 0-.164-.45c.738-.065 1.462-.38 2.087-1.006ZM5.205 5c-.625.626-.94 1.351-1.004 2.09a8.497 8.497 0 0 0-.45-.164c-.424-.138-.91-.244-1.416-.172l-.38.054 1.3-1.3c.245-.246.566-.401.91-.44l1.08-.107-.04.039Zm9.406-3.961c-.38-.034-.967-.027-1.746.163-1.558.38-3.917 1.496-6.937 4.521-.62.62-.799 1.34-.687 2.051.107.676.483 1.362 1.048 1.928.564.565 1.25.941 1.924 1.049.71.112 1.429-.067 2.048-.688 3.079-3.083 4.192-5.444 4.556-6.987.183-.771.18-1.345.138-1.713a2.835 2.835 0 0 0-.045-.283 3.078 3.078 0 0 0-.3-.041Z"></path><path d="M7.009 12.139a7.632 7.632 0 0 1-1.804-1.352A7.568 7.568 0 0 1 3.794 8.86c-1.102.992-1.965 5.054-1.839 5.18.125.126 3.936-.896 5.054-1.902Z"></path></svg>`), RocketTakeoff[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function RocketTakeoff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RocketTakeoff);
  var svg = root1608();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rocket-takeoff", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RocketTakeoff = hmr(RocketTakeoff, () => RocketTakeoff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RocketTakeoff[HMR].source;
    set(RocketTakeoff[HMR].source, module.default[HMR].original);
  });
}
var RocketTakeoff_default = RocketTakeoff;
mark_module_end(RocketTakeoff);

// node_modules/svelte-bootstrap-icons/lib/Rocket.svelte
mark_module_start();
Rocket[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Rocket.svelte";
var root1609 = add_locations(ns_template(`<svg><!><path d="M8 8c.828 0 1.5-.895 1.5-2S8.828 4 8 4s-1.5.895-1.5 2S7.172 8 8 8Z"></path><path d="M11.953 8.81c-.195-3.388-.968-5.507-1.777-6.819C9.707 1.233 9.23.751 8.857.454a3.495 3.495 0 0 0-.463-.315A2.19 2.19 0 0 0 8.25.064.546.546 0 0 0 8 0a.549.549 0 0 0-.266.073 2.312 2.312 0 0 0-.142.08 3.67 3.67 0 0 0-.459.33c-.37.308-.844.803-1.31 1.57-.805 1.322-1.577 3.433-1.774 6.756l-1.497 1.826-.004.005A2.5 2.5 0 0 0 2 12.202V15.5a.5.5 0 0 0 .9.3l1.125-1.5c.166-.222.42-.4.752-.57.214-.108.414-.192.625-.281l.198-.084c.7.428 1.55.635 2.4.635.85 0 1.7-.207 2.4-.635.067.03.132.056.196.083.213.09.413.174.627.282.332.17.586.348.752.57l1.125 1.5a.5.5 0 0 0 .9-.3v-3.298a2.5 2.5 0 0 0-.548-1.562l-1.499-1.83ZM12 10.445v.055c0 .866-.284 1.585-.75 2.14.146.064.292.13.425.199.39.197.8.46 1.1.86L13 14v-1.798a1.5 1.5 0 0 0-.327-.935L12 10.445ZM4.75 12.64C4.284 12.085 4 11.366 4 10.5v-.054l-.673.82a1.5 1.5 0 0 0-.327.936V14l.225-.3c.3-.4.71-.664 1.1-.861.133-.068.279-.135.425-.199ZM8.009 1.073c.063.04.14.094.226.163.284.226.683.621 1.09 1.28C10.137 3.836 11 6.237 11 10.5c0 .858-.374 1.48-.943 1.893C9.517 12.786 8.781 13 8 13c-.781 0-1.517-.214-2.057-.607C5.373 11.979 5 11.358 5 10.5c0-4.182.86-6.586 1.677-7.928.409-.67.81-1.082 1.096-1.32.09-.076.17-.135.236-.18Z"></path><path d="M9.479 14.361c-.48.093-.98.139-1.479.139-.5 0-.999-.046-1.479-.139L7.6 15.8a.5.5 0 0 0 .8 0l1.079-1.439Z"></path></svg>`), Rocket[FILENAME], [
  [
    1,
    0,
    [[1, 167], [2, 2], [3, 2]]
  ]
]);
function Rocket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Rocket);
  var svg = root1609();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rocket", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rocket = hmr(Rocket, () => Rocket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rocket[HMR].source;
    set(Rocket[HMR].source, module.default[HMR].original);
  });
}
var Rocket_default = Rocket;
mark_module_end(Rocket);

// node_modules/svelte-bootstrap-icons/lib/RouterFill.svelte
mark_module_start();
RouterFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RouterFill.svelte";
var root1610 = add_locations(ns_template(`<svg><!><path d="M5.525 3.025a3.5 3.5 0 0 1 4.95 0 .5.5 0 1 0 .707-.707 4.5 4.5 0 0 0-6.364 0 .5.5 0 0 0 .707.707Z"></path><path d="M6.94 4.44a1.5 1.5 0 0 1 2.12 0 .5.5 0 0 0 .708-.708 2.5 2.5 0 0 0-3.536 0 .5.5 0 0 0 .707.707Z"></path><path d="M2.974 2.342a.5.5 0 1 0-.948.316L3.806 8H1.5A1.5 1.5 0 0 0 0 9.5v2A1.5 1.5 0 0 0 1.5 13H2a.5.5 0 0 0 .5.5h2A.5.5 0 0 0 5 13h6a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5h.5a1.5 1.5 0 0 0 1.5-1.5v-2A1.5 1.5 0 0 0 14.5 8h-2.306l1.78-5.342a.5.5 0 1 0-.948-.316L11.14 8H4.86L2.974 2.342ZM2.5 11a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm4.5-.5a.5.5 0 1 1 1 0 .5.5 0 0 1-1 0Zm2.5.5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm1.5-.5a.5.5 0 1 1 1 0 .5.5 0 0 1-1 0Zm2 0a.5.5 0 1 1 1 0 .5.5 0 0 1-1 0Z"></path><path d="M8.5 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`), RouterFill[FILENAME], [
  [
    1,
    0,
    [
      [1, 172],
      [2, 2],
      [3, 2],
      [4, 2]
    ]
  ]
]);
function RouterFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RouterFill);
  var svg = root1610();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(4);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-router-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RouterFill = hmr(RouterFill, () => RouterFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RouterFill[HMR].source;
    set(RouterFill[HMR].source, module.default[HMR].original);
  });
}
var RouterFill_default = RouterFill;
mark_module_end(RouterFill);

// node_modules/svelte-bootstrap-icons/lib/Router.svelte
mark_module_start();
Router[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Router.svelte";
var root1611 = add_locations(ns_template(`<svg><!><path d="M5.525 3.025a3.5 3.5 0 0 1 4.95 0 .5.5 0 1 0 .707-.707 4.5 4.5 0 0 0-6.364 0 .5.5 0 0 0 .707.707Z"></path><path d="M6.94 4.44a1.5 1.5 0 0 1 2.12 0 .5.5 0 0 0 .708-.708 2.5 2.5 0 0 0-3.536 0 .5.5 0 0 0 .707.707ZM2.5 11a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm4.5-.5a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0Zm2.5.5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm1.5-.5a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0Zm2 0a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0Z"></path><path d="M2.974 2.342a.5.5 0 1 0-.948.316L3.806 8H1.5A1.5 1.5 0 0 0 0 9.5v2A1.5 1.5 0 0 0 1.5 13H2a.5.5 0 0 0 .5.5h2A.5.5 0 0 0 5 13h6a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5h.5a1.5 1.5 0 0 0 1.5-1.5v-2A1.5 1.5 0 0 0 14.5 8h-2.306l1.78-5.342a.5.5 0 1 0-.948-.316L11.14 8H4.86L2.974 2.342ZM14.5 9a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5h13Z"></path><path d="M8.5 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`), Router[FILENAME], [
  [
    1,
    0,
    [
      [1, 167],
      [2, 2],
      [3, 2],
      [4, 2]
    ]
  ]
]);
function Router($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Router);
  var svg = root1611();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(4);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-router", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Router = hmr(Router, () => Router[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Router[HMR].source;
    set(Router[HMR].source, module.default[HMR].original);
  });
}
var Router_default = Router;
mark_module_end(Router);

// node_modules/svelte-bootstrap-icons/lib/RssFill.svelte
mark_module_start();
RssFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/RssFill.svelte";
var root1612 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm1.5 2.5c5.523 0 10 4.477 10 10a1 1 0 1 1-2 0 8 8 0 0 0-8-8 1 1 0 0 1 0-2zm0 4a6 6 0 0 1 6 6 1 1 0 1 1-2 0 4 4 0 0 0-4-4 1 1 0 0 1 0-2zm.5 7a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), RssFill[FILENAME], [[1, 0, [[1, 169]]]]);
function RssFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, RssFill);
  var svg = root1612();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rss-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RssFill = hmr(RssFill, () => RssFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RssFill[HMR].source;
    set(RssFill[HMR].source, module.default[HMR].original);
  });
}
var RssFill_default = RssFill;
mark_module_end(RssFill);

// node_modules/svelte-bootstrap-icons/lib/Rss.svelte
mark_module_start();
Rss[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Rss.svelte";
var root1613 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M5.5 12a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-3-8.5a1 1 0 0 1 1-1c5.523 0 10 4.477 10 10a1 1 0 1 1-2 0 8 8 0 0 0-8-8 1 1 0 0 1-1-1zm0 4a1 1 0 0 1 1-1 6 6 0 0 1 6 6 1 1 0 1 1-2 0 4 4 0 0 0-4-4 1 1 0 0 1-1-1z"></path></svg>`), Rss[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Rss($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Rss);
  var svg = root1613();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rss", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rss = hmr(Rss, () => Rss[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rss[HMR].source;
    set(Rss[HMR].source, module.default[HMR].original);
  });
}
var Rss_default = Rss;
mark_module_end(Rss);

// node_modules/svelte-bootstrap-icons/lib/Rulers.svelte
mark_module_start();
Rulers[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Rulers.svelte";
var root1614 = add_locations(ns_template(`<svg><!><path d="M1 0a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h5v-1H2v-1h4v-1H4v-1h2v-1H2v-1h4V9H4V8h2V7H2V6h4V2h1v4h1V4h1v2h1V2h1v4h1V4h1v2h1V2h1v4h1V1a1 1 0 0 0-1-1H1z"></path></svg>`), Rulers[FILENAME], [[1, 0, [[1, 167]]]]);
function Rulers($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Rulers);
  var svg = root1614();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-rulers", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rulers = hmr(Rulers, () => Rulers[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rulers[HMR].source;
    set(Rulers[HMR].source, module.default[HMR].original);
  });
}
var Rulers_default = Rulers;
mark_module_end(Rulers);

// node_modules/svelte-bootstrap-icons/lib/SafeFill.svelte
mark_module_start();
SafeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SafeFill.svelte";
var root1615 = add_locations(ns_template(`<svg><!><path d="M9.778 9.414A2 2 0 1 1 6.95 6.586a2 2 0 0 1 2.828 2.828z"></path><path d="M2.5 0A1.5 1.5 0 0 0 1 1.5V3H.5a.5.5 0 0 0 0 1H1v3.5H.5a.5.5 0 0 0 0 1H1V12H.5a.5.5 0 0 0 0 1H1v1.5A1.5 1.5 0 0 0 2.5 16h12a1.5 1.5 0 0 0 1.5-1.5v-13A1.5 1.5 0 0 0 14.5 0h-12zm3.036 4.464 1.09 1.09a3.003 3.003 0 0 1 3.476 0l1.09-1.09a.5.5 0 1 1 .707.708l-1.09 1.09c.74 1.037.74 2.44 0 3.476l1.09 1.09a.5.5 0 1 1-.707.708l-1.09-1.09a3.002 3.002 0 0 1-3.476 0l-1.09 1.09a.5.5 0 1 1-.708-.708l1.09-1.09a3.003 3.003 0 0 1 0-3.476l-1.09-1.09a.5.5 0 1 1 .708-.708zM14 6.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 1 1 0z"></path></svg>`), SafeFill[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function SafeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SafeFill);
  var svg = root1615();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-safe-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SafeFill = hmr(SafeFill, () => SafeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SafeFill[HMR].source;
    set(SafeFill[HMR].source, module.default[HMR].original);
  });
}
var SafeFill_default = SafeFill;
mark_module_end(SafeFill);

// node_modules/svelte-bootstrap-icons/lib/Safe.svelte
mark_module_start();
Safe[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Safe.svelte";
var root1616 = add_locations(ns_template(`<svg><!><path d="M1 1.5A1.5 1.5 0 0 1 2.5 0h12A1.5 1.5 0 0 1 16 1.5v13a1.5 1.5 0 0 1-1.5 1.5h-12A1.5 1.5 0 0 1 1 14.5V13H.5a.5.5 0 0 1 0-1H1V8.5H.5a.5.5 0 0 1 0-1H1V4H.5a.5.5 0 0 1 0-1H1V1.5zM2.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5h12a.5.5 0 0 0 .5-.5v-13a.5.5 0 0 0-.5-.5h-12z"></path><path d="M13.5 6a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 1 .5-.5zM4.828 4.464a.5.5 0 0 1 .708 0l1.09 1.09a3.003 3.003 0 0 1 3.476 0l1.09-1.09a.5.5 0 1 1 .707.708l-1.09 1.09c.74 1.037.74 2.44 0 3.476l1.09 1.09a.5.5 0 1 1-.707.708l-1.09-1.09a3.002 3.002 0 0 1-3.476 0l-1.09 1.09a.5.5 0 1 1-.708-.708l1.09-1.09a3.003 3.003 0 0 1 0-3.476l-1.09-1.09a.5.5 0 0 1 0-.708zM6.95 6.586a2 2 0 1 0 2.828 2.828A2 2 0 0 0 6.95 6.586z"></path></svg>`), Safe[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Safe($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Safe);
  var svg = root1616();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-safe", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Safe = hmr(Safe, () => Safe[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Safe[HMR].source;
    set(Safe[HMR].source, module.default[HMR].original);
  });
}
var Safe_default = Safe;
mark_module_end(Safe);

// node_modules/svelte-bootstrap-icons/lib/Safe2Fill.svelte
mark_module_start();
Safe2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Safe2Fill.svelte";
var root1617 = add_locations(ns_template(`<svg><!><path d="M6.563 8H5.035a3.482 3.482 0 0 1 .662-1.596l1.08 1.08c-.094.16-.167.332-.214.516zm.921-1.223-1.08-1.08A3.482 3.482 0 0 1 8 5.035v1.528c-.184.047-.357.12-.516.214zM9 6.563V5.035a3.482 3.482 0 0 1 1.596.662l-1.08 1.08A1.988 1.988 0 0 0 9 6.563zm1.223.921 1.08-1.08c.343.458.577 1.003.662 1.596h-1.528a1.989 1.989 0 0 0-.214-.516zM10.437 9h1.528a3.483 3.483 0 0 1-.662 1.596l-1.08-1.08c.094-.16.167-.332.214-.516zm-.921 1.223 1.08 1.08A3.483 3.483 0 0 1 9 11.965v-1.528c.184-.047.357-.12.516-.214zM8 10.437v1.528a3.483 3.483 0 0 1-1.596-.662l1.08-1.08c.16.094.332.167.516.214zm-1.223-.921-1.08 1.08A3.482 3.482 0 0 1 5.035 9h1.528c.047.184.12.357.214.516zM7.5 8.5a1 1 0 1 1 2 0 1 1 0 0 1-2 0z"></path><path d="M2.5 1A1.5 1.5 0 0 0 1 2.5V3H.5a.5.5 0 0 0 0 1H1v4H.5a.5.5 0 0 0 0 1H1v4H.5a.5.5 0 0 0 0 1H1v.5A1.5 1.5 0 0 0 2.5 16h12a1.5 1.5 0 0 0 1.5-1.5v-12A1.5 1.5 0 0 0 14.5 1h-12zm6 3a4.5 4.5 0 1 1 0 9 4.5 4.5 0 0 1 0-9z"></path></svg>`), Safe2Fill[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Safe2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Safe2Fill);
  var svg = root1617();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-safe2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Safe2Fill = hmr(Safe2Fill, () => Safe2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Safe2Fill[HMR].source;
    set(Safe2Fill[HMR].source, module.default[HMR].original);
  });
}
var Safe2Fill_default = Safe2Fill;
mark_module_end(Safe2Fill);

// node_modules/svelte-bootstrap-icons/lib/Safe2.svelte
mark_module_start();
Safe2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Safe2.svelte";
var root1618 = add_locations(ns_template(`<svg><!><path d="M1 2.5A1.5 1.5 0 0 1 2.5 1h12A1.5 1.5 0 0 1 16 2.5v12a1.5 1.5 0 0 1-1.5 1.5h-12A1.5 1.5 0 0 1 1 14.5V14H.5a.5.5 0 0 1 0-1H1V9H.5a.5.5 0 0 1 0-1H1V4H.5a.5.5 0 0 1 0-1H1v-.5zM2.5 2a.5.5 0 0 0-.5.5v12a.5.5 0 0 0 .5.5h12a.5.5 0 0 0 .5-.5v-12a.5.5 0 0 0-.5-.5h-12z"></path><path d="M5.035 8h1.528c.047-.184.12-.357.214-.516l-1.08-1.08A3.482 3.482 0 0 0 5.035 8zm1.369-2.303 1.08 1.08c.16-.094.332-.167.516-.214V5.035a3.482 3.482 0 0 0-1.596.662zM9 5.035v1.528c.184.047.357.12.516.214l1.08-1.08A3.482 3.482 0 0 0 9 5.035zm2.303 1.369-1.08 1.08c.094.16.167.332.214.516h1.528a3.483 3.483 0 0 0-.662-1.596zM11.965 9h-1.528c-.047.184-.12.357-.214.516l1.08 1.08A3.483 3.483 0 0 0 11.965 9zm-1.369 2.303-1.08-1.08c-.16.094-.332.167-.516.214v1.528a3.483 3.483 0 0 0 1.596-.662zM8 11.965v-1.528a1.989 1.989 0 0 1-.516-.214l-1.08 1.08A3.483 3.483 0 0 0 8 11.965zm-2.303-1.369 1.08-1.08A1.988 1.988 0 0 1 6.563 9H5.035c.085.593.319 1.138.662 1.596zM4 8.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0zm4.5-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"></path></svg>`), Safe2[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Safe2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Safe2);
  var svg = root1618();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-safe2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Safe2 = hmr(Safe2, () => Safe2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Safe2[HMR].source;
    set(Safe2[HMR].source, module.default[HMR].original);
  });
}
var Safe2_default = Safe2;
mark_module_end(Safe2);

// node_modules/svelte-bootstrap-icons/lib/SaveFill.svelte
mark_module_start();
SaveFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SaveFill.svelte";
var root1619 = add_locations(ns_template(`<svg><!><path d="M8.5 1.5A1.5 1.5 0 0 1 10 0h4a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h6c-.314.418-.5.937-.5 1.5v7.793L4.854 6.646a.5.5 0 1 0-.708.708l3.5 3.5a.5.5 0 0 0 .708 0l3.5-3.5a.5.5 0 0 0-.708-.708L8.5 9.293V1.5z"></path></svg>`), SaveFill[FILENAME], [[1, 0, [[1, 170]]]]);
function SaveFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SaveFill);
  var svg = root1619();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-save-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SaveFill = hmr(SaveFill, () => SaveFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SaveFill[HMR].source;
    set(SaveFill[HMR].source, module.default[HMR].original);
  });
}
var SaveFill_default = SaveFill;
mark_module_end(SaveFill);

// node_modules/svelte-bootstrap-icons/lib/Save.svelte
mark_module_start();
Save[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Save.svelte";
var root1620 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z"></path></svg>`), Save[FILENAME], [[1, 0, [[1, 165]]]]);
function Save($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Save);
  var svg = root1620();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-save", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Save = hmr(Save, () => Save[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Save[HMR].source;
    set(Save[HMR].source, module.default[HMR].original);
  });
}
var Save_default = Save;
mark_module_end(Save);

// node_modules/svelte-bootstrap-icons/lib/Save2Fill.svelte
mark_module_start();
Save2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Save2Fill.svelte";
var root1621 = add_locations(ns_template(`<svg><!><path d="M8.5 1.5A1.5 1.5 0 0 1 10 0h4a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h6c-.314.418-.5.937-.5 1.5v6h-2a.5.5 0 0 0-.354.854l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5A.5.5 0 0 0 10.5 7.5h-2v-6z"></path></svg>`), Save2Fill[FILENAME], [[1, 0, [[1, 171]]]]);
function Save2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Save2Fill);
  var svg = root1621();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-save2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Save2Fill = hmr(Save2Fill, () => Save2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Save2Fill[HMR].source;
    set(Save2Fill[HMR].source, module.default[HMR].original);
  });
}
var Save2Fill_default = Save2Fill;
mark_module_end(Save2Fill);

// node_modules/svelte-bootstrap-icons/lib/Save2.svelte
mark_module_start();
Save2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Save2.svelte";
var root1622 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v4.5h2a.5.5 0 0 1 .354.854l-2.5 2.5a.5.5 0 0 1-.708 0l-2.5-2.5A.5.5 0 0 1 5.5 6.5h2V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z"></path></svg>`), Save2[FILENAME], [[1, 0, [[1, 166]]]]);
function Save2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Save2);
  var svg = root1622();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-save2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Save2 = hmr(Save2, () => Save2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Save2[HMR].source;
    set(Save2[HMR].source, module.default[HMR].original);
  });
}
var Save2_default = Save2;
mark_module_end(Save2);

// node_modules/svelte-bootstrap-icons/lib/Scissors.svelte
mark_module_start();
Scissors[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Scissors.svelte";
var root1623 = add_locations(ns_template(`<svg><!><path d="M3.5 3.5c-.614-.884-.074-1.962.858-2.5L8 7.226 11.642 1c.932.538 1.472 1.616.858 2.5L8.81 8.61l1.556 2.661a2.5 2.5 0 1 1-.794.637L8 9.73l-1.572 2.177a2.5 2.5 0 1 1-.794-.637L7.19 8.61 3.5 3.5zm2.5 10a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0zm7 0a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0z"></path></svg>`), Scissors[FILENAME], [[1, 0, [[1, 169]]]]);
function Scissors($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Scissors);
  var svg = root1623();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-scissors", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scissors = hmr(Scissors, () => Scissors[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scissors[HMR].source;
    set(Scissors[HMR].source, module.default[HMR].original);
  });
}
var Scissors_default = Scissors;
mark_module_end(Scissors);

// node_modules/svelte-bootstrap-icons/lib/Scooter.svelte
mark_module_start();
Scooter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Scooter.svelte";
var root1624 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M9 2.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-.39l1.4 7a2.5 2.5 0 1 1-.98.195l-.189-.938-2.43 3.527A.5.5 0 0 1 9.5 13H4.95a2.5 2.5 0 1 1 0-1h4.287l2.831-4.11L11.09 3H9.5a.5.5 0 0 1-.5-.5ZM3.915 12a1.5 1.5 0 1 0 0 1H2.5a.5.5 0 0 1 0-1h1.415Zm8.817-.789A1.499 1.499 0 0 0 13.5 14a1.5 1.5 0 0 0 .213-2.985l.277 1.387a.5.5 0 0 1-.98.196l-.278-1.387Z"></path></svg>`), Scooter[FILENAME], [[1, 0, [[1, 168]]]]);
function Scooter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Scooter);
  var svg = root1624();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-scooter", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scooter = hmr(Scooter, () => Scooter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scooter[HMR].source;
    set(Scooter[HMR].source, module.default[HMR].original);
  });
}
var Scooter_default = Scooter;
mark_module_end(Scooter);

// node_modules/svelte-bootstrap-icons/lib/Screwdriver.svelte
mark_module_start();
Screwdriver[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Screwdriver.svelte";
var root1625 = add_locations(ns_template(`<svg><!><path d="M0 .995.995 0l3.064 2.19a.995.995 0 0 1 .417.809v.07c0 .264.105.517.291.704l5.677 5.676.909-.303a.995.995 0 0 1 1.018.24l3.338 3.339a.995.995 0 0 1 0 1.406L14.13 15.71a.995.995 0 0 1-1.406 0l-3.337-3.34a.995.995 0 0 1-.24-1.018l.302-.909-5.676-5.677a.995.995 0 0 0-.704-.291H3a.995.995 0 0 1-.81-.417L0 .995Zm11.293 9.595a.497.497 0 1 0-.703.703l2.984 2.984a.497.497 0 0 0 .703-.703l-2.984-2.984Z"></path></svg>`), Screwdriver[FILENAME], [[1, 0, [[1, 172]]]]);
function Screwdriver($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Screwdriver);
  var svg = root1625();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-screwdriver", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Screwdriver = hmr(Screwdriver, () => Screwdriver[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Screwdriver[HMR].source;
    set(Screwdriver[HMR].source, module.default[HMR].original);
  });
}
var Screwdriver_default = Screwdriver;
mark_module_end(Screwdriver);

// node_modules/svelte-bootstrap-icons/lib/SdCardFill.svelte
mark_module_start();
SdCardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SdCardFill.svelte";
var root1626 = add_locations(ns_template(`<svg><!><path d="M12.5 0H5.914a1.5 1.5 0 0 0-1.06.44L2.439 2.853A1.5 1.5 0 0 0 2 3.914V14.5A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-13A1.5 1.5 0 0 0 12.5 0Zm-7 2.75a.75.75 0 0 1 .75.75v2a.75.75 0 0 1-1.5 0v-2a.75.75 0 0 1 .75-.75Zm2 0a.75.75 0 0 1 .75.75v2a.75.75 0 0 1-1.5 0v-2a.75.75 0 0 1 .75-.75Zm2.75.75v2a.75.75 0 0 1-1.5 0v-2a.75.75 0 0 1 1.5 0Zm1.25-.75a.75.75 0 0 1 .75.75v2a.75.75 0 0 1-1.5 0v-2a.75.75 0 0 1 .75-.75Z"></path></svg>`), SdCardFill[FILENAME], [[1, 0, [[1, 173]]]]);
function SdCardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SdCardFill);
  var svg = root1626();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sd-card-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SdCardFill = hmr(SdCardFill, () => SdCardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SdCardFill[HMR].source;
    set(SdCardFill[HMR].source, module.default[HMR].original);
  });
}
var SdCardFill_default = SdCardFill;
mark_module_end(SdCardFill);

// node_modules/svelte-bootstrap-icons/lib/SdCard.svelte
mark_module_start();
SdCard[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SdCard.svelte";
var root1627 = add_locations(ns_template(`<svg><!><path d="M6.25 3.5a.75.75 0 0 0-1.5 0v2a.75.75 0 0 0 1.5 0v-2zm2 0a.75.75 0 0 0-1.5 0v2a.75.75 0 0 0 1.5 0v-2zm2 0a.75.75 0 0 0-1.5 0v2a.75.75 0 0 0 1.5 0v-2zm2 0a.75.75 0 0 0-1.5 0v2a.75.75 0 0 0 1.5 0v-2z"></path><path fill-rule="evenodd" d="M5.914 0H12.5A1.5 1.5 0 0 1 14 1.5v13a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5V3.914c0-.398.158-.78.44-1.06L4.853.439A1.5 1.5 0 0 1 5.914 0zM13 1.5a.5.5 0 0 0-.5-.5H5.914a.5.5 0 0 0-.353.146L3.146 3.561A.5.5 0 0 0 3 3.914V14.5a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-13z"></path></svg>`), SdCard[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function SdCard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SdCard);
  var svg = root1627();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sd-card", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SdCard = hmr(SdCard, () => SdCard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SdCard[HMR].source;
    set(SdCard[HMR].source, module.default[HMR].original);
  });
}
var SdCard_default = SdCard;
mark_module_end(SdCard);

// node_modules/svelte-bootstrap-icons/lib/SearchHeartFill.svelte
mark_module_start();
SearchHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SearchHeartFill.svelte";
var root1628 = add_locations(ns_template(`<svg><!><path d="M6.5 13a6.474 6.474 0 0 0 3.845-1.258h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.008 1.008 0 0 0-.115-.1A6.471 6.471 0 0 0 13 6.5 6.502 6.502 0 0 0 6.5 0a6.5 6.5 0 1 0 0 13Zm0-8.518c1.664-1.673 5.825 1.254 0 5.018-5.825-3.764-1.664-6.69 0-5.018Z"></path></svg>`), SearchHeartFill[FILENAME], [[1, 0, [[1, 178]]]]);
function SearchHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SearchHeartFill);
  var svg = root1628();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-search-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SearchHeartFill = hmr(SearchHeartFill, () => SearchHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SearchHeartFill[HMR].source;
    set(SearchHeartFill[HMR].source, module.default[HMR].original);
  });
}
var SearchHeartFill_default = SearchHeartFill;
mark_module_end(SearchHeartFill);

// node_modules/svelte-bootstrap-icons/lib/SearchHeart.svelte
mark_module_start();
SearchHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SearchHeart.svelte";
var root1629 = add_locations(ns_template(`<svg><!><path d="M6.5 4.482c1.664-1.673 5.825 1.254 0 5.018-5.825-3.764-1.664-6.69 0-5.018Z"></path><path d="M13 6.5a6.471 6.471 0 0 1-1.258 3.844c.04.03.078.062.115.098l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1.007 1.007 0 0 1-.1-.115h.002A6.5 6.5 0 1 1 13 6.5ZM6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11Z"></path></svg>`), SearchHeart[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function SearchHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SearchHeart);
  var svg = root1629();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-search-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SearchHeart = hmr(SearchHeart, () => SearchHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SearchHeart[HMR].source;
    set(SearchHeart[HMR].source, module.default[HMR].original);
  });
}
var SearchHeart_default = SearchHeart;
mark_module_end(SearchHeart);

// node_modules/svelte-bootstrap-icons/lib/Search.svelte
mark_module_start();
Search[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Search.svelte";
var root1630 = add_locations(ns_template(`<svg><!><path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"></path></svg>`), Search[FILENAME], [[1, 0, [[1, 167]]]]);
function Search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Search);
  var svg = root1630();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-search", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Search = hmr(Search, () => Search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search[HMR].source;
    set(Search[HMR].source, module.default[HMR].original);
  });
}
var Search_default = Search;
mark_module_end(Search);

// node_modules/svelte-bootstrap-icons/lib/SegmentedNav.svelte
mark_module_start();
SegmentedNav[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SegmentedNav.svelte";
var root1631 = add_locations(ns_template(`<svg><!><path d="M0 6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6zm6 3h4V5H6v4zm9-1V6a1 1 0 0 0-1-1h-3v4h3a1 1 0 0 0 1-1z"></path></svg>`), SegmentedNav[FILENAME], [[1, 0, [[1, 174]]]]);
function SegmentedNav($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SegmentedNav);
  var svg = root1631();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-segmented-nav", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SegmentedNav = hmr(SegmentedNav, () => SegmentedNav[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SegmentedNav[HMR].source;
    set(SegmentedNav[HMR].source, module.default[HMR].original);
  });
}
var SegmentedNav_default = SegmentedNav;
mark_module_end(SegmentedNav);

// node_modules/svelte-bootstrap-icons/lib/SendArrowDownFill.svelte
mark_module_start();
SendArrowDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendArrowDownFill.svelte";
var root1632 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15.854.146a.5.5 0 0 1 .11.54L13.026 8.03A4.5 4.5 0 0 0 8 12.5c0 .5 0 1.5-.773.36l-1.59-2.498L.644 7.184l-.002-.001-.41-.261a.5.5 0 0 1 .083-.886l.452-.18.001-.001L15.314.035a.5.5 0 0 1 .54.111ZM6.637 10.07l7.494-7.494.471-1.178-1.178.471L5.93 9.363l.338.215a.5.5 0 0 1 .154.154l.215.338Z"></path><path fill-rule="evenodd" d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-1.646a.5.5 0 0 1-.722-.016l-1.149-1.25a.5.5 0 1 1 .737-.676l.28.305V11a.5.5 0 0 1 1 0v1.793l.396-.397a.5.5 0 0 1 .708.708l-1.25 1.25Z"></path></svg>`), SendArrowDownFill[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function SendArrowDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendArrowDownFill);
  var svg = root1632();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-arrow-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendArrowDownFill = hmr(SendArrowDownFill, () => SendArrowDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendArrowDownFill[HMR].source;
    set(SendArrowDownFill[HMR].source, module.default[HMR].original);
  });
}
var SendArrowDownFill_default = SendArrowDownFill;
mark_module_end(SendArrowDownFill);

// node_modules/svelte-bootstrap-icons/lib/SendArrowDown.svelte
mark_module_start();
SendArrowDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendArrowDown.svelte";
var root1633 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15.854.146a.5.5 0 0 1 .11.54l-2.8 7a.5.5 0 1 1-.928-.372l1.895-4.738-7.494 7.494 1.376 2.162a.5.5 0 1 1-.844.537l-1.531-2.407L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM5.93 9.363l7.494-7.494L1.591 6.602l4.339 2.76Z"></path><path fill-rule="evenodd" d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-1.646a.5.5 0 0 1-.722-.016l-1.149-1.25a.5.5 0 1 1 .737-.676l.28.305V11a.5.5 0 0 1 1 0v1.793l.396-.397a.5.5 0 0 1 .708.708l-1.25 1.25Z"></path></svg>`), SendArrowDown[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function SendArrowDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendArrowDown);
  var svg = root1633();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-arrow-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendArrowDown = hmr(SendArrowDown, () => SendArrowDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendArrowDown[HMR].source;
    set(SendArrowDown[HMR].source, module.default[HMR].original);
  });
}
var SendArrowDown_default = SendArrowDown;
mark_module_end(SendArrowDown);

// node_modules/svelte-bootstrap-icons/lib/SendArrowUpFill.svelte
mark_module_start();
SendArrowUpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendArrowUpFill.svelte";
var root1634 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15.854.146a.5.5 0 0 1 .11.54L13.026 8.03A4.5 4.5 0 0 0 8 12.5c0 .5 0 1.5-.773.36l-1.59-2.498L.644 7.184l-.002-.001-.41-.261a.5.5 0 0 1 .083-.886l.452-.18.001-.001L15.314.035a.5.5 0 0 1 .54.111ZM6.637 10.07l7.494-7.494.471-1.178-1.178.471L5.93 9.363l.338.215a.5.5 0 0 1 .154.154l.215.338Z"></path><path fill-rule="evenodd" d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.354a.5.5 0 0 0-.722.016l-1.149 1.25a.5.5 0 1 0 .737.676l.28-.305V14a.5.5 0 0 0 1 0v-1.793l.396.397a.5.5 0 0 0 .708-.708l-1.25-1.25Z"></path></svg>`), SendArrowUpFill[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function SendArrowUpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendArrowUpFill);
  var svg = root1634();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-arrow-up-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendArrowUpFill = hmr(SendArrowUpFill, () => SendArrowUpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendArrowUpFill[HMR].source;
    set(SendArrowUpFill[HMR].source, module.default[HMR].original);
  });
}
var SendArrowUpFill_default = SendArrowUpFill;
mark_module_end(SendArrowUpFill);

// node_modules/svelte-bootstrap-icons/lib/SendArrowUp.svelte
mark_module_start();
SendArrowUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendArrowUp.svelte";
var root1635 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M15.854.146a.5.5 0 0 1 .11.54l-2.8 7a.5.5 0 1 1-.928-.372l1.895-4.738-7.494 7.494 1.376 2.162a.5.5 0 1 1-.844.537l-1.531-2.407L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM5.93 9.363l7.494-7.494L1.591 6.602l4.339 2.76Z"></path><path fill-rule="evenodd" d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.354-5.354a.5.5 0 0 0-.722.016l-1.149 1.25a.5.5 0 1 0 .737.676l.28-.305V14a.5.5 0 0 0 1 0v-1.793l.396.397a.5.5 0 0 0 .708-.708l-1.25-1.25Z"></path></svg>`), SendArrowUp[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function SendArrowUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendArrowUp);
  var svg = root1635();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-arrow-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendArrowUp = hmr(SendArrowUp, () => SendArrowUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendArrowUp[HMR].source;
    set(SendArrowUp[HMR].source, module.default[HMR].original);
  });
}
var SendArrowUp_default = SendArrowUp;
mark_module_end(SendArrowUp);

// node_modules/svelte-bootstrap-icons/lib/SendCheckFill.svelte
mark_module_start();
SendCheckFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendCheckFill.svelte";
var root1636 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 1.59 2.498C8 14 8 13 8 12.5a4.5 4.5 0 0 1 5.026-4.47L15.964.686Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-1.993-1.679a.5.5 0 0 0-.686.172l-1.17 1.95-.547-.547a.5.5 0 0 0-.708.708l.774.773a.75.75 0 0 0 1.174-.144l1.335-2.226a.5.5 0 0 0-.172-.686Z"></path></svg>`), SendCheckFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function SendCheckFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendCheckFill);
  var svg = root1636();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-check-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendCheckFill = hmr(SendCheckFill, () => SendCheckFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendCheckFill[HMR].source;
    set(SendCheckFill[HMR].source, module.default[HMR].original);
  });
}
var SendCheckFill_default = SendCheckFill;
mark_module_end(SendCheckFill);

// node_modules/svelte-bootstrap-icons/lib/SendCheck.svelte
mark_module_start();
SendCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendCheck.svelte";
var root1637 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855a.75.75 0 0 0-.124 1.329l4.995 3.178 1.531 2.406a.5.5 0 0 0 .844-.536L6.637 10.07l7.494-7.494-1.895 4.738a.5.5 0 1 0 .928.372l2.8-7Zm-2.54 1.183L5.93 9.363 1.591 6.602l11.833-4.733Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-1.993-1.679a.5.5 0 0 0-.686.172l-1.17 1.95-.547-.547a.5.5 0 0 0-.708.708l.774.773a.75.75 0 0 0 1.174-.144l1.335-2.226a.5.5 0 0 0-.172-.686Z"></path></svg>`), SendCheck[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function SendCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendCheck);
  var svg = root1637();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendCheck = hmr(SendCheck, () => SendCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendCheck[HMR].source;
    set(SendCheck[HMR].source, module.default[HMR].original);
  });
}
var SendCheck_default = SendCheck;
mark_module_end(SendCheck);

// node_modules/svelte-bootstrap-icons/lib/SendDashFill.svelte
mark_module_start();
SendDashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendDashFill.svelte";
var root1638 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 1.59 2.498C8 14 8 13 8 12.5a4.5 4.5 0 0 1 5.026-4.47L15.964.686Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-5.5 0a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 0-1h-3a.5.5 0 0 0-.5.5Z"></path></svg>`), SendDashFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function SendDashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendDashFill);
  var svg = root1638();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-dash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendDashFill = hmr(SendDashFill, () => SendDashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendDashFill[HMR].source;
    set(SendDashFill[HMR].source, module.default[HMR].original);
  });
}
var SendDashFill_default = SendDashFill;
mark_module_end(SendDashFill);

// node_modules/svelte-bootstrap-icons/lib/SendDash.svelte
mark_module_start();
SendDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendDash.svelte";
var root1639 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855a.75.75 0 0 0-.124 1.329l4.995 3.178 1.531 2.406a.5.5 0 0 0 .844-.536L6.637 10.07l7.494-7.494-1.895 4.738a.5.5 0 1 0 .928.372l2.8-7Zm-2.54 1.183L5.93 9.363 1.591 6.602l11.833-4.733Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-5.5 0a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 0-1h-3a.5.5 0 0 0-.5.5Z"></path></svg>`), SendDash[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function SendDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendDash);
  var svg = root1639();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendDash = hmr(SendDash, () => SendDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendDash[HMR].source;
    set(SendDash[HMR].source, module.default[HMR].original);
  });
}
var SendDash_default = SendDash;
mark_module_end(SendDash);

// node_modules/svelte-bootstrap-icons/lib/SendExclamationFill.svelte
mark_module_start();
SendExclamationFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendExclamationFill.svelte";
var root1640 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 1.59 2.498C8 14 8 13 8 12.5a4.5 4.5 0 0 1 5.026-4.47L15.964.686Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1.5a.5.5 0 0 1-1 0V11a.5.5 0 0 1 1 0Zm0 3a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`), SendExclamationFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function SendExclamationFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendExclamationFill);
  var svg = root1640();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-exclamation-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendExclamationFill = hmr(SendExclamationFill, () => SendExclamationFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendExclamationFill[HMR].source;
    set(SendExclamationFill[HMR].source, module.default[HMR].original);
  });
}
var SendExclamationFill_default = SendExclamationFill;
mark_module_end(SendExclamationFill);

// node_modules/svelte-bootstrap-icons/lib/SendExclamation.svelte
mark_module_start();
SendExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendExclamation.svelte";
var root1641 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855a.75.75 0 0 0-.124 1.329l4.995 3.178 1.531 2.406a.5.5 0 0 0 .844-.536L6.637 10.07l7.494-7.494-1.895 4.738a.5.5 0 1 0 .928.372l2.8-7Zm-2.54 1.183L5.93 9.363 1.591 6.602l11.833-4.733Z"></path><path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1.5a.5.5 0 0 1-1 0V11a.5.5 0 0 1 1 0Zm0 3a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`), SendExclamation[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function SendExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendExclamation);
  var svg = root1641();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendExclamation = hmr(SendExclamation, () => SendExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendExclamation[HMR].source;
    set(SendExclamation[HMR].source, module.default[HMR].original);
  });
}
var SendExclamation_default = SendExclamation;
mark_module_end(SendExclamation);

// node_modules/svelte-bootstrap-icons/lib/SendFill.svelte
mark_module_start();
SendFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendFill.svelte";
var root1642 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"></path></svg>`), SendFill[FILENAME], [[1, 0, [[1, 170]]]]);
function SendFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendFill);
  var svg = root1642();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendFill = hmr(SendFill, () => SendFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendFill[HMR].source;
    set(SendFill[HMR].source, module.default[HMR].original);
  });
}
var SendFill_default = SendFill;
mark_module_end(SendFill);

// node_modules/svelte-bootstrap-icons/lib/SendPlusFill.svelte
mark_module_start();
SendPlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendPlusFill.svelte";
var root1643 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 1.59 2.498C8 14 8 13 8 12.5a4.5 4.5 0 0 1 5.026-4.47L15.964.686Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5Z"></path></svg>`), SendPlusFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function SendPlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendPlusFill);
  var svg = root1643();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendPlusFill = hmr(SendPlusFill, () => SendPlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendPlusFill[HMR].source;
    set(SendPlusFill[HMR].source, module.default[HMR].original);
  });
}
var SendPlusFill_default = SendPlusFill;
mark_module_end(SendPlusFill);

// node_modules/svelte-bootstrap-icons/lib/SendPlus.svelte
mark_module_start();
SendPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendPlus.svelte";
var root1644 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855a.75.75 0 0 0-.124 1.329l4.995 3.178 1.531 2.406a.5.5 0 0 0 .844-.536L6.637 10.07l7.494-7.494-1.895 4.738a.5.5 0 1 0 .928.372l2.8-7Zm-2.54 1.183L5.93 9.363 1.591 6.602l11.833-4.733Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5Z"></path></svg>`), SendPlus[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function SendPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendPlus);
  var svg = root1644();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendPlus = hmr(SendPlus, () => SendPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendPlus[HMR].source;
    set(SendPlus[HMR].source, module.default[HMR].original);
  });
}
var SendPlus_default = SendPlus;
mark_module_end(SendPlus);

// node_modules/svelte-bootstrap-icons/lib/SendSlashFill.svelte
mark_module_start();
SendSlashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendSlashFill.svelte";
var root1645 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 1.59 2.498C8 14 8 13 8 12.5a4.5 4.5 0 0 1 5.026-4.47L15.964.686Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"></path><path d="M14.975 10.025a3.5 3.5 0 1 0-4.95 4.95 3.5 3.5 0 0 0 4.95-4.95Zm-4.243.707a2.501 2.501 0 0 1 3.147-.318l-3.465 3.465a2.501 2.501 0 0 1 .318-3.147Zm.39 3.854 3.464-3.465a2.501 2.501 0 0 1-3.465 3.465Z"></path></svg>`), SendSlashFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function SendSlashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendSlashFill);
  var svg = root1645();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-slash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendSlashFill = hmr(SendSlashFill, () => SendSlashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendSlashFill[HMR].source;
    set(SendSlashFill[HMR].source, module.default[HMR].original);
  });
}
var SendSlashFill_default = SendSlashFill;
mark_module_end(SendSlashFill);

// node_modules/svelte-bootstrap-icons/lib/SendSlash.svelte
mark_module_start();
SendSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendSlash.svelte";
var root1646 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855a.75.75 0 0 0-.124 1.329l4.995 3.178 1.531 2.406a.5.5 0 0 0 .844-.536L6.637 10.07l7.494-7.494-1.895 4.738a.5.5 0 1 0 .928.372l2.8-7Zm-2.54 1.183L5.93 9.363 1.591 6.602l11.833-4.733Z"></path><path d="M14.975 10.025a3.5 3.5 0 1 0-4.95 4.95 3.5 3.5 0 0 0 4.95-4.95Zm-4.243.707a2.501 2.501 0 0 1 3.147-.318l-3.465 3.465a2.501 2.501 0 0 1 .318-3.147Zm.39 3.854 3.464-3.465a2.501 2.501 0 0 1-3.465 3.465Z"></path></svg>`), SendSlash[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function SendSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendSlash);
  var svg = root1646();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendSlash = hmr(SendSlash, () => SendSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendSlash[HMR].source;
    set(SendSlash[HMR].source, module.default[HMR].original);
  });
}
var SendSlash_default = SendSlash;
mark_module_end(SendSlash);

// node_modules/svelte-bootstrap-icons/lib/SendXFill.svelte
mark_module_start();
SendXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendXFill.svelte";
var root1647 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 1.59 2.498C8 14 8 13 8 12.5a4.5 4.5 0 0 1 5.026-4.47L15.964.686Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-4.854-1.354a.5.5 0 0 0 0 .708l.647.646-.647.646a.5.5 0 0 0 .708.708l.646-.647.646.647a.5.5 0 0 0 .708-.708l-.647-.646.647-.646a.5.5 0 0 0-.708-.708l-.646.647-.646-.647a.5.5 0 0 0-.708 0Z"></path></svg>`), SendXFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function SendXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendXFill);
  var svg = root1647();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendXFill = hmr(SendXFill, () => SendXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendXFill[HMR].source;
    set(SendXFill[HMR].source, module.default[HMR].original);
  });
}
var SendXFill_default = SendXFill;
mark_module_end(SendXFill);

// node_modules/svelte-bootstrap-icons/lib/SendX.svelte
mark_module_start();
SendX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SendX.svelte";
var root1648 = add_locations(ns_template(`<svg><!><path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855a.75.75 0 0 0-.124 1.329l4.995 3.178 1.531 2.406a.5.5 0 0 0 .844-.536L6.637 10.07l7.494-7.494-1.895 4.738a.5.5 0 1 0 .928.372l2.8-7Zm-2.54 1.183L5.93 9.363 1.591 6.602l11.833-4.733Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-4.854-1.354a.5.5 0 0 0 0 .708l.647.646-.647.646a.5.5 0 0 0 .708.708l.646-.647.646.647a.5.5 0 0 0 .708-.708l-.647-.646.647-.646a.5.5 0 0 0-.708-.708l-.646.647-.646-.647a.5.5 0 0 0-.708 0Z"></path></svg>`), SendX[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function SendX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SendX);
  var svg = root1648();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendX = hmr(SendX, () => SendX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendX[HMR].source;
    set(SendX[HMR].source, module.default[HMR].original);
  });
}
var SendX_default = SendX;
mark_module_end(SendX);

// node_modules/svelte-bootstrap-icons/lib/Send.svelte
mark_module_start();
Send[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Send.svelte";
var root1649 = add_locations(ns_template(`<svg><!><path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z"></path></svg>`), Send[FILENAME], [[1, 0, [[1, 165]]]]);
function Send($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Send);
  var svg = root1649();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-send", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Send = hmr(Send, () => Send[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Send[HMR].source;
    set(Send[HMR].source, module.default[HMR].original);
  });
}
var Send_default = Send;
mark_module_end(Send);

// node_modules/svelte-bootstrap-icons/lib/Server.svelte
mark_module_start();
Server[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Server.svelte";
var root1650 = add_locations(ns_template(`<svg><!><path d="M1.333 2.667C1.333 1.194 4.318 0 8 0s6.667 1.194 6.667 2.667V4c0 1.473-2.985 2.667-6.667 2.667S1.333 5.473 1.333 4V2.667z"></path><path d="M1.333 6.334v3C1.333 10.805 4.318 12 8 12s6.667-1.194 6.667-2.667V6.334a6.51 6.51 0 0 1-1.458.79C11.81 7.684 9.967 8 8 8c-1.966 0-3.809-.317-5.208-.876a6.508 6.508 0 0 1-1.458-.79z"></path><path d="M14.667 11.668a6.51 6.51 0 0 1-1.458.789c-1.4.56-3.242.876-5.21.876-1.966 0-3.809-.316-5.208-.876a6.51 6.51 0 0 1-1.458-.79v1.666C1.333 14.806 4.318 16 8 16s6.667-1.194 6.667-2.667v-1.665z"></path></svg>`), Server[FILENAME], [
  [
    1,
    0,
    [[1, 167], [2, 2], [3, 2]]
  ]
]);
function Server($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Server);
  var svg = root1650();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-server", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Server = hmr(Server, () => Server[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Server[HMR].source;
    set(Server[HMR].source, module.default[HMR].original);
  });
}
var Server_default = Server;
mark_module_end(Server);

// node_modules/svelte-bootstrap-icons/lib/Shadows.svelte
mark_module_start();
Shadows[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Shadows.svelte";
var root1651 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-8 7a7 7 0 1 1 3.608-13H8a.5.5 0 0 0 0 1h4.899c.312.306.596.64.846 1H8a.5.5 0 0 0 0 1h6.326c.153.32.281.655.384 1H8a.5.5 0 0 0 0 1h6.93c.046.327.07.66.07 1H8a.5.5 0 0 0 0 1h6.93a6.953 6.953 0 0 1-.22 1H8a.5.5 0 0 0 0 1h6.326c-.166.35-.36.685-.58 1H8a.5.5 0 0 0 0 1h4.899a7.032 7.032 0 0 1-1.306 1.009A.503.503 0 0 0 11.5 14H8a.5.5 0 0 0 0 1Z"></path></svg>`), Shadows[FILENAME], [[1, 0, [[1, 168]]]]);
function Shadows($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Shadows);
  var svg = root1651();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shadows", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shadows = hmr(Shadows, () => Shadows[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shadows[HMR].source;
    set(Shadows[HMR].source, module.default[HMR].original);
  });
}
var Shadows_default = Shadows;
mark_module_end(Shadows);

// node_modules/svelte-bootstrap-icons/lib/ShareFill.svelte
mark_module_start();
ShareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShareFill.svelte";
var root1652 = add_locations(ns_template(`<svg><!><path d="M11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5z"></path></svg>`), ShareFill[FILENAME], [[1, 0, [[1, 171]]]]);
function ShareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShareFill);
  var svg = root1652();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-share-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShareFill = hmr(ShareFill, () => ShareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShareFill[HMR].source;
    set(ShareFill[HMR].source, module.default[HMR].original);
  });
}
var ShareFill_default = ShareFill;
mark_module_end(ShareFill);

// node_modules/svelte-bootstrap-icons/lib/Share.svelte
mark_module_start();
Share[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Share.svelte";
var root1653 = add_locations(ns_template(`<svg><!><path d="M13.5 1a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5zm-8.5 4a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zm11 5.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3z"></path></svg>`), Share[FILENAME], [[1, 0, [[1, 166]]]]);
function Share($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Share);
  var svg = root1653();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-share", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Share = hmr(Share, () => Share[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Share[HMR].source;
    set(Share[HMR].source, module.default[HMR].original);
  });
}
var Share_default = Share;
mark_module_end(Share);

// node_modules/svelte-bootstrap-icons/lib/ShieldCheck.svelte
mark_module_start();
ShieldCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldCheck.svelte";
var root1654 = add_locations(ns_template(`<svg><!><path d="M5.338 1.59a61.44 61.44 0 0 0-2.837.856.481.481 0 0 0-.328.39c-.554 4.157.726 7.19 2.253 9.188a10.725 10.725 0 0 0 2.287 2.233c.346.244.652.42.893.533.12.057.218.095.293.118a.55.55 0 0 0 .101.025.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"></path><path d="M10.854 5.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 7.793l2.646-2.647a.5.5 0 0 1 .708 0z"></path></svg>`), ShieldCheck[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function ShieldCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldCheck);
  var svg = root1654();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldCheck = hmr(ShieldCheck, () => ShieldCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldCheck[HMR].source;
    set(ShieldCheck[HMR].source, module.default[HMR].original);
  });
}
var ShieldCheck_default = ShieldCheck;
mark_module_end(ShieldCheck);

// node_modules/svelte-bootstrap-icons/lib/ShieldExclamation.svelte
mark_module_start();
ShieldExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldExclamation.svelte";
var root1655 = add_locations(ns_template(`<svg><!><path d="M5.338 1.59a61.44 61.44 0 0 0-2.837.856.481.481 0 0 0-.328.39c-.554 4.157.726 7.19 2.253 9.188a10.725 10.725 0 0 0 2.287 2.233c.346.244.652.42.893.533.12.057.218.095.293.118a.55.55 0 0 0 .101.025.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"></path><path d="M7.001 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.553.553 0 0 1-1.1 0L7.1 4.995z"></path></svg>`), ShieldExclamation[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function ShieldExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldExclamation);
  var svg = root1655();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldExclamation = hmr(ShieldExclamation, () => ShieldExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldExclamation[HMR].source;
    set(ShieldExclamation[HMR].source, module.default[HMR].original);
  });
}
var ShieldExclamation_default = ShieldExclamation;
mark_module_end(ShieldExclamation);

// node_modules/svelte-bootstrap-icons/lib/ShieldFillCheck.svelte
mark_module_start();
ShieldFillCheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldFillCheck.svelte";
var root1656 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0c-.69 0-1.843.265-2.928.56-1.11.3-2.229.655-2.887.87a1.54 1.54 0 0 0-1.044 1.262c-.596 4.477.787 7.795 2.465 9.99a11.777 11.777 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7.159 7.159 0 0 0 1.048-.625 11.775 11.775 0 0 0 2.517-2.453c1.678-2.195 3.061-5.513 2.465-9.99a1.541 1.541 0 0 0-1.044-1.263 62.467 62.467 0 0 0-2.887-.87C9.843.266 8.69 0 8 0zm2.146 5.146a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 7.793l2.646-2.647z"></path></svg>`), ShieldFillCheck[FILENAME], [[1, 0, [[1, 178]]]]);
function ShieldFillCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldFillCheck);
  var svg = root1656();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-fill-check", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldFillCheck = hmr(ShieldFillCheck, () => ShieldFillCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldFillCheck[HMR].source;
    set(ShieldFillCheck[HMR].source, module.default[HMR].original);
  });
}
var ShieldFillCheck_default = ShieldFillCheck;
mark_module_end(ShieldFillCheck);

// node_modules/svelte-bootstrap-icons/lib/ShieldFillExclamation.svelte
mark_module_start();
ShieldFillExclamation[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldFillExclamation.svelte";
var root1657 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0c-.69 0-1.843.265-2.928.56-1.11.3-2.229.655-2.887.87a1.54 1.54 0 0 0-1.044 1.262c-.596 4.477.787 7.795 2.465 9.99a11.777 11.777 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7.159 7.159 0 0 0 1.048-.625 11.775 11.775 0 0 0 2.517-2.453c1.678-2.195 3.061-5.513 2.465-9.99a1.541 1.541 0 0 0-1.044-1.263 62.467 62.467 0 0 0-2.887-.87C9.843.266 8.69 0 8 0zm-.55 8.502L7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0zM8.002 12a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"></path></svg>`), ShieldFillExclamation[FILENAME], [[1, 0, [[1, 184]]]]);
function ShieldFillExclamation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldFillExclamation);
  var svg = root1657();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-fill-exclamation", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldFillExclamation = hmr(ShieldFillExclamation, () => ShieldFillExclamation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldFillExclamation[HMR].source;
    set(ShieldFillExclamation[HMR].source, module.default[HMR].original);
  });
}
var ShieldFillExclamation_default = ShieldFillExclamation;
mark_module_end(ShieldFillExclamation);

// node_modules/svelte-bootstrap-icons/lib/ShieldFillMinus.svelte
mark_module_start();
ShieldFillMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldFillMinus.svelte";
var root1658 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0c-.69 0-1.843.265-2.928.56-1.11.3-2.229.655-2.887.87a1.54 1.54 0 0 0-1.044 1.262c-.596 4.477.787 7.795 2.465 9.99a11.777 11.777 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7.159 7.159 0 0 0 1.048-.625 11.775 11.775 0 0 0 2.517-2.453c1.678-2.195 3.061-5.513 2.465-9.99a1.541 1.541 0 0 0-1.044-1.263 62.467 62.467 0 0 0-2.887-.87C9.843.266 8.69 0 8 0zM6 7.5a.5.5 0 0 1 0-1h4a.5.5 0 0 1 0 1H6z"></path></svg>`), ShieldFillMinus[FILENAME], [[1, 0, [[1, 178]]]]);
function ShieldFillMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldFillMinus);
  var svg = root1658();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-fill-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldFillMinus = hmr(ShieldFillMinus, () => ShieldFillMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldFillMinus[HMR].source;
    set(ShieldFillMinus[HMR].source, module.default[HMR].original);
  });
}
var ShieldFillMinus_default = ShieldFillMinus;
mark_module_end(ShieldFillMinus);

// node_modules/svelte-bootstrap-icons/lib/ShieldFillPlus.svelte
mark_module_start();
ShieldFillPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldFillPlus.svelte";
var root1659 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0c-.69 0-1.843.265-2.928.56-1.11.3-2.229.655-2.887.87a1.54 1.54 0 0 0-1.044 1.262c-.596 4.477.787 7.795 2.465 9.99a11.777 11.777 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7.159 7.159 0 0 0 1.048-.625 11.775 11.775 0 0 0 2.517-2.453c1.678-2.195 3.061-5.513 2.465-9.99a1.541 1.541 0 0 0-1.044-1.263 62.467 62.467 0 0 0-2.887-.87C9.843.266 8.69 0 8 0zm-.5 5a.5.5 0 0 1 1 0v1.5H10a.5.5 0 0 1 0 1H8.5V9a.5.5 0 0 1-1 0V7.5H6a.5.5 0 0 1 0-1h1.5V5z"></path></svg>`), ShieldFillPlus[FILENAME], [[1, 0, [[1, 177]]]]);
function ShieldFillPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldFillPlus);
  var svg = root1659();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-fill-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldFillPlus = hmr(ShieldFillPlus, () => ShieldFillPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldFillPlus[HMR].source;
    set(ShieldFillPlus[HMR].source, module.default[HMR].original);
  });
}
var ShieldFillPlus_default = ShieldFillPlus;
mark_module_end(ShieldFillPlus);

// node_modules/svelte-bootstrap-icons/lib/ShieldFillX.svelte
mark_module_start();
ShieldFillX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldFillX.svelte";
var root1660 = add_locations(ns_template(`<svg><!><path d="M8 0c-.69 0-1.843.265-2.928.56-1.11.3-2.229.655-2.887.87a1.54 1.54 0 0 0-1.044 1.262c-.596 4.477.787 7.795 2.465 9.99a11.777 11.777 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7.159 7.159 0 0 0 1.048-.625 11.775 11.775 0 0 0 2.517-2.453c1.678-2.195 3.061-5.513 2.465-9.99a1.541 1.541 0 0 0-1.044-1.263 62.467 62.467 0 0 0-2.887-.87C9.843.266 8.69 0 8 0zM6.854 5.146 8 6.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 7l1.147 1.146a.5.5 0 0 1-.708.708L8 7.707 6.854 8.854a.5.5 0 1 1-.708-.708L7.293 7 6.146 5.854a.5.5 0 1 1 .708-.708z"></path></svg>`), ShieldFillX[FILENAME], [[1, 0, [[1, 174]]]]);
function ShieldFillX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldFillX);
  var svg = root1660();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-fill-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldFillX = hmr(ShieldFillX, () => ShieldFillX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldFillX[HMR].source;
    set(ShieldFillX[HMR].source, module.default[HMR].original);
  });
}
var ShieldFillX_default = ShieldFillX;
mark_module_end(ShieldFillX);

// node_modules/svelte-bootstrap-icons/lib/ShieldFill.svelte
mark_module_start();
ShieldFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldFill.svelte";
var root1661 = add_locations(ns_template(`<svg><!><path d="M5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"></path></svg>`), ShieldFill[FILENAME], [[1, 0, [[1, 172]]]]);
function ShieldFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldFill);
  var svg = root1661();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldFill = hmr(ShieldFill, () => ShieldFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldFill[HMR].source;
    set(ShieldFill[HMR].source, module.default[HMR].original);
  });
}
var ShieldFill_default = ShieldFill;
mark_module_end(ShieldFill);

// node_modules/svelte-bootstrap-icons/lib/ShieldLockFill.svelte
mark_module_start();
ShieldLockFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldLockFill.svelte";
var root1662 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0c-.69 0-1.843.265-2.928.56-1.11.3-2.229.655-2.887.87a1.54 1.54 0 0 0-1.044 1.262c-.596 4.477.787 7.795 2.465 9.99a11.777 11.777 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7.159 7.159 0 0 0 1.048-.625 11.775 11.775 0 0 0 2.517-2.453c1.678-2.195 3.061-5.513 2.465-9.99a1.541 1.541 0 0 0-1.044-1.263 62.467 62.467 0 0 0-2.887-.87C9.843.266 8.69 0 8 0zm0 5a1.5 1.5 0 0 1 .5 2.915l.385 1.99a.5.5 0 0 1-.491.595h-.788a.5.5 0 0 1-.49-.595l.384-1.99A1.5 1.5 0 0 1 8 5z"></path></svg>`), ShieldLockFill[FILENAME], [[1, 0, [[1, 177]]]]);
function ShieldLockFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldLockFill);
  var svg = root1662();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-lock-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldLockFill = hmr(ShieldLockFill, () => ShieldLockFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldLockFill[HMR].source;
    set(ShieldLockFill[HMR].source, module.default[HMR].original);
  });
}
var ShieldLockFill_default = ShieldLockFill;
mark_module_end(ShieldLockFill);

// node_modules/svelte-bootstrap-icons/lib/ShieldLock.svelte
mark_module_start();
ShieldLock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldLock.svelte";
var root1663 = add_locations(ns_template(`<svg><!><path d="M5.338 1.59a61.44 61.44 0 0 0-2.837.856.481.481 0 0 0-.328.39c-.554 4.157.726 7.19 2.253 9.188a10.725 10.725 0 0 0 2.287 2.233c.346.244.652.42.893.533.12.057.218.095.293.118a.55.55 0 0 0 .101.025.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"></path><path d="M9.5 6.5a1.5 1.5 0 0 1-1 1.415l.385 1.99a.5.5 0 0 1-.491.595h-.788a.5.5 0 0 1-.49-.595l.384-1.99a1.5 1.5 0 1 1 2-1.415z"></path></svg>`), ShieldLock[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function ShieldLock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldLock);
  var svg = root1663();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-lock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldLock = hmr(ShieldLock, () => ShieldLock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldLock[HMR].source;
    set(ShieldLock[HMR].source, module.default[HMR].original);
  });
}
var ShieldLock_default = ShieldLock;
mark_module_end(ShieldLock);

// node_modules/svelte-bootstrap-icons/lib/ShieldMinus.svelte
mark_module_start();
ShieldMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldMinus.svelte";
var root1664 = add_locations(ns_template(`<svg><!><path d="M5.338 1.59a61.44 61.44 0 0 0-2.837.856.481.481 0 0 0-.328.39c-.554 4.157.726 7.19 2.253 9.188a10.725 10.725 0 0 0 2.287 2.233c.346.244.652.42.893.533.12.057.218.095.293.118a.55.55 0 0 0 .101.025.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"></path><path d="M5.5 7a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"></path></svg>`), ShieldMinus[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function ShieldMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldMinus);
  var svg = root1664();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldMinus = hmr(ShieldMinus, () => ShieldMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldMinus[HMR].source;
    set(ShieldMinus[HMR].source, module.default[HMR].original);
  });
}
var ShieldMinus_default = ShieldMinus;
mark_module_end(ShieldMinus);

// node_modules/svelte-bootstrap-icons/lib/ShieldPlus.svelte
mark_module_start();
ShieldPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldPlus.svelte";
var root1665 = add_locations(ns_template(`<svg><!><path d="M5.338 1.59a61.44 61.44 0 0 0-2.837.856.481.481 0 0 0-.328.39c-.554 4.157.726 7.19 2.253 9.188a10.725 10.725 0 0 0 2.287 2.233c.346.244.652.42.893.533.12.057.218.095.293.118a.55.55 0 0 0 .101.025.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"></path><path d="M8 4.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V9a.5.5 0 0 1-1 0V7.5H6a.5.5 0 0 1 0-1h1.5V5a.5.5 0 0 1 .5-.5z"></path></svg>`), ShieldPlus[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function ShieldPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldPlus);
  var svg = root1665();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldPlus = hmr(ShieldPlus, () => ShieldPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldPlus[HMR].source;
    set(ShieldPlus[HMR].source, module.default[HMR].original);
  });
}
var ShieldPlus_default = ShieldPlus;
mark_module_end(ShieldPlus);

// node_modules/svelte-bootstrap-icons/lib/ShieldShaded.svelte
mark_module_start();
ShieldShaded[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldShaded.svelte";
var root1666 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 14.933a.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067v13.866zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"></path></svg>`), ShieldShaded[FILENAME], [[1, 0, [[1, 174]]]]);
function ShieldShaded($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldShaded);
  var svg = root1666();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-shaded", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldShaded = hmr(ShieldShaded, () => ShieldShaded[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldShaded[HMR].source;
    set(ShieldShaded[HMR].source, module.default[HMR].original);
  });
}
var ShieldShaded_default = ShieldShaded;
mark_module_end(ShieldShaded);

// node_modules/svelte-bootstrap-icons/lib/ShieldSlashFill.svelte
mark_module_start();
ShieldSlashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldSlashFill.svelte";
var root1667 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.093 3.093c-.465 4.275.885 7.46 2.513 9.589a11.777 11.777 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7.159 7.159 0 0 0 1.048-.625 11.32 11.32 0 0 0 1.733-1.525L1.093 3.093zm12.215 8.215L3.128 1.128A61.369 61.369 0 0 1 5.073.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.483 3.626-.332 6.491-1.551 8.616zm.338 3.046-13-13 .708-.708 13 13-.707.707z"></path></svg>`), ShieldSlashFill[FILENAME], [[1, 0, [[1, 178]]]]);
function ShieldSlashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldSlashFill);
  var svg = root1667();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-slash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldSlashFill = hmr(ShieldSlashFill, () => ShieldSlashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldSlashFill[HMR].source;
    set(ShieldSlashFill[HMR].source, module.default[HMR].original);
  });
}
var ShieldSlashFill_default = ShieldSlashFill;
mark_module_end(ShieldSlashFill);

// node_modules/svelte-bootstrap-icons/lib/ShieldSlash.svelte
mark_module_start();
ShieldSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldSlash.svelte";
var root1668 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.093 3.093c-.465 4.275.885 7.46 2.513 9.589a11.777 11.777 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7.159 7.159 0 0 0 1.048-.625 11.32 11.32 0 0 0 1.733-1.525l-.745-.745a10.27 10.27 0 0 1-1.578 1.392c-.346.244-.652.42-.893.533-.12.057-.218.095-.293.118a.55.55 0 0 1-.101.025.615.615 0 0 1-.1-.025 2.348 2.348 0 0 1-.294-.118 6.141 6.141 0 0 1-.893-.533 10.725 10.725 0 0 1-2.287-2.233C3.053 10.228 1.879 7.594 2.06 4.06l-.967-.967zM3.98 1.98l-.852-.852A58.935 58.935 0 0 1 5.072.559C6.157.266 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.483 3.626-.332 6.491-1.551 8.616l-.77-.77c1.042-1.915 1.72-4.469 1.29-7.702a.48.48 0 0 0-.33-.39c-.65-.213-1.75-.56-2.836-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524a49.7 49.7 0 0 0-1.357.39zm9.666 12.374-13-13 .708-.708 13 13-.707.707z"></path></svg>`), ShieldSlash[FILENAME], [[1, 0, [[1, 173]]]]);
function ShieldSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldSlash);
  var svg = root1668();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldSlash = hmr(ShieldSlash, () => ShieldSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldSlash[HMR].source;
    set(ShieldSlash[HMR].source, module.default[HMR].original);
  });
}
var ShieldSlash_default = ShieldSlash;
mark_module_end(ShieldSlash);

// node_modules/svelte-bootstrap-icons/lib/ShieldX.svelte
mark_module_start();
ShieldX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShieldX.svelte";
var root1669 = add_locations(ns_template(`<svg><!><path d="M5.338 1.59a61.44 61.44 0 0 0-2.837.856.481.481 0 0 0-.328.39c-.554 4.157.726 7.19 2.253 9.188a10.725 10.725 0 0 0 2.287 2.233c.346.244.652.42.893.533.12.057.218.095.293.118a.55.55 0 0 0 .101.025.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"></path><path d="M6.146 5.146a.5.5 0 0 1 .708 0L8 6.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 7l1.147 1.146a.5.5 0 0 1-.708.708L8 7.707 6.854 8.854a.5.5 0 1 1-.708-.708L7.293 7 6.146 5.854a.5.5 0 0 1 0-.708z"></path></svg>`), ShieldX[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function ShieldX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShieldX);
  var svg = root1669();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldX = hmr(ShieldX, () => ShieldX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldX[HMR].source;
    set(ShieldX[HMR].source, module.default[HMR].original);
  });
}
var ShieldX_default = ShieldX;
mark_module_end(ShieldX);

// node_modules/svelte-bootstrap-icons/lib/Shield.svelte
mark_module_start();
Shield[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Shield.svelte";
var root1670 = add_locations(ns_template(`<svg><!><path d="M5.338 1.59a61.44 61.44 0 0 0-2.837.856.481.481 0 0 0-.328.39c-.554 4.157.726 7.19 2.253 9.188a10.725 10.725 0 0 0 2.287 2.233c.346.244.652.42.893.533.12.057.218.095.293.118a.55.55 0 0 0 .101.025.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"></path></svg>`), Shield[FILENAME], [[1, 0, [[1, 167]]]]);
function Shield($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Shield);
  var svg = root1670();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shield", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield = hmr(Shield, () => Shield[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield[HMR].source;
    set(Shield[HMR].source, module.default[HMR].original);
  });
}
var Shield_default = Shield;
mark_module_end(Shield);

// node_modules/svelte-bootstrap-icons/lib/ShiftFill.svelte
mark_module_start();
ShiftFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShiftFill.svelte";
var root1671 = add_locations(ns_template(`<svg><!><path d="M7.27 2.047a1 1 0 0 1 1.46 0l6.345 6.77c.6.638.146 1.683-.73 1.683H11.5v3a1 1 0 0 1-1 1h-5a1 1 0 0 1-1-1v-3H1.654C.78 10.5.326 9.455.924 8.816L7.27 2.047z"></path></svg>`), ShiftFill[FILENAME], [[1, 0, [[1, 171]]]]);
function ShiftFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShiftFill);
  var svg = root1671();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shift-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShiftFill = hmr(ShiftFill, () => ShiftFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShiftFill[HMR].source;
    set(ShiftFill[HMR].source, module.default[HMR].original);
  });
}
var ShiftFill_default = ShiftFill;
mark_module_end(ShiftFill);

// node_modules/svelte-bootstrap-icons/lib/Shift.svelte
mark_module_start();
Shift[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Shift.svelte";
var root1672 = add_locations(ns_template(`<svg><!><path d="M7.27 2.047a1 1 0 0 1 1.46 0l6.345 6.77c.6.638.146 1.683-.73 1.683H11.5v3a1 1 0 0 1-1 1h-5a1 1 0 0 1-1-1v-3H1.654C.78 10.5.326 9.455.924 8.816L7.27 2.047zM14.346 9.5 8 2.731 1.654 9.5H4.5a1 1 0 0 1 1 1v3h5v-3a1 1 0 0 1 1-1h2.846z"></path></svg>`), Shift[FILENAME], [[1, 0, [[1, 166]]]]);
function Shift($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Shift);
  var svg = root1672();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shift", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shift = hmr(Shift, () => Shift[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shift[HMR].source;
    set(Shift[HMR].source, module.default[HMR].original);
  });
}
var Shift_default = Shift;
mark_module_end(Shift);

// node_modules/svelte-bootstrap-icons/lib/ShopWindow.svelte
mark_module_start();
ShopWindow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ShopWindow.svelte";
var root1673 = add_locations(ns_template(`<svg><!><path d="M2.97 1.35A1 1 0 0 1 3.73 1h8.54a1 1 0 0 1 .76.35l2.609 3.044A1.5 1.5 0 0 1 16 5.37v.255a2.375 2.375 0 0 1-4.25 1.458A2.371 2.371 0 0 1 9.875 8 2.37 2.37 0 0 1 8 7.083 2.37 2.37 0 0 1 6.125 8a2.37 2.37 0 0 1-1.875-.917A2.375 2.375 0 0 1 0 5.625V5.37a1.5 1.5 0 0 1 .361-.976l2.61-3.045zm1.78 4.275a1.375 1.375 0 0 0 2.75 0 .5.5 0 0 1 1 0 1.375 1.375 0 0 0 2.75 0 .5.5 0 0 1 1 0 1.375 1.375 0 1 0 2.75 0V5.37a.5.5 0 0 0-.12-.325L12.27 2H3.73L1.12 5.045A.5.5 0 0 0 1 5.37v.255a1.375 1.375 0 0 0 2.75 0 .5.5 0 0 1 1 0zM1.5 8.5A.5.5 0 0 1 2 9v6h12V9a.5.5 0 0 1 1 0v6h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1V9a.5.5 0 0 1 .5-.5zm2 .5a.5.5 0 0 1 .5.5V13h8V9.5a.5.5 0 0 1 1 0V13a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V9.5a.5.5 0 0 1 .5-.5z"></path></svg>`), ShopWindow[FILENAME], [[1, 0, [[1, 172]]]]);
function ShopWindow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ShopWindow);
  var svg = root1673();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shop-window", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShopWindow = hmr(ShopWindow, () => ShopWindow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShopWindow[HMR].source;
    set(ShopWindow[HMR].source, module.default[HMR].original);
  });
}
var ShopWindow_default = ShopWindow;
mark_module_end(ShopWindow);

// node_modules/svelte-bootstrap-icons/lib/Shop.svelte
mark_module_start();
Shop[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Shop.svelte";
var root1674 = add_locations(ns_template(`<svg><!><path d="M2.97 1.35A1 1 0 0 1 3.73 1h8.54a1 1 0 0 1 .76.35l2.609 3.044A1.5 1.5 0 0 1 16 5.37v.255a2.375 2.375 0 0 1-4.25 1.458A2.371 2.371 0 0 1 9.875 8 2.37 2.37 0 0 1 8 7.083 2.37 2.37 0 0 1 6.125 8a2.37 2.37 0 0 1-1.875-.917A2.375 2.375 0 0 1 0 5.625V5.37a1.5 1.5 0 0 1 .361-.976l2.61-3.045zm1.78 4.275a1.375 1.375 0 0 0 2.75 0 .5.5 0 0 1 1 0 1.375 1.375 0 0 0 2.75 0 .5.5 0 0 1 1 0 1.375 1.375 0 1 0 2.75 0V5.37a.5.5 0 0 0-.12-.325L12.27 2H3.73L1.12 5.045A.5.5 0 0 0 1 5.37v.255a1.375 1.375 0 0 0 2.75 0 .5.5 0 0 1 1 0zM1.5 8.5A.5.5 0 0 1 2 9v6h1v-5a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v5h6V9a.5.5 0 0 1 1 0v6h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1V9a.5.5 0 0 1 .5-.5zM4 15h3v-5H4v5zm5-5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-3zm3 0h-2v3h2v-3z"></path></svg>`), Shop[FILENAME], [[1, 0, [[1, 165]]]]);
function Shop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Shop);
  var svg = root1674();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shop", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shop = hmr(Shop, () => Shop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shop[HMR].source;
    set(Shop[HMR].source, module.default[HMR].original);
  });
}
var Shop_default = Shop;
mark_module_end(Shop);

// node_modules/svelte-bootstrap-icons/lib/Shuffle.svelte
mark_module_start();
Shuffle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Shuffle.svelte";
var root1675 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 3.5A.5.5 0 0 1 .5 3H1c2.202 0 3.827 1.24 4.874 2.418.49.552.865 1.102 1.126 1.532.26-.43.636-.98 1.126-1.532C9.173 4.24 10.798 3 13 3v1c-1.798 0-3.173 1.01-4.126 2.082A9.624 9.624 0 0 0 7.556 8a9.624 9.624 0 0 0 1.317 1.918C9.828 10.99 11.204 12 13 12v1c-2.202 0-3.827-1.24-4.874-2.418A10.595 10.595 0 0 1 7 9.05c-.26.43-.636.98-1.126 1.532C4.827 11.76 3.202 13 1 13H.5a.5.5 0 0 1 0-1H1c1.798 0 3.173-1.01 4.126-2.082A9.624 9.624 0 0 0 6.444 8a9.624 9.624 0 0 0-1.317-1.918C4.172 5.01 2.796 4 1 4H.5a.5.5 0 0 1-.5-.5z"></path><path d="M13 5.466V1.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192zm0 9v-3.932a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192z"></path></svg>`), Shuffle[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Shuffle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Shuffle);
  var svg = root1675();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-shuffle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shuffle = hmr(Shuffle, () => Shuffle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shuffle[HMR].source;
    set(Shuffle[HMR].source, module.default[HMR].original);
  });
}
var Shuffle_default = Shuffle;
mark_module_end(Shuffle);

// node_modules/svelte-bootstrap-icons/lib/SignDeadEndFill.svelte
mark_module_start();
SignDeadEndFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignDeadEndFill.svelte";
var root1676 = add_locations(ns_template(`<svg><!><path d="M5.116 6.28h.32c.395 0 .582.24.582.722 0 .48-.186.718-.581.718h-.321V6.28Zm3.636.066.268.845h-.552l.27-.845h.014Zm1.327-.066h.32c.394 0 .582.24.582.722 0 .48-.186.718-.582.718h-.32V6.28Zm-.792 3h.32c.395 0 .582.24.582.722 0 .48-.186.718-.581.718h-.32V9.28Z"></path><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM4.782 6h.69c.596 0 .886.355.886.998S6.066 8 5.473 8h-.69V6ZM7.82 7.72V8H6.571V6H7.82v.28h-.917v.57h.863v.268h-.863v.602h.917Zm.397.28h-.34l.688-2h.371l.689 2h-.352l-.177-.554h-.702L8.216 8Zm1.53-2h.69c.596 0 .886.355.886.998S11.03 8 10.436 8h-.69V6Zm-2.923 4.72V11H5.575V9h1.248v.28h-.917v.57h.863v.268h-.863v.602h.917Zm.572.28h-.32V9h.294l.933 1.436h.014V9h.32v2h-.292l-.936-1.44h-.013V11Zm1.56-2h.69c.596 0 .886.355.886.998S10.238 11 9.645 11h-.69V9Z"></path></svg>`), SignDeadEndFill[FILENAME], [
  [1, 0, [[1, 179], [2, 2]]]
]);
function SignDeadEndFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignDeadEndFill);
  var svg = root1676();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-dead-end-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignDeadEndFill = hmr(SignDeadEndFill, () => SignDeadEndFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignDeadEndFill[HMR].source;
    set(SignDeadEndFill[HMR].source, module.default[HMR].original);
  });
}
var SignDeadEndFill_default = SignDeadEndFill;
mark_module_end(SignDeadEndFill);

// node_modules/svelte-bootstrap-icons/lib/SignDeadEnd.svelte
mark_module_start();
SignDeadEnd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignDeadEnd.svelte";
var root1677 = add_locations(ns_template(`<svg><!><path d="M4.783 6v2h.69c.593 0 .886-.359.886-1.002S6.07 6 5.473 6h-.69Zm.333.28h.32c.395 0 .582.24.582.722 0 .48-.186.718-.581.718h-.321V6.28ZM7.82 7.72h-.918v-.602h.863V6.85h-.863v-.57h.917V6H6.571v2H7.82v-.28Zm.573-.274L8.216 8h-.34l.688-2h.371l.689 2h-.352l-.177-.554h-.702Zm.627-.255-.268-.845h-.015l-.27.845h.553ZM9.746 6v2h.69c.593 0 .886-.359.886-1.002S11.032 6 10.436 6h-.69Zm.333.28h.32c.394 0 .582.24.582.722 0 .48-.186.718-.582.718h-.32V6.28Zm-4.173 4.44h.917V11H5.575V9h1.248v.28h-.917v.57h.863v.268h-.863v.602Zm1.489.28V9.56h.013L8.344 11h.292V9h-.32v1.436h-.014L7.369 9h-.293v2h.319Zm1.56 0V9h.69c.596 0 .886.355.886.998S10.238 11 9.645 11h-.69Zm.653-1.72h-.32v1.44h.32c.395 0 .581-.239.581-.718 0-.481-.187-.722-.581-.722Z"></path><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435Zm-1.4.7a.495.495 0 0 1 .7 0l6.516 6.515a.495.495 0 0 1 0 .7L8.35 14.866a.495.495 0 0 1-.7 0L1.134 8.35a.495.495 0 0 1 0-.7L7.65 1.134Z"></path></svg>`), SignDeadEnd[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function SignDeadEnd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignDeadEnd);
  var svg = root1677();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-dead-end", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignDeadEnd = hmr(SignDeadEnd, () => SignDeadEnd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignDeadEnd[HMR].source;
    set(SignDeadEnd[HMR].source, module.default[HMR].original);
  });
}
var SignDeadEnd_default = SignDeadEnd;
mark_module_end(SignDeadEnd);

// node_modules/svelte-bootstrap-icons/lib/SignDoNotEnterFill.svelte
mark_module_start();
SignDoNotEnterFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignDoNotEnterFill.svelte";
var root1678 = add_locations(ns_template(`<svg><!><path d="M4.237 4.28h-.32v1.44h.32c.396 0 .582-.239.582-.718 0-.481-.188-.722-.582-.722Zm2.392.859v-.277c0-.413-.211-.617-.494-.617-.285 0-.495.204-.495.617v.277c0 .414.21.618.495.618.283 0 .494-.204.494-.618Zm4.163 0v-.277c0-.413-.211-.617-.494-.617-.285 0-.495.204-.495.617v.277c0 .414.21.618.495.618.283 0 .494-.204.494-.618Zm.006 5.828v-.694h.39c.231 0 .378.126.378.354 0 .225-.142.34-.387.34h-.38Z"></path><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16ZM3.584 6V4h.69c.596 0 .886.355.886.998S4.867 6 4.274 6h-.69Zm3.382-1.135v.272c0 .566-.318.903-.83.903-.513 0-.833-.337-.833-.903v-.272c0-.569.32-.904.832-.904.513 0 .83.337.83.904Zm1.021-.305V6h-.319V4h.293l.933 1.436h.015V4h.319v2h-.291L8 4.56h-.013Zm3.142.305v.272c0 .566-.318.903-.83.903-.513 0-.833-.337-.833-.903v-.272c0-.569.32-.904.832-.904.513 0 .83.337.83.904Zm.899-.58V6h-.333V4.285h-.584V4h1.503v.285h-.586ZM5.413 11.72V12H4.165v-2h1.248v.28h-.917v.57h.862v.268h-.862v.602h.917Zm.572.28h-.32v-2h.294l.933 1.436h.014v-1.435h.32V12h-.292l-.936-1.44h-.013V12Zm2.279 0H7.93v-1.715h-.584V10H8.85v.284h-.586V12Zm1.953-.28V12H8.97v-2h1.248v.28H9.3v.57h.863v.268H9.3v.602h.917ZM11.235 10c.42 0 .674.244.674.616a.575.575 0 0 1-.368.56l.404.824h-.373l-.36-.769h-.414V12h-.328v-2h.765ZM3.5 7h9a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Z"></path></svg>`), SignDoNotEnterFill[FILENAME], [
  [1, 0, [[1, 183], [2, 2]]]
]);
function SignDoNotEnterFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignDoNotEnterFill);
  var svg = root1678();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-do-not-enter-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignDoNotEnterFill = hmr(SignDoNotEnterFill, () => SignDoNotEnterFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignDoNotEnterFill[HMR].source;
    set(SignDoNotEnterFill[HMR].source, module.default[HMR].original);
  });
}
var SignDoNotEnterFill_default = SignDoNotEnterFill;
mark_module_end(SignDoNotEnterFill);

// node_modules/svelte-bootstrap-icons/lib/SignDoNotEnter.svelte
mark_module_start();
SignDoNotEnter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignDoNotEnter.svelte";
var root1679 = add_locations(ns_template(`<svg><!><path d="M3.584 6V4h.69c.596 0 .886.355.886.998S4.867 6 4.274 6h-.69Zm.653-1.72h-.32v1.44h.32c.396 0 .582-.239.582-.718 0-.481-.188-.722-.582-.722Zm2.729.585v.272c0 .566-.318.903-.83.903-.513 0-.833-.337-.833-.903v-.272c0-.569.32-.904.832-.904.513 0 .83.337.83.904Zm-.337.274v-.277c0-.413-.211-.617-.494-.617-.285 0-.495.204-.495.617v.277c0 .414.21.618.495.618.283 0 .494-.204.494-.618Zm1.358-.579V6h-.319V4h.293l.933 1.436h.015V4h.319v2h-.291L8 4.56h-.013Zm3.142.305v.272c0 .566-.318.903-.83.903-.513 0-.833-.337-.833-.903v-.272c0-.569.32-.904.832-.904.513 0 .83.337.83.904Zm-.337.274v-.277c0-.413-.211-.617-.494-.617-.285 0-.495.204-.495.617v.277c0 .414.21.618.495.618.283 0 .494-.204.494-.618Zm1.236-.854V6h-.333V4.285h-.584V4h1.503v.285h-.586ZM4.496 11.72h.917V12H4.165v-2h1.248v.28h-.917v.57h.862v.268h-.862v.602Zm1.489-1.16V12h-.32v-2h.294l.933 1.436h.014v-1.435h.32V12h-.292l-.936-1.44h-.013Zm2.279-.275V12H7.93v-1.715h-.584V10H8.85v.284h-.586ZM9.3 11.72h.917V12H8.97v-2h1.248v.28H9.3v.57h.863v.268H9.3v.602ZM10.47 10h.765c.42 0 .674.244.674.616a.575.575 0 0 1-.368.56l.404.824h-.373l-.36-.769h-.414V12h-.328v-2Zm.328.273v.694h.381c.245 0 .387-.115.387-.34 0-.228-.147-.354-.378-.354h-.39ZM3.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-9Z"></path><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm0-1A7 7 0 1 1 8 1a7 7 0 0 1 0 14Z"></path></svg>`), SignDoNotEnter[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function SignDoNotEnter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignDoNotEnter);
  var svg = root1679();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-do-not-enter", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignDoNotEnter = hmr(SignDoNotEnter, () => SignDoNotEnter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignDoNotEnter[HMR].source;
    set(SignDoNotEnter[HMR].source, module.default[HMR].original);
  });
}
var SignDoNotEnter_default = SignDoNotEnter;
mark_module_end(SignDoNotEnter);

// node_modules/svelte-bootstrap-icons/lib/SignIntersectionFill.svelte
mark_module_start();
SignIntersectionFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignIntersectionFill.svelte";
var root1680 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM7.25 4h1.5v3.25H12v1.5H8.75V12h-1.5V8.75H4v-1.5h3.25V4Z"></path></svg>`), SignIntersectionFill[FILENAME], [[1, 0, [[1, 183]]]]);
function SignIntersectionFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignIntersectionFill);
  var svg = root1680();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-intersection-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignIntersectionFill = hmr(SignIntersectionFill, () => SignIntersectionFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignIntersectionFill[HMR].source;
    set(SignIntersectionFill[HMR].source, module.default[HMR].original);
  });
}
var SignIntersectionFill_default = SignIntersectionFill;
mark_module_end(SignIntersectionFill);

// node_modules/svelte-bootstrap-icons/lib/SignIntersectionSideFill.svelte
mark_module_start();
SignIntersectionSideFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignIntersectionSideFill.svelte";
var root1681 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM6.25 4h1.5v3.25H11v1.5H7.75V12h-1.5V4Z"></path></svg>`), SignIntersectionSideFill[FILENAME], [[1, 0, [[1, 188]]]]);
function SignIntersectionSideFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignIntersectionSideFill);
  var svg = root1681();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-intersection-side-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignIntersectionSideFill = hmr(SignIntersectionSideFill, () => SignIntersectionSideFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignIntersectionSideFill[HMR].source;
    set(SignIntersectionSideFill[HMR].source, module.default[HMR].original);
  });
}
var SignIntersectionSideFill_default = SignIntersectionSideFill;
mark_module_end(SignIntersectionSideFill);

// node_modules/svelte-bootstrap-icons/lib/SignIntersectionSide.svelte
mark_module_start();
SignIntersectionSide[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignIntersectionSide.svelte";
var root1682 = add_locations(ns_template(`<svg><!><path d="M6.25 4v8h1.5V8.75H11v-1.5H7.75V4h-1.5Z"></path><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435Zm-1.4.7a.495.495 0 0 1 .7 0l6.516 6.515a.495.495 0 0 1 0 .7L8.35 14.866a.495.495 0 0 1-.7 0L1.134 8.35a.495.495 0 0 1 0-.7L7.65 1.134Z"></path></svg>`), SignIntersectionSide[FILENAME], [
  [1, 0, [[1, 183], [2, 2]]]
]);
function SignIntersectionSide($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignIntersectionSide);
  var svg = root1682();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-intersection-side", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignIntersectionSide = hmr(SignIntersectionSide, () => SignIntersectionSide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignIntersectionSide[HMR].source;
    set(SignIntersectionSide[HMR].source, module.default[HMR].original);
  });
}
var SignIntersectionSide_default = SignIntersectionSide;
mark_module_end(SignIntersectionSide);

// node_modules/svelte-bootstrap-icons/lib/SignIntersectionTFill.svelte
mark_module_start();
SignIntersectionTFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignIntersectionTFill.svelte";
var root1683 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM5 5h6v1.5H8.75V12h-1.5V6.5H5V5Z"></path></svg>`), SignIntersectionTFill[FILENAME], [[1, 0, [[1, 185]]]]);
function SignIntersectionTFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignIntersectionTFill);
  var svg = root1683();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-intersection-t-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignIntersectionTFill = hmr(SignIntersectionTFill, () => SignIntersectionTFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignIntersectionTFill[HMR].source;
    set(SignIntersectionTFill[HMR].source, module.default[HMR].original);
  });
}
var SignIntersectionTFill_default = SignIntersectionTFill;
mark_module_end(SignIntersectionTFill);

// node_modules/svelte-bootstrap-icons/lib/SignIntersectionT.svelte
mark_module_start();
SignIntersectionT[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignIntersectionT.svelte";
var root1684 = add_locations(ns_template(`<svg><!><path d="M5 5v1.5h2.25V12h1.5V6.5H11V5H5Z"></path><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435Zm-1.4.7a.495.495 0 0 1 .7 0l6.516 6.515a.495.495 0 0 1 0 .7L8.35 14.866a.495.495 0 0 1-.7 0L1.134 8.35a.495.495 0 0 1 0-.7L7.65 1.134Z"></path></svg>`), SignIntersectionT[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function SignIntersectionT($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignIntersectionT);
  var svg = root1684();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-intersection-t", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignIntersectionT = hmr(SignIntersectionT, () => SignIntersectionT[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignIntersectionT[HMR].source;
    set(SignIntersectionT[HMR].source, module.default[HMR].original);
  });
}
var SignIntersectionT_default = SignIntersectionT;
mark_module_end(SignIntersectionT);

// node_modules/svelte-bootstrap-icons/lib/SignIntersectionYFill.svelte
mark_module_start();
SignIntersectionYFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignIntersectionYFill.svelte";
var root1685 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435Zm1.443 4.762 1.014 1.106L8.75 8.83V12h-1.5V8.83L4.493 6.303l1.014-1.106L8 7.483l2.493-2.286Z"></path></svg>`), SignIntersectionYFill[FILENAME], [[1, 0, [[1, 185]]]]);
function SignIntersectionYFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignIntersectionYFill);
  var svg = root1685();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-intersection-y-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignIntersectionYFill = hmr(SignIntersectionYFill, () => SignIntersectionYFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignIntersectionYFill[HMR].source;
    set(SignIntersectionYFill[HMR].source, module.default[HMR].original);
  });
}
var SignIntersectionYFill_default = SignIntersectionYFill;
mark_module_end(SignIntersectionYFill);

// node_modules/svelte-bootstrap-icons/lib/SignIntersectionY.svelte
mark_module_start();
SignIntersectionY[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignIntersectionY.svelte";
var root1686 = add_locations(ns_template(`<svg><!><path d="M10.493 5.197 8 7.483 5.507 5.197 4.493 6.303 7.25 8.83V12h1.5V8.83l2.757-2.527-1.014-1.106Z"></path><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435Zm-1.4.7a.495.495 0 0 1 .7 0l6.516 6.515a.495.495 0 0 1 0 .7L8.35 14.866a.495.495 0 0 1-.7 0L1.134 8.35a.495.495 0 0 1 0-.7L7.65 1.134Z"></path></svg>`), SignIntersectionY[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function SignIntersectionY($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignIntersectionY);
  var svg = root1686();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-intersection-y", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignIntersectionY = hmr(SignIntersectionY, () => SignIntersectionY[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignIntersectionY[HMR].source;
    set(SignIntersectionY[HMR].source, module.default[HMR].original);
  });
}
var SignIntersectionY_default = SignIntersectionY;
mark_module_end(SignIntersectionY);

// node_modules/svelte-bootstrap-icons/lib/SignIntersection.svelte
mark_module_start();
SignIntersection[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignIntersection.svelte";
var root1687 = add_locations(ns_template(`<svg><!><path d="M7.25 4v3.25H4v1.5h3.25V12h1.5V8.75H12v-1.5H8.75V4h-1.5Z"></path><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435Zm-1.4.7a.495.495 0 0 1 .7 0l6.516 6.515a.495.495 0 0 1 0 .7L8.35 14.866a.495.495 0 0 1-.7 0L1.134 8.35a.495.495 0 0 1 0-.7L7.65 1.134Z"></path></svg>`), SignIntersection[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function SignIntersection($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignIntersection);
  var svg = root1687();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-intersection", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignIntersection = hmr(SignIntersection, () => SignIntersection[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignIntersection[HMR].source;
    set(SignIntersection[HMR].source, module.default[HMR].original);
  });
}
var SignIntersection_default = SignIntersection;
mark_module_end(SignIntersection);

// node_modules/svelte-bootstrap-icons/lib/SignMergeLeftFill.svelte
mark_module_start();
SignMergeLeftFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignMergeLeftFill.svelte";
var root1688 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM7.25 6H6.034a.25.25 0 0 1-.192-.41l1.966-2.36a.25.25 0 0 1 .384 0l1.966 2.36a.25.25 0 0 1-.192.41H8.75v6h-1.5V8.823c-.551.686-1.229 1.363-1.88 2.015l-.016.016-.708-.708c.757-.756 1.48-1.48 2.016-2.196.25-.333.448-.649.588-.95V6Z"></path></svg>`), SignMergeLeftFill[FILENAME], [[1, 0, [[1, 181]]]]);
function SignMergeLeftFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignMergeLeftFill);
  var svg = root1688();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-merge-left-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignMergeLeftFill = hmr(SignMergeLeftFill, () => SignMergeLeftFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignMergeLeftFill[HMR].source;
    set(SignMergeLeftFill[HMR].source, module.default[HMR].original);
  });
}
var SignMergeLeftFill_default = SignMergeLeftFill;
mark_module_end(SignMergeLeftFill);

// node_modules/svelte-bootstrap-icons/lib/SignMergeLeft.svelte
mark_module_start();
SignMergeLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignMergeLeft.svelte";
var root1689 = add_locations(ns_template(`<svg><!><path d="M7.25 6v1c-.14.301-.338.617-.588.95-.537.716-1.259 1.44-2.016 2.196l.708.708.015-.016c.652-.652 1.33-1.33 1.881-2.015V12h1.5V6h1.216a.25.25 0 0 0 .192-.41L8.192 3.23a.25.25 0 0 0-.384 0L5.842 5.59a.25.25 0 0 0 .192.41H7.25Z"></path><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435Zm-1.4.7a.495.495 0 0 1 .7 0l6.516 6.515a.495.495 0 0 1 0 .7L8.35 14.866a.495.495 0 0 1-.7 0L1.134 8.35a.495.495 0 0 1 0-.7L7.65 1.134Z"></path></svg>`), SignMergeLeft[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function SignMergeLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignMergeLeft);
  var svg = root1689();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-merge-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignMergeLeft = hmr(SignMergeLeft, () => SignMergeLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignMergeLeft[HMR].source;
    set(SignMergeLeft[HMR].source, module.default[HMR].original);
  });
}
var SignMergeLeft_default = SignMergeLeft;
mark_module_end(SignMergeLeft);

// node_modules/svelte-bootstrap-icons/lib/SignMergeRightFill.svelte
mark_module_start();
SignMergeRightFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignMergeRightFill.svelte";
var root1690 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM8.75 6v1c.14.301.338.617.588.95.537.716 1.259 1.44 2.016 2.196l-.708.708-.015-.016c-.652-.652-1.33-1.33-1.881-2.015V12h-1.5V6H6.034a.25.25 0 0 1-.192-.41l1.966-2.36a.25.25 0 0 1 .384 0l1.966 2.36a.25.25 0 0 1-.192.41H8.75Z"></path></svg>`), SignMergeRightFill[FILENAME], [[1, 0, [[1, 182]]]]);
function SignMergeRightFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignMergeRightFill);
  var svg = root1690();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-merge-right-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignMergeRightFill = hmr(SignMergeRightFill, () => SignMergeRightFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignMergeRightFill[HMR].source;
    set(SignMergeRightFill[HMR].source, module.default[HMR].original);
  });
}
var SignMergeRightFill_default = SignMergeRightFill;
mark_module_end(SignMergeRightFill);

// node_modules/svelte-bootstrap-icons/lib/SignMergeRight.svelte
mark_module_start();
SignMergeRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignMergeRight.svelte";
var root1691 = add_locations(ns_template(`<svg><!><path d="M8.75 6v1c.14.301.338.617.588.95.537.716 1.259 1.44 2.016 2.196l-.708.708-.015-.016c-.652-.652-1.33-1.33-1.881-2.015V12h-1.5V6H6.034a.25.25 0 0 1-.192-.41l1.966-2.36a.25.25 0 0 1 .384 0l1.966 2.36a.25.25 0 0 1-.192.41H8.75Z"></path><path fill-rule="evenodd" d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435Zm-1.4.7a.495.495 0 0 1 .7 0l6.516 6.515a.495.495 0 0 1 0 .7L8.35 14.866a.495.495 0 0 1-.7 0L1.134 8.35a.495.495 0 0 1 0-.7L7.65 1.134Z"></path></svg>`), SignMergeRight[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function SignMergeRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignMergeRight);
  var svg = root1691();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-merge-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignMergeRight = hmr(SignMergeRight, () => SignMergeRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignMergeRight[HMR].source;
    set(SignMergeRight[HMR].source, module.default[HMR].original);
  });
}
var SignMergeRight_default = SignMergeRight;
mark_module_end(SignMergeRight);

// node_modules/svelte-bootstrap-icons/lib/SignNoLeftTurnFill.svelte
mark_module_start();
SignNoLeftTurnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignNoLeftTurnFill.svelte";
var root1692 = add_locations(ns_template(`<svg><!><path d="M2 13.292A8 8 0 0 1 13.293 2L9.195 6.099A2.501 2.501 0 0 0 8.5 6H7V4.534a.25.25 0 0 0-.41-.192L4.23 6.308a.25.25 0 0 0 0 .384l2.36 1.966a.265.265 0 0 0 .026.02L2 13.291Zm.708.708A8 8 0 0 0 14 2.707l-3.885 3.884C10.656 7.05 11 7.735 11 8.5V11h-1V8.5c0-.489-.234-.923-.596-1.197l-6.696 6.696Z"></path><path d="M8.293 7 7 8.293V7h1.293Z"></path></svg>`), SignNoLeftTurnFill[FILENAME], [
  [1, 0, [[1, 183], [2, 2]]]
]);
function SignNoLeftTurnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignNoLeftTurnFill);
  var svg = root1692();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-no-left-turn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignNoLeftTurnFill = hmr(SignNoLeftTurnFill, () => SignNoLeftTurnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignNoLeftTurnFill[HMR].source;
    set(SignNoLeftTurnFill[HMR].source, module.default[HMR].original);
  });
}
var SignNoLeftTurnFill_default = SignNoLeftTurnFill;
mark_module_end(SignNoLeftTurnFill);

// node_modules/svelte-bootstrap-icons/lib/SignNoLeftTurn.svelte
mark_module_start();
SignNoLeftTurn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignNoLeftTurn.svelte";
var root1693 = add_locations(ns_template(`<svg><!><path d="M0 8a8 8 0 1 0 16 0A8 8 0 0 0 0 8Zm3.416 5.29 5.988-5.987c.362.274.596.708.596 1.197V11h1V8.5c0-.765-.344-1.45-.885-1.908l3.176-3.176a7 7 0 0 1-9.874 9.874Zm-.707-.706a7 7 0 0 1 9.874-9.874L9.196 6.097A2.501 2.501 0 0 0 8.5 6H7V4.534a.25.25 0 0 0-.41-.192L4.23 6.308a.25.25 0 0 0 0 .384l2.36 1.966a.265.265 0 0 0 .026.02l-3.907 3.906ZM8.293 7 7 8.293V7h1.293Z"></path></svg>`), SignNoLeftTurn[FILENAME], [[1, 0, [[1, 178]]]]);
function SignNoLeftTurn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignNoLeftTurn);
  var svg = root1693();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-no-left-turn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignNoLeftTurn = hmr(SignNoLeftTurn, () => SignNoLeftTurn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignNoLeftTurn[HMR].source;
    set(SignNoLeftTurn[HMR].source, module.default[HMR].original);
  });
}
var SignNoLeftTurn_default = SignNoLeftTurn;
mark_module_end(SignNoLeftTurn);

// node_modules/svelte-bootstrap-icons/lib/SignNoParkingFill.svelte
mark_module_start();
SignNoParkingFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignNoParkingFill.svelte";
var root1694 = add_locations(ns_template(`<svg><!><path d="M13.292 14A8 8 0 0 1 2 2.707l3.5 3.5V12h1.283V9.164h1.674L13.292 14Zm.708-.708-4.37-4.37C10.5 8.524 11 7.662 11 6.587c0-1.482-.955-2.584-2.538-2.584H5.5v.79L2.708 2.002A8 8 0 0 1 14 13.293Z"></path><path d="M6.777 7.485v.59h.59l-.59-.59Zm1.949.535L6.777 6.07v-.966H8.27c.893 0 1.419.539 1.419 1.482 0 .769-.35 1.273-.963 1.433Z"></path></svg>`), SignNoParkingFill[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function SignNoParkingFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignNoParkingFill);
  var svg = root1694();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-no-parking-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignNoParkingFill = hmr(SignNoParkingFill, () => SignNoParkingFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignNoParkingFill[HMR].source;
    set(SignNoParkingFill[HMR].source, module.default[HMR].original);
  });
}
var SignNoParkingFill_default = SignNoParkingFill;
mark_module_end(SignNoParkingFill);

// node_modules/svelte-bootstrap-icons/lib/SignNoParking.svelte
mark_module_start();
SignNoParking[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignNoParking.svelte";
var root1695 = add_locations(ns_template(`<svg><!><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm5.29-3.416L9.63 8.923C10.5 8.523 11 7.66 11 6.586c0-1.482-.955-2.584-2.538-2.584H5.5v.79L3.416 2.71a7 7 0 0 1 9.874 9.874Zm-.706.707A7 7 0 0 1 2.71 3.417l2.79 2.79V12h1.283V9.164h1.674l4.127 4.127ZM8.726 8.019 6.777 6.07v-.966H8.27c.893 0 1.419.539 1.419 1.482 0 .769-.35 1.273-.963 1.433Zm-1.949-.534.59.59h-.59v-.59Z"></path></svg>`), SignNoParking[FILENAME], [[1, 0, [[1, 176]]]]);
function SignNoParking($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignNoParking);
  var svg = root1695();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-no-parking", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignNoParking = hmr(SignNoParking, () => SignNoParking[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignNoParking[HMR].source;
    set(SignNoParking[HMR].source, module.default[HMR].original);
  });
}
var SignNoParking_default = SignNoParking;
mark_module_end(SignNoParking);

// node_modules/svelte-bootstrap-icons/lib/SignNoRightTurnFill.svelte
mark_module_start();
SignNoRightTurnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignNoRightTurnFill.svelte";
var root1696 = add_locations(ns_template(`<svg><!><path d="M14 13.292A8 8 0 0 0 2.707 2l4.097 4.098C7.025 6.034 7.259 6 7.5 6H9V4.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L9.41 8.658a.265.265 0 0 1-.026.02L14 13.291Zm-.708.708A8 8 0 0 1 2 2.707l3.885 3.884A2.495 2.495 0 0 0 5 8.5V11h1V8.5c0-.489.234-.923.596-1.197l6.696 6.696Z"></path><path d="M7.707 7 9 8.293V7H7.707Z"></path></svg>`), SignNoRightTurnFill[FILENAME], [
  [1, 0, [[1, 184], [2, 2]]]
]);
function SignNoRightTurnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignNoRightTurnFill);
  var svg = root1696();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-no-right-turn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignNoRightTurnFill = hmr(SignNoRightTurnFill, () => SignNoRightTurnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignNoRightTurnFill[HMR].source;
    set(SignNoRightTurnFill[HMR].source, module.default[HMR].original);
  });
}
var SignNoRightTurnFill_default = SignNoRightTurnFill;
mark_module_end(SignNoRightTurnFill);

// node_modules/svelte-bootstrap-icons/lib/SignNoRightTurn.svelte
mark_module_start();
SignNoRightTurn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignNoRightTurn.svelte";
var root1697 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-3.416 5.29L6.596 7.304A1.498 1.498 0 0 0 6 8.5V11H5V8.5c0-.765.344-1.45.885-1.908L2.709 3.416a7 7 0 0 0 9.874 9.874Zm.707-.706A7 7 0 0 0 3.417 2.71l3.388 3.388C7.025 6.034 7.259 6 7.5 6H9V4.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L9.41 8.658a.265.265 0 0 1-.026.02l3.907 3.906ZM7.707 7 9 8.293V7H7.707Z"></path></svg>`), SignNoRightTurn[FILENAME], [[1, 0, [[1, 179]]]]);
function SignNoRightTurn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignNoRightTurn);
  var svg = root1697();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-no-right-turn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignNoRightTurn = hmr(SignNoRightTurn, () => SignNoRightTurn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignNoRightTurn[HMR].source;
    set(SignNoRightTurn[HMR].source, module.default[HMR].original);
  });
}
var SignNoRightTurn_default = SignNoRightTurn;
mark_module_end(SignNoRightTurn);

// node_modules/svelte-bootstrap-icons/lib/SignRailroadFill.svelte
mark_module_start();
SignRailroadFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignRailroadFill.svelte";
var root1698 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L4.224 3.162 8 6.94l3.777-3.777L9.049.435Zm3.274 7.425v-.862h.467c.28 0 .467.154.467.44 0 .28-.182.421-.475.421h-.459Z"></path><path d="M12.838 4.223 9.06 8l3.777 3.777 2.727-2.728c.58-.58.58-1.519 0-2.098l-2.727-2.728Zm.03 2.361c.591 0 .935.334.935.844a.79.79 0 0 1-.485.748l.536 1.074h-.59l-.467-.994h-.473v.994h-.521V6.584h1.064Zm-1.091 6.254L8 9.06l-3.777 3.777 2.728 2.727c.58.58 1.519.58 2.098 0l2.728-2.727Zm-8.953-5.84v.861h.46c.292 0 .474-.14.474-.421 0-.286-.188-.44-.467-.44h-.467Z"></path><path d="M3.162 11.777 6.94 8 3.162 4.223.435 6.951c-.58.58-.58 1.519 0 2.098l2.727 2.728Zm-.86-5.193h1.065c.592 0 .936.334.936.844 0 .39-.242.654-.485.748l.536 1.074h-.59l-.467-.994h-.473v.994h-.521V6.584Z"></path></svg>`), SignRailroadFill[FILENAME], [
  [
    1,
    0,
    [[1, 179], [2, 2], [3, 2]]
  ]
]);
function SignRailroadFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignRailroadFill);
  var svg = root1698();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-railroad-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignRailroadFill = hmr(SignRailroadFill, () => SignRailroadFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignRailroadFill[HMR].source;
    set(SignRailroadFill[HMR].source, module.default[HMR].original);
  });
}
var SignRailroadFill_default = SignRailroadFill;
mark_module_end(SignRailroadFill);

// node_modules/svelte-bootstrap-icons/lib/SignRailroad.svelte
mark_module_start();
SignRailroad[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignRailroad.svelte";
var root1699 = add_locations(ns_template(`<svg><!><path d="M11.303 6.584h1.064c.592 0 .936.334.936.844a.79.79 0 0 1-.485.748l.536 1.074h-.59l-.467-.994h-.473v.994h-.521V6.584Zm.521.414v.861h.46c.292 0 .474-.14.474-.421 0-.286-.188-.44-.467-.44h-.467Zm-8.771-.414h1.064c.592 0 .936.334.936.844 0 .39-.242.654-.485.748l.536 1.074h-.59l-.467-.994h-.473v.994h-.521V6.584Zm.521.414v.861h.46c.292 0 .474-.14.474-.421 0-.286-.188-.44-.467-.44h-.467Z"></path><path d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435Zm1.4.7a.495.495 0 0 0-.7 0L4.923 3.861 8 6.939l3.078-3.077L8.35 1.134Zm3.788 3.788L9.061 8l3.077 3.078 2.728-2.728a.495.495 0 0 0 0-.7l-2.728-2.727Zm-1.06 7.215L8 9.061l-3.077 3.077 2.727 2.728a.495.495 0 0 0 .7 0l2.727-2.728Zm-7.216-1.06L6.939 8 3.862 4.923 1.134 7.65a.495.495 0 0 0 0 .7l2.728 2.728Z"></path></svg>`), SignRailroad[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function SignRailroad($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignRailroad);
  var svg = root1699();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-railroad", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignRailroad = hmr(SignRailroad, () => SignRailroad[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignRailroad[HMR].source;
    set(SignRailroad[HMR].source, module.default[HMR].original);
  });
}
var SignRailroad_default = SignRailroad;
mark_module_end(SignRailroad);

// node_modules/svelte-bootstrap-icons/lib/SignStopFill.svelte
mark_module_start();
SignStopFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignStopFill.svelte";
var root1700 = add_locations(ns_template(`<svg><!><path d="M10.371 8.277v-.553c0-.827-.422-1.234-.987-1.234-.572 0-.99.407-.99 1.234v.553c0 .83.418 1.237.99 1.237.565 0 .987-.408.987-1.237Zm2.586-.24c.463 0 .735-.272.735-.744s-.272-.741-.735-.741h-.774v1.485h.774Z"></path><path d="M4.893 0a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146A.5.5 0 0 0 11.107 0H4.893ZM3.16 10.08c-.931 0-1.447-.493-1.494-1.132h.653c.065.346.396.583.891.583.524 0 .83-.246.83-.62 0-.303-.203-.467-.637-.572l-.656-.164c-.61-.147-.978-.51-.978-1.078 0-.706.597-1.184 1.444-1.184.853 0 1.386.475 1.436 1.087h-.645c-.064-.32-.352-.542-.797-.542-.472 0-.77.246-.77.6 0 .261.196.437.553.522l.654.161c.673.164 1.06.487 1.06 1.11 0 .736-.574 1.228-1.544 1.228Zm3.427-3.51V10h-.665V6.57H4.753V6h3.006v.568H6.587Zm4.458 1.16v.544c0 1.131-.636 1.805-1.661 1.805-1.026 0-1.664-.674-1.664-1.805V7.73c0-1.136.638-1.807 1.664-1.807 1.025 0 1.66.674 1.66 1.807ZM11.52 6h1.535c.82 0 1.316.55 1.316 1.292 0 .747-.501 1.289-1.321 1.289h-.865V10h-.665V6.001Z"></path></svg>`), SignStopFill[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function SignStopFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignStopFill);
  var svg = root1700();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-stop-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignStopFill = hmr(SignStopFill, () => SignStopFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignStopFill[HMR].source;
    set(SignStopFill[HMR].source, module.default[HMR].original);
  });
}
var SignStopFill_default = SignStopFill;
mark_module_end(SignStopFill);

// node_modules/svelte-bootstrap-icons/lib/SignStopLightsFill.svelte
mark_module_start();
SignStopLightsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignStopLightsFill.svelte";
var root1701 = add_locations(ns_template(`<svg><!><path d="M8 6a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm0 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm1 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM6 4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V4Z"></path></svg>`), SignStopLightsFill[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function SignStopLightsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignStopLightsFill);
  var svg = root1701();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-stop-lights-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignStopLightsFill = hmr(SignStopLightsFill, () => SignStopLightsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignStopLightsFill[HMR].source;
    set(SignStopLightsFill[HMR].source, module.default[HMR].original);
  });
}
var SignStopLightsFill_default = SignStopLightsFill;
mark_module_end(SignStopLightsFill);

// node_modules/svelte-bootstrap-icons/lib/SignStopLights.svelte
mark_module_start();
SignStopLights[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignStopLights.svelte";
var root1702 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V4Zm2 2a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm0 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm1 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path><path fill-rule="evenodd" d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435Zm-1.4.7a.495.495 0 0 1 .7 0l6.516 6.515a.495.495 0 0 1 0 .7L8.35 14.866a.495.495 0 0 1-.7 0L1.134 8.35a.495.495 0 0 1 0-.7L7.65 1.134Z"></path></svg>`), SignStopLights[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function SignStopLights($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignStopLights);
  var svg = root1702();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-stop-lights", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignStopLights = hmr(SignStopLights, () => SignStopLights[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignStopLights[HMR].source;
    set(SignStopLights[HMR].source, module.default[HMR].original);
  });
}
var SignStopLights_default = SignStopLights;
mark_module_end(SignStopLights);

// node_modules/svelte-bootstrap-icons/lib/SignStop.svelte
mark_module_start();
SignStop[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignStop.svelte";
var root1703 = add_locations(ns_template(`<svg><!><path d="M3.16 10.08c-.931 0-1.447-.493-1.494-1.132h.653c.065.346.396.583.891.583.524 0 .83-.246.83-.62 0-.303-.203-.467-.637-.572l-.656-.164c-.61-.147-.978-.51-.978-1.078 0-.706.597-1.184 1.444-1.184.853 0 1.386.475 1.436 1.087h-.645c-.064-.32-.352-.542-.797-.542-.472 0-.77.246-.77.6 0 .261.196.437.553.522l.654.161c.673.164 1.06.487 1.06 1.11 0 .736-.574 1.228-1.544 1.228Zm3.427-3.51V10h-.665V6.57H4.753V6h3.006v.568H6.587Z"></path><path fill-rule="evenodd" d="M11.045 7.73v.544c0 1.131-.636 1.805-1.661 1.805-1.026 0-1.664-.674-1.664-1.805V7.73c0-1.136.638-1.807 1.664-1.807 1.025 0 1.66.674 1.66 1.807Zm-.674.547v-.553c0-.827-.422-1.234-.987-1.234-.572 0-.99.407-.99 1.234v.553c0 .83.418 1.237.99 1.237.565 0 .987-.408.987-1.237Zm1.15-2.276h1.535c.82 0 1.316.55 1.316 1.292 0 .747-.501 1.289-1.321 1.289h-.865V10h-.665V6.001Zm1.436 2.036c.463 0 .735-.272.735-.744s-.272-.741-.735-.741h-.774v1.485h.774Z"></path><path fill-rule="evenodd" d="M4.893 0a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146A.5.5 0 0 0 11.107 0H4.893ZM1 5.1 5.1 1h5.8L15 5.1v5.8L10.9 15H5.1L1 10.9V5.1Z"></path></svg>`), SignStop[FILENAME], [
  [
    1,
    0,
    [[1, 170], [2, 2], [3, 2]]
  ]
]);
function SignStop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignStop);
  var svg = root1703();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-stop", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignStop = hmr(SignStop, () => SignStop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignStop[HMR].source;
    set(SignStop[HMR].source, module.default[HMR].original);
  });
}
var SignStop_default = SignStop;
mark_module_end(SignStop);

// node_modules/svelte-bootstrap-icons/lib/SignTurnLeftFill.svelte
mark_module_start();
SignTurnLeftFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignTurnLeftFill.svelte";
var root1704 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM7 8.466a.25.25 0 0 1-.41.192L4.23 6.692a.25.25 0 0 1 0-.384l2.36-1.966a.25.25 0 0 1 .41.192V6h1.5A2.5 2.5 0 0 1 11 8.5V11h-1V8.5A1.5 1.5 0 0 0 8.5 7H7v1.466Z"></path></svg>`), SignTurnLeftFill[FILENAME], [[1, 0, [[1, 180]]]]);
function SignTurnLeftFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignTurnLeftFill);
  var svg = root1704();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-turn-left-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignTurnLeftFill = hmr(SignTurnLeftFill, () => SignTurnLeftFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignTurnLeftFill[HMR].source;
    set(SignTurnLeftFill[HMR].source, module.default[HMR].original);
  });
}
var SignTurnLeftFill_default = SignTurnLeftFill;
mark_module_end(SignTurnLeftFill);

// node_modules/svelte-bootstrap-icons/lib/SignTurnLeft.svelte
mark_module_start();
SignTurnLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignTurnLeft.svelte";
var root1705 = add_locations(ns_template(`<svg><!><path d="M11 8.5A2.5 2.5 0 0 0 8.5 6H7V4.534a.25.25 0 0 0-.41-.192L4.23 6.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 7 8.466V7h1.5A1.5 1.5 0 0 1 10 8.5V11h1V8.5Z"></path><path fill-rule="evenodd" d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435Zm1.4.7a.495.495 0 0 0-.7 0L1.134 7.65a.495.495 0 0 0 0 .7l6.516 6.516a.495.495 0 0 0 .7 0l6.516-6.516a.495.495 0 0 0 0-.7L8.35 1.134Z"></path></svg>`), SignTurnLeft[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function SignTurnLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignTurnLeft);
  var svg = root1705();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-turn-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignTurnLeft = hmr(SignTurnLeft, () => SignTurnLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignTurnLeft[HMR].source;
    set(SignTurnLeft[HMR].source, module.default[HMR].original);
  });
}
var SignTurnLeft_default = SignTurnLeft;
mark_module_end(SignTurnLeft);

// node_modules/svelte-bootstrap-icons/lib/SignTurnRightFill.svelte
mark_module_start();
SignTurnRightFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignTurnRightFill.svelte";
var root1706 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM9 8.466V7H7.5A1.5 1.5 0 0 0 6 8.5V11H5V8.5A2.5 2.5 0 0 1 7.5 6H9V4.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L9.41 8.658A.25.25 0 0 1 9 8.466Z"></path></svg>`), SignTurnRightFill[FILENAME], [[1, 0, [[1, 181]]]]);
function SignTurnRightFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignTurnRightFill);
  var svg = root1706();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-turn-right-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignTurnRightFill = hmr(SignTurnRightFill, () => SignTurnRightFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignTurnRightFill[HMR].source;
    set(SignTurnRightFill[HMR].source, module.default[HMR].original);
  });
}
var SignTurnRightFill_default = SignTurnRightFill;
mark_module_end(SignTurnRightFill);

// node_modules/svelte-bootstrap-icons/lib/SignTurnRight.svelte
mark_module_start();
SignTurnRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignTurnRight.svelte";
var root1707 = add_locations(ns_template(`<svg><!><path d="M5 8.5A2.5 2.5 0 0 1 7.5 6H9V4.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L9.41 8.658A.25.25 0 0 1 9 8.466V7H7.5A1.5 1.5 0 0 0 6 8.5V11H5V8.5Z"></path><path fill-rule="evenodd" d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435Zm1.4.7a.495.495 0 0 0-.7 0L1.134 7.65a.495.495 0 0 0 0 .7l6.516 6.516a.495.495 0 0 0 .7 0l6.516-6.516a.495.495 0 0 0 0-.7L8.35 1.134Z"></path></svg>`), SignTurnRight[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function SignTurnRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignTurnRight);
  var svg = root1707();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-turn-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignTurnRight = hmr(SignTurnRight, () => SignTurnRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignTurnRight[HMR].source;
    set(SignTurnRight[HMR].source, module.default[HMR].original);
  });
}
var SignTurnRight_default = SignTurnRight;
mark_module_end(SignTurnRight);

// node_modules/svelte-bootstrap-icons/lib/SignTurnSlightLeftFill.svelte
mark_module_start();
SignTurnSlightLeftFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignTurnSlightLeftFill.svelte";
var root1708 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435ZM6.864 8.368a.25.25 0 0 1-.451-.039l-1.06-2.882a.25.25 0 0 1 .192-.333l3.026-.523a.25.25 0 0 1 .26.371l-.667 1.154.621.373A2.5 2.5 0 0 1 10 8.632V11H9V8.632a1.5 1.5 0 0 0-.728-1.286l-.607-.364-.8 1.386Z"></path></svg>`), SignTurnSlightLeftFill[FILENAME], [[1, 0, [[1, 187]]]]);
function SignTurnSlightLeftFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignTurnSlightLeftFill);
  var svg = root1708();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-turn-slight-left-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignTurnSlightLeftFill = hmr(SignTurnSlightLeftFill, () => SignTurnSlightLeftFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignTurnSlightLeftFill[HMR].source;
    set(SignTurnSlightLeftFill[HMR].source, module.default[HMR].original);
  });
}
var SignTurnSlightLeftFill_default = SignTurnSlightLeftFill;
mark_module_end(SignTurnSlightLeftFill);

// node_modules/svelte-bootstrap-icons/lib/SignTurnSlightLeft.svelte
mark_module_start();
SignTurnSlightLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignTurnSlightLeft.svelte";
var root1709 = add_locations(ns_template(`<svg><!><path d="m7.665 6.982-.8 1.386a.25.25 0 0 1-.451-.039l-1.06-2.882a.25.25 0 0 1 .192-.333l3.026-.523a.25.25 0 0 1 .26.371l-.667 1.154.621.373A2.5 2.5 0 0 1 10 8.632V11H9V8.632a1.5 1.5 0 0 0-.728-1.286l-.607-.364Z"></path><path fill-rule="evenodd" d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435Zm1.4.7a.495.495 0 0 0-.7 0L1.134 7.65a.495.495 0 0 0 0 .7l6.516 6.516a.495.495 0 0 0 .7 0l6.516-6.516a.495.495 0 0 0 0-.7L8.35 1.134Z"></path></svg>`), SignTurnSlightLeft[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function SignTurnSlightLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignTurnSlightLeft);
  var svg = root1709();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-turn-slight-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignTurnSlightLeft = hmr(SignTurnSlightLeft, () => SignTurnSlightLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignTurnSlightLeft[HMR].source;
    set(SignTurnSlightLeft[HMR].source, module.default[HMR].original);
  });
}
var SignTurnSlightLeft_default = SignTurnSlightLeft;
mark_module_end(SignTurnSlightLeft);

// node_modules/svelte-bootstrap-icons/lib/SignTurnSlightRightFill.svelte
mark_module_start();
SignTurnSlightRightFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignTurnSlightRightFill.svelte";
var root1710 = add_locations(ns_template(`<svg><!><path d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435Zm1.385 6.547.8 1.386a.25.25 0 0 0 .451-.039l1.06-2.882a.25.25 0 0 0-.192-.333l-3.026-.523a.25.25 0 0 0-.26.371l.667 1.154-.621.373A2.5 2.5 0 0 0 6 8.632V11h1V8.632a1.5 1.5 0 0 1 .728-1.286l.607-.364Z"></path></svg>`), SignTurnSlightRightFill[FILENAME], [[1, 0, [[1, 188]]]]);
function SignTurnSlightRightFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignTurnSlightRightFill);
  var svg = root1710();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-turn-slight-right-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignTurnSlightRightFill = hmr(SignTurnSlightRightFill, () => SignTurnSlightRightFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignTurnSlightRightFill[HMR].source;
    set(SignTurnSlightRightFill[HMR].source, module.default[HMR].original);
  });
}
var SignTurnSlightRightFill_default = SignTurnSlightRightFill;
mark_module_end(SignTurnSlightRightFill);

// node_modules/svelte-bootstrap-icons/lib/SignTurnSlightRight.svelte
mark_module_start();
SignTurnSlightRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignTurnSlightRight.svelte";
var root1711 = add_locations(ns_template(`<svg><!><path d="m8.335 6.982.8 1.386a.25.25 0 0 0 .451-.039l1.06-2.882a.25.25 0 0 0-.192-.333l-3.026-.523a.25.25 0 0 0-.26.371l.667 1.154-.621.373A2.5 2.5 0 0 0 6 8.632V11h1V8.632a1.5 1.5 0 0 1 .728-1.286l.607-.364Z"></path><path fill-rule="evenodd" d="M6.95.435c.58-.58 1.52-.58 2.1 0l6.515 6.516c.58.58.58 1.519 0 2.098L9.05 15.565c-.58.58-1.519.58-2.098 0L.435 9.05a1.482 1.482 0 0 1 0-2.098L6.95.435Zm1.4.7a.495.495 0 0 0-.7 0L1.134 7.65a.495.495 0 0 0 0 .7l6.516 6.516a.495.495 0 0 0 .7 0l6.516-6.516a.495.495 0 0 0 0-.7L8.35 1.134Z"></path></svg>`), SignTurnSlightRight[FILENAME], [
  [1, 0, [[1, 183], [2, 2]]]
]);
function SignTurnSlightRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignTurnSlightRight);
  var svg = root1711();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-turn-slight-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignTurnSlightRight = hmr(SignTurnSlightRight, () => SignTurnSlightRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignTurnSlightRight[HMR].source;
    set(SignTurnSlightRight[HMR].source, module.default[HMR].original);
  });
}
var SignTurnSlightRight_default = SignTurnSlightRight;
mark_module_end(SignTurnSlightRight);

// node_modules/svelte-bootstrap-icons/lib/SignYieldFill.svelte
mark_module_start();
SignYieldFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignYieldFill.svelte";
var root1712 = add_locations(ns_template(`<svg><!><path d="M10.48 5.323h-.28v1.353h.28c.372 0 .54-.222.54-.674 0-.45-.169-.68-.54-.68Z"></path><path d="M7.022 14.434a1.131 1.131 0 0 0 1.96 0l6.857-11.667c.457-.778-.092-1.767-.98-1.767H1.144c-.889 0-1.437.99-.98 1.767l6.857 11.667ZM5.506 6.232V7H5.11v-.76L4.44 5h.44l.424.849h.016L5.748 5h.428l-.67 1.232ZM6.628 5v2h-.396V5h.396Zm.684 1.676h.895V7H6.919V5h1.288v.324h-.895v.513h.842v.303h-.842v.536Zm1.521-.013h.848V7H8.437V5h.396v1.663Zm.97.337V5h.73c.608 0 .895.364.895.995 0 .636-.291 1.005-.895 1.005h-.73Z"></path></svg>`), SignYieldFill[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function SignYieldFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignYieldFill);
  var svg = root1712();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-yield-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignYieldFill = hmr(SignYieldFill, () => SignYieldFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignYieldFill[HMR].source;
    set(SignYieldFill[HMR].source, module.default[HMR].original);
  });
}
var SignYieldFill_default = SignYieldFill;
mark_module_end(SignYieldFill);

// node_modules/svelte-bootstrap-icons/lib/SignYield.svelte
mark_module_start();
SignYield[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignYield.svelte";
var root1713 = add_locations(ns_template(`<svg><!><path d="M5.506 6.232V7H5.11v-.76L4.44 5h.44l.424.849h.016L5.748 5h.428l-.67 1.232ZM6.628 5v2h-.396V5h.396Zm.684 1.676h.895V7H6.919V5h1.288v.324h-.895v.513h.842v.303h-.842v.536Zm1.521-.013h.848V7H8.437V5h.396v1.663Z"></path><path fill-rule="evenodd" d="M9.804 7V5h.73c.607 0 .894.364.894.995 0 .636-.291 1.005-.895 1.005h-.73Zm.676-1.677h-.28v1.353h.28c.372 0 .54-.222.54-.674 0-.45-.169-.68-.54-.68Z"></path><path fill-rule="evenodd" d="M7.022 14.434a1.131 1.131 0 0 0 1.96 0l6.857-11.667c.457-.778-.092-1.767-.98-1.767H1.144c-.889 0-1.437.99-.98 1.767l6.857 11.667Zm.98-.434a.13.13 0 0 1-.064-.016.146.146 0 0 1-.054-.057L1.027 2.26a.177.177 0 0 1-.002-.183.164.164 0 0 1 .054-.06A.116.116 0 0 1 1.145 2h13.713a.12.12 0 0 1 .066.017c.018.01.038.03.055.06a.176.176 0 0 1-.003.183L8.12 13.927a.146.146 0 0 1-.054.057.13.13 0 0 1-.063.016Z"></path></svg>`), SignYield[FILENAME], [
  [
    1,
    0,
    [[1, 171], [2, 2], [3, 2]]
  ]
]);
function SignYield($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignYield);
  var svg = root1713();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sign-yield", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignYield = hmr(SignYield, () => SignYield[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignYield[HMR].source;
    set(SignYield[HMR].source, module.default[HMR].original);
  });
}
var SignYield_default = SignYield;
mark_module_end(SignYield);

// node_modules/svelte-bootstrap-icons/lib/Signal.svelte
mark_module_start();
Signal[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Signal.svelte";
var root1714 = add_locations(ns_template(`<svg><!><path d="m6.08.234.179.727a7.264 7.264 0 0 0-2.01.832l-.383-.643A7.9 7.9 0 0 1 6.079.234zm3.84 0L9.742.96a7.265 7.265 0 0 1 2.01.832l.388-.643A7.957 7.957 0 0 0 9.92.234zm-8.77 3.63a7.944 7.944 0 0 0-.916 2.215l.727.18a7.264 7.264 0 0 1 .832-2.01l-.643-.386zM.75 8a7.3 7.3 0 0 1 .081-1.086L.091 6.8a8 8 0 0 0 0 2.398l.74-.112A7.262 7.262 0 0 1 .75 8zm11.384 6.848-.384-.64a7.23 7.23 0 0 1-2.007.831l.18.728a7.965 7.965 0 0 0 2.211-.919zM15.251 8c0 .364-.028.727-.082 1.086l.74.112a7.966 7.966 0 0 0 0-2.398l-.74.114c.054.36.082.722.082 1.086zm.516 1.918-.728-.18a7.252 7.252 0 0 1-.832 2.012l.643.387a7.933 7.933 0 0 0 .917-2.219zm-6.68 5.25c-.72.11-1.453.11-2.173 0l-.112.742a7.99 7.99 0 0 0 2.396 0l-.112-.741zm4.75-2.868a7.229 7.229 0 0 1-1.537 1.534l.446.605a8.07 8.07 0 0 0 1.695-1.689l-.604-.45zM12.3 2.163c.587.432 1.105.95 1.537 1.537l.604-.45a8.06 8.06 0 0 0-1.69-1.691l-.45.604zM2.163 3.7A7.242 7.242 0 0 1 3.7 2.163l-.45-.604a8.06 8.06 0 0 0-1.691 1.69l.604.45zm12.688.163-.644.387c.377.623.658 1.3.832 2.007l.728-.18a7.931 7.931 0 0 0-.916-2.214zM6.913.831a7.254 7.254 0 0 1 2.172 0l.112-.74a7.985 7.985 0 0 0-2.396 0l.112.74zM2.547 14.64 1 15l.36-1.549-.729-.17-.361 1.548a.75.75 0 0 0 .9.902l1.548-.357-.17-.734zM.786 12.612l.732.168.25-1.073A7.187 7.187 0 0 1 .96 9.74l-.727.18a8 8 0 0 0 .736 1.902l-.184.79zm3.5 1.623-1.073.25.17.731.79-.184c.6.327 1.239.574 1.902.737l.18-.728a7.197 7.197 0 0 1-1.962-.811l-.007.005zM8 1.5a6.502 6.502 0 0 0-6.498 6.502 6.516 6.516 0 0 0 .998 3.455l-.625 2.668L4.54 13.5a6.502 6.502 0 0 0 6.93-11A6.516 6.516 0 0 0 8 1.5"></path></svg>`), Signal[FILENAME], [[1, 0, [[1, 167]]]]);
function Signal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Signal);
  var svg = root1714();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-signal", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signal = hmr(Signal, () => Signal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signal[HMR].source;
    set(Signal[HMR].source, module.default[HMR].original);
  });
}
var Signal_default = Signal;
mark_module_end(Signal);

// node_modules/svelte-bootstrap-icons/lib/Signpost2Fill.svelte
mark_module_start();
Signpost2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Signpost2Fill.svelte";
var root1715 = add_locations(ns_template(`<svg><!><path d="M7.293.707A1 1 0 0 0 7 1.414V2H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h5v1H2.5a1 1 0 0 0-.8.4L.725 8.7a.5.5 0 0 0 0 .6l.975 1.3a1 1 0 0 0 .8.4H7v5h2v-5h5a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1H9V6h4.5a1 1 0 0 0 .8-.4l.975-1.3a.5.5 0 0 0 0-.6L14.3 2.4a1 1 0 0 0-.8-.4H9v-.586A1 1 0 0 0 7.293.707z"></path></svg>`), Signpost2Fill[FILENAME], [[1, 0, [[1, 176]]]]);
function Signpost2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Signpost2Fill);
  var svg = root1715();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-signpost-2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signpost2Fill = hmr(Signpost2Fill, () => Signpost2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signpost2Fill[HMR].source;
    set(Signpost2Fill[HMR].source, module.default[HMR].original);
  });
}
var Signpost2Fill_default = Signpost2Fill;
mark_module_end(Signpost2Fill);

// node_modules/svelte-bootstrap-icons/lib/Signpost2.svelte
mark_module_start();
Signpost2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Signpost2.svelte";
var root1716 = add_locations(ns_template(`<svg><!><path d="M7 1.414V2H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h5v1H2.5a1 1 0 0 0-.8.4L.725 8.7a.5.5 0 0 0 0 .6l.975 1.3a1 1 0 0 0 .8.4H7v5h2v-5h5a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1H9V6h4.5a1 1 0 0 0 .8-.4l.975-1.3a.5.5 0 0 0 0-.6L14.3 2.4a1 1 0 0 0-.8-.4H9v-.586a1 1 0 0 0-2 0zM13.5 3l.75 1-.75 1H2V3h11.5zm.5 5v2H2.5l-.75-1 .75-1H14z"></path></svg>`), Signpost2[FILENAME], [[1, 0, [[1, 171]]]]);
function Signpost2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Signpost2);
  var svg = root1716();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-signpost-2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signpost2 = hmr(Signpost2, () => Signpost2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signpost2[HMR].source;
    set(Signpost2[HMR].source, module.default[HMR].original);
  });
}
var Signpost2_default = Signpost2;
mark_module_end(Signpost2);

// node_modules/svelte-bootstrap-icons/lib/SignpostFill.svelte
mark_module_start();
SignpostFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignpostFill.svelte";
var root1717 = add_locations(ns_template(`<svg><!><path d="M7.293.707A1 1 0 0 0 7 1.414V4H2a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h5v6h2v-6h3.532a1 1 0 0 0 .768-.36l1.933-2.32a.5.5 0 0 0 0-.64L13.3 4.36a1 1 0 0 0-.768-.36H9V1.414A1 1 0 0 0 7.293.707z"></path></svg>`), SignpostFill[FILENAME], [[1, 0, [[1, 174]]]]);
function SignpostFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignpostFill);
  var svg = root1717();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-signpost-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignpostFill = hmr(SignpostFill, () => SignpostFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignpostFill[HMR].source;
    set(SignpostFill[HMR].source, module.default[HMR].original);
  });
}
var SignpostFill_default = SignpostFill;
mark_module_end(SignpostFill);

// node_modules/svelte-bootstrap-icons/lib/SignpostSplitFill.svelte
mark_module_start();
SignpostSplitFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignpostSplitFill.svelte";
var root1718 = add_locations(ns_template(`<svg><!><path d="M7 16h2V6h5a1 1 0 0 0 .8-.4l.975-1.3a.5.5 0 0 0 0-.6L14.8 2.4A1 1 0 0 0 14 2H9v-.586a1 1 0 0 0-2 0V7H2a1 1 0 0 0-.8.4L.225 8.7a.5.5 0 0 0 0 .6l.975 1.3a1 1 0 0 0 .8.4h5v5z"></path></svg>`), SignpostSplitFill[FILENAME], [[1, 0, [[1, 180]]]]);
function SignpostSplitFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignpostSplitFill);
  var svg = root1718();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-signpost-split-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignpostSplitFill = hmr(SignpostSplitFill, () => SignpostSplitFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignpostSplitFill[HMR].source;
    set(SignpostSplitFill[HMR].source, module.default[HMR].original);
  });
}
var SignpostSplitFill_default = SignpostSplitFill;
mark_module_end(SignpostSplitFill);

// node_modules/svelte-bootstrap-icons/lib/SignpostSplit.svelte
mark_module_start();
SignpostSplit[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SignpostSplit.svelte";
var root1719 = add_locations(ns_template(`<svg><!><path d="M7 7V1.414a1 1 0 0 1 2 0V2h5a1 1 0 0 1 .8.4l.975 1.3a.5.5 0 0 1 0 .6L14.8 5.6a1 1 0 0 1-.8.4H9v10H7v-5H2a1 1 0 0 1-.8-.4L.225 9.3a.5.5 0 0 1 0-.6L1.2 7.4A1 1 0 0 1 2 7h5zm1 3V8H2l-.75 1L2 10h6zm0-5h6l.75-1L14 3H8v2z"></path></svg>`), SignpostSplit[FILENAME], [[1, 0, [[1, 175]]]]);
function SignpostSplit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SignpostSplit);
  var svg = root1719();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-signpost-split", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignpostSplit = hmr(SignpostSplit, () => SignpostSplit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignpostSplit[HMR].source;
    set(SignpostSplit[HMR].source, module.default[HMR].original);
  });
}
var SignpostSplit_default = SignpostSplit;
mark_module_end(SignpostSplit);

// node_modules/svelte-bootstrap-icons/lib/Signpost.svelte
mark_module_start();
Signpost[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Signpost.svelte";
var root1720 = add_locations(ns_template(`<svg><!><path d="M7 1.414V4H2a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h5v6h2v-6h3.532a1 1 0 0 0 .768-.36l1.933-2.32a.5.5 0 0 0 0-.64L13.3 4.36a1 1 0 0 0-.768-.36H9V1.414a1 1 0 0 0-2 0zM12.532 5l1.666 2-1.666 2H2V5h10.532z"></path></svg>`), Signpost[FILENAME], [[1, 0, [[1, 169]]]]);
function Signpost($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Signpost);
  var svg = root1720();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-signpost", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signpost = hmr(Signpost, () => Signpost[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signpost[HMR].source;
    set(Signpost[HMR].source, module.default[HMR].original);
  });
}
var Signpost_default = Signpost;
mark_module_end(Signpost);

// node_modules/svelte-bootstrap-icons/lib/SimFill.svelte
mark_module_start();
SimFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SimFill.svelte";
var root1721 = add_locations(ns_template(`<svg><!><path d="M5 4.5a.5.5 0 0 1 .5-.5h2v2H5V4.5zM8.5 6V4h2a.5.5 0 0 1 .5.5V6H8.5zM5 7h6v2H5V7zm3.5 3H11v1.5a.5.5 0 0 1-.5.5h-2v-2zm-1 0v2h-2a.5.5 0 0 1-.5-.5V10h2.5z"></path><path d="M3.5 0A1.5 1.5 0 0 0 2 1.5v13A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5V3.414a1.5 1.5 0 0 0-.44-1.06L11.647.439A1.5 1.5 0 0 0 10.586 0H3.5zm2 3h5A1.5 1.5 0 0 1 12 4.5v7a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 4 11.5v-7A1.5 1.5 0 0 1 5.5 3z"></path></svg>`), SimFill[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function SimFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SimFill);
  var svg = root1721();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sim-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SimFill = hmr(SimFill, () => SimFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SimFill[HMR].source;
    set(SimFill[HMR].source, module.default[HMR].original);
  });
}
var SimFill_default = SimFill;
mark_module_end(SimFill);

// node_modules/svelte-bootstrap-icons/lib/SimSlashFill.svelte
mark_module_start();
SimSlashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SimSlashFill.svelte";
var root1722 = add_locations(ns_template(`<svg><!><path d="m11.646.44.897.896-1.703 1.703A1.506 1.506 0 0 0 10.5 3h-5A1.5 1.5 0 0 0 4 4.5v5.379l-2 2V1.5A1.5 1.5 0 0 1 3.5 0h7.086a1.5 1.5 0 0 1 1.06.44ZM8.5 5.378 9.879 4H8.5v1.379ZM5 8.879 6.879 7H5v1.879Zm6-1.758L9.121 9H11V7.121Zm-3.5 3.5L6.121 12H7.5v-1.379ZM5.5 13c-.117 0-.23-.013-.34-.039L2.502 15.62c.265.236.615.38.998.38h9a1.5 1.5 0 0 0 1.5-1.5V4.121l-2 2V11.5a1.5 1.5 0 0 1-1.5 1.5h-5ZM5 4.5a.5.5 0 0 1 .5-.5h2v2H5V4.5ZM8.5 10H11v1.5a.5.5 0 0 1-.5.5h-2v-2Zm6.354-8.146a.5.5 0 0 0-.708-.708l-13 13a.5.5 0 0 0 .708.708l13-13Z"></path></svg>`), SimSlashFill[FILENAME], [[1, 0, [[1, 175]]]]);
function SimSlashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SimSlashFill);
  var svg = root1722();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sim-slash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SimSlashFill = hmr(SimSlashFill, () => SimSlashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SimSlashFill[HMR].source;
    set(SimSlashFill[HMR].source, module.default[HMR].original);
  });
}
var SimSlashFill_default = SimSlashFill;
mark_module_end(SimSlashFill);

// node_modules/svelte-bootstrap-icons/lib/SimSlash.svelte
mark_module_start();
SimSlash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SimSlash.svelte";
var root1723 = add_locations(ns_template(`<svg><!><path d="m11.646.44.897.896-.707.707-.897-.897A.5.5 0 0 0 10.586 1H3.5a.5.5 0 0 0-.5.5v9.379l-1 1V1.5A1.5 1.5 0 0 1 3.5 0h7.086a1.5 1.5 0 0 1 1.06.44ZM10.5 3c.117 0 .23.013.34.039L9.879 4H8.5v1.379L6.879 7H5v1.879l-1 1V4.5A1.5 1.5 0 0 1 5.5 3h5ZM12 6.121l-1 1V9H9.121L7.5 10.621V12H6.121l-.961.961c.11.026.223.039.34.039h5a1.5 1.5 0 0 0 1.5-1.5V6.121ZM3.5 15a.498.498 0 0 1-.288-.091l-.71.71c.265.237.615.381.998.381h9a1.5 1.5 0 0 0 1.5-1.5V4.121l-1 1V14.5a.5.5 0 0 1-.5.5h-9Zm2-11a.5.5 0 0 0-.5.5V6h2.5V4h-2Zm5.5 6v1.5a.5.5 0 0 1-.5.5h-2v-2H11Zm3.854-8.146a.5.5 0 0 0-.708-.708l-13 13a.5.5 0 0 0 .708.708l13-13Z"></path></svg>`), SimSlash[FILENAME], [[1, 0, [[1, 170]]]]);
function SimSlash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SimSlash);
  var svg = root1723();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sim-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SimSlash = hmr(SimSlash, () => SimSlash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SimSlash[HMR].source;
    set(SimSlash[HMR].source, module.default[HMR].original);
  });
}
var SimSlash_default = SimSlash;
mark_module_end(SimSlash);

// node_modules/svelte-bootstrap-icons/lib/Sim.svelte
mark_module_start();
Sim[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sim.svelte";
var root1724 = add_locations(ns_template(`<svg><!><path d="M2 1.5A1.5 1.5 0 0 1 3.5 0h7.086a1.5 1.5 0 0 1 1.06.44l1.915 1.914A1.5 1.5 0 0 1 14 3.414V14.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-13zM3.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5V3.414a.5.5 0 0 0-.146-.353l-1.915-1.915A.5.5 0 0 0 10.586 1H3.5z"></path><path d="M5.5 4a.5.5 0 0 0-.5.5V6h2.5V4h-2zm3 0v2H11V4.5a.5.5 0 0 0-.5-.5h-2zM11 7H5v2h6V7zm0 3H8.5v2h2a.5.5 0 0 0 .5-.5V10zm-3.5 2v-2H5v1.5a.5.5 0 0 0 .5.5h2zM4 4.5A1.5 1.5 0 0 1 5.5 3h5A1.5 1.5 0 0 1 12 4.5v7a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 4 11.5v-7z"></path></svg>`), Sim[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Sim($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sim);
  var svg = root1724();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sim", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sim = hmr(Sim, () => Sim[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sim[HMR].source;
    set(Sim[HMR].source, module.default[HMR].original);
  });
}
var Sim_default = Sim;
mark_module_end(Sim);

// node_modules/svelte-bootstrap-icons/lib/SinaWeibo.svelte
mark_module_start();
SinaWeibo[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SinaWeibo.svelte";
var root1725 = add_locations(ns_template(`<svg><!><path d="M10.878 1.093a4.23 4.23 0 0 1 4.031 1.305 4.225 4.225 0 0 1 .886 4.14v.001a.612.612 0 0 1-1.166-.377 3.01 3.01 0 0 0-3.495-3.873.611.611 0 1 1-.256-1.196ZM3.753 9.465c.548-1.11 1.972-1.74 3.233-1.411 1.304.338 1.971 1.568 1.437 2.764-.541 1.221-2.095 1.875-3.416 1.449-1.271-.411-1.812-1.67-1.254-2.802Zm2.658.567c.16.066.365-.009.458-.168.088-.16.03-.34-.129-.397-.156-.062-.353.013-.446.168-.09.154-.041.333.117.397Zm-1.607 1.314c.413.188.963.009 1.219-.4.252-.413.12-.883-.296-1.062-.41-.172-.94.005-1.194.402-.256.4-.135.874.271 1.06Z"></path><path d="m12.014 7.238.005.001c.919.285 1.941.974 1.939 2.188 0 2.007-2.895 4.535-7.246 4.535C3.393 13.962 0 12.352 0 9.708c0-1.385.876-2.985 2.384-4.493C4.4 3.199 6.751 2.28 7.634 3.165c.39.392.427 1.065.177 1.87-.132.405.38.182.38.182 1.63-.682 3.051-.722 3.57.02.278.397.252.951-.004 1.594-.116.293.035.34.257.407Zm-10.4 3.101c.172 1.738 2.46 2.936 5.109 2.674 2.647-.26 4.656-1.883 4.482-3.623-.17-1.738-2.458-2.937-5.107-2.674-2.647.263-4.656 1.883-4.484 3.623Zm11.681-6.484a2.056 2.056 0 0 0-1.962-.634.526.526 0 1 0 .219 1.031 1.008 1.008 0 0 1 1.17 1.296.528.528 0 0 0 1.005.325 2.062 2.062 0 0 0-.432-2.018Z"></path></svg>`), SinaWeibo[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function SinaWeibo($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SinaWeibo);
  var svg = root1725();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sina-weibo", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SinaWeibo = hmr(SinaWeibo, () => SinaWeibo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SinaWeibo[HMR].source;
    set(SinaWeibo[HMR].source, module.default[HMR].original);
  });
}
var SinaWeibo_default = SinaWeibo;
mark_module_end(SinaWeibo);

// node_modules/svelte-bootstrap-icons/lib/SkipBackwardBtnFill.svelte
mark_module_start();
SkipBackwardBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipBackwardBtnFill.svelte";
var root1726 = add_locations(ns_template(`<svg><!><path d="M0 12V4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm11.21-6.907L8.5 7.028V5.5a.5.5 0 0 0-.79-.407L5 7.028V5.5a.5.5 0 0 0-1 0v5a.5.5 0 0 0 1 0V8.972l2.71 1.935a.5.5 0 0 0 .79-.407V8.972l2.71 1.935A.5.5 0 0 0 12 10.5v-5a.5.5 0 0 0-.79-.407z"></path></svg>`), SkipBackwardBtnFill[FILENAME], [[1, 0, [[1, 183]]]]);
function SkipBackwardBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipBackwardBtnFill);
  var svg = root1726();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-backward-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipBackwardBtnFill = hmr(SkipBackwardBtnFill, () => SkipBackwardBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipBackwardBtnFill[HMR].source;
    set(SkipBackwardBtnFill[HMR].source, module.default[HMR].original);
  });
}
var SkipBackwardBtnFill_default = SkipBackwardBtnFill;
mark_module_end(SkipBackwardBtnFill);

// node_modules/svelte-bootstrap-icons/lib/SkipBackwardBtn.svelte
mark_module_start();
SkipBackwardBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipBackwardBtn.svelte";
var root1727 = add_locations(ns_template(`<svg><!><path d="M11.21 5.093A.5.5 0 0 1 12 5.5v5a.5.5 0 0 1-.79.407L8.5 8.972V10.5a.5.5 0 0 1-.79.407L5 8.972V10.5a.5.5 0 0 1-1 0v-5a.5.5 0 0 1 1 0v1.528l2.71-1.935a.5.5 0 0 1 .79.407v1.528l2.71-1.935z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"></path></svg>`), SkipBackwardBtn[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function SkipBackwardBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipBackwardBtn);
  var svg = root1727();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-backward-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipBackwardBtn = hmr(SkipBackwardBtn, () => SkipBackwardBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipBackwardBtn[HMR].source;
    set(SkipBackwardBtn[HMR].source, module.default[HMR].original);
  });
}
var SkipBackwardBtn_default = SkipBackwardBtn;
mark_module_end(SkipBackwardBtn);

// node_modules/svelte-bootstrap-icons/lib/SkipBackwardCircleFill.svelte
mark_module_start();
SkipBackwardCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipBackwardCircleFill.svelte";
var root1728 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.79-2.907L8.5 7.028V5.5a.5.5 0 0 0-.79-.407L5 7.028V5.5a.5.5 0 0 0-1 0v5a.5.5 0 0 0 1 0V8.972l2.71 1.935a.5.5 0 0 0 .79-.407V8.972l2.71 1.935A.5.5 0 0 0 12 10.5v-5a.5.5 0 0 0-.79-.407z"></path></svg>`), SkipBackwardCircleFill[FILENAME], [[1, 0, [[1, 186]]]]);
function SkipBackwardCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipBackwardCircleFill);
  var svg = root1728();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-backward-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipBackwardCircleFill = hmr(SkipBackwardCircleFill, () => SkipBackwardCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipBackwardCircleFill[HMR].source;
    set(SkipBackwardCircleFill[HMR].source, module.default[HMR].original);
  });
}
var SkipBackwardCircleFill_default = SkipBackwardCircleFill;
mark_module_end(SkipBackwardCircleFill);

// node_modules/svelte-bootstrap-icons/lib/SkipBackwardCircle.svelte
mark_module_start();
SkipBackwardCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipBackwardCircle.svelte";
var root1729 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M11.729 5.055a.5.5 0 0 0-.52.038L8.5 7.028V5.5a.5.5 0 0 0-.79-.407L5 7.028V5.5a.5.5 0 0 0-1 0v5a.5.5 0 0 0 1 0V8.972l2.71 1.935a.5.5 0 0 0 .79-.407V8.972l2.71 1.935A.5.5 0 0 0 12 10.5v-5a.5.5 0 0 0-.271-.445z"></path></svg>`), SkipBackwardCircle[FILENAME], [
  [1, 0, [[1, 181], [2, 2]]]
]);
function SkipBackwardCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipBackwardCircle);
  var svg = root1729();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-backward-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipBackwardCircle = hmr(SkipBackwardCircle, () => SkipBackwardCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipBackwardCircle[HMR].source;
    set(SkipBackwardCircle[HMR].source, module.default[HMR].original);
  });
}
var SkipBackwardCircle_default = SkipBackwardCircle;
mark_module_end(SkipBackwardCircle);

// node_modules/svelte-bootstrap-icons/lib/SkipBackwardFill.svelte
mark_module_start();
SkipBackwardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipBackwardFill.svelte";
var root1730 = add_locations(ns_template(`<svg><!><path d="M.5 3.5A.5.5 0 0 0 0 4v8a.5.5 0 0 0 1 0V8.753l6.267 3.636c.54.313 1.233-.066 1.233-.697v-2.94l6.267 3.636c.54.314 1.233-.065 1.233-.696V4.308c0-.63-.693-1.01-1.233-.696L8.5 7.248v-2.94c0-.63-.692-1.01-1.233-.696L1 7.248V4a.5.5 0 0 0-.5-.5z"></path></svg>`), SkipBackwardFill[FILENAME], [[1, 0, [[1, 179]]]]);
function SkipBackwardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipBackwardFill);
  var svg = root1730();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-backward-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipBackwardFill = hmr(SkipBackwardFill, () => SkipBackwardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipBackwardFill[HMR].source;
    set(SkipBackwardFill[HMR].source, module.default[HMR].original);
  });
}
var SkipBackwardFill_default = SkipBackwardFill;
mark_module_end(SkipBackwardFill);

// node_modules/svelte-bootstrap-icons/lib/SkipBackward.svelte
mark_module_start();
SkipBackward[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipBackward.svelte";
var root1731 = add_locations(ns_template(`<svg><!><path d="M.5 3.5A.5.5 0 0 1 1 4v3.248l6.267-3.636c.52-.302 1.233.043 1.233.696v2.94l6.267-3.636c.52-.302 1.233.043 1.233.696v7.384c0 .653-.713.998-1.233.696L8.5 8.752v2.94c0 .653-.713.998-1.233.696L1 8.752V12a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5zm7 1.133L1.696 8 7.5 11.367V4.633zm7.5 0L9.196 8 15 11.367V4.633z"></path></svg>`), SkipBackward[FILENAME], [[1, 0, [[1, 174]]]]);
function SkipBackward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipBackward);
  var svg = root1731();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-backward", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipBackward = hmr(SkipBackward, () => SkipBackward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipBackward[HMR].source;
    set(SkipBackward[HMR].source, module.default[HMR].original);
  });
}
var SkipBackward_default = SkipBackward;
mark_module_end(SkipBackward);

// node_modules/svelte-bootstrap-icons/lib/SkipEndBtnFill.svelte
mark_module_start();
SkipEndBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipEndBtnFill.svelte";
var root1732 = add_locations(ns_template(`<svg><!><path d="M0 12V4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm6.79-6.907A.5.5 0 0 0 6 5.5v5a.5.5 0 0 0 .79.407L9.5 8.972V10.5a.5.5 0 0 0 1 0v-5a.5.5 0 0 0-1 0v1.528L6.79 5.093z"></path></svg>`), SkipEndBtnFill[FILENAME], [[1, 0, [[1, 178]]]]);
function SkipEndBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipEndBtnFill);
  var svg = root1732();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-end-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipEndBtnFill = hmr(SkipEndBtnFill, () => SkipEndBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipEndBtnFill[HMR].source;
    set(SkipEndBtnFill[HMR].source, module.default[HMR].original);
  });
}
var SkipEndBtnFill_default = SkipEndBtnFill;
mark_module_end(SkipEndBtnFill);

// node_modules/svelte-bootstrap-icons/lib/SkipEndBtn.svelte
mark_module_start();
SkipEndBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipEndBtn.svelte";
var root1733 = add_locations(ns_template(`<svg><!><path d="M6.79 5.093 9.5 7.028V5.5a.5.5 0 0 1 1 0v5a.5.5 0 0 1-1 0V8.972l-2.71 1.935A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .79-.407z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"></path></svg>`), SkipEndBtn[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function SkipEndBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipEndBtn);
  var svg = root1733();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-end-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipEndBtn = hmr(SkipEndBtn, () => SkipEndBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipEndBtn[HMR].source;
    set(SkipEndBtn[HMR].source, module.default[HMR].original);
  });
}
var SkipEndBtn_default = SkipEndBtn;
mark_module_end(SkipEndBtn);

// node_modules/svelte-bootstrap-icons/lib/SkipEndCircleFill.svelte
mark_module_start();
SkipEndCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipEndCircleFill.svelte";
var root1734 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.79 5.093A.5.5 0 0 0 6 5.5v5a.5.5 0 0 0 .79.407L9.5 8.972V10.5a.5.5 0 0 0 1 0v-5a.5.5 0 0 0-1 0v1.528L6.79 5.093z"></path></svg>`), SkipEndCircleFill[FILENAME], [[1, 0, [[1, 181]]]]);
function SkipEndCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipEndCircleFill);
  var svg = root1734();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-end-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipEndCircleFill = hmr(SkipEndCircleFill, () => SkipEndCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipEndCircleFill[HMR].source;
    set(SkipEndCircleFill[HMR].source, module.default[HMR].original);
  });
}
var SkipEndCircleFill_default = SkipEndCircleFill;
mark_module_end(SkipEndCircleFill);

// node_modules/svelte-bootstrap-icons/lib/SkipEndCircle.svelte
mark_module_start();
SkipEndCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipEndCircle.svelte";
var root1735 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M6.271 5.055a.5.5 0 0 1 .52.038L9.5 7.028V5.5a.5.5 0 0 1 1 0v5a.5.5 0 0 1-1 0V8.972l-2.71 1.935A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .271-.445z"></path></svg>`), SkipEndCircle[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function SkipEndCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipEndCircle);
  var svg = root1735();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-end-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipEndCircle = hmr(SkipEndCircle, () => SkipEndCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipEndCircle[HMR].source;
    set(SkipEndCircle[HMR].source, module.default[HMR].original);
  });
}
var SkipEndCircle_default = SkipEndCircle;
mark_module_end(SkipEndCircle);

// node_modules/svelte-bootstrap-icons/lib/SkipEndFill.svelte
mark_module_start();
SkipEndFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipEndFill.svelte";
var root1736 = add_locations(ns_template(`<svg><!><path d="M12.5 4a.5.5 0 0 0-1 0v3.248L5.233 3.612C4.693 3.3 4 3.678 4 4.308v7.384c0 .63.692 1.01 1.233.697L11.5 8.753V12a.5.5 0 0 0 1 0V4z"></path></svg>`), SkipEndFill[FILENAME], [[1, 0, [[1, 174]]]]);
function SkipEndFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipEndFill);
  var svg = root1736();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-end-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipEndFill = hmr(SkipEndFill, () => SkipEndFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipEndFill[HMR].source;
    set(SkipEndFill[HMR].source, module.default[HMR].original);
  });
}
var SkipEndFill_default = SkipEndFill;
mark_module_end(SkipEndFill);

// node_modules/svelte-bootstrap-icons/lib/SkipEnd.svelte
mark_module_start();
SkipEnd[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipEnd.svelte";
var root1737 = add_locations(ns_template(`<svg><!><path d="M12.5 4a.5.5 0 0 0-1 0v3.248L5.233 3.612C4.713 3.31 4 3.655 4 4.308v7.384c0 .653.713.998 1.233.696L11.5 8.752V12a.5.5 0 0 0 1 0V4zM5 4.633 10.804 8 5 11.367V4.633z"></path></svg>`), SkipEnd[FILENAME], [[1, 0, [[1, 169]]]]);
function SkipEnd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipEnd);
  var svg = root1737();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-end", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipEnd = hmr(SkipEnd, () => SkipEnd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipEnd[HMR].source;
    set(SkipEnd[HMR].source, module.default[HMR].original);
  });
}
var SkipEnd_default = SkipEnd;
mark_module_end(SkipEnd);

// node_modules/svelte-bootstrap-icons/lib/SkipForwardBtnFill.svelte
mark_module_start();
SkipForwardBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipForwardBtnFill.svelte";
var root1738 = add_locations(ns_template(`<svg><!><path d="M0 12V4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2Zm4.79-6.907A.5.5 0 0 0 4 5.5v5a.5.5 0 0 0 .79.407L7.5 8.972V10.5a.5.5 0 0 0 .79.407L11 8.972V10.5a.5.5 0 0 0 1 0v-5a.5.5 0 0 0-1 0v1.528L8.29 5.093a.5.5 0 0 0-.79.407v1.528L4.79 5.093Z"></path></svg>`), SkipForwardBtnFill[FILENAME], [[1, 0, [[1, 182]]]]);
function SkipForwardBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipForwardBtnFill);
  var svg = root1738();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-forward-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipForwardBtnFill = hmr(SkipForwardBtnFill, () => SkipForwardBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipForwardBtnFill[HMR].source;
    set(SkipForwardBtnFill[HMR].source, module.default[HMR].original);
  });
}
var SkipForwardBtnFill_default = SkipForwardBtnFill;
mark_module_end(SkipForwardBtnFill);

// node_modules/svelte-bootstrap-icons/lib/SkipForwardBtn.svelte
mark_module_start();
SkipForwardBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipForwardBtn.svelte";
var root1739 = add_locations(ns_template(`<svg><!><path d="M4.79 5.093A.5.5 0 0 0 4 5.5v5a.5.5 0 0 0 .79.407L7.5 8.972V10.5a.5.5 0 0 0 .79.407L11 8.972V10.5a.5.5 0 0 0 1 0v-5a.5.5 0 0 0-1 0v1.528L8.29 5.093a.5.5 0 0 0-.79.407v1.528L4.79 5.093z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"></path></svg>`), SkipForwardBtn[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function SkipForwardBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipForwardBtn);
  var svg = root1739();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-forward-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipForwardBtn = hmr(SkipForwardBtn, () => SkipForwardBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipForwardBtn[HMR].source;
    set(SkipForwardBtn[HMR].source, module.default[HMR].original);
  });
}
var SkipForwardBtn_default = SkipForwardBtn;
mark_module_end(SkipForwardBtn);

// node_modules/svelte-bootstrap-icons/lib/SkipForwardCircleFill.svelte
mark_module_start();
SkipForwardCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipForwardCircleFill.svelte";
var root1740 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM4.79 5.093A.5.5 0 0 0 4 5.5v5a.5.5 0 0 0 .79.407L7.5 8.972V10.5a.5.5 0 0 0 .79.407L11 8.972V10.5a.5.5 0 0 0 1 0v-5a.5.5 0 0 0-1 0v1.528L8.29 5.093a.5.5 0 0 0-.79.407v1.528L4.79 5.093z"></path></svg>`), SkipForwardCircleFill[FILENAME], [[1, 0, [[1, 185]]]]);
function SkipForwardCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipForwardCircleFill);
  var svg = root1740();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-forward-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipForwardCircleFill = hmr(SkipForwardCircleFill, () => SkipForwardCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipForwardCircleFill[HMR].source;
    set(SkipForwardCircleFill[HMR].source, module.default[HMR].original);
  });
}
var SkipForwardCircleFill_default = SkipForwardCircleFill;
mark_module_end(SkipForwardCircleFill);

// node_modules/svelte-bootstrap-icons/lib/SkipForwardCircle.svelte
mark_module_start();
SkipForwardCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipForwardCircle.svelte";
var root1741 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M4.271 5.055a.5.5 0 0 1 .52.038L7.5 7.028V5.5a.5.5 0 0 1 .79-.407L11 7.028V5.5a.5.5 0 0 1 1 0v5a.5.5 0 0 1-1 0V8.972l-2.71 1.935a.5.5 0 0 1-.79-.407V8.972l-2.71 1.935A.5.5 0 0 1 4 10.5v-5a.5.5 0 0 1 .271-.445z"></path></svg>`), SkipForwardCircle[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function SkipForwardCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipForwardCircle);
  var svg = root1741();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-forward-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipForwardCircle = hmr(SkipForwardCircle, () => SkipForwardCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipForwardCircle[HMR].source;
    set(SkipForwardCircle[HMR].source, module.default[HMR].original);
  });
}
var SkipForwardCircle_default = SkipForwardCircle;
mark_module_end(SkipForwardCircle);

// node_modules/svelte-bootstrap-icons/lib/SkipForwardFill.svelte
mark_module_start();
SkipForwardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipForwardFill.svelte";
var root1742 = add_locations(ns_template(`<svg><!><path d="M15.5 3.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V8.753l-6.267 3.636c-.54.313-1.233-.066-1.233-.697v-2.94l-6.267 3.636C.693 12.703 0 12.324 0 11.693V4.308c0-.63.693-1.01 1.233-.696L7.5 7.248v-2.94c0-.63.693-1.01 1.233-.696L15 7.248V4a.5.5 0 0 1 .5-.5z"></path></svg>`), SkipForwardFill[FILENAME], [[1, 0, [[1, 178]]]]);
function SkipForwardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipForwardFill);
  var svg = root1742();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-forward-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipForwardFill = hmr(SkipForwardFill, () => SkipForwardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipForwardFill[HMR].source;
    set(SkipForwardFill[HMR].source, module.default[HMR].original);
  });
}
var SkipForwardFill_default = SkipForwardFill;
mark_module_end(SkipForwardFill);

// node_modules/svelte-bootstrap-icons/lib/SkipForward.svelte
mark_module_start();
SkipForward[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipForward.svelte";
var root1743 = add_locations(ns_template(`<svg><!><path d="M15.5 3.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V8.752l-6.267 3.636c-.52.302-1.233-.043-1.233-.696v-2.94l-6.267 3.636C.713 12.69 0 12.345 0 11.692V4.308c0-.653.713-.998 1.233-.696L7.5 7.248v-2.94c0-.653.713-.998 1.233-.696L15 7.248V4a.5.5 0 0 1 .5-.5zM1 4.633v6.734L6.804 8 1 4.633zm7.5 0v6.734L14.304 8 8.5 4.633z"></path></svg>`), SkipForward[FILENAME], [[1, 0, [[1, 173]]]]);
function SkipForward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipForward);
  var svg = root1743();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-forward", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipForward = hmr(SkipForward, () => SkipForward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipForward[HMR].source;
    set(SkipForward[HMR].source, module.default[HMR].original);
  });
}
var SkipForward_default = SkipForward;
mark_module_end(SkipForward);

// node_modules/svelte-bootstrap-icons/lib/SkipStartBtnFill.svelte
mark_module_start();
SkipStartBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipStartBtnFill.svelte";
var root1744 = add_locations(ns_template(`<svg><!><path d="M0 12V4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm9.71-6.907L7 7.028V5.5a.5.5 0 0 0-1 0v5a.5.5 0 0 0 1 0V8.972l2.71 1.935a.5.5 0 0 0 .79-.407v-5a.5.5 0 0 0-.79-.407z"></path></svg>`), SkipStartBtnFill[FILENAME], [[1, 0, [[1, 180]]]]);
function SkipStartBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipStartBtnFill);
  var svg = root1744();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-start-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipStartBtnFill = hmr(SkipStartBtnFill, () => SkipStartBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipStartBtnFill[HMR].source;
    set(SkipStartBtnFill[HMR].source, module.default[HMR].original);
  });
}
var SkipStartBtnFill_default = SkipStartBtnFill;
mark_module_end(SkipStartBtnFill);

// node_modules/svelte-bootstrap-icons/lib/SkipStartBtn.svelte
mark_module_start();
SkipStartBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipStartBtn.svelte";
var root1745 = add_locations(ns_template(`<svg><!><path d="M9.71 5.093a.5.5 0 0 1 .79.407v5a.5.5 0 0 1-.79.407L7 8.972V10.5a.5.5 0 0 1-1 0v-5a.5.5 0 0 1 1 0v1.528l2.71-1.935z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"></path></svg>`), SkipStartBtn[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function SkipStartBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipStartBtn);
  var svg = root1745();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-start-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipStartBtn = hmr(SkipStartBtn, () => SkipStartBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipStartBtn[HMR].source;
    set(SkipStartBtn[HMR].source, module.default[HMR].original);
  });
}
var SkipStartBtn_default = SkipStartBtn;
mark_module_end(SkipStartBtn);

// node_modules/svelte-bootstrap-icons/lib/SkipStartCircleFill.svelte
mark_module_start();
SkipStartCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipStartCircleFill.svelte";
var root1746 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM9.71 5.093 7 7.028V5.5a.5.5 0 0 0-1 0v5a.5.5 0 0 0 1 0V8.972l2.71 1.935a.5.5 0 0 0 .79-.407v-5a.5.5 0 0 0-.79-.407z"></path></svg>`), SkipStartCircleFill[FILENAME], [[1, 0, [[1, 183]]]]);
function SkipStartCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipStartCircleFill);
  var svg = root1746();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-start-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipStartCircleFill = hmr(SkipStartCircleFill, () => SkipStartCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipStartCircleFill[HMR].source;
    set(SkipStartCircleFill[HMR].source, module.default[HMR].original);
  });
}
var SkipStartCircleFill_default = SkipStartCircleFill;
mark_module_end(SkipStartCircleFill);

// node_modules/svelte-bootstrap-icons/lib/SkipStartCircle.svelte
mark_module_start();
SkipStartCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipStartCircle.svelte";
var root1747 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M10.229 5.055a.5.5 0 0 0-.52.038L7 7.028V5.5a.5.5 0 0 0-1 0v5a.5.5 0 0 0 1 0V8.972l2.71 1.935a.5.5 0 0 0 .79-.407v-5a.5.5 0 0 0-.271-.445z"></path></svg>`), SkipStartCircle[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function SkipStartCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipStartCircle);
  var svg = root1747();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-start-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipStartCircle = hmr(SkipStartCircle, () => SkipStartCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipStartCircle[HMR].source;
    set(SkipStartCircle[HMR].source, module.default[HMR].original);
  });
}
var SkipStartCircle_default = SkipStartCircle;
mark_module_end(SkipStartCircle);

// node_modules/svelte-bootstrap-icons/lib/SkipStartFill.svelte
mark_module_start();
SkipStartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipStartFill.svelte";
var root1748 = add_locations(ns_template(`<svg><!><path d="M4 4a.5.5 0 0 1 1 0v3.248l6.267-3.636c.54-.313 1.232.066 1.232.696v7.384c0 .63-.692 1.01-1.232.697L5 8.753V12a.5.5 0 0 1-1 0V4z"></path></svg>`), SkipStartFill[FILENAME], [[1, 0, [[1, 176]]]]);
function SkipStartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipStartFill);
  var svg = root1748();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-start-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipStartFill = hmr(SkipStartFill, () => SkipStartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipStartFill[HMR].source;
    set(SkipStartFill[HMR].source, module.default[HMR].original);
  });
}
var SkipStartFill_default = SkipStartFill;
mark_module_end(SkipStartFill);

// node_modules/svelte-bootstrap-icons/lib/SkipStart.svelte
mark_module_start();
SkipStart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SkipStart.svelte";
var root1749 = add_locations(ns_template(`<svg><!><path d="M4 4a.5.5 0 0 1 1 0v3.248l6.267-3.636c.52-.302 1.233.043 1.233.696v7.384c0 .653-.713.998-1.233.696L5 8.752V12a.5.5 0 0 1-1 0V4zm7.5.633L5.696 8l5.804 3.367V4.633z"></path></svg>`), SkipStart[FILENAME], [[1, 0, [[1, 171]]]]);
function SkipStart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SkipStart);
  var svg = root1749();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skip-start", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipStart = hmr(SkipStart, () => SkipStart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipStart[HMR].source;
    set(SkipStart[HMR].source, module.default[HMR].original);
  });
}
var SkipStart_default = SkipStart;
mark_module_end(SkipStart);

// node_modules/svelte-bootstrap-icons/lib/Skype.svelte
mark_module_start();
Skype[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Skype.svelte";
var root1750 = add_locations(ns_template(`<svg><!><path d="M4.671 0c.88 0 1.733.247 2.468.702a7.423 7.423 0 0 1 6.02 2.118 7.372 7.372 0 0 1 2.167 5.215c0 .344-.024.687-.072 1.026a4.662 4.662 0 0 1 .6 2.281 4.645 4.645 0 0 1-1.37 3.294A4.673 4.673 0 0 1 11.18 16c-.84 0-1.658-.226-2.37-.644a7.423 7.423 0 0 1-6.114-2.107A7.374 7.374 0 0 1 .529 8.035c0-.363.026-.724.08-1.081a4.644 4.644 0 0 1 .76-5.59A4.68 4.68 0 0 1 4.67 0zm.447 7.01c.18.309.43.572.729.769a7.07 7.07 0 0 0 1.257.653c.492.205.873.38 1.145.523.229.112.437.264.615.448.135.142.21.331.21.528a.872.872 0 0 1-.335.723c-.291.196-.64.289-.99.264a2.618 2.618 0 0 1-1.048-.206 11.44 11.44 0 0 1-.532-.253 1.284 1.284 0 0 0-.587-.15.717.717 0 0 0-.501.176.63.63 0 0 0-.195.491.796.796 0 0 0 .148.482 1.2 1.2 0 0 0 .456.354 5.113 5.113 0 0 0 2.212.419 4.554 4.554 0 0 0 1.624-.265 2.296 2.296 0 0 0 1.08-.801c.267-.39.402-.855.386-1.327a2.09 2.09 0 0 0-.279-1.101 2.53 2.53 0 0 0-.772-.792A7.198 7.198 0 0 0 8.486 7.3a1.05 1.05 0 0 0-.145-.058 18.182 18.182 0 0 1-1.013-.447 1.827 1.827 0 0 1-.54-.387.727.727 0 0 1-.2-.508.805.805 0 0 1 .385-.723 1.76 1.76 0 0 1 .968-.247c.26-.003.52.03.772.096.274.079.542.177.802.293.105.049.22.075.336.076a.6.6 0 0 0 .453-.19.69.69 0 0 0 .18-.496.717.717 0 0 0-.17-.476 1.374 1.374 0 0 0-.556-.354 3.69 3.69 0 0 0-.708-.183 5.963 5.963 0 0 0-1.022-.078 4.53 4.53 0 0 0-1.536.258 2.71 2.71 0 0 0-1.174.784 1.91 1.91 0 0 0-.45 1.287c-.01.37.076.736.25 1.063z"></path></svg>`), Skype[FILENAME], [[1, 0, [[1, 166]]]]);
function Skype($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Skype);
  var svg = root1750();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-skype", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Skype = hmr(Skype, () => Skype[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Skype[HMR].source;
    set(Skype[HMR].source, module.default[HMR].original);
  });
}
var Skype_default = Skype;
mark_module_end(Skype);

// node_modules/svelte-bootstrap-icons/lib/Slack.svelte
mark_module_start();
Slack[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Slack.svelte";
var root1751 = add_locations(ns_template(`<svg><!><path d="M3.362 10.11c0 .926-.756 1.681-1.681 1.681S0 11.036 0 10.111C0 9.186.756 8.43 1.68 8.43h1.682v1.68zm.846 0c0-.924.756-1.68 1.681-1.68s1.681.756 1.681 1.68v4.21c0 .924-.756 1.68-1.68 1.68a1.685 1.685 0 0 1-1.682-1.68v-4.21zM5.89 3.362c-.926 0-1.682-.756-1.682-1.681S4.964 0 5.89 0s1.68.756 1.68 1.68v1.682H5.89zm0 .846c.924 0 1.68.756 1.68 1.681S6.814 7.57 5.89 7.57H1.68C.757 7.57 0 6.814 0 5.89c0-.926.756-1.682 1.68-1.682h4.21zm6.749 1.682c0-.926.755-1.682 1.68-1.682.925 0 1.681.756 1.681 1.681s-.756 1.681-1.68 1.681h-1.681V5.89zm-.848 0c0 .924-.755 1.68-1.68 1.68A1.685 1.685 0 0 1 8.43 5.89V1.68C8.43.757 9.186 0 10.11 0c.926 0 1.681.756 1.681 1.68v4.21zm-1.681 6.748c.926 0 1.682.756 1.682 1.681S11.036 16 10.11 16s-1.681-.756-1.681-1.68v-1.682h1.68zm0-.847c-.924 0-1.68-.755-1.68-1.68 0-.925.756-1.681 1.68-1.681h4.21c.924 0 1.68.756 1.68 1.68 0 .926-.756 1.681-1.68 1.681h-4.21z"></path></svg>`), Slack[FILENAME], [[1, 0, [[1, 166]]]]);
function Slack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Slack);
  var svg = root1751();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-slack", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Slack = hmr(Slack, () => Slack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slack[HMR].source;
    set(Slack[HMR].source, module.default[HMR].original);
  });
}
var Slack_default = Slack;
mark_module_end(Slack);

// node_modules/svelte-bootstrap-icons/lib/SlashCircleFill.svelte
mark_module_start();
SlashCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SlashCircleFill.svelte";
var root1752 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.646-2.646a.5.5 0 0 0-.708-.708l-6 6a.5.5 0 0 0 .708.708l6-6z"></path></svg>`), SlashCircleFill[FILENAME], [[1, 0, [[1, 178]]]]);
function SlashCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SlashCircleFill);
  var svg = root1752();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-slash-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SlashCircleFill = hmr(SlashCircleFill, () => SlashCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SlashCircleFill[HMR].source;
    set(SlashCircleFill[HMR].source, module.default[HMR].original);
  });
}
var SlashCircleFill_default = SlashCircleFill;
mark_module_end(SlashCircleFill);

// node_modules/svelte-bootstrap-icons/lib/SlashCircle.svelte
mark_module_start();
SlashCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SlashCircle.svelte";
var root1753 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M11.354 4.646a.5.5 0 0 0-.708 0l-6 6a.5.5 0 0 0 .708.708l6-6a.5.5 0 0 0 0-.708z"></path></svg>`), SlashCircle[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function SlashCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SlashCircle);
  var svg = root1753();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-slash-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SlashCircle = hmr(SlashCircle, () => SlashCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SlashCircle[HMR].source;
    set(SlashCircle[HMR].source, module.default[HMR].original);
  });
}
var SlashCircle_default = SlashCircle;
mark_module_end(SlashCircle);

// node_modules/svelte-bootstrap-icons/lib/SlashLg.svelte
mark_module_start();
SlashLg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SlashLg.svelte";
var root1754 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M13.854 2.146a.5.5 0 0 1 0 .708l-11 11a.5.5 0 0 1-.708-.708l11-11a.5.5 0 0 1 .708 0Z"></path></svg>`), SlashLg[FILENAME], [[1, 0, [[1, 169]]]]);
function SlashLg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SlashLg);
  var svg = root1754();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-slash-lg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SlashLg = hmr(SlashLg, () => SlashLg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SlashLg[HMR].source;
    set(SlashLg[HMR].source, module.default[HMR].original);
  });
}
var SlashLg_default = SlashLg;
mark_module_end(SlashLg);

// node_modules/svelte-bootstrap-icons/lib/SlashSquareFill.svelte
mark_module_start();
SlashSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SlashSquareFill.svelte";
var root1755 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm9.354 5.354-6 6a.5.5 0 0 1-.708-.708l6-6a.5.5 0 0 1 .708.708z"></path></svg>`), SlashSquareFill[FILENAME], [[1, 0, [[1, 178]]]]);
function SlashSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SlashSquareFill);
  var svg = root1755();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-slash-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SlashSquareFill = hmr(SlashSquareFill, () => SlashSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SlashSquareFill[HMR].source;
    set(SlashSquareFill[HMR].source, module.default[HMR].original);
  });
}
var SlashSquareFill_default = SlashSquareFill;
mark_module_end(SlashSquareFill);

// node_modules/svelte-bootstrap-icons/lib/SlashSquare.svelte
mark_module_start();
SlashSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SlashSquare.svelte";
var root1756 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M11.354 4.646a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708l6-6a.5.5 0 0 1 .708 0z"></path></svg>`), SlashSquare[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function SlashSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SlashSquare);
  var svg = root1756();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-slash-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SlashSquare = hmr(SlashSquare, () => SlashSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SlashSquare[HMR].source;
    set(SlashSquare[HMR].source, module.default[HMR].original);
  });
}
var SlashSquare_default = SlashSquare;
mark_module_end(SlashSquare);

// node_modules/svelte-bootstrap-icons/lib/Slash.svelte
mark_module_start();
Slash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Slash.svelte";
var root1757 = add_locations(ns_template(`<svg><!><path d="M11.354 4.646a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708l6-6a.5.5 0 0 1 .708 0z"></path></svg>`), Slash[FILENAME], [[1, 0, [[1, 166]]]]);
function Slash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Slash);
  var svg = root1757();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-slash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Slash = hmr(Slash, () => Slash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slash[HMR].source;
    set(Slash[HMR].source, module.default[HMR].original);
  });
}
var Slash_default = Slash;
mark_module_end(Slash);

// node_modules/svelte-bootstrap-icons/lib/Sliders.svelte
mark_module_start();
Sliders[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sliders.svelte";
var root1758 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11.5 2a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM9.05 3a2.5 2.5 0 0 1 4.9 0H16v1h-2.05a2.5 2.5 0 0 1-4.9 0H0V3h9.05zM4.5 7a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM2.05 8a2.5 2.5 0 0 1 4.9 0H16v1H6.95a2.5 2.5 0 0 1-4.9 0H0V8h2.05zm9.45 4a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zm-2.45 1a2.5 2.5 0 0 1 4.9 0H16v1h-2.05a2.5 2.5 0 0 1-4.9 0H0v-1h9.05z"></path></svg>`), Sliders[FILENAME], [[1, 0, [[1, 168]]]]);
function Sliders($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sliders);
  var svg = root1758();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sliders", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sliders = hmr(Sliders, () => Sliders[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sliders[HMR].source;
    set(Sliders[HMR].source, module.default[HMR].original);
  });
}
var Sliders_default = Sliders;
mark_module_end(Sliders);

// node_modules/svelte-bootstrap-icons/lib/Sliders2Vertical.svelte
mark_module_start();
Sliders2Vertical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sliders2Vertical.svelte";
var root1759 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M0 10.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 0-1H3V1.5a.5.5 0 0 0-1 0V10H.5a.5.5 0 0 0-.5.5ZM2.5 12a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 1 0v-2a.5.5 0 0 0-.5-.5Zm3-6.5A.5.5 0 0 0 6 6h1.5v8.5a.5.5 0 0 0 1 0V6H10a.5.5 0 0 0 0-1H6a.5.5 0 0 0-.5.5ZM8 1a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 1 0v-2A.5.5 0 0 0 8 1Zm3 9.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 0-1H14V1.5a.5.5 0 0 0-1 0V10h-1.5a.5.5 0 0 0-.5.5Zm2.5 1.5a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 1 0v-2a.5.5 0 0 0-.5-.5Z"></path></svg>`), Sliders2Vertical[FILENAME], [[1, 0, [[1, 178]]]]);
function Sliders2Vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sliders2Vertical);
  var svg = root1759();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sliders2-vertical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sliders2Vertical = hmr(Sliders2Vertical, () => Sliders2Vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sliders2Vertical[HMR].source;
    set(Sliders2Vertical[HMR].source, module.default[HMR].original);
  });
}
var Sliders2Vertical_default = Sliders2Vertical;
mark_module_end(Sliders2Vertical);

// node_modules/svelte-bootstrap-icons/lib/Sliders2.svelte
mark_module_start();
Sliders2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sliders2.svelte";
var root1760 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.5 1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V4H1.5a.5.5 0 0 1 0-1H10V1.5a.5.5 0 0 1 .5-.5ZM12 3.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm-6.5 2A.5.5 0 0 1 6 6v1.5h8.5a.5.5 0 0 1 0 1H6V10a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5ZM1 8a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2A.5.5 0 0 1 1 8Zm9.5 2a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V13H1.5a.5.5 0 0 1 0-1H10v-1.5a.5.5 0 0 1 .5-.5Zm1.5 2.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Z"></path></svg>`), Sliders2[FILENAME], [[1, 0, [[1, 169]]]]);
function Sliders2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sliders2);
  var svg = root1760();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sliders2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sliders2 = hmr(Sliders2, () => Sliders2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sliders2[HMR].source;
    set(Sliders2[HMR].source, module.default[HMR].original);
  });
}
var Sliders2_default = Sliders2;
mark_module_end(Sliders2);

// node_modules/svelte-bootstrap-icons/lib/Smartwatch.svelte
mark_module_start();
Smartwatch[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Smartwatch.svelte";
var root1761 = add_locations(ns_template(`<svg><!><path d="M9 5a.5.5 0 0 0-1 0v3H6a.5.5 0 0 0 0 1h2.5a.5.5 0 0 0 .5-.5V5z"></path><path d="M4 1.667v.383A2.5 2.5 0 0 0 2 4.5v7a2.5 2.5 0 0 0 2 2.45v.383C4 15.253 4.746 16 5.667 16h4.666c.92 0 1.667-.746 1.667-1.667v-.383a2.5 2.5 0 0 0 2-2.45V8h.5a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5H14v-.5a2.5 2.5 0 0 0-2-2.45v-.383C12 .747 11.254 0 10.333 0H5.667C4.747 0 4 .746 4 1.667zM4.5 3h7A1.5 1.5 0 0 1 13 4.5v7a1.5 1.5 0 0 1-1.5 1.5h-7A1.5 1.5 0 0 1 3 11.5v-7A1.5 1.5 0 0 1 4.5 3z"></path></svg>`), Smartwatch[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Smartwatch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Smartwatch);
  var svg = root1761();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-smartwatch", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Smartwatch = hmr(Smartwatch, () => Smartwatch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Smartwatch[HMR].source;
    set(Smartwatch[HMR].source, module.default[HMR].original);
  });
}
var Smartwatch_default = Smartwatch;
mark_module_end(Smartwatch);

// node_modules/svelte-bootstrap-icons/lib/Snapchat.svelte
mark_module_start();
Snapchat[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Snapchat.svelte";
var root1762 = add_locations(ns_template(`<svg><!><path d="M15.943 11.526c-.111-.303-.323-.465-.564-.599a1.416 1.416 0 0 0-.123-.064l-.219-.111c-.752-.399-1.339-.902-1.746-1.498a3.387 3.387 0 0 1-.3-.531c-.034-.1-.032-.156-.008-.207a.338.338 0 0 1 .097-.1c.129-.086.262-.173.352-.231.162-.104.289-.187.371-.245.309-.216.525-.446.66-.702a1.397 1.397 0 0 0 .069-1.16c-.205-.538-.713-.872-1.329-.872a1.829 1.829 0 0 0-.487.065c.006-.368-.002-.757-.035-1.139-.116-1.344-.587-2.048-1.077-2.61a4.294 4.294 0 0 0-1.095-.881C9.764.216 8.92 0 7.999 0c-.92 0-1.76.216-2.505.641-.412.232-.782.53-1.097.883-.49.562-.96 1.267-1.077 2.61-.033.382-.04.772-.036 1.138a1.83 1.83 0 0 0-.487-.065c-.615 0-1.124.335-1.328.873a1.398 1.398 0 0 0 .067 1.161c.136.256.352.486.66.701.082.058.21.14.371.246l.339.221a.38.38 0 0 1 .109.11c.026.053.027.11-.012.217a3.363 3.363 0 0 1-.295.52c-.398.583-.968 1.077-1.696 1.472-.385.204-.786.34-.955.8-.128.348-.044.743.28 1.075.119.125.257.23.409.31a4.43 4.43 0 0 0 1 .4.66.66 0 0 1 .202.09c.118.104.102.26.259.488.079.118.18.22.296.3.33.229.701.243 1.095.258.355.014.758.03 1.217.18.19.064.389.186.618.328.55.338 1.305.802 2.566.802 1.262 0 2.02-.466 2.576-.806.227-.14.424-.26.609-.321.46-.152.863-.168 1.218-.181.393-.015.764-.03 1.095-.258a1.14 1.14 0 0 0 .336-.368c.114-.192.11-.327.217-.42a.625.625 0 0 1 .19-.087 4.446 4.446 0 0 0 1.014-.404c.16-.087.306-.2.429-.336l.004-.005c.304-.325.38-.709.256-1.047Zm-1.121.602c-.684.378-1.139.337-1.493.565-.3.193-.122.61-.34.76-.269.186-1.061-.012-2.085.326-.845.279-1.384 1.082-2.903 1.082-1.519 0-2.045-.801-2.904-1.084-1.022-.338-1.816-.14-2.084-.325-.218-.15-.041-.568-.341-.761-.354-.228-.809-.187-1.492-.563-.436-.24-.189-.39-.044-.46 2.478-1.199 2.873-3.05 2.89-3.188.022-.166.045-.297-.138-.466-.177-.164-.962-.65-1.18-.802-.36-.252-.52-.503-.402-.812.082-.214.281-.295.49-.295a.93.93 0 0 1 .197.022c.396.086.78.285 1.002.338.027.007.054.01.082.011.118 0 .16-.06.152-.195-.026-.433-.087-1.277-.019-2.066.094-1.084.444-1.622.859-2.097.2-.229 1.137-1.22 2.93-1.22 1.792 0 2.732.987 2.931 1.215.416.475.766 1.013.859 2.098.068.788.009 1.632-.019 2.065-.01.142.034.195.152.195a.35.35 0 0 0 .082-.01c.222-.054.607-.253 1.002-.338a.912.912 0 0 1 .197-.023c.21 0 .409.082.49.295.117.309-.04.56-.401.812-.218.152-1.003.638-1.18.802-.184.169-.16.3-.139.466.018.14.413 1.991 2.89 3.189.147.073.394.222-.041.464Z"></path></svg>`), Snapchat[FILENAME], [[1, 0, [[1, 169]]]]);
function Snapchat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Snapchat);
  var svg = root1762();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-snapchat", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Snapchat = hmr(Snapchat, () => Snapchat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Snapchat[HMR].source;
    set(Snapchat[HMR].source, module.default[HMR].original);
  });
}
var Snapchat_default = Snapchat;
mark_module_end(Snapchat);

// node_modules/svelte-bootstrap-icons/lib/Snow.svelte
mark_module_start();
Snow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Snow.svelte";
var root1763 = add_locations(ns_template(`<svg><!><path d="M8 16a.5.5 0 0 1-.5-.5v-1.293l-.646.647a.5.5 0 0 1-.707-.708L7.5 12.793V8.866l-3.4 1.963-.496 1.85a.5.5 0 1 1-.966-.26l.237-.882-1.12.646a.5.5 0 0 1-.5-.866l1.12-.646-.884-.237a.5.5 0 1 1 .26-.966l1.848.495L7 8 3.6 6.037l-1.85.495a.5.5 0 0 1-.258-.966l.883-.237-1.12-.646a.5.5 0 1 1 .5-.866l1.12.646-.237-.883a.5.5 0 1 1 .966-.258l.495 1.849L7.5 7.134V3.207L6.147 1.854a.5.5 0 1 1 .707-.708l.646.647V.5a.5.5 0 1 1 1 0v1.293l.647-.647a.5.5 0 1 1 .707.708L8.5 3.207v3.927l3.4-1.963.496-1.85a.5.5 0 1 1 .966.26l-.236.882 1.12-.646a.5.5 0 0 1 .5.866l-1.12.646.883.237a.5.5 0 1 1-.26.966l-1.848-.495L9 8l3.4 1.963 1.849-.495a.5.5 0 0 1 .259.966l-.883.237 1.12.646a.5.5 0 0 1-.5.866l-1.12-.646.236.883a.5.5 0 1 1-.966.258l-.495-1.849-3.4-1.963v3.927l1.353 1.353a.5.5 0 0 1-.707.708l-.647-.647V15.5a.5.5 0 0 1-.5.5z"></path></svg>`), Snow[FILENAME], [[1, 0, [[1, 165]]]]);
function Snow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Snow);
  var svg = root1763();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-snow", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Snow = hmr(Snow, () => Snow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Snow[HMR].source;
    set(Snow[HMR].source, module.default[HMR].original);
  });
}
var Snow_default = Snow;
mark_module_end(Snow);

// node_modules/svelte-bootstrap-icons/lib/Snow2.svelte
mark_module_start();
Snow2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Snow2.svelte";
var root1764 = add_locations(ns_template(`<svg><!><path d="M8 16a.5.5 0 0 1-.5-.5v-1.293l-.646.647a.5.5 0 0 1-.707-.708L7.5 12.793v-1.086l-.646.647a.5.5 0 0 1-.707-.708L7.5 10.293V8.866l-1.236.713-.495 1.85a.5.5 0 1 1-.966-.26l.237-.882-.94.542-.496 1.85a.5.5 0 1 1-.966-.26l.237-.882-1.12.646a.5.5 0 0 1-.5-.866l1.12-.646-.884-.237a.5.5 0 1 1 .26-.966l1.848.495.94-.542-.882-.237a.5.5 0 1 1 .258-.966l1.85.495L7 8l-1.236-.713-1.849.495a.5.5 0 1 1-.258-.966l.883-.237-.94-.542-1.85.495a.5.5 0 0 1-.258-.966l.883-.237-1.12-.646a.5.5 0 1 1 .5-.866l1.12.646-.237-.883a.5.5 0 0 1 .966-.258l.495 1.849.94.542-.236-.883a.5.5 0 0 1 .966-.258l.495 1.849 1.236.713V5.707L6.147 4.354a.5.5 0 1 1 .707-.708l.646.647V3.207L6.147 1.854a.5.5 0 1 1 .707-.708l.646.647V.5a.5.5 0 0 1 1 0v1.293l.647-.647a.5.5 0 1 1 .707.708L8.5 3.207v1.086l.647-.647a.5.5 0 1 1 .707.708L8.5 5.707v1.427l1.236-.713.495-1.85a.5.5 0 1 1 .966.26l-.236.882.94-.542.495-1.85a.5.5 0 1 1 .966.26l-.236.882 1.12-.646a.5.5 0 0 1 .5.866l-1.12.646.883.237a.5.5 0 1 1-.26.966l-1.848-.495-.94.542.883.237a.5.5 0 1 1-.26.966l-1.848-.495L9 8l1.236.713 1.849-.495a.5.5 0 0 1 .259.966l-.883.237.94.542 1.849-.495a.5.5 0 0 1 .259.966l-.883.237 1.12.646a.5.5 0 0 1-.5.866l-1.12-.646.236.883a.5.5 0 1 1-.966.258l-.495-1.849-.94-.542.236.883a.5.5 0 0 1-.966.258L9.736 9.58 8.5 8.866v1.427l1.354 1.353a.5.5 0 0 1-.707.708l-.647-.647v1.086l1.354 1.353a.5.5 0 0 1-.707.708l-.647-.647V15.5a.5.5 0 0 1-.5.5z"></path></svg>`), Snow2[FILENAME], [[1, 0, [[1, 166]]]]);
function Snow2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Snow2);
  var svg = root1764();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-snow2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Snow2 = hmr(Snow2, () => Snow2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Snow2[HMR].source;
    set(Snow2[HMR].source, module.default[HMR].original);
  });
}
var Snow2_default = Snow2;
mark_module_end(Snow2);

// node_modules/svelte-bootstrap-icons/lib/Snow3.svelte
mark_module_start();
Snow3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Snow3.svelte";
var root1765 = add_locations(ns_template(`<svg><!><path d="M8 7.5a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1z"></path><path d="M8 16a.5.5 0 0 1-.5-.5v-1.293l-.646.647a.5.5 0 0 1-.707-.708L7.5 12.793v-1.51l-2.053-1.232-1.348.778-.495 1.85a.5.5 0 1 1-.966-.26l.237-.882-1.12.646a.5.5 0 0 1-.5-.866l1.12-.646-.883-.237a.5.5 0 1 1 .258-.966l1.85.495L5 9.155v-2.31l-1.4-.808-1.85.495a.5.5 0 1 1-.259-.966l.884-.237-1.12-.646a.5.5 0 0 1 .5-.866l1.12.646-.237-.883a.5.5 0 1 1 .966-.258l.495 1.849 1.348.778L7.5 4.717v-1.51L6.147 1.854a.5.5 0 1 1 .707-.708l.646.647V.5a.5.5 0 0 1 1 0v1.293l.647-.647a.5.5 0 1 1 .707.708L8.5 3.207v1.51l2.053 1.232 1.348-.778.495-1.85a.5.5 0 1 1 .966.26l-.236.882 1.12-.646a.5.5 0 0 1 .5.866l-1.12.646.883.237a.5.5 0 1 1-.26.966l-1.848-.495-1.4.808v2.31l1.4.808 1.849-.495a.5.5 0 1 1 .259.966l-.883.237 1.12.646a.5.5 0 0 1-.5.866l-1.12-.646.236.883a.5.5 0 1 1-.966.258l-.495-1.849-1.348-.778L8.5 11.283v1.51l1.354 1.353a.5.5 0 0 1-.707.708l-.647-.647V15.5a.5.5 0 0 1-.5.5zm2-6.783V6.783l-2-1.2-2 1.2v2.434l2 1.2 2-1.2z"></path></svg>`), Snow3[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Snow3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Snow3);
  var svg = root1765();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-snow3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Snow3 = hmr(Snow3, () => Snow3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Snow3[HMR].source;
    set(Snow3[HMR].source, module.default[HMR].original);
  });
}
var Snow3_default = Snow3;
mark_module_end(Snow3);

// node_modules/svelte-bootstrap-icons/lib/SortAlphaDownAlt.svelte
mark_module_start();
SortAlphaDownAlt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortAlphaDownAlt.svelte";
var root1766 = add_locations(ns_template(`<svg><!><path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z"></path><path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z"></path><path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z"></path></svg>`), SortAlphaDownAlt[FILENAME], [
  [
    1,
    0,
    [[1, 180], [2, 2], [3, 2]]
  ]
]);
function SortAlphaDownAlt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortAlphaDownAlt);
  var svg = root1766();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-alpha-down-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortAlphaDownAlt = hmr(SortAlphaDownAlt, () => SortAlphaDownAlt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortAlphaDownAlt[HMR].source;
    set(SortAlphaDownAlt[HMR].source, module.default[HMR].original);
  });
}
var SortAlphaDownAlt_default = SortAlphaDownAlt;
mark_module_end(SortAlphaDownAlt);

// node_modules/svelte-bootstrap-icons/lib/SortAlphaDown.svelte
mark_module_start();
SortAlphaDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortAlphaDown.svelte";
var root1767 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z"></path><path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z"></path></svg>`), SortAlphaDown[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function SortAlphaDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortAlphaDown);
  var svg = root1767();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-alpha-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortAlphaDown = hmr(SortAlphaDown, () => SortAlphaDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortAlphaDown[HMR].source;
    set(SortAlphaDown[HMR].source, module.default[HMR].original);
  });
}
var SortAlphaDown_default = SortAlphaDown;
mark_module_end(SortAlphaDown);

// node_modules/svelte-bootstrap-icons/lib/SortAlphaUpAlt.svelte
mark_module_start();
SortAlphaUpAlt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortAlphaUpAlt.svelte";
var root1768 = add_locations(ns_template(`<svg><!><path d="M12.96 7H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V7z"></path><path fill-rule="evenodd" d="M10.082 12.629 9.664 14H8.598l1.789-5.332h1.234L13.402 14h-1.12l-.419-1.371h-1.781zm1.57-.785L11 9.688h-.047l-.652 2.156h1.351z"></path><path d="M4.5 13.5a.5.5 0 0 1-1 0V3.707L2.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.498.498 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L4.5 3.707V13.5z"></path></svg>`), SortAlphaUpAlt[FILENAME], [
  [
    1,
    0,
    [[1, 178], [2, 2], [3, 2]]
  ]
]);
function SortAlphaUpAlt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortAlphaUpAlt);
  var svg = root1768();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-alpha-up-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortAlphaUpAlt = hmr(SortAlphaUpAlt, () => SortAlphaUpAlt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortAlphaUpAlt[HMR].source;
    set(SortAlphaUpAlt[HMR].source, module.default[HMR].original);
  });
}
var SortAlphaUpAlt_default = SortAlphaUpAlt;
mark_module_end(SortAlphaUpAlt);

// node_modules/svelte-bootstrap-icons/lib/SortAlphaUp.svelte
mark_module_start();
SortAlphaUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortAlphaUp.svelte";
var root1769 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371h-1.781zm1.57-.785L11 2.687h-.047l-.652 2.157h1.351z"></path><path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645V14zm-8.46-.5a.5.5 0 0 1-1 0V3.707L2.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.498.498 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L4.5 3.707V13.5z"></path></svg>`), SortAlphaUp[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function SortAlphaUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortAlphaUp);
  var svg = root1769();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-alpha-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortAlphaUp = hmr(SortAlphaUp, () => SortAlphaUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortAlphaUp[HMR].source;
    set(SortAlphaUp[HMR].source, module.default[HMR].original);
  });
}
var SortAlphaUp_default = SortAlphaUp;
mark_module_end(SortAlphaUp);

// node_modules/svelte-bootstrap-icons/lib/SortDownAlt.svelte
mark_module_start();
SortDownAlt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortDownAlt.svelte";
var root1770 = add_locations(ns_template(`<svg><!><path d="M3.5 3.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 12.293V3.5zm4 .5a.5.5 0 0 1 0-1h1a.5.5 0 0 1 0 1h-1zm0 3a.5.5 0 0 1 0-1h3a.5.5 0 0 1 0 1h-3zm0 3a.5.5 0 0 1 0-1h5a.5.5 0 0 1 0 1h-5zM7 12.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7a.5.5 0 0 0-.5.5z"></path></svg>`), SortDownAlt[FILENAME], [[1, 0, [[1, 174]]]]);
function SortDownAlt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortDownAlt);
  var svg = root1770();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-down-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortDownAlt = hmr(SortDownAlt, () => SortDownAlt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortDownAlt[HMR].source;
    set(SortDownAlt[HMR].source, module.default[HMR].original);
  });
}
var SortDownAlt_default = SortDownAlt;
mark_module_end(SortDownAlt);

// node_modules/svelte-bootstrap-icons/lib/SortDown.svelte
mark_module_start();
SortDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortDown.svelte";
var root1771 = add_locations(ns_template(`<svg><!><path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293V2.5zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path></svg>`), SortDown[FILENAME], [[1, 0, [[1, 170]]]]);
function SortDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortDown);
  var svg = root1771();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortDown = hmr(SortDown, () => SortDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortDown[HMR].source;
    set(SortDown[HMR].source, module.default[HMR].original);
  });
}
var SortDown_default = SortDown;
mark_module_end(SortDown);

// node_modules/svelte-bootstrap-icons/lib/SortNumericDownAlt.svelte
mark_module_start();
SortNumericDownAlt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortNumericDownAlt.svelte";
var root1772 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z"></path><path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z"></path></svg>`), SortNumericDownAlt[FILENAME], [
  [1, 0, [[1, 182], [2, 2]]]
]);
function SortNumericDownAlt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortNumericDownAlt);
  var svg = root1772();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-numeric-down-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortNumericDownAlt = hmr(SortNumericDownAlt, () => SortNumericDownAlt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortNumericDownAlt[HMR].source;
    set(SortNumericDownAlt[HMR].source, module.default[HMR].original);
  });
}
var SortNumericDownAlt_default = SortNumericDownAlt;
mark_module_end(SortNumericDownAlt);

// node_modules/svelte-bootstrap-icons/lib/SortNumericDown.svelte
mark_module_start();
SortNumericDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortNumericDown.svelte";
var root1773 = add_locations(ns_template(`<svg><!><path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z"></path><path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z"></path><path d="M4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293V2.5z"></path></svg>`), SortNumericDown[FILENAME], [
  [
    1,
    0,
    [[1, 178], [2, 2], [3, 2]]
  ]
]);
function SortNumericDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortNumericDown);
  var svg = root1773();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-numeric-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortNumericDown = hmr(SortNumericDown, () => SortNumericDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortNumericDown[HMR].source;
    set(SortNumericDown[HMR].source, module.default[HMR].original);
  });
}
var SortNumericDown_default = SortNumericDown;
mark_module_end(SortNumericDown);

// node_modules/svelte-bootstrap-icons/lib/SortNumericUpAlt.svelte
mark_module_start();
SortNumericUpAlt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortNumericUpAlt.svelte";
var root1774 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M11.36 7.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.836 1.973-1.836 1.09 0 2.063.637 2.063 2.688 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z"></path><path d="M12.438 8.668V14H11.39V9.684h-.051l-1.211.859v-.969l1.262-.906h1.046zM4.5 13.5a.5.5 0 0 1-1 0V3.707L2.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.498.498 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L4.5 3.707V13.5z"></path></svg>`), SortNumericUpAlt[FILENAME], [
  [1, 0, [[1, 180], [2, 2]]]
]);
function SortNumericUpAlt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortNumericUpAlt);
  var svg = root1774();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-numeric-up-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortNumericUpAlt = hmr(SortNumericUpAlt, () => SortNumericUpAlt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortNumericUpAlt[HMR].source;
    set(SortNumericUpAlt[HMR].source, module.default[HMR].original);
  });
}
var SortNumericUpAlt_default = SortNumericUpAlt;
mark_module_end(SortNumericUpAlt);

// node_modules/svelte-bootstrap-icons/lib/SortNumericUp.svelte
mark_module_start();
SortNumericUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortNumericUp.svelte";
var root1775 = add_locations(ns_template(`<svg><!><path d="M12.438 1.668V7H11.39V2.684h-.051l-1.211.859v-.969l1.262-.906h1.046z"></path><path fill-rule="evenodd" d="M11.36 14.098c-1.137 0-1.708-.657-1.762-1.278h1.004c.058.223.343.45.773.45.824 0 1.164-.829 1.133-1.856h-.059c-.148.39-.57.742-1.261.742-.91 0-1.72-.613-1.72-1.758 0-1.148.848-1.835 1.973-1.835 1.09 0 2.063.636 2.063 2.687 0 1.867-.723 2.848-2.145 2.848zm.062-2.735c.504 0 .933-.336.933-.972 0-.633-.398-1.008-.94-1.008-.52 0-.927.375-.927 1 0 .64.418.98.934.98z"></path><path d="M4.5 13.5a.5.5 0 0 1-1 0V3.707L2.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.498.498 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L4.5 3.707V13.5z"></path></svg>`), SortNumericUp[FILENAME], [
  [
    1,
    0,
    [[1, 176], [2, 2], [3, 2]]
  ]
]);
function SortNumericUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortNumericUp);
  var svg = root1775();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-numeric-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortNumericUp = hmr(SortNumericUp, () => SortNumericUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortNumericUp[HMR].source;
    set(SortNumericUp[HMR].source, module.default[HMR].original);
  });
}
var SortNumericUp_default = SortNumericUp;
mark_module_end(SortNumericUp);

// node_modules/svelte-bootstrap-icons/lib/SortUpAlt.svelte
mark_module_start();
SortUpAlt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortUpAlt.svelte";
var root1776 = add_locations(ns_template(`<svg><!><path d="M3.5 13.5a.5.5 0 0 1-1 0V4.707L1.354 5.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.498.498 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L3.5 4.707V13.5zm4-9.5a.5.5 0 0 1 0-1h1a.5.5 0 0 1 0 1h-1zm0 3a.5.5 0 0 1 0-1h3a.5.5 0 0 1 0 1h-3zm0 3a.5.5 0 0 1 0-1h5a.5.5 0 0 1 0 1h-5zM7 12.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7a.5.5 0 0 0-.5.5z"></path></svg>`), SortUpAlt[FILENAME], [[1, 0, [[1, 172]]]]);
function SortUpAlt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortUpAlt);
  var svg = root1776();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-up-alt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortUpAlt = hmr(SortUpAlt, () => SortUpAlt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortUpAlt[HMR].source;
    set(SortUpAlt[HMR].source, module.default[HMR].original);
  });
}
var SortUpAlt_default = SortUpAlt;
mark_module_end(SortUpAlt);

// node_modules/svelte-bootstrap-icons/lib/SortUp.svelte
mark_module_start();
SortUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SortUp.svelte";
var root1777 = add_locations(ns_template(`<svg><!><path d="M3.5 12.5a.5.5 0 0 1-1 0V3.707L1.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.498.498 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L3.5 3.707V12.5zm3.5-9a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path></svg>`), SortUp[FILENAME], [[1, 0, [[1, 168]]]]);
function SortUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SortUp);
  var svg = root1777();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sort-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SortUp = hmr(SortUp, () => SortUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SortUp[HMR].source;
    set(SortUp[HMR].source, module.default[HMR].original);
  });
}
var SortUp_default = SortUp;
mark_module_end(SortUp);

// node_modules/svelte-bootstrap-icons/lib/Soundwave.svelte
mark_module_start();
Soundwave[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Soundwave.svelte";
var root1778 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8.5 2a.5.5 0 0 1 .5.5v11a.5.5 0 0 1-1 0v-11a.5.5 0 0 1 .5-.5zm-2 2a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zm4 0a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zm-6 1.5A.5.5 0 0 1 5 6v4a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm8 0a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm-10 1A.5.5 0 0 1 3 7v2a.5.5 0 0 1-1 0V7a.5.5 0 0 1 .5-.5zm12 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0V7a.5.5 0 0 1 .5-.5z"></path></svg>`), Soundwave[FILENAME], [[1, 0, [[1, 170]]]]);
function Soundwave($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Soundwave);
  var svg = root1778();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-soundwave", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Soundwave = hmr(Soundwave, () => Soundwave[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Soundwave[HMR].source;
    set(Soundwave[HMR].source, module.default[HMR].original);
  });
}
var Soundwave_default = Soundwave;
mark_module_end(Soundwave);

// node_modules/svelte-bootstrap-icons/lib/Sourceforge.svelte
mark_module_start();
Sourceforge[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sourceforge.svelte";
var root1779 = add_locations(ns_template(`<svg><!><path d="M9.13 8.43c0-2.604-.929-3.79-1.42-4.24a.14.14 0 0 0-.232.123c.095 1.472-1.762 1.84-1.762 4.144v.013c0 1.404 1.065 2.55 2.376 2.55s2.377-1.146 2.377-2.55v-.013c0-.655-.246-1.282-.492-1.745-.055-.096-.191-.055-.178.027.451 1.99-.669 3.217-.669 1.69Z"></path><path d="M6.303 13.923a.252.252 0 0 1-.164-.068L.061 7.789c-.081-.082-.081-.232 0-.327l6.42-6.407A.287.287 0 0 1 6.63 1h1.844c.109 0 .177.068.204.136a.22.22 0 0 1-.054.246L2.602 7.407a.304.304 0 0 0 0 .436l4.766 4.771c.082.082.082.232 0 .328l-.915.927a.287.287 0 0 1-.15.054Zm1.216 1.063a.22.22 0 0 1-.15-.382l6.036-6.025a.321.321 0 0 0 .096-.218.271.271 0 0 0-.096-.218l-4.78-4.771c-.082-.082-.082-.232 0-.327l.929-.927a.226.226 0 0 1 .163-.068c.069 0 .11.04.15.081l6.065 6.067c.04.04.068.095.068.163a.225.225 0 0 1-.068.164l-6.42 6.407A.226.226 0 0 1 9.35 15H7.52v-.014Z"></path></svg>`), Sourceforge[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Sourceforge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sourceforge);
  var svg = root1779();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sourceforge", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sourceforge = hmr(Sourceforge, () => Sourceforge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sourceforge[HMR].source;
    set(Sourceforge[HMR].source, module.default[HMR].original);
  });
}
var Sourceforge_default = Sourceforge;
mark_module_end(Sourceforge);

// node_modules/svelte-bootstrap-icons/lib/SpeakerFill.svelte
mark_module_start();
SpeakerFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SpeakerFill.svelte";
var root1780 = add_locations(ns_template(`<svg><!><path d="M9 4a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-2.5 6.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0z"></path><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm6 4a2 2 0 1 1-4 0 2 2 0 0 1 4 0zM8 7a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7z"></path></svg>`), SpeakerFill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function SpeakerFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SpeakerFill);
  var svg = root1780();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-speaker-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SpeakerFill = hmr(SpeakerFill, () => SpeakerFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeakerFill[HMR].source;
    set(SpeakerFill[HMR].source, module.default[HMR].original);
  });
}
var SpeakerFill_default = SpeakerFill;
mark_module_end(SpeakerFill);

// node_modules/svelte-bootstrap-icons/lib/Speaker.svelte
mark_module_start();
Speaker[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Speaker.svelte";
var root1781 = add_locations(ns_template(`<svg><!><path d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h8zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z"></path><path d="M8 4.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5zM8 6a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm0 3a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zm-3.5 1.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"></path></svg>`), Speaker[FILENAME], [
  [1, 0, [[1, 168], [2, 2]]]
]);
function Speaker($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Speaker);
  var svg = root1781();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-speaker", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Speaker = hmr(Speaker, () => Speaker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Speaker[HMR].source;
    set(Speaker[HMR].source, module.default[HMR].original);
  });
}
var Speaker_default = Speaker;
mark_module_end(Speaker);

// node_modules/svelte-bootstrap-icons/lib/Speedometer.svelte
mark_module_start();
Speedometer[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Speedometer.svelte";
var root1782 = add_locations(ns_template(`<svg><!><path d="M8 2a.5.5 0 0 1 .5.5V4a.5.5 0 0 1-1 0V2.5A.5.5 0 0 1 8 2zM3.732 3.732a.5.5 0 0 1 .707 0l.915.914a.5.5 0 1 1-.708.708l-.914-.915a.5.5 0 0 1 0-.707zM2 8a.5.5 0 0 1 .5-.5h1.586a.5.5 0 0 1 0 1H2.5A.5.5 0 0 1 2 8zm9.5 0a.5.5 0 0 1 .5-.5h1.5a.5.5 0 0 1 0 1H12a.5.5 0 0 1-.5-.5zm.754-4.246a.389.389 0 0 0-.527-.02L7.547 7.31A.91.91 0 1 0 8.85 8.569l3.434-4.297a.389.389 0 0 0-.029-.518z"></path><path fill-rule="evenodd" d="M6.664 15.889A8 8 0 1 1 9.336.11a8 8 0 0 1-2.672 15.78zm-4.665-4.283A11.945 11.945 0 0 1 8 10c2.186 0 4.236.585 6.001 1.606a7 7 0 1 0-12.002 0z"></path></svg>`), Speedometer[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Speedometer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Speedometer);
  var svg = root1782();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-speedometer", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Speedometer = hmr(Speedometer, () => Speedometer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Speedometer[HMR].source;
    set(Speedometer[HMR].source, module.default[HMR].original);
  });
}
var Speedometer_default = Speedometer;
mark_module_end(Speedometer);

// node_modules/svelte-bootstrap-icons/lib/Speedometer2.svelte
mark_module_start();
Speedometer2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Speedometer2.svelte";
var root1783 = add_locations(ns_template(`<svg><!><path d="M8 4a.5.5 0 0 1 .5.5V6a.5.5 0 0 1-1 0V4.5A.5.5 0 0 1 8 4zM3.732 5.732a.5.5 0 0 1 .707 0l.915.914a.5.5 0 1 1-.708.708l-.914-.915a.5.5 0 0 1 0-.707zM2 10a.5.5 0 0 1 .5-.5h1.586a.5.5 0 0 1 0 1H2.5A.5.5 0 0 1 2 10zm9.5 0a.5.5 0 0 1 .5-.5h1.5a.5.5 0 0 1 0 1H12a.5.5 0 0 1-.5-.5zm.754-4.246a.389.389 0 0 0-.527-.02L7.547 9.31a.91.91 0 1 0 1.302 1.258l3.434-4.297a.389.389 0 0 0-.029-.518z"></path><path fill-rule="evenodd" d="M0 10a8 8 0 1 1 15.547 2.661c-.442 1.253-1.845 1.602-2.932 1.25C11.309 13.488 9.475 13 8 13c-1.474 0-3.31.488-4.615.911-1.087.352-2.49.003-2.932-1.25A7.988 7.988 0 0 1 0 10zm8-7a7 7 0 0 0-6.603 9.329c.203.575.923.876 1.68.63C4.397 12.533 6.358 12 8 12s3.604.532 4.923.96c.757.245 1.477-.056 1.68-.631A7 7 0 0 0 8 3z"></path></svg>`), Speedometer2[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function Speedometer2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Speedometer2);
  var svg = root1783();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-speedometer2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Speedometer2 = hmr(Speedometer2, () => Speedometer2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Speedometer2[HMR].source;
    set(Speedometer2[HMR].source, module.default[HMR].original);
  });
}
var Speedometer2_default = Speedometer2;
mark_module_end(Speedometer2);

// node_modules/svelte-bootstrap-icons/lib/Spellcheck.svelte
mark_module_start();
Spellcheck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Spellcheck.svelte";
var root1784 = add_locations(ns_template(`<svg><!><path d="M8.217 11.068c1.216 0 1.948-.869 1.948-2.31v-.702c0-1.44-.727-2.305-1.929-2.305-.742 0-1.328.347-1.499.889h-.063V3.983h-1.29V11h1.27v-.791h.064c.21.532.776.86 1.499.86zm-.43-1.025c-.66 0-1.113-.518-1.113-1.28V8.12c0-.825.42-1.343 1.098-1.343.684 0 1.075.518 1.075 1.416v.45c0 .888-.386 1.401-1.06 1.401zm-5.583 1.035c.767 0 1.201-.356 1.406-.737h.059V11h1.216V7.519c0-1.314-.947-1.783-2.11-1.783C1.355 5.736.75 6.42.69 7.27h1.216c.064-.323.313-.552.84-.552.527 0 .864.249.864.771v.464H2.346C1.145 7.953.5 8.568.5 9.496c0 .977.693 1.582 1.704 1.582zm.42-.947c-.44 0-.845-.235-.845-.718 0-.395.269-.684.84-.684h.991v.538c0 .503-.444.864-.986.864zm8.897.567c-.577-.4-.9-1.088-.9-1.983v-.65c0-1.42.894-2.338 2.305-2.338 1.352 0 2.119.82 2.139 1.806h-1.187c-.04-.351-.283-.776-.918-.776-.674 0-1.045.517-1.045 1.328v.625c0 .468.121.834.343 1.067l-.737.92z"></path><path d="M14.469 9.414a.75.75 0 0 1 .117 1.055l-4 5a.75.75 0 0 1-1.116.061l-2.5-2.5a.75.75 0 1 1 1.06-1.06l1.908 1.907 3.476-4.346a.75.75 0 0 1 1.055-.117z"></path></svg>`), Spellcheck[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Spellcheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Spellcheck);
  var svg = root1784();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-spellcheck", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spellcheck = hmr(Spellcheck, () => Spellcheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spellcheck[HMR].source;
    set(Spellcheck[HMR].source, module.default[HMR].original);
  });
}
var Spellcheck_default = Spellcheck;
mark_module_end(Spellcheck);

// node_modules/svelte-bootstrap-icons/lib/Spotify.svelte
mark_module_start();
Spotify[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Spotify.svelte";
var root1785 = add_locations(ns_template(`<svg><!><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zm3.669 11.538a.498.498 0 0 1-.686.165c-1.879-1.147-4.243-1.407-7.028-.77a.499.499 0 0 1-.222-.973c3.048-.696 5.662-.397 7.77.892a.5.5 0 0 1 .166.686zm.979-2.178a.624.624 0 0 1-.858.205c-2.15-1.321-5.428-1.704-7.972-.932a.625.625 0 0 1-.362-1.194c2.905-.881 6.517-.454 8.986 1.063a.624.624 0 0 1 .206.858zm.084-2.268C10.154 5.56 5.9 5.419 3.438 6.166a.748.748 0 1 1-.434-1.432c2.825-.857 7.523-.692 10.492 1.07a.747.747 0 1 1-.764 1.288z"></path></svg>`), Spotify[FILENAME], [[1, 0, [[1, 168]]]]);
function Spotify($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Spotify);
  var svg = root1785();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-spotify", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spotify = hmr(Spotify, () => Spotify[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spotify[HMR].source;
    set(Spotify[HMR].source, module.default[HMR].original);
  });
}
var Spotify_default = Spotify;
mark_module_end(Spotify);

// node_modules/svelte-bootstrap-icons/lib/SquareFill.svelte
mark_module_start();
SquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SquareFill.svelte";
var root1786 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z"></path></svg>`), SquareFill[FILENAME], [[1, 0, [[1, 172]]]]);
function SquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SquareFill);
  var svg = root1786();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SquareFill = hmr(SquareFill, () => SquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SquareFill[HMR].source;
    set(SquareFill[HMR].source, module.default[HMR].original);
  });
}
var SquareFill_default11 = SquareFill;
mark_module_end(SquareFill);

// node_modules/svelte-bootstrap-icons/lib/SquareHalf.svelte
mark_module_start();
SquareHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SquareHalf.svelte";
var root1787 = add_locations(ns_template(`<svg><!><path d="M8 15V1h6a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H8zm6 1a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12z"></path></svg>`), SquareHalf[FILENAME], [[1, 0, [[1, 172]]]]);
function SquareHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SquareHalf);
  var svg = root1787();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-square-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SquareHalf = hmr(SquareHalf, () => SquareHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SquareHalf[HMR].source;
    set(SquareHalf[HMR].source, module.default[HMR].original);
  });
}
var SquareHalf_default = SquareHalf;
mark_module_end(SquareHalf);

// node_modules/svelte-bootstrap-icons/lib/Square.svelte
mark_module_start();
Square[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Square.svelte";
var root1788 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path></svg>`), Square[FILENAME], [[1, 0, [[1, 167]]]]);
function Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Square);
  var svg = root1788();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square = hmr(Square, () => Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square[HMR].source;
    set(Square[HMR].source, module.default[HMR].original);
  });
}
var Square_default11 = Square;
mark_module_end(Square);

// node_modules/svelte-bootstrap-icons/lib/StackOverflow.svelte
mark_module_start();
StackOverflow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StackOverflow.svelte";
var root1789 = add_locations(ns_template(`<svg><!><path d="M12.412 14.572V10.29h1.428V16H1v-5.71h1.428v4.282h9.984z"></path><path d="M3.857 13.145h7.137v-1.428H3.857v1.428zM10.254 0 9.108.852l4.26 5.727 1.146-.852L10.254 0zm-3.54 3.377 5.484 4.567.913-1.097L7.627 2.28l-.914 1.097zM4.922 6.55l6.47 3.013.603-1.294-6.47-3.013-.603 1.294zm-.925 3.344 6.985 1.469.294-1.398-6.985-1.468-.294 1.397z"></path></svg>`), StackOverflow[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function StackOverflow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StackOverflow);
  var svg = root1789();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stack-overflow", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StackOverflow = hmr(StackOverflow, () => StackOverflow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StackOverflow[HMR].source;
    set(StackOverflow[HMR].source, module.default[HMR].original);
  });
}
var StackOverflow_default = StackOverflow;
mark_module_end(StackOverflow);

// node_modules/svelte-bootstrap-icons/lib/Stack.svelte
mark_module_start();
Stack[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Stack.svelte";
var root1790 = add_locations(ns_template(`<svg><!><path d="m14.12 10.163 1.715.858c.22.11.22.424 0 .534L8.267 15.34a.598.598 0 0 1-.534 0L.165 11.555a.299.299 0 0 1 0-.534l1.716-.858 5.317 2.659c.505.252 1.1.252 1.604 0l5.317-2.66zM7.733.063a.598.598 0 0 1 .534 0l7.568 3.784a.3.3 0 0 1 0 .535L8.267 8.165a.598.598 0 0 1-.534 0L.165 4.382a.299.299 0 0 1 0-.535L7.733.063z"></path><path d="m14.12 6.576 1.715.858c.22.11.22.424 0 .534l-7.568 3.784a.598.598 0 0 1-.534 0L.165 7.968a.299.299 0 0 1 0-.534l1.716-.858 5.317 2.659c.505.252 1.1.252 1.604 0l5.317-2.659z"></path></svg>`), Stack[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Stack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Stack);
  var svg = root1790();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stack", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stack = hmr(Stack, () => Stack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stack[HMR].source;
    set(Stack[HMR].source, module.default[HMR].original);
  });
}
var Stack_default = Stack;
mark_module_end(Stack);

// node_modules/svelte-bootstrap-icons/lib/StarFill.svelte
mark_module_start();
StarFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StarFill.svelte";
var root1791 = add_locations(ns_template(`<svg><!><path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"></path></svg>`), StarFill[FILENAME], [[1, 0, [[1, 170]]]]);
function StarFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StarFill);
  var svg = root1791();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-star-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StarFill = hmr(StarFill, () => StarFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StarFill[HMR].source;
    set(StarFill[HMR].source, module.default[HMR].original);
  });
}
var StarFill_default = StarFill;
mark_module_end(StarFill);

// node_modules/svelte-bootstrap-icons/lib/StarHalf.svelte
mark_module_start();
StarHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StarHalf.svelte";
var root1792 = add_locations(ns_template(`<svg><!><path d="M5.354 5.119 7.538.792A.516.516 0 0 1 8 .5c.183 0 .366.097.465.292l2.184 4.327 4.898.696A.537.537 0 0 1 16 6.32a.548.548 0 0 1-.17.445l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256a.52.52 0 0 1-.146.05c-.342.06-.668-.254-.6-.642l.83-4.73L.173 6.765a.55.55 0 0 1-.172-.403.58.58 0 0 1 .085-.302.513.513 0 0 1 .37-.245l4.898-.696zM8 12.027a.5.5 0 0 1 .232.056l3.686 1.894-.694-3.957a.565.565 0 0 1 .162-.505l2.907-2.77-4.052-.576a.525.525 0 0 1-.393-.288L8.001 2.223 8 2.226v9.8z"></path></svg>`), StarHalf[FILENAME], [[1, 0, [[1, 170]]]]);
function StarHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StarHalf);
  var svg = root1792();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-star-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StarHalf = hmr(StarHalf, () => StarHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StarHalf[HMR].source;
    set(StarHalf[HMR].source, module.default[HMR].original);
  });
}
var StarHalf_default = StarHalf;
mark_module_end(StarHalf);

// node_modules/svelte-bootstrap-icons/lib/Star.svelte
mark_module_start();
Star[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Star.svelte";
var root1793 = add_locations(ns_template(`<svg><!><path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"></path></svg>`), Star[FILENAME], [[1, 0, [[1, 165]]]]);
function Star($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Star);
  var svg = root1793();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-star", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Star = hmr(Star, () => Star[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Star[HMR].source;
    set(Star[HMR].source, module.default[HMR].original);
  });
}
var Star_default = Star;
mark_module_end(Star);

// node_modules/svelte-bootstrap-icons/lib/Stars.svelte
mark_module_start();
Stars[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Stars.svelte";
var root1794 = add_locations(ns_template(`<svg><!><path d="M7.657 6.247c.11-.33.576-.33.686 0l.645 1.937a2.89 2.89 0 0 0 1.829 1.828l1.936.645c.33.11.33.576 0 .686l-1.937.645a2.89 2.89 0 0 0-1.828 1.829l-.645 1.936a.361.361 0 0 1-.686 0l-.645-1.937a2.89 2.89 0 0 0-1.828-1.828l-1.937-.645a.361.361 0 0 1 0-.686l1.937-.645a2.89 2.89 0 0 0 1.828-1.828l.645-1.937zM3.794 1.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387A1.734 1.734 0 0 0 4.593 5.69l-.387 1.162a.217.217 0 0 1-.412 0L3.407 5.69A1.734 1.734 0 0 0 2.31 4.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387A1.734 1.734 0 0 0 3.407 2.31l.387-1.162zM10.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732L9.1 2.137a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L10.863.1z"></path></svg>`), Stars[FILENAME], [[1, 0, [[1, 166]]]]);
function Stars($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Stars);
  var svg = root1794();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stars", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stars = hmr(Stars, () => Stars[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stars[HMR].source;
    set(Stars[HMR].source, module.default[HMR].original);
  });
}
var Stars_default = Stars;
mark_module_end(Stars);

// node_modules/svelte-bootstrap-icons/lib/Steam.svelte
mark_module_start();
Steam[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Steam.svelte";
var root1795 = add_locations(ns_template(`<svg><!><path d="M.329 10.333A8.01 8.01 0 0 0 7.99 16C12.414 16 16 12.418 16 8s-3.586-8-8.009-8A8.006 8.006 0 0 0 0 7.468l.003.006 4.304 1.769A2.198 2.198 0 0 1 5.62 8.88l1.96-2.844-.001-.04a3.046 3.046 0 0 1 3.042-3.043 3.046 3.046 0 0 1 3.042 3.043 3.047 3.047 0 0 1-3.111 3.044l-2.804 2a2.223 2.223 0 0 1-3.075 2.11 2.217 2.217 0 0 1-1.312-1.568L.33 10.333Z"></path><path d="M4.868 12.683a1.715 1.715 0 0 0 1.318-3.165 1.705 1.705 0 0 0-1.263-.02l1.023.424a1.261 1.261 0 1 1-.97 2.33l-.99-.41a1.7 1.7 0 0 0 .882.84Zm3.726-6.687a2.03 2.03 0 0 0 2.027 2.029 2.03 2.03 0 0 0 2.027-2.029 2.03 2.03 0 0 0-2.027-2.027 2.03 2.03 0 0 0-2.027 2.027Zm2.03-1.527a1.524 1.524 0 1 1-.002 3.048 1.524 1.524 0 0 1 .002-3.048Z"></path></svg>`), Steam[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Steam($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Steam);
  var svg = root1795();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-steam", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Steam = hmr(Steam, () => Steam[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Steam[HMR].source;
    set(Steam[HMR].source, module.default[HMR].original);
  });
}
var Steam_default = Steam;
mark_module_end(Steam);

// node_modules/svelte-bootstrap-icons/lib/StickiesFill.svelte
mark_module_start();
StickiesFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StickiesFill.svelte";
var root1796 = add_locations(ns_template(`<svg><!><path d="M0 1.5V13a1 1 0 0 0 1 1V1.5a.5.5 0 0 1 .5-.5H14a1 1 0 0 0-1-1H1.5A1.5 1.5 0 0 0 0 1.5z"></path><path d="M3.5 2A1.5 1.5 0 0 0 2 3.5v11A1.5 1.5 0 0 0 3.5 16h6.086a1.5 1.5 0 0 0 1.06-.44l4.915-4.914A1.5 1.5 0 0 0 16 9.586V3.5A1.5 1.5 0 0 0 14.5 2h-11zm6 8.5a1 1 0 0 1 1-1h4.396a.25.25 0 0 1 .177.427l-5.146 5.146a.25.25 0 0 1-.427-.177V10.5z"></path></svg>`), StickiesFill[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function StickiesFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StickiesFill);
  var svg = root1796();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stickies-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StickiesFill = hmr(StickiesFill, () => StickiesFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StickiesFill[HMR].source;
    set(StickiesFill[HMR].source, module.default[HMR].original);
  });
}
var StickiesFill_default = StickiesFill;
mark_module_end(StickiesFill);

// node_modules/svelte-bootstrap-icons/lib/Stickies.svelte
mark_module_start();
Stickies[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Stickies.svelte";
var root1797 = add_locations(ns_template(`<svg><!><path d="M1.5 0A1.5 1.5 0 0 0 0 1.5V13a1 1 0 0 0 1 1V1.5a.5.5 0 0 1 .5-.5H14a1 1 0 0 0-1-1H1.5z"></path><path d="M3.5 2A1.5 1.5 0 0 0 2 3.5v11A1.5 1.5 0 0 0 3.5 16h6.086a1.5 1.5 0 0 0 1.06-.44l4.915-4.914A1.5 1.5 0 0 0 16 9.586V3.5A1.5 1.5 0 0 0 14.5 2h-11zM3 3.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 .5.5V9h-4.5A1.5 1.5 0 0 0 9 10.5V15H3.5a.5.5 0 0 1-.5-.5v-11zm7 11.293V10.5a.5.5 0 0 1 .5-.5h4.293L10 14.793z"></path></svg>`), Stickies[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Stickies($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Stickies);
  var svg = root1797();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stickies", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stickies = hmr(Stickies, () => Stickies[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stickies[HMR].source;
    set(Stickies[HMR].source, module.default[HMR].original);
  });
}
var Stickies_default = Stickies;
mark_module_end(Stickies);

// node_modules/svelte-bootstrap-icons/lib/StickyFill.svelte
mark_module_start();
StickyFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StickyFill.svelte";
var root1798 = add_locations(ns_template(`<svg><!><path d="M2.5 1A1.5 1.5 0 0 0 1 2.5v11A1.5 1.5 0 0 0 2.5 15h6.086a1.5 1.5 0 0 0 1.06-.44l4.915-4.914A1.5 1.5 0 0 0 15 8.586V2.5A1.5 1.5 0 0 0 13.5 1h-11zm6 8.5a1 1 0 0 1 1-1h4.396a.25.25 0 0 1 .177.427l-5.146 5.146a.25.25 0 0 1-.427-.177V9.5z"></path></svg>`), StickyFill[FILENAME], [[1, 0, [[1, 172]]]]);
function StickyFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StickyFill);
  var svg = root1798();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sticky-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StickyFill = hmr(StickyFill, () => StickyFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StickyFill[HMR].source;
    set(StickyFill[HMR].source, module.default[HMR].original);
  });
}
var StickyFill_default = StickyFill;
mark_module_end(StickyFill);

// node_modules/svelte-bootstrap-icons/lib/Sticky.svelte
mark_module_start();
Sticky[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sticky.svelte";
var root1799 = add_locations(ns_template(`<svg><!><path d="M2.5 1A1.5 1.5 0 0 0 1 2.5v11A1.5 1.5 0 0 0 2.5 15h6.086a1.5 1.5 0 0 0 1.06-.44l4.915-4.914A1.5 1.5 0 0 0 15 8.586V2.5A1.5 1.5 0 0 0 13.5 1h-11zM2 2.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 .5.5V8H9.5A1.5 1.5 0 0 0 8 9.5V14H2.5a.5.5 0 0 1-.5-.5v-11zm7 11.293V9.5a.5.5 0 0 1 .5-.5h4.293L9 13.793z"></path></svg>`), Sticky[FILENAME], [[1, 0, [[1, 167]]]]);
function Sticky($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sticky);
  var svg = root1799();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sticky", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sticky = hmr(Sticky, () => Sticky[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sticky[HMR].source;
    set(Sticky[HMR].source, module.default[HMR].original);
  });
}
var Sticky_default = Sticky;
mark_module_end(Sticky);

// node_modules/svelte-bootstrap-icons/lib/StopBtnFill.svelte
mark_module_start();
StopBtnFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StopBtnFill.svelte";
var root1800 = add_locations(ns_template(`<svg><!><path d="M0 12V4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm6.5-7A1.5 1.5 0 0 0 5 6.5v3A1.5 1.5 0 0 0 6.5 11h3A1.5 1.5 0 0 0 11 9.5v-3A1.5 1.5 0 0 0 9.5 5h-3z"></path></svg>`), StopBtnFill[FILENAME], [[1, 0, [[1, 174]]]]);
function StopBtnFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StopBtnFill);
  var svg = root1800();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stop-btn-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StopBtnFill = hmr(StopBtnFill, () => StopBtnFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StopBtnFill[HMR].source;
    set(StopBtnFill[HMR].source, module.default[HMR].original);
  });
}
var StopBtnFill_default = StopBtnFill;
mark_module_end(StopBtnFill);

// node_modules/svelte-bootstrap-icons/lib/StopBtn.svelte
mark_module_start();
StopBtn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StopBtn.svelte";
var root1801 = add_locations(ns_template(`<svg><!><path d="M6.5 5A1.5 1.5 0 0 0 5 6.5v3A1.5 1.5 0 0 0 6.5 11h3A1.5 1.5 0 0 0 11 9.5v-3A1.5 1.5 0 0 0 9.5 5h-3z"></path><path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"></path></svg>`), StopBtn[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function StopBtn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StopBtn);
  var svg = root1801();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stop-btn", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StopBtn = hmr(StopBtn, () => StopBtn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StopBtn[HMR].source;
    set(StopBtn[HMR].source, module.default[HMR].original);
  });
}
var StopBtn_default = StopBtn;
mark_module_end(StopBtn);

// node_modules/svelte-bootstrap-icons/lib/StopCircleFill.svelte
mark_module_start();
StopCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StopCircleFill.svelte";
var root1802 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.5 5A1.5 1.5 0 0 0 5 6.5v3A1.5 1.5 0 0 0 6.5 11h3A1.5 1.5 0 0 0 11 9.5v-3A1.5 1.5 0 0 0 9.5 5h-3z"></path></svg>`), StopCircleFill[FILENAME], [[1, 0, [[1, 177]]]]);
function StopCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StopCircleFill);
  var svg = root1802();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stop-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StopCircleFill = hmr(StopCircleFill, () => StopCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StopCircleFill[HMR].source;
    set(StopCircleFill[HMR].source, module.default[HMR].original);
  });
}
var StopCircleFill_default = StopCircleFill;
mark_module_end(StopCircleFill);

// node_modules/svelte-bootstrap-icons/lib/StopCircle.svelte
mark_module_start();
StopCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StopCircle.svelte";
var root1803 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M5 6.5A1.5 1.5 0 0 1 6.5 5h3A1.5 1.5 0 0 1 11 6.5v3A1.5 1.5 0 0 1 9.5 11h-3A1.5 1.5 0 0 1 5 9.5v-3z"></path></svg>`), StopCircle[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function StopCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StopCircle);
  var svg = root1803();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stop-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StopCircle = hmr(StopCircle, () => StopCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StopCircle[HMR].source;
    set(StopCircle[HMR].source, module.default[HMR].original);
  });
}
var StopCircle_default = StopCircle;
mark_module_end(StopCircle);

// node_modules/svelte-bootstrap-icons/lib/StopFill.svelte
mark_module_start();
StopFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StopFill.svelte";
var root1804 = add_locations(ns_template(`<svg><!><path d="M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5z"></path></svg>`), StopFill[FILENAME], [[1, 0, [[1, 170]]]]);
function StopFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StopFill);
  var svg = root1804();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stop-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StopFill = hmr(StopFill, () => StopFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StopFill[HMR].source;
    set(StopFill[HMR].source, module.default[HMR].original);
  });
}
var StopFill_default = StopFill;
mark_module_end(StopFill);

// node_modules/svelte-bootstrap-icons/lib/Stop.svelte
mark_module_start();
Stop[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Stop.svelte";
var root1805 = add_locations(ns_template(`<svg><!><path d="M3.5 5A1.5 1.5 0 0 1 5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5zM5 4.5a.5.5 0 0 0-.5.5v6a.5.5 0 0 0 .5.5h6a.5.5 0 0 0 .5-.5V5a.5.5 0 0 0-.5-.5H5z"></path></svg>`), Stop[FILENAME], [[1, 0, [[1, 165]]]]);
function Stop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Stop);
  var svg = root1805();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stop", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stop = hmr(Stop, () => Stop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stop[HMR].source;
    set(Stop[HMR].source, module.default[HMR].original);
  });
}
var Stop_default = Stop;
mark_module_end(Stop);

// node_modules/svelte-bootstrap-icons/lib/StoplightsFill.svelte
mark_module_start();
StoplightsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StoplightsFill.svelte";
var root1806 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 0a2 2 0 0 0-2 2H2c.167.5.8 1.6 2 2v2H2c.167.5.8 1.6 2 2v2H2c.167.5.8 1.6 2 2v1a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-1c1.2-.4 1.833-1.5 2-2h-2V8c1.2-.4 1.833-1.5 2-2h-2V4c1.2-.4 1.833-1.5 2-2h-2a2 2 0 0 0-2-2H6zm3.5 3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zM8 13a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), StoplightsFill[FILENAME], [[1, 0, [[1, 176]]]]);
function StoplightsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StoplightsFill);
  var svg = root1806();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stoplights-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StoplightsFill = hmr(StoplightsFill, () => StoplightsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StoplightsFill[HMR].source;
    set(StoplightsFill[HMR].source, module.default[HMR].original);
  });
}
var StoplightsFill_default = StoplightsFill;
mark_module_end(StoplightsFill);

// node_modules/svelte-bootstrap-icons/lib/Stoplights.svelte
mark_module_start();
Stoplights[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Stoplights.svelte";
var root1807 = add_locations(ns_template(`<svg><!><path d="M8 5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm0 4a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm1.5 2.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path><path d="M4 2a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2h2c-.167.5-.8 1.6-2 2v2h2c-.167.5-.8 1.6-2 2v2h2c-.167.5-.8 1.6-2 2v1a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-1c-1.2-.4-1.833-1.5-2-2h2V8c-1.2-.4-1.833-1.5-2-2h2V4c-1.2-.4-1.833-1.5-2-2h2zm2-1a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H6z"></path></svg>`), Stoplights[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Stoplights($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Stoplights);
  var svg = root1807();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stoplights", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stoplights = hmr(Stoplights, () => Stoplights[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stoplights[HMR].source;
    set(Stoplights[HMR].source, module.default[HMR].original);
  });
}
var Stoplights_default = Stoplights;
mark_module_end(Stoplights);

// node_modules/svelte-bootstrap-icons/lib/StopwatchFill.svelte
mark_module_start();
StopwatchFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/StopwatchFill.svelte";
var root1808 = add_locations(ns_template(`<svg><!><path d="M6.5 0a.5.5 0 0 0 0 1H7v1.07A7.001 7.001 0 0 0 8 16a7 7 0 0 0 5.29-11.584.531.531 0 0 0 .013-.012l.354-.354.353.354a.5.5 0 1 0 .707-.707l-1.414-1.415a.5.5 0 1 0-.707.707l.354.354-.354.354a.717.717 0 0 0-.012.012A6.973 6.973 0 0 0 9 2.071V1h.5a.5.5 0 0 0 0-1h-3zm2 5.6V9a.5.5 0 0 1-.5.5H4.5a.5.5 0 0 1 0-1h3V5.6a.5.5 0 1 1 1 0z"></path></svg>`), StopwatchFill[FILENAME], [[1, 0, [[1, 175]]]]);
function StopwatchFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, StopwatchFill);
  var svg = root1808();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stopwatch-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StopwatchFill = hmr(StopwatchFill, () => StopwatchFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StopwatchFill[HMR].source;
    set(StopwatchFill[HMR].source, module.default[HMR].original);
  });
}
var StopwatchFill_default = StopwatchFill;
mark_module_end(StopwatchFill);

// node_modules/svelte-bootstrap-icons/lib/Stopwatch.svelte
mark_module_start();
Stopwatch[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Stopwatch.svelte";
var root1809 = add_locations(ns_template(`<svg><!><path d="M8.5 5.6a.5.5 0 1 0-1 0v2.9h-3a.5.5 0 0 0 0 1H8a.5.5 0 0 0 .5-.5V5.6z"></path><path d="M6.5 1A.5.5 0 0 1 7 .5h2a.5.5 0 0 1 0 1v.57c1.36.196 2.594.78 3.584 1.64a.715.715 0 0 1 .012-.013l.354-.354-.354-.353a.5.5 0 0 1 .707-.708l1.414 1.415a.5.5 0 1 1-.707.707l-.353-.354-.354.354a.512.512 0 0 1-.013.012A7 7 0 1 1 7 2.071V1.5a.5.5 0 0 1-.5-.5zM8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3z"></path></svg>`), Stopwatch[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Stopwatch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Stopwatch);
  var svg = root1809();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stopwatch", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stopwatch = hmr(Stopwatch, () => Stopwatch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stopwatch[HMR].source;
    set(Stopwatch[HMR].source, module.default[HMR].original);
  });
}
var Stopwatch_default = Stopwatch;
mark_module_end(Stopwatch);

// node_modules/svelte-bootstrap-icons/lib/Strava.svelte
mark_module_start();
Strava[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Strava.svelte";
var root1810 = add_locations(ns_template(`<svg><!><path d="M6.731 0 2 9.125h2.788L6.73 5.497l1.93 3.628h2.766L6.731 0zm4.694 9.125-1.372 2.756L8.66 9.125H6.547L10.053 16l3.484-6.875h-2.112z"></path></svg>`), Strava[FILENAME], [[1, 0, [[1, 167]]]]);
function Strava($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Strava);
  var svg = root1810();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-strava", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Strava = hmr(Strava, () => Strava[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Strava[HMR].source;
    set(Strava[HMR].source, module.default[HMR].original);
  });
}
var Strava_default = Strava;
mark_module_end(Strava);

// node_modules/svelte-bootstrap-icons/lib/Stripe.svelte
mark_module_start();
Stripe[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Stripe.svelte";
var root1811 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2Zm6.226 5.385c-.584 0-.937.164-.937.593 0 .468.607.674 1.36.93 1.228.415 2.844.963 2.851 2.993C11.5 11.868 9.924 13 7.63 13a7.662 7.662 0 0 1-3.009-.626V9.758c.926.506 2.095.88 3.01.88.617 0 1.058-.165 1.058-.671 0-.518-.658-.755-1.453-1.041C6.026 8.49 4.5 7.94 4.5 6.11 4.5 4.165 5.988 3 8.226 3a7.29 7.29 0 0 1 2.734.505v2.583c-.838-.45-1.896-.703-2.734-.703Z"></path></svg>`), Stripe[FILENAME], [[1, 0, [[1, 167]]]]);
function Stripe($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Stripe);
  var svg = root1811();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-stripe", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stripe = hmr(Stripe, () => Stripe[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stripe[HMR].source;
    set(Stripe[HMR].source, module.default[HMR].original);
  });
}
var Stripe_default = Stripe;
mark_module_end(Stripe);

// node_modules/svelte-bootstrap-icons/lib/Subscript.svelte
mark_module_start();
Subscript[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Subscript.svelte";
var root1812 = add_locations(ns_template(`<svg><!><path d="m3.266 12.496.96-2.853H7.76l.96 2.853H10L6.62 3H5.38L2 12.496h1.266Zm2.748-8.063 1.419 4.23h-2.88l1.426-4.23h.035Zm6.132 7.203v-.075c0-.332.234-.618.619-.618.354 0 .618.256.618.58 0 .362-.271.649-.52.898l-1.788 1.832V15h3.59v-.958h-1.923v-.045l.973-1.04c.415-.438.867-.845.867-1.547 0-.8-.701-1.41-1.787-1.41-1.23 0-1.795.8-1.795 1.576v.06h1.146Z"></path></svg>`), Subscript[FILENAME], [[1, 0, [[1, 170]]]]);
function Subscript($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Subscript);
  var svg = root1812();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-subscript", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Subscript = hmr(Subscript, () => Subscript[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Subscript[HMR].source;
    set(Subscript[HMR].source, module.default[HMR].original);
  });
}
var Subscript_default = Subscript;
mark_module_end(Subscript);

// node_modules/svelte-bootstrap-icons/lib/Substack.svelte
mark_module_start();
Substack[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Substack.svelte";
var root1813 = add_locations(ns_template(`<svg><!><path d="M15 3.604H1v1.891h14v-1.89ZM1 7.208V16l7-3.926L15 16V7.208H1ZM15 0H1v1.89h14V0Z"></path></svg>`), Substack[FILENAME], [[1, 0, [[1, 169]]]]);
function Substack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Substack);
  var svg = root1813();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-substack", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Substack = hmr(Substack, () => Substack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Substack[HMR].source;
    set(Substack[HMR].source, module.default[HMR].original);
  });
}
var Substack_default = Substack;
mark_module_end(Substack);

// node_modules/svelte-bootstrap-icons/lib/Subtract.svelte
mark_module_start();
Subtract[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Subtract.svelte";
var root1814 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2z"></path></svg>`), Subtract[FILENAME], [[1, 0, [[1, 169]]]]);
function Subtract($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Subtract);
  var svg = root1814();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-subtract", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Subtract = hmr(Subtract, () => Subtract[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Subtract[HMR].source;
    set(Subtract[HMR].source, module.default[HMR].original);
  });
}
var Subtract_default = Subtract;
mark_module_end(Subtract);

// node_modules/svelte-bootstrap-icons/lib/SuitClubFill.svelte
mark_module_start();
SuitClubFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitClubFill.svelte";
var root1815 = add_locations(ns_template(`<svg><!><path d="M11.5 12.5a3.493 3.493 0 0 1-2.684-1.254 19.92 19.92 0 0 0 1.582 2.907c.231.35-.02.847-.438.847H6.04c-.419 0-.67-.497-.438-.847a19.919 19.919 0 0 0 1.582-2.907 3.5 3.5 0 1 1-2.538-5.743 3.5 3.5 0 1 1 6.708 0A3.5 3.5 0 1 1 11.5 12.5z"></path></svg>`), SuitClubFill[FILENAME], [[1, 0, [[1, 175]]]]);
function SuitClubFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitClubFill);
  var svg = root1815();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suit-club-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitClubFill = hmr(SuitClubFill, () => SuitClubFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitClubFill[HMR].source;
    set(SuitClubFill[HMR].source, module.default[HMR].original);
  });
}
var SuitClubFill_default = SuitClubFill;
mark_module_end(SuitClubFill);

// node_modules/svelte-bootstrap-icons/lib/SuitClub.svelte
mark_module_start();
SuitClub[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitClub.svelte";
var root1816 = add_locations(ns_template(`<svg><!><path d="M8 1a3.25 3.25 0 0 0-3.25 3.25c0 .186 0 .29.016.41.014.12.045.27.12.527l.19.665-.692-.028a3.25 3.25 0 1 0 2.357 5.334.5.5 0 0 1 .844.518l-.003.005-.006.015-.024.055a21.893 21.893 0 0 1-.438.92 22.38 22.38 0 0 1-1.266 2.197c-.013.018-.02.05.001.09.01.02.021.03.03.036A.036.036 0 0 0 5.9 15h4.2c.01 0 .016-.002.022-.006a.092.092 0 0 0 .029-.035c.02-.04.014-.073.001-.091a22.875 22.875 0 0 1-1.704-3.117l-.024-.054-.006-.015-.002-.004a.5.5 0 0 1 .838-.524c.601.7 1.516 1.168 2.496 1.168a3.25 3.25 0 1 0-.139-6.498l-.699.03.199-.671c.14-.47.14-.745.139-.927V4.25A3.25 3.25 0 0 0 8 1zm2.207 12.024c.225.405.487.848.78 1.294C11.437 15 10.975 16 10.1 16H5.9c-.876 0-1.338-1-.887-1.683.291-.442.552-.88.776-1.283a4.25 4.25 0 1 1-2.007-8.187 2.79 2.79 0 0 1-.009-.064c-.023-.187-.023-.348-.023-.52V4.25a4.25 4.25 0 0 1 8.5 0c0 .14 0 .333-.04.596a4.25 4.25 0 0 1-.46 8.476 4.186 4.186 0 0 1-1.543-.298z"></path></svg>`), SuitClub[FILENAME], [[1, 0, [[1, 170]]]]);
function SuitClub($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitClub);
  var svg = root1816();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suit-club", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitClub = hmr(SuitClub, () => SuitClub[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitClub[HMR].source;
    set(SuitClub[HMR].source, module.default[HMR].original);
  });
}
var SuitClub_default = SuitClub;
mark_module_end(SuitClub);

// node_modules/svelte-bootstrap-icons/lib/SuitDiamondFill.svelte
mark_module_start();
SuitDiamondFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitDiamondFill.svelte";
var root1817 = add_locations(ns_template(`<svg><!><path d="M2.45 7.4 7.2 1.067a1 1 0 0 1 1.6 0L13.55 7.4a1 1 0 0 1 0 1.2L8.8 14.933a1 1 0 0 1-1.6 0L2.45 8.6a1 1 0 0 1 0-1.2z"></path></svg>`), SuitDiamondFill[FILENAME], [[1, 0, [[1, 178]]]]);
function SuitDiamondFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitDiamondFill);
  var svg = root1817();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suit-diamond-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitDiamondFill = hmr(SuitDiamondFill, () => SuitDiamondFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitDiamondFill[HMR].source;
    set(SuitDiamondFill[HMR].source, module.default[HMR].original);
  });
}
var SuitDiamondFill_default = SuitDiamondFill;
mark_module_end(SuitDiamondFill);

// node_modules/svelte-bootstrap-icons/lib/SuitDiamond.svelte
mark_module_start();
SuitDiamond[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitDiamond.svelte";
var root1818 = add_locations(ns_template(`<svg><!><path d="M8.384 1.226a.463.463 0 0 0-.768 0l-4.56 6.468a.537.537 0 0 0 0 .612l4.56 6.469a.463.463 0 0 0 .768 0l4.56-6.469a.537.537 0 0 0 0-.612l-4.56-6.468zM6.848.613a1.39 1.39 0 0 1 2.304 0l4.56 6.468a1.61 1.61 0 0 1 0 1.838l-4.56 6.468a1.39 1.39 0 0 1-2.304 0L2.288 8.92a1.61 1.61 0 0 1 0-1.838L6.848.613z"></path></svg>`), SuitDiamond[FILENAME], [[1, 0, [[1, 173]]]]);
function SuitDiamond($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitDiamond);
  var svg = root1818();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suit-diamond", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitDiamond = hmr(SuitDiamond, () => SuitDiamond[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitDiamond[HMR].source;
    set(SuitDiamond[HMR].source, module.default[HMR].original);
  });
}
var SuitDiamond_default = SuitDiamond;
mark_module_end(SuitDiamond);

// node_modules/svelte-bootstrap-icons/lib/SuitHeartFill.svelte
mark_module_start();
SuitHeartFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitHeartFill.svelte";
var root1819 = add_locations(ns_template(`<svg><!><path d="M4 1c2.21 0 4 1.755 4 3.92C8 2.755 9.79 1 12 1s4 1.755 4 3.92c0 3.263-3.234 4.414-7.608 9.608a.513.513 0 0 1-.784 0C3.234 9.334 0 8.183 0 4.92 0 2.755 1.79 1 4 1z"></path></svg>`), SuitHeartFill[FILENAME], [[1, 0, [[1, 176]]]]);
function SuitHeartFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitHeartFill);
  var svg = root1819();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suit-heart-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitHeartFill = hmr(SuitHeartFill, () => SuitHeartFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitHeartFill[HMR].source;
    set(SuitHeartFill[HMR].source, module.default[HMR].original);
  });
}
var SuitHeartFill_default = SuitHeartFill;
mark_module_end(SuitHeartFill);

// node_modules/svelte-bootstrap-icons/lib/SuitHeart.svelte
mark_module_start();
SuitHeart[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitHeart.svelte";
var root1820 = add_locations(ns_template(`<svg><!><path d="m8 6.236-.894-1.789c-.222-.443-.607-1.08-1.152-1.595C5.418 2.345 4.776 2 4 2 2.324 2 1 3.326 1 4.92c0 1.211.554 2.066 1.868 3.37.337.334.721.695 1.146 1.093C5.122 10.423 6.5 11.717 8 13.447c1.5-1.73 2.878-3.024 3.986-4.064.425-.398.81-.76 1.146-1.093C14.446 6.986 15 6.131 15 4.92 15 3.326 13.676 2 12 2c-.777 0-1.418.345-1.954.852-.545.515-.93 1.152-1.152 1.595L8 6.236zm.392 8.292a.513.513 0 0 1-.784 0c-1.601-1.902-3.05-3.262-4.243-4.381C1.3 8.208 0 6.989 0 4.92 0 2.755 1.79 1 4 1c1.6 0 2.719 1.05 3.404 2.008.26.365.458.716.596.992a7.55 7.55 0 0 1 .596-.992C9.281 2.049 10.4 1 12 1c2.21 0 4 1.755 4 3.92 0 2.069-1.3 3.288-3.365 5.227-1.193 1.12-2.642 2.48-4.243 4.38z"></path></svg>`), SuitHeart[FILENAME], [[1, 0, [[1, 171]]]]);
function SuitHeart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitHeart);
  var svg = root1820();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suit-heart", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitHeart = hmr(SuitHeart, () => SuitHeart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitHeart[HMR].source;
    set(SuitHeart[HMR].source, module.default[HMR].original);
  });
}
var SuitHeart_default = SuitHeart;
mark_module_end(SuitHeart);

// node_modules/svelte-bootstrap-icons/lib/SuitSpadeFill.svelte
mark_module_start();
SuitSpadeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitSpadeFill.svelte";
var root1821 = add_locations(ns_template(`<svg><!><path d="M7.184 11.246A3.5 3.5 0 0 1 1 9c0-1.602 1.14-2.633 2.66-4.008C4.986 3.792 6.602 2.33 8 0c1.398 2.33 3.014 3.792 4.34 4.992C13.86 6.367 15 7.398 15 9a3.5 3.5 0 0 1-6.184 2.246 19.92 19.92 0 0 0 1.582 2.907c.231.35-.02.847-.438.847H6.04c-.419 0-.67-.497-.438-.847a19.919 19.919 0 0 0 1.582-2.907z"></path></svg>`), SuitSpadeFill[FILENAME], [[1, 0, [[1, 176]]]]);
function SuitSpadeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitSpadeFill);
  var svg = root1821();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suit-spade-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitSpadeFill = hmr(SuitSpadeFill, () => SuitSpadeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitSpadeFill[HMR].source;
    set(SuitSpadeFill[HMR].source, module.default[HMR].original);
  });
}
var SuitSpadeFill_default = SuitSpadeFill;
mark_module_end(SuitSpadeFill);

// node_modules/svelte-bootstrap-icons/lib/SuitSpade.svelte
mark_module_start();
SuitSpade[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitSpade.svelte";
var root1822 = add_locations(ns_template(`<svg><!><path d="M8 0a.5.5 0 0 1 .429.243c1.359 2.265 2.925 3.682 4.25 4.882.096.086.19.17.282.255C14.308 6.604 15.5 7.747 15.5 9.5a4 4 0 0 1-5.406 3.746c.235.39.491.782.722 1.131.434.659-.01 1.623-.856 1.623H6.04c-.845 0-1.29-.964-.856-1.623.263-.397.51-.777.728-1.134A4 4 0 0 1 .5 9.5c0-1.753 1.192-2.896 2.539-4.12l.281-.255c1.326-1.2 2.892-2.617 4.251-4.882A.5.5 0 0 1 8 0zM3.711 6.12C2.308 7.396 1.5 8.253 1.5 9.5a3 3 0 0 0 5.275 1.956.5.5 0 0 1 .868.43c-.094.438-.33.932-.611 1.428a29.247 29.247 0 0 1-1.013 1.614.03.03 0 0 0-.005.018.074.074 0 0 0 .024.054h3.924a.074.074 0 0 0 .024-.054.03.03 0 0 0-.005-.018c-.3-.455-.658-1.005-.96-1.535-.294-.514-.57-1.064-.664-1.507a.5.5 0 0 1 .868-.43A3 3 0 0 0 14.5 9.5c0-1.247-.808-2.104-2.211-3.38L12 5.86c-1.196-1.084-2.668-2.416-4-4.424-1.332 2.008-2.804 3.34-4 4.422l-.289.261z"></path></svg>`), SuitSpade[FILENAME], [[1, 0, [[1, 171]]]]);
function SuitSpade($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitSpade);
  var svg = root1822();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suit-spade", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitSpade = hmr(SuitSpade, () => SuitSpade[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitSpade[HMR].source;
    set(SuitSpade[HMR].source, module.default[HMR].original);
  });
}
var SuitSpade_default = SuitSpade;
mark_module_end(SuitSpade);

// node_modules/svelte-bootstrap-icons/lib/SuitcaseFill.svelte
mark_module_start();
SuitcaseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitcaseFill.svelte";
var root1823 = add_locations(ns_template(`<svg><!><path d="M6 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5V3h1.5A1.5 1.5 0 0 1 13 4.5v9a1.5 1.5 0 0 1-1.004 1.416A1 1 0 1 1 10 15H6a1 1 0 1 1-1.997-.084A1.5 1.5 0 0 1 3 13.5v-9A1.5 1.5 0 0 1 4.5 3H6V.5ZM9 1H7v2h2V1ZM6 5.5a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7Zm2.5 0a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7Zm2.5 0a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7Z"></path></svg>`), SuitcaseFill[FILENAME], [[1, 0, [[1, 174]]]]);
function SuitcaseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitcaseFill);
  var svg = root1823();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suitcase-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitcaseFill = hmr(SuitcaseFill, () => SuitcaseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitcaseFill[HMR].source;
    set(SuitcaseFill[HMR].source, module.default[HMR].original);
  });
}
var SuitcaseFill_default = SuitcaseFill;
mark_module_end(SuitcaseFill);

// node_modules/svelte-bootstrap-icons/lib/SuitcaseLgFill.svelte
mark_module_start();
SuitcaseLgFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitcaseLgFill.svelte";
var root1824 = add_locations(ns_template(`<svg><!><path d="M7 0a2 2 0 0 0-2 2H1.5A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14H2a.5.5 0 0 0 1 0h10a.5.5 0 0 0 1 0h.5a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2H11a2 2 0 0 0-2-2H7ZM6 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1H6ZM3 13V3h1v10H3Zm9 0V3h1v10h-1Z"></path></svg>`), SuitcaseLgFill[FILENAME], [[1, 0, [[1, 177]]]]);
function SuitcaseLgFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitcaseLgFill);
  var svg = root1824();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suitcase-lg-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitcaseLgFill = hmr(SuitcaseLgFill, () => SuitcaseLgFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitcaseLgFill[HMR].source;
    set(SuitcaseLgFill[HMR].source, module.default[HMR].original);
  });
}
var SuitcaseLgFill_default = SuitcaseLgFill;
mark_module_end(SuitcaseLgFill);

// node_modules/svelte-bootstrap-icons/lib/SuitcaseLg.svelte
mark_module_start();
SuitcaseLg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SuitcaseLg.svelte";
var root1825 = add_locations(ns_template(`<svg><!><path d="M5 2a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2h3.5A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5H14a.5.5 0 0 1-1 0H3a.5.5 0 0 1-1 0h-.5A1.5 1.5 0 0 1 0 12.5v-9A1.5 1.5 0 0 1 1.5 2H5Zm1 0h4a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1ZM1.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5H3V3H1.5ZM15 12.5v-9a.5.5 0 0 0-.5-.5H13v10h1.5a.5.5 0 0 0 .5-.5Zm-3 .5V3H4v10h8Z"></path></svg>`), SuitcaseLg[FILENAME], [[1, 0, [[1, 172]]]]);
function SuitcaseLg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SuitcaseLg);
  var svg = root1825();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suitcase-lg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuitcaseLg = hmr(SuitcaseLg, () => SuitcaseLg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuitcaseLg[HMR].source;
    set(SuitcaseLg[HMR].source, module.default[HMR].original);
  });
}
var SuitcaseLg_default = SuitcaseLg;
mark_module_end(SuitcaseLg);

// node_modules/svelte-bootstrap-icons/lib/Suitcase.svelte
mark_module_start();
Suitcase[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Suitcase.svelte";
var root1826 = add_locations(ns_template(`<svg><!><path d="M6 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 6 5Zm2 0a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5Zm2 0a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 10 5Z"></path><path d="M6.5 0a.5.5 0 0 0-.5.5V3H5a2 2 0 0 0-2 2v8a2 2 0 0 0 1.031 1.75A1.003 1.003 0 0 0 5 16a1 1 0 0 0 1-1h4a1 1 0 1 0 1.969-.25A2 2 0 0 0 13 13V5a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-.5-.5h-3ZM9 3H7V1h2v2Zm3 10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v8Z"></path></svg>`), Suitcase[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Suitcase($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Suitcase);
  var svg = root1826();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suitcase", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Suitcase = hmr(Suitcase, () => Suitcase[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Suitcase[HMR].source;
    set(Suitcase[HMR].source, module.default[HMR].original);
  });
}
var Suitcase_default = Suitcase;
mark_module_end(Suitcase);

// node_modules/svelte-bootstrap-icons/lib/Suitcase2Fill.svelte
mark_module_start();
Suitcase2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Suitcase2Fill.svelte";
var root1827 = add_locations(ns_template(`<svg><!><path d="M6.5 0a.5.5 0 0 0-.5.5V3H4.5A1.5 1.5 0 0 0 3 4.5v9a1.5 1.5 0 0 0 1.003 1.416A1 1 0 1 0 6 15h4a1 1 0 1 0 1.996-.084A1.5 1.5 0 0 0 13 13.5v-9A1.5 1.5 0 0 0 11.5 3H10V.5a.5.5 0 0 0-.5-.5h-3ZM9 3H7V1h2v2ZM4 7V6h8v1H4Z"></path></svg>`), Suitcase2Fill[FILENAME], [[1, 0, [[1, 175]]]]);
function Suitcase2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Suitcase2Fill);
  var svg = root1827();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suitcase2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Suitcase2Fill = hmr(Suitcase2Fill, () => Suitcase2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Suitcase2Fill[HMR].source;
    set(Suitcase2Fill[HMR].source, module.default[HMR].original);
  });
}
var Suitcase2Fill_default = Suitcase2Fill;
mark_module_end(Suitcase2Fill);

// node_modules/svelte-bootstrap-icons/lib/Suitcase2.svelte
mark_module_start();
Suitcase2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Suitcase2.svelte";
var root1828 = add_locations(ns_template(`<svg><!><path d="M6.5 0a.5.5 0 0 0-.5.5V3H5a2 2 0 0 0-2 2v8a2 2 0 0 0 1.031 1.75A1.003 1.003 0 0 0 5 16a1 1 0 0 0 1-1h4a1 1 0 1 0 1.969-.25A2 2 0 0 0 13 13V5a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-.5-.5h-3ZM9 3H7V1h2v2Zm3 10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V7h8v6ZM5 4h6a1 1 0 0 1 1 1v1H4V5a1 1 0 0 1 1-1Z"></path></svg>`), Suitcase2[FILENAME], [[1, 0, [[1, 170]]]]);
function Suitcase2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Suitcase2);
  var svg = root1828();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-suitcase2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Suitcase2 = hmr(Suitcase2, () => Suitcase2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Suitcase2[HMR].source;
    set(Suitcase2[HMR].source, module.default[HMR].original);
  });
}
var Suitcase2_default = Suitcase2;
mark_module_end(Suitcase2);

// node_modules/svelte-bootstrap-icons/lib/SunFill.svelte
mark_module_start();
SunFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SunFill.svelte";
var root1829 = add_locations(ns_template(`<svg><!><path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"></path></svg>`), SunFill[FILENAME], [[1, 0, [[1, 169]]]]);
function SunFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SunFill);
  var svg = root1829();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sun-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SunFill = hmr(SunFill, () => SunFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SunFill[HMR].source;
    set(SunFill[HMR].source, module.default[HMR].original);
  });
}
var SunFill_default = SunFill;
mark_module_end(SunFill);

// node_modules/svelte-bootstrap-icons/lib/Sun.svelte
mark_module_start();
Sun[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sun.svelte";
var root1830 = add_locations(ns_template(`<svg><!><path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"></path></svg>`), Sun[FILENAME], [[1, 0, [[1, 164]]]]);
function Sun($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sun);
  var svg = root1830();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sun", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sun = hmr(Sun, () => Sun[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sun[HMR].source;
    set(Sun[HMR].source, module.default[HMR].original);
  });
}
var Sun_default = Sun;
mark_module_end(Sun);

// node_modules/svelte-bootstrap-icons/lib/Sunglasses.svelte
mark_module_start();
Sunglasses[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sunglasses.svelte";
var root1831 = add_locations(ns_template(`<svg><!><path d="M3 5a2 2 0 0 0-2 2v.5H.5a.5.5 0 0 0 0 1H1V9a2 2 0 0 0 2 2h1a3 3 0 0 0 3-3 1 1 0 1 1 2 0 3 3 0 0 0 3 3h1a2 2 0 0 0 2-2v-.5h.5a.5.5 0 0 0 0-1H15V7a2 2 0 0 0-2-2h-2a2 2 0 0 0-1.888 1.338A1.99 1.99 0 0 0 8 6a1.99 1.99 0 0 0-1.112.338A2 2 0 0 0 5 5H3zm0 1h.941c.264 0 .348.356.112.474l-.457.228a2 2 0 0 0-.894.894l-.228.457C2.356 8.289 2 8.205 2 7.94V7a1 1 0 0 1 1-1z"></path></svg>`), Sunglasses[FILENAME], [[1, 0, [[1, 171]]]]);
function Sunglasses($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sunglasses);
  var svg = root1831();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sunglasses", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sunglasses = hmr(Sunglasses, () => Sunglasses[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sunglasses[HMR].source;
    set(Sunglasses[HMR].source, module.default[HMR].original);
  });
}
var Sunglasses_default = Sunglasses;
mark_module_end(Sunglasses);

// node_modules/svelte-bootstrap-icons/lib/SunriseFill.svelte
mark_module_start();
SunriseFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SunriseFill.svelte";
var root1832 = add_locations(ns_template(`<svg><!><path d="M7.646 1.146a.5.5 0 0 1 .708 0l1.5 1.5a.5.5 0 0 1-.708.708L8.5 2.707V4.5a.5.5 0 0 1-1 0V2.707l-.646.647a.5.5 0 1 1-.708-.708l1.5-1.5zM2.343 4.343a.5.5 0 0 1 .707 0l1.414 1.414a.5.5 0 0 1-.707.707L2.343 5.05a.5.5 0 0 1 0-.707zm11.314 0a.5.5 0 0 1 0 .707l-1.414 1.414a.5.5 0 1 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zM11.709 11.5a4 4 0 1 0-7.418 0H.5a.5.5 0 0 0 0 1h15a.5.5 0 0 0 0-1h-3.79zM0 10a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2A.5.5 0 0 1 0 10zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path></svg>`), SunriseFill[FILENAME], [[1, 0, [[1, 173]]]]);
function SunriseFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SunriseFill);
  var svg = root1832();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sunrise-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SunriseFill = hmr(SunriseFill, () => SunriseFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SunriseFill[HMR].source;
    set(SunriseFill[HMR].source, module.default[HMR].original);
  });
}
var SunriseFill_default = SunriseFill;
mark_module_end(SunriseFill);

// node_modules/svelte-bootstrap-icons/lib/Sunrise.svelte
mark_module_start();
Sunrise[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sunrise.svelte";
var root1833 = add_locations(ns_template(`<svg><!><path d="M7.646 1.146a.5.5 0 0 1 .708 0l1.5 1.5a.5.5 0 0 1-.708.708L8.5 2.707V4.5a.5.5 0 0 1-1 0V2.707l-.646.647a.5.5 0 1 1-.708-.708l1.5-1.5zM2.343 4.343a.5.5 0 0 1 .707 0l1.414 1.414a.5.5 0 0 1-.707.707L2.343 5.05a.5.5 0 0 1 0-.707zm11.314 0a.5.5 0 0 1 0 .707l-1.414 1.414a.5.5 0 1 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zM8 7a3 3 0 0 1 2.599 4.5H5.4A3 3 0 0 1 8 7zm3.71 4.5a4 4 0 1 0-7.418 0H.499a.5.5 0 0 0 0 1h15a.5.5 0 0 0 0-1h-3.79zM0 10a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2A.5.5 0 0 1 0 10zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path></svg>`), Sunrise[FILENAME], [[1, 0, [[1, 168]]]]);
function Sunrise($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sunrise);
  var svg = root1833();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sunrise", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sunrise = hmr(Sunrise, () => Sunrise[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sunrise[HMR].source;
    set(Sunrise[HMR].source, module.default[HMR].original);
  });
}
var Sunrise_default = Sunrise;
mark_module_end(Sunrise);

// node_modules/svelte-bootstrap-icons/lib/SunsetFill.svelte
mark_module_start();
SunsetFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SunsetFill.svelte";
var root1834 = add_locations(ns_template(`<svg><!><path d="M7.646 4.854a.5.5 0 0 0 .708 0l1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V1.5a.5.5 0 0 0-1 0v1.793l-.646-.647a.5.5 0 1 0-.708.708l1.5 1.5zm-5.303-.51a.5.5 0 0 1 .707 0l1.414 1.413a.5.5 0 0 1-.707.707L2.343 5.05a.5.5 0 0 1 0-.707zm11.314 0a.5.5 0 0 1 0 .706l-1.414 1.414a.5.5 0 1 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zM11.709 11.5a4 4 0 1 0-7.418 0H.5a.5.5 0 0 0 0 1h15a.5.5 0 0 0 0-1h-3.79zM0 10a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2A.5.5 0 0 1 0 10zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path></svg>`), SunsetFill[FILENAME], [[1, 0, [[1, 172]]]]);
function SunsetFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SunsetFill);
  var svg = root1834();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sunset-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SunsetFill = hmr(SunsetFill, () => SunsetFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SunsetFill[HMR].source;
    set(SunsetFill[HMR].source, module.default[HMR].original);
  });
}
var SunsetFill_default = SunsetFill;
mark_module_end(SunsetFill);

// node_modules/svelte-bootstrap-icons/lib/Sunset.svelte
mark_module_start();
Sunset[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Sunset.svelte";
var root1835 = add_locations(ns_template(`<svg><!><path d="M7.646 4.854a.5.5 0 0 0 .708 0l1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V1.5a.5.5 0 0 0-1 0v1.793l-.646-.647a.5.5 0 1 0-.708.708l1.5 1.5zm-5.303-.51a.5.5 0 0 1 .707 0l1.414 1.413a.5.5 0 0 1-.707.707L2.343 5.05a.5.5 0 0 1 0-.707zm11.314 0a.5.5 0 0 1 0 .706l-1.414 1.414a.5.5 0 1 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zM8 7a3 3 0 0 1 2.599 4.5H5.4A3 3 0 0 1 8 7zm3.71 4.5a4 4 0 1 0-7.418 0H.499a.5.5 0 0 0 0 1h15a.5.5 0 0 0 0-1h-3.79zM0 10a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2A.5.5 0 0 1 0 10zm13 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"></path></svg>`), Sunset[FILENAME], [[1, 0, [[1, 167]]]]);
function Sunset($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Sunset);
  var svg = root1835();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-sunset", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sunset = hmr(Sunset, () => Sunset[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sunset[HMR].source;
    set(Sunset[HMR].source, module.default[HMR].original);
  });
}
var Sunset_default = Sunset;
mark_module_end(Sunset);

// node_modules/svelte-bootstrap-icons/lib/Superscript.svelte
mark_module_start();
Superscript[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Superscript.svelte";
var root1836 = add_locations(ns_template(`<svg><!><path d="m4.266 12.496.96-2.853H8.76l.96 2.853H11L7.62 3H6.38L3 12.496h1.266Zm2.748-8.063 1.419 4.23h-2.88l1.426-4.23h.035Zm5.132-1.797v-.075c0-.332.234-.618.619-.618.354 0 .618.256.618.58 0 .362-.271.649-.52.898l-1.788 1.832V6h3.59v-.958h-1.923v-.045l.973-1.04c.415-.438.867-.845.867-1.547 0-.8-.701-1.41-1.787-1.41C11.565 1 11 1.8 11 2.576v.06h1.146Z"></path></svg>`), Superscript[FILENAME], [[1, 0, [[1, 172]]]]);
function Superscript($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Superscript);
  var svg = root1836();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-superscript", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Superscript = hmr(Superscript, () => Superscript[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Superscript[HMR].source;
    set(Superscript[HMR].source, module.default[HMR].original);
  });
}
var Superscript_default = Superscript;
mark_module_end(Superscript);

// node_modules/svelte-bootstrap-icons/lib/SymmetryHorizontal.svelte
mark_module_start();
SymmetryHorizontal[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SymmetryHorizontal.svelte";
var root1837 = add_locations(ns_template(`<svg><!><path d="M13.5 7a.5.5 0 0 0 .24-.939l-11-6A.5.5 0 0 0 2 .5v6a.5.5 0 0 0 .5.5h11zm.485 2.376a.5.5 0 0 1-.246.563l-11 6A.5.5 0 0 1 2 15.5v-6a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 .485.376zM11.539 10H3v4.658L11.54 10z"></path></svg>`), SymmetryHorizontal[FILENAME], [[1, 0, [[1, 180]]]]);
function SymmetryHorizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SymmetryHorizontal);
  var svg = root1837();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-symmetry-horizontal", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SymmetryHorizontal = hmr(SymmetryHorizontal, () => SymmetryHorizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SymmetryHorizontal[HMR].source;
    set(SymmetryHorizontal[HMR].source, module.default[HMR].original);
  });
}
var SymmetryHorizontal_default = SymmetryHorizontal;
mark_module_end(SymmetryHorizontal);

// node_modules/svelte-bootstrap-icons/lib/SymmetryVertical.svelte
mark_module_start();
SymmetryVertical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/SymmetryVertical.svelte";
var root1838 = add_locations(ns_template(`<svg><!><path d="M7 2.5a.5.5 0 0 0-.939-.24l-6 11A.5.5 0 0 0 .5 14h6a.5.5 0 0 0 .5-.5v-11zm2.376-.484a.5.5 0 0 1 .563.245l6 11A.5.5 0 0 1 15.5 14h-6a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .376-.484zM10 4.46V13h4.658L10 4.46z"></path></svg>`), SymmetryVertical[FILENAME], [[1, 0, [[1, 178]]]]);
function SymmetryVertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, SymmetryVertical);
  var svg = root1838();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-symmetry-vertical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SymmetryVertical = hmr(SymmetryVertical, () => SymmetryVertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SymmetryVertical[HMR].source;
    set(SymmetryVertical[HMR].source, module.default[HMR].original);
  });
}
var SymmetryVertical_default = SymmetryVertical;
mark_module_end(SymmetryVertical);

// node_modules/svelte-bootstrap-icons/lib/Table.svelte
mark_module_start();
Table[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Table.svelte";
var root1839 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm15 2h-4v3h4V4zm0 4h-4v3h4V8zm0 4h-4v3h3a1 1 0 0 0 1-1v-2zm-5 3v-3H6v3h4zm-5 0v-3H1v2a1 1 0 0 0 1 1h3zm-4-4h4V8H1v3zm0-4h4V4H1v3zm5-3v3h4V4H6zm4 4H6v3h4V8z"></path></svg>`), Table[FILENAME], [[1, 0, [[1, 166]]]]);
function Table($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Table);
  var svg = root1839();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-table", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table = hmr(Table, () => Table[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table[HMR].source;
    set(Table[HMR].source, module.default[HMR].original);
  });
}
var Table_default = Table;
mark_module_end(Table);

// node_modules/svelte-bootstrap-icons/lib/TabletFill.svelte
mark_module_start();
TabletFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TabletFill.svelte";
var root1840 = add_locations(ns_template(`<svg><!><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm7 11a1 1 0 1 0-2 0 1 1 0 0 0 2 0z"></path></svg>`), TabletFill[FILENAME], [[1, 0, [[1, 172]]]]);
function TabletFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TabletFill);
  var svg = root1840();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tablet-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TabletFill = hmr(TabletFill, () => TabletFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabletFill[HMR].source;
    set(TabletFill[HMR].source, module.default[HMR].original);
  });
}
var TabletFill_default = TabletFill;
mark_module_end(TabletFill);

// node_modules/svelte-bootstrap-icons/lib/TabletLandscapeFill.svelte
mark_module_start();
TabletLandscapeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TabletLandscapeFill.svelte";
var root1841 = add_locations(ns_template(`<svg><!><path d="M2 14a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2zm11-7a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"></path></svg>`), TabletLandscapeFill[FILENAME], [[1, 0, [[1, 182]]]]);
function TabletLandscapeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TabletLandscapeFill);
  var svg = root1841();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tablet-landscape-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TabletLandscapeFill = hmr(TabletLandscapeFill, () => TabletLandscapeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabletLandscapeFill[HMR].source;
    set(TabletLandscapeFill[HMR].source, module.default[HMR].original);
  });
}
var TabletLandscapeFill_default = TabletLandscapeFill;
mark_module_end(TabletLandscapeFill);

// node_modules/svelte-bootstrap-icons/lib/TabletLandscape.svelte
mark_module_start();
TabletLandscape[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TabletLandscape.svelte";
var root1842 = add_locations(ns_template(`<svg><!><path d="M1 4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4zm-1 8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v8z"></path><path d="M14 8a1 1 0 1 0-2 0 1 1 0 0 0 2 0z"></path></svg>`), TabletLandscape[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function TabletLandscape($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TabletLandscape);
  var svg = root1842();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tablet-landscape", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TabletLandscape = hmr(TabletLandscape, () => TabletLandscape[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabletLandscape[HMR].source;
    set(TabletLandscape[HMR].source, module.default[HMR].original);
  });
}
var TabletLandscape_default = TabletLandscape;
mark_module_end(TabletLandscape);

// node_modules/svelte-bootstrap-icons/lib/Tablet.svelte
mark_module_start();
Tablet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Tablet.svelte";
var root1843 = add_locations(ns_template(`<svg><!><path d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h8zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z"></path><path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path></svg>`), Tablet[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Tablet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Tablet);
  var svg = root1843();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tablet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tablet = hmr(Tablet, () => Tablet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tablet[HMR].source;
    set(Tablet[HMR].source, module.default[HMR].original);
  });
}
var Tablet_default = Tablet;
mark_module_end(Tablet);

// node_modules/svelte-bootstrap-icons/lib/TagFill.svelte
mark_module_start();
TagFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TagFill.svelte";
var root1844 = add_locations(ns_template(`<svg><!><path d="M2 1a1 1 0 0 0-1 1v4.586a1 1 0 0 0 .293.707l7 7a1 1 0 0 0 1.414 0l4.586-4.586a1 1 0 0 0 0-1.414l-7-7A1 1 0 0 0 6.586 1H2zm4 3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path></svg>`), TagFill[FILENAME], [[1, 0, [[1, 169]]]]);
function TagFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TagFill);
  var svg = root1844();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tag-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TagFill = hmr(TagFill, () => TagFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TagFill[HMR].source;
    set(TagFill[HMR].source, module.default[HMR].original);
  });
}
var TagFill_default = TagFill;
mark_module_end(TagFill);

// node_modules/svelte-bootstrap-icons/lib/Tag.svelte
mark_module_start();
Tag[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Tag.svelte";
var root1845 = add_locations(ns_template(`<svg><!><path d="M6 4.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-1 0a.5.5 0 1 0-1 0 .5.5 0 0 0 1 0z"></path><path d="M2 1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 1 6.586V2a1 1 0 0 1 1-1zm0 5.586 7 7L13.586 9l-7-7H2v4.586z"></path></svg>`), Tag[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Tag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Tag);
  var svg = root1845();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tag", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tag = hmr(Tag, () => Tag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tag[HMR].source;
    set(Tag[HMR].source, module.default[HMR].original);
  });
}
var Tag_default = Tag;
mark_module_end(Tag);

// node_modules/svelte-bootstrap-icons/lib/TagsFill.svelte
mark_module_start();
TagsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TagsFill.svelte";
var root1846 = add_locations(ns_template(`<svg><!><path d="M2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2zm3.5 4a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"></path><path d="M1.293 7.793A1 1 0 0 1 1 7.086V2a1 1 0 0 0-1 1v4.586a1 1 0 0 0 .293.707l7 7a1 1 0 0 0 1.414 0l.043-.043-7.457-7.457z"></path></svg>`), TagsFill[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function TagsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TagsFill);
  var svg = root1846();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tags-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TagsFill = hmr(TagsFill, () => TagsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TagsFill[HMR].source;
    set(TagsFill[HMR].source, module.default[HMR].original);
  });
}
var TagsFill_default = TagsFill;
mark_module_end(TagsFill);

// node_modules/svelte-bootstrap-icons/lib/Tags.svelte
mark_module_start();
Tags[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Tags.svelte";
var root1847 = add_locations(ns_template(`<svg><!><path d="M3 2v4.586l7 7L14.586 9l-7-7H3zM2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2z"></path><path d="M5.5 5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm0 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM1 7.086a1 1 0 0 0 .293.707L8.75 15.25l-.043.043a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 0 7.586V3a1 1 0 0 1 1-1v5.086z"></path></svg>`), Tags[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Tags($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Tags);
  var svg = root1847();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tags", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tags = hmr(Tags, () => Tags[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tags[HMR].source;
    set(Tags[HMR].source, module.default[HMR].original);
  });
}
var Tags_default = Tags;
mark_module_end(Tags);

// node_modules/svelte-bootstrap-icons/lib/TaxiFrontFill.svelte
mark_module_start();
TaxiFrontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TaxiFrontFill.svelte";
var root1848 = add_locations(ns_template(`<svg><!><path d="M6 1a1 1 0 0 0-1 1v1h-.181A2.5 2.5 0 0 0 2.52 4.515l-.792 1.848a.807.807 0 0 1-.38.404c-.5.25-.855.715-.965 1.262L.05 9.708a2.5 2.5 0 0 0-.049.49v.413c0 .814.39 1.543 1 1.997V14.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1.338c1.292.048 2.745.088 4 .088s2.708-.04 4-.088V14.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1.892c.61-.454 1-1.183 1-1.997v-.413c0-.165-.016-.329-.049-.49l-.335-1.68a1.807 1.807 0 0 0-.964-1.261.807.807 0 0 1-.381-.404l-.792-1.848A2.5 2.5 0 0 0 11.181 3H11V2a1 1 0 0 0-1-1H6ZM4.309 4h7.382a.5.5 0 0 1 .447.276l.956 1.913a.51.51 0 0 1-.497.731c-.91-.073-3.35-.17-4.597-.17-1.247 0-3.688.097-4.597.17a.51.51 0 0 1-.497-.731l.956-1.913A.5.5 0 0 1 4.309 4ZM4 10a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm10 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-9 0a1 1 0 0 1 1-1h4a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Z"></path></svg>`), TaxiFrontFill[FILENAME], [[1, 0, [[1, 176]]]]);
function TaxiFrontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TaxiFrontFill);
  var svg = root1848();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-taxi-front-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TaxiFrontFill = hmr(TaxiFrontFill, () => TaxiFrontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TaxiFrontFill[HMR].source;
    set(TaxiFrontFill[HMR].source, module.default[HMR].original);
  });
}
var TaxiFrontFill_default = TaxiFrontFill;
mark_module_end(TaxiFrontFill);

// node_modules/svelte-bootstrap-icons/lib/TaxiFront.svelte
mark_module_start();
TaxiFront[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TaxiFront.svelte";
var root1849 = add_locations(ns_template(`<svg><!><path d="M4.862 5.276 3.906 7.19a.51.51 0 0 0 .497.731c.91-.073 2.35-.17 3.597-.17 1.247 0 2.688.097 3.597.17a.51.51 0 0 0 .497-.731l-.956-1.913A.5.5 0 0 0 10.691 5H5.309a.5.5 0 0 0-.447.276ZM4 10a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm10 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-9 0a1 1 0 0 1 1-1h4a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Z"></path><path d="M6 1a1 1 0 0 0-1 1v1h-.181A2.5 2.5 0 0 0 2.52 4.515l-.792 1.848a.807.807 0 0 1-.38.404c-.5.25-.855.715-.965 1.262L.05 9.708a2.5 2.5 0 0 0-.049.49v.413c0 .814.39 1.543 1 1.997V14.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1.338c1.292.048 2.745.088 4 .088s2.708-.04 4-.088V14.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-1.892c.61-.454 1-1.183 1-1.997v-.413c0-.165-.016-.329-.049-.49l-.335-1.68a1.807 1.807 0 0 0-.964-1.261.807.807 0 0 1-.381-.404l-.792-1.848A2.5 2.5 0 0 0 11.181 3H11V2a1 1 0 0 0-1-1H6ZM4.819 4h6.362a1.5 1.5 0 0 1 1.379.91l.792 1.847a1.8 1.8 0 0 0 .853.904c.222.112.381.32.43.564l.336 1.679c.02.097.029.195.029.294v.413a1.48 1.48 0 0 1-1.408 1.484c-1.555.07-3.786.155-5.592.155-1.806 0-4.037-.084-5.592-.155A1.479 1.479 0 0 1 1 10.611v-.413c0-.099.01-.197.03-.294l.335-1.68a.807.807 0 0 1 .43-.563c.383-.19.685-.511.853-.904l.792-1.848A1.5 1.5 0 0 1 4.82 4Z"></path></svg>`), TaxiFront[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function TaxiFront($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TaxiFront);
  var svg = root1849();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-taxi-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TaxiFront = hmr(TaxiFront, () => TaxiFront[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TaxiFront[HMR].source;
    set(TaxiFront[HMR].source, module.default[HMR].original);
  });
}
var TaxiFront_default = TaxiFront;
mark_module_end(TaxiFront);

// node_modules/svelte-bootstrap-icons/lib/Telegram.svelte
mark_module_start();
Telegram[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Telegram.svelte";
var root1850 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.287 5.906c-.778.324-2.334.994-4.666 2.01-.378.15-.577.298-.595.442-.03.243.275.339.69.47l.175.055c.408.133.958.288 1.243.294.26.006.549-.1.868-.32 2.179-1.471 3.304-2.214 3.374-2.23.05-.012.12-.026.166.016.047.041.042.12.037.141-.03.129-1.227 1.241-1.846 1.817-.193.18-.33.307-.358.336a8.154 8.154 0 0 1-.188.186c-.38.366-.664.64.015 1.088.327.216.589.393.85.571.284.194.568.387.936.629.093.06.183.125.27.187.331.236.63.448.997.414.214-.02.435-.22.547-.82.265-1.417.786-4.486.906-5.751a1.426 1.426 0 0 0-.013-.315.337.337 0 0 0-.114-.217.526.526 0 0 0-.31-.093c-.3.005-.763.166-2.984 1.09z"></path></svg>`), Telegram[FILENAME], [[1, 0, [[1, 169]]]]);
function Telegram($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Telegram);
  var svg = root1850();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telegram", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Telegram = hmr(Telegram, () => Telegram[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Telegram[HMR].source;
    set(Telegram[HMR].source, module.default[HMR].original);
  });
}
var Telegram_default = Telegram;
mark_module_end(Telegram);

// node_modules/svelte-bootstrap-icons/lib/TelephoneFill.svelte
mark_module_start();
TelephoneFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneFill.svelte";
var root1851 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z"></path></svg>`), TelephoneFill[FILENAME], [[1, 0, [[1, 175]]]]);
function TelephoneFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneFill);
  var svg = root1851();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneFill = hmr(TelephoneFill, () => TelephoneFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneFill[HMR].source;
    set(TelephoneFill[HMR].source, module.default[HMR].original);
  });
}
var TelephoneFill_default = TelephoneFill;
mark_module_end(TelephoneFill);

// node_modules/svelte-bootstrap-icons/lib/TelephoneForwardFill.svelte
mark_module_start();
TelephoneForwardFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneForwardFill.svelte";
var root1852 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zm10.761.135a.5.5 0 0 1 .708 0l2.5 2.5a.5.5 0 0 1 0 .708l-2.5 2.5a.5.5 0 0 1-.708-.708L14.293 4H9.5a.5.5 0 0 1 0-1h4.793l-1.647-1.646a.5.5 0 0 1 0-.708z"></path></svg>`), TelephoneForwardFill[FILENAME], [[1, 0, [[1, 183]]]]);
function TelephoneForwardFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneForwardFill);
  var svg = root1852();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-forward-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneForwardFill = hmr(TelephoneForwardFill, () => TelephoneForwardFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneForwardFill[HMR].source;
    set(TelephoneForwardFill[HMR].source, module.default[HMR].original);
  });
}
var TelephoneForwardFill_default = TelephoneForwardFill;
mark_module_end(TelephoneForwardFill);

// node_modules/svelte-bootstrap-icons/lib/TelephoneForward.svelte
mark_module_start();
TelephoneForward[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneForward.svelte";
var root1853 = add_locations(ns_template(`<svg><!><path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zm10.762.135a.5.5 0 0 1 .708 0l2.5 2.5a.5.5 0 0 1 0 .708l-2.5 2.5a.5.5 0 0 1-.708-.708L14.293 4H9.5a.5.5 0 0 1 0-1h4.793l-1.647-1.646a.5.5 0 0 1 0-.708z"></path></svg>`), TelephoneForward[FILENAME], [[1, 0, [[1, 178]]]]);
function TelephoneForward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneForward);
  var svg = root1853();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-forward", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneForward = hmr(TelephoneForward, () => TelephoneForward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneForward[HMR].source;
    set(TelephoneForward[HMR].source, module.default[HMR].original);
  });
}
var TelephoneForward_default = TelephoneForward;
mark_module_end(TelephoneForward);

// node_modules/svelte-bootstrap-icons/lib/TelephoneInboundFill.svelte
mark_module_start();
TelephoneInboundFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneInboundFill.svelte";
var root1854 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zM15.854.146a.5.5 0 0 1 0 .708L11.707 5H14.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 1 0v2.793L15.146.146a.5.5 0 0 1 .708 0z"></path></svg>`), TelephoneInboundFill[FILENAME], [[1, 0, [[1, 183]]]]);
function TelephoneInboundFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneInboundFill);
  var svg = root1854();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-inbound-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneInboundFill = hmr(TelephoneInboundFill, () => TelephoneInboundFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneInboundFill[HMR].source;
    set(TelephoneInboundFill[HMR].source, module.default[HMR].original);
  });
}
var TelephoneInboundFill_default = TelephoneInboundFill;
mark_module_end(TelephoneInboundFill);

// node_modules/svelte-bootstrap-icons/lib/TelephoneInbound.svelte
mark_module_start();
TelephoneInbound[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneInbound.svelte";
var root1855 = add_locations(ns_template(`<svg><!><path d="M15.854.146a.5.5 0 0 1 0 .708L11.707 5H14.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 1 0v2.793L15.146.146a.5.5 0 0 1 .708 0zm-12.2 1.182a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z"></path></svg>`), TelephoneInbound[FILENAME], [[1, 0, [[1, 178]]]]);
function TelephoneInbound($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneInbound);
  var svg = root1855();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-inbound", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneInbound = hmr(TelephoneInbound, () => TelephoneInbound[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneInbound[HMR].source;
    set(TelephoneInbound[HMR].source, module.default[HMR].original);
  });
}
var TelephoneInbound_default = TelephoneInbound;
mark_module_end(TelephoneInbound);

// node_modules/svelte-bootstrap-icons/lib/TelephoneMinusFill.svelte
mark_module_start();
TelephoneMinusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneMinusFill.svelte";
var root1856 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zM10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5z"></path></svg>`), TelephoneMinusFill[FILENAME], [[1, 0, [[1, 181]]]]);
function TelephoneMinusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneMinusFill);
  var svg = root1856();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-minus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneMinusFill = hmr(TelephoneMinusFill, () => TelephoneMinusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneMinusFill[HMR].source;
    set(TelephoneMinusFill[HMR].source, module.default[HMR].original);
  });
}
var TelephoneMinusFill_default = TelephoneMinusFill;
mark_module_end(TelephoneMinusFill);

// node_modules/svelte-bootstrap-icons/lib/TelephoneMinus.svelte
mark_module_start();
TelephoneMinus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneMinus.svelte";
var root1857 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5z"></path><path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z"></path></svg>`), TelephoneMinus[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function TelephoneMinus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneMinus);
  var svg = root1857();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-minus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneMinus = hmr(TelephoneMinus, () => TelephoneMinus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneMinus[HMR].source;
    set(TelephoneMinus[HMR].source, module.default[HMR].original);
  });
}
var TelephoneMinus_default = TelephoneMinus;
mark_module_end(TelephoneMinus);

// node_modules/svelte-bootstrap-icons/lib/TelephoneOutboundFill.svelte
mark_module_start();
TelephoneOutboundFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneOutboundFill.svelte";
var root1858 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zM11 .5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V1.707l-4.146 4.147a.5.5 0 0 1-.708-.708L14.293 1H11.5a.5.5 0 0 1-.5-.5z"></path></svg>`), TelephoneOutboundFill[FILENAME], [[1, 0, [[1, 184]]]]);
function TelephoneOutboundFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneOutboundFill);
  var svg = root1858();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-outbound-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneOutboundFill = hmr(TelephoneOutboundFill, () => TelephoneOutboundFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneOutboundFill[HMR].source;
    set(TelephoneOutboundFill[HMR].source, module.default[HMR].original);
  });
}
var TelephoneOutboundFill_default = TelephoneOutboundFill;
mark_module_end(TelephoneOutboundFill);

// node_modules/svelte-bootstrap-icons/lib/TelephoneOutbound.svelte
mark_module_start();
TelephoneOutbound[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneOutbound.svelte";
var root1859 = add_locations(ns_template(`<svg><!><path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zM11 .5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V1.707l-4.146 4.147a.5.5 0 0 1-.708-.708L14.293 1H11.5a.5.5 0 0 1-.5-.5z"></path></svg>`), TelephoneOutbound[FILENAME], [[1, 0, [[1, 179]]]]);
function TelephoneOutbound($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneOutbound);
  var svg = root1859();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-outbound", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneOutbound = hmr(TelephoneOutbound, () => TelephoneOutbound[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneOutbound[HMR].source;
    set(TelephoneOutbound[HMR].source, module.default[HMR].original);
  });
}
var TelephoneOutbound_default = TelephoneOutbound;
mark_module_end(TelephoneOutbound);

// node_modules/svelte-bootstrap-icons/lib/TelephonePlusFill.svelte
mark_module_start();
TelephonePlusFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephonePlusFill.svelte";
var root1860 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zM12.5 1a.5.5 0 0 1 .5.5V3h1.5a.5.5 0 0 1 0 1H13v1.5a.5.5 0 0 1-1 0V4h-1.5a.5.5 0 0 1 0-1H12V1.5a.5.5 0 0 1 .5-.5z"></path></svg>`), TelephonePlusFill[FILENAME], [[1, 0, [[1, 180]]]]);
function TelephonePlusFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephonePlusFill);
  var svg = root1860();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-plus-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephonePlusFill = hmr(TelephonePlusFill, () => TelephonePlusFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephonePlusFill[HMR].source;
    set(TelephonePlusFill[HMR].source, module.default[HMR].original);
  });
}
var TelephonePlusFill_default = TelephonePlusFill;
mark_module_end(TelephonePlusFill);

// node_modules/svelte-bootstrap-icons/lib/TelephonePlus.svelte
mark_module_start();
TelephonePlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephonePlus.svelte";
var root1861 = add_locations(ns_template(`<svg><!><path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z"></path><path fill-rule="evenodd" d="M12.5 1a.5.5 0 0 1 .5.5V3h1.5a.5.5 0 0 1 0 1H13v1.5a.5.5 0 0 1-1 0V4h-1.5a.5.5 0 0 1 0-1H12V1.5a.5.5 0 0 1 .5-.5z"></path></svg>`), TelephonePlus[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function TelephonePlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephonePlus);
  var svg = root1861();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephonePlus = hmr(TelephonePlus, () => TelephonePlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephonePlus[HMR].source;
    set(TelephonePlus[HMR].source, module.default[HMR].original);
  });
}
var TelephonePlus_default = TelephonePlus;
mark_module_end(TelephonePlus);

// node_modules/svelte-bootstrap-icons/lib/TelephoneXFill.svelte
mark_module_start();
TelephoneXFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneXFill.svelte";
var root1862 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zm9.261 1.135a.5.5 0 0 1 .708 0L13 2.793l1.146-1.147a.5.5 0 0 1 .708.708L13.707 3.5l1.147 1.146a.5.5 0 0 1-.708.708L13 4.207l-1.146 1.147a.5.5 0 0 1-.708-.708L12.293 3.5l-1.147-1.146a.5.5 0 0 1 0-.708z"></path></svg>`), TelephoneXFill[FILENAME], [[1, 0, [[1, 177]]]]);
function TelephoneXFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneXFill);
  var svg = root1862();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-x-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneXFill = hmr(TelephoneXFill, () => TelephoneXFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneXFill[HMR].source;
    set(TelephoneXFill[HMR].source, module.default[HMR].original);
  });
}
var TelephoneXFill_default = TelephoneXFill;
mark_module_end(TelephoneXFill);

// node_modules/svelte-bootstrap-icons/lib/TelephoneX.svelte
mark_module_start();
TelephoneX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TelephoneX.svelte";
var root1863 = add_locations(ns_template(`<svg><!><path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z"></path><path fill-rule="evenodd" d="M11.146 1.646a.5.5 0 0 1 .708 0L13 2.793l1.146-1.147a.5.5 0 0 1 .708.708L13.707 3.5l1.147 1.146a.5.5 0 0 1-.708.708L13 4.207l-1.146 1.147a.5.5 0 0 1-.708-.708L12.293 3.5l-1.147-1.146a.5.5 0 0 1 0-.708z"></path></svg>`), TelephoneX[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function TelephoneX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TelephoneX);
  var svg = root1863();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TelephoneX = hmr(TelephoneX, () => TelephoneX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TelephoneX[HMR].source;
    set(TelephoneX[HMR].source, module.default[HMR].original);
  });
}
var TelephoneX_default = TelephoneX;
mark_module_end(TelephoneX);

// node_modules/svelte-bootstrap-icons/lib/Telephone.svelte
mark_module_start();
Telephone[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Telephone.svelte";
var root1864 = add_locations(ns_template(`<svg><!><path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z"></path></svg>`), Telephone[FILENAME], [[1, 0, [[1, 170]]]]);
function Telephone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Telephone);
  var svg = root1864();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-telephone", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Telephone = hmr(Telephone, () => Telephone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Telephone[HMR].source;
    set(Telephone[HMR].source, module.default[HMR].original);
  });
}
var Telephone_default = Telephone;
mark_module_end(Telephone);

// node_modules/svelte-bootstrap-icons/lib/TencentQq.svelte
mark_module_start();
TencentQq[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TencentQq.svelte";
var root1865 = add_locations(ns_template(`<svg><!><path d="M6.048 3.323c.022.277-.13.523-.338.55-.21.026-.397-.176-.419-.453-.022-.277.13-.523.338-.55.21-.026.397.176.42.453Zm2.265-.24c-.603-.146-.894.256-.936.333-.027.048-.008.117.037.15.045.035.092.025.119-.003.361-.39.751-.172.829-.129l.011.007c.053.024.147.028.193-.098.023-.063.017-.11-.006-.142-.016-.023-.089-.08-.247-.118Z"></path><path d="M11.727 6.719c0-.022.01-.375.01-.557 0-3.07-1.45-6.156-5.015-6.156-3.564 0-5.014 3.086-5.014 6.156 0 .182.01.535.01.557l-.72 1.795a25.85 25.85 0 0 0-.534 1.508c-.68 2.187-.46 3.093-.292 3.113.36.044 1.401-1.647 1.401-1.647 0 .979.504 2.256 1.594 3.179-.408.126-.907.319-1.228.556-.29.213-.253.43-.201.518.228.386 3.92.246 4.985.126 1.065.12 4.756.26 4.984-.126.052-.088.088-.305-.2-.518-.322-.237-.822-.43-1.23-.557 1.09-.922 1.594-2.2 1.594-3.178 0 0 1.041 1.69 1.401 1.647.168-.02.388-.926-.292-3.113a25.78 25.78 0 0 0-.534-1.508l-.72-1.795ZM9.773 5.53a.095.095 0 0 1-.009.096c-.109.159-1.554.943-3.033.943h-.017c-1.48 0-2.925-.784-3.034-.943a.098.098 0 0 1-.018-.055c0-.015.004-.028.01-.04.13-.287 1.43-.606 3.042-.606h.017c1.611 0 2.912.319 3.042.605Zm-4.32-.989c-.483.022-.896-.529-.922-1.229-.026-.7.344-1.286.828-1.308.483-.022.896.529.922 1.23.027.7-.344 1.286-.827 1.307Zm2.538 0c-.484-.022-.854-.607-.828-1.308.027-.7.44-1.25.923-1.23.483.023.853.608.827 1.309-.026.7-.439 1.251-.922 1.23ZM2.928 8.99c.213.042.426.081.639.117v2.336s1.104.222 2.21.068V9.363c.326.018.64.026.937.023h.017c1.117.013 2.474-.136 3.786-.396.097.622.151 1.386.097 2.284-.146 2.45-1.6 3.99-3.846 4.012h-.091c-2.245-.023-3.7-1.562-3.846-4.011-.054-.9 0-1.663.097-2.285Z"></path></svg>`), TencentQq[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function TencentQq($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TencentQq);
  var svg = root1865();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tencent-qq", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TencentQq = hmr(TencentQq, () => TencentQq[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TencentQq[HMR].source;
    set(TencentQq[HMR].source, module.default[HMR].original);
  });
}
var TencentQq_default = TencentQq;
mark_module_end(TencentQq);

// node_modules/svelte-bootstrap-icons/lib/TerminalDash.svelte
mark_module_start();
TerminalDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TerminalDash.svelte";
var root1866 = add_locations(ns_template(`<svg><!><path d="M2 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h5.5a.5.5 0 0 1 0 1H2a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v4a.5.5 0 0 1-1 0V4a1 1 0 0 0-1-1H2Z"></path><path d="M3.146 5.146a.5.5 0 0 1 .708 0L5.177 6.47a.75.75 0 0 1 0 1.06L3.854 8.854a.5.5 0 1 1-.708-.708L4.293 7 3.146 5.854a.5.5 0 0 1 0-.708ZM5.5 9a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5ZM16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-5.5 0a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 0-1h-3a.5.5 0 0 0-.5.5Z"></path></svg>`), TerminalDash[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function TerminalDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TerminalDash);
  var svg = root1866();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-terminal-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TerminalDash = hmr(TerminalDash, () => TerminalDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TerminalDash[HMR].source;
    set(TerminalDash[HMR].source, module.default[HMR].original);
  });
}
var TerminalDash_default = TerminalDash;
mark_module_end(TerminalDash);

// node_modules/svelte-bootstrap-icons/lib/TerminalFill.svelte
mark_module_start();
TerminalFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TerminalFill.svelte";
var root1867 = add_locations(ns_template(`<svg><!><path d="M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3zm9.5 5.5h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm-6.354-.354a.5.5 0 1 0 .708.708l2-2a.5.5 0 0 0 0-.708l-2-2a.5.5 0 1 0-.708.708L4.793 6.5 3.146 8.146z"></path></svg>`), TerminalFill[FILENAME], [[1, 0, [[1, 174]]]]);
function TerminalFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TerminalFill);
  var svg = root1867();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-terminal-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TerminalFill = hmr(TerminalFill, () => TerminalFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TerminalFill[HMR].source;
    set(TerminalFill[HMR].source, module.default[HMR].original);
  });
}
var TerminalFill_default = TerminalFill;
mark_module_end(TerminalFill);

// node_modules/svelte-bootstrap-icons/lib/TerminalPlus.svelte
mark_module_start();
TerminalPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TerminalPlus.svelte";
var root1868 = add_locations(ns_template(`<svg><!><path d="M2 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h5.5a.5.5 0 0 1 0 1H2a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v4a.5.5 0 0 1-1 0V4a1 1 0 0 0-1-1H2Z"></path><path d="M3.146 5.146a.5.5 0 0 1 .708 0L5.177 6.47a.75.75 0 0 1 0 1.06L3.854 8.854a.5.5 0 1 1-.708-.708L4.293 7 3.146 5.854a.5.5 0 0 1 0-.708ZM5.5 9a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5ZM16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5Z"></path></svg>`), TerminalPlus[FILENAME], [
  [1, 0, [[1, 174], [2, 2]]]
]);
function TerminalPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TerminalPlus);
  var svg = root1868();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-terminal-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TerminalPlus = hmr(TerminalPlus, () => TerminalPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TerminalPlus[HMR].source;
    set(TerminalPlus[HMR].source, module.default[HMR].original);
  });
}
var TerminalPlus_default = TerminalPlus;
mark_module_end(TerminalPlus);

// node_modules/svelte-bootstrap-icons/lib/TerminalSplit.svelte
mark_module_start();
TerminalSplit[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TerminalSplit.svelte";
var root1869 = add_locations(ns_template(`<svg><!><path d="M2.146 3.146a.5.5 0 0 1 .708 0l.823.824a.75.75 0 0 1 0 1.06l-.823.824a.5.5 0 1 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 0-.708ZM4 6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1A.5.5 0 0 1 4 6Zm6.354-2.854a.5.5 0 0 0-.708.708l.647.646-.647.646a.5.5 0 1 0 .708.708l.823-.824a.75.75 0 0 0 0-1.06l-.823-.824ZM12 5.5a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1Z"></path><path d="M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3Zm2-1a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h5.5V2H2Zm6.5 0v12H14a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H8.5Z"></path></svg>`), TerminalSplit[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function TerminalSplit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TerminalSplit);
  var svg = root1869();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-terminal-split", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TerminalSplit = hmr(TerminalSplit, () => TerminalSplit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TerminalSplit[HMR].source;
    set(TerminalSplit[HMR].source, module.default[HMR].original);
  });
}
var TerminalSplit_default = TerminalSplit;
mark_module_end(TerminalSplit);

// node_modules/svelte-bootstrap-icons/lib/TerminalX.svelte
mark_module_start();
TerminalX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TerminalX.svelte";
var root1870 = add_locations(ns_template(`<svg><!><path d="M2 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h5.5a.5.5 0 0 1 0 1H2a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v4a.5.5 0 0 1-1 0V4a1 1 0 0 0-1-1H2Z"></path><path d="M3.146 5.146a.5.5 0 0 1 .708 0L5.177 6.47a.75.75 0 0 1 0 1.06L3.854 8.854a.5.5 0 1 1-.708-.708L4.293 7 3.146 5.854a.5.5 0 0 1 0-.708ZM5.5 9a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5ZM16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-4.854-1.354a.5.5 0 0 0 0 .708l.647.646-.647.646a.5.5 0 0 0 .708.708l.646-.647.646.647a.5.5 0 0 0 .708-.708l-.647-.646.647-.646a.5.5 0 0 0-.708-.708l-.646.647-.646-.647a.5.5 0 0 0-.708 0Z"></path></svg>`), TerminalX[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function TerminalX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TerminalX);
  var svg = root1870();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-terminal-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TerminalX = hmr(TerminalX, () => TerminalX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TerminalX[HMR].source;
    set(TerminalX[HMR].source, module.default[HMR].original);
  });
}
var TerminalX_default = TerminalX;
mark_module_end(TerminalX);

// node_modules/svelte-bootstrap-icons/lib/Terminal.svelte
mark_module_start();
Terminal[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Terminal.svelte";
var root1871 = add_locations(ns_template(`<svg><!><path d="M6 9a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3A.5.5 0 0 1 6 9zM3.854 4.146a.5.5 0 1 0-.708.708L4.793 6.5 3.146 8.146a.5.5 0 1 0 .708.708l2-2a.5.5 0 0 0 0-.708l-2-2z"></path><path d="M2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2zm12 1a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h12z"></path></svg>`), Terminal[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Terminal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Terminal);
  var svg = root1871();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-terminal", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Terminal = hmr(Terminal, () => Terminal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Terminal[HMR].source;
    set(Terminal[HMR].source, module.default[HMR].original);
  });
}
var Terminal_default = Terminal;
mark_module_end(Terminal);

// node_modules/svelte-bootstrap-icons/lib/TextCenter.svelte
mark_module_start();
TextCenter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TextCenter.svelte";
var root1872 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M4 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), TextCenter[FILENAME], [[1, 0, [[1, 172]]]]);
function TextCenter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TextCenter);
  var svg = root1872();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-text-center", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextCenter = hmr(TextCenter, () => TextCenter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextCenter[HMR].source;
    set(TextCenter[HMR].source, module.default[HMR].original);
  });
}
var TextCenter_default = TextCenter;
mark_module_end(TextCenter);

// node_modules/svelte-bootstrap-icons/lib/TextIndentLeft.svelte
mark_module_start();
TextIndentLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TextIndentLeft.svelte";
var root1873 = add_locations(ns_template(`<svg><!><path d="M2 3.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm.646 2.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L4.293 8 2.646 6.354a.5.5 0 0 1 0-.708zM7 6.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm-5 3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), TextIndentLeft[FILENAME], [[1, 0, [[1, 177]]]]);
function TextIndentLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TextIndentLeft);
  var svg = root1873();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-text-indent-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextIndentLeft = hmr(TextIndentLeft, () => TextIndentLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextIndentLeft[HMR].source;
    set(TextIndentLeft[HMR].source, module.default[HMR].original);
  });
}
var TextIndentLeft_default = TextIndentLeft;
mark_module_end(TextIndentLeft);

// node_modules/svelte-bootstrap-icons/lib/TextIndentRight.svelte
mark_module_start();
TextIndentRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TextIndentRight.svelte";
var root1874 = add_locations(ns_template(`<svg><!><path d="M2 3.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm10.646 2.146a.5.5 0 0 1 .708.708L11.707 8l1.647 1.646a.5.5 0 0 1-.708.708l-2-2a.5.5 0 0 1 0-.708l2-2zM2 6.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), TextIndentRight[FILENAME], [[1, 0, [[1, 178]]]]);
function TextIndentRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TextIndentRight);
  var svg = root1874();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-text-indent-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextIndentRight = hmr(TextIndentRight, () => TextIndentRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextIndentRight[HMR].source;
    set(TextIndentRight[HMR].source, module.default[HMR].original);
  });
}
var TextIndentRight_default = TextIndentRight;
mark_module_end(TextIndentRight);

// node_modules/svelte-bootstrap-icons/lib/TextLeft.svelte
mark_module_start();
TextLeft[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TextLeft.svelte";
var root1875 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), TextLeft[FILENAME], [[1, 0, [[1, 170]]]]);
function TextLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TextLeft);
  var svg = root1875();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-text-left", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextLeft = hmr(TextLeft, () => TextLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextLeft[HMR].source;
    set(TextLeft[HMR].source, module.default[HMR].original);
  });
}
var TextLeft_default = TextLeft;
mark_module_end(TextLeft);

// node_modules/svelte-bootstrap-icons/lib/TextParagraph.svelte
mark_module_start();
TextParagraph[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TextParagraph.svelte";
var root1876 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm4-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5z"></path></svg>`), TextParagraph[FILENAME], [[1, 0, [[1, 175]]]]);
function TextParagraph($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TextParagraph);
  var svg = root1876();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-text-paragraph", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextParagraph = hmr(TextParagraph, () => TextParagraph[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextParagraph[HMR].source;
    set(TextParagraph[HMR].source, module.default[HMR].original);
  });
}
var TextParagraph_default = TextParagraph;
mark_module_end(TextParagraph);

// node_modules/svelte-bootstrap-icons/lib/TextRight.svelte
mark_module_start();
TextRight[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TextRight.svelte";
var root1877 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-4-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm4-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-4-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"></path></svg>`), TextRight[FILENAME], [[1, 0, [[1, 171]]]]);
function TextRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TextRight);
  var svg = root1877();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-text-right", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextRight = hmr(TextRight, () => TextRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextRight[HMR].source;
    set(TextRight[HMR].source, module.default[HMR].original);
  });
}
var TextRight_default = TextRight;
mark_module_end(TextRight);

// node_modules/svelte-bootstrap-icons/lib/TextWrap.svelte
mark_module_start();
TextWrap[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TextWrap.svelte";
var root1878 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M2 3.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5Zm0 4a.5.5 0 0 1 .5-.5h9a2.5 2.5 0 0 1 0 5h-1.293l.647.646a.5.5 0 0 1-.708.708l-1.5-1.5a.5.5 0 0 1 0-.708l1.5-1.5a.5.5 0 0 1 .708.708l-.647.646H11.5a1.5 1.5 0 0 0 0-3h-9a.5.5 0 0 1-.5-.5Zm0 4a.5.5 0 0 1 .5-.5H7a.5.5 0 0 1 0 1H2.5a.5.5 0 0 1-.5-.5Z"></path></svg>`), TextWrap[FILENAME], [[1, 0, [[1, 170]]]]);
function TextWrap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TextWrap);
  var svg = root1878();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-text-wrap", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextWrap = hmr(TextWrap, () => TextWrap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextWrap[HMR].source;
    set(TextWrap[HMR].source, module.default[HMR].original);
  });
}
var TextWrap_default = TextWrap;
mark_module_end(TextWrap);

// node_modules/svelte-bootstrap-icons/lib/TextareaResize.svelte
mark_module_start();
TextareaResize[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TextareaResize.svelte";
var root1879 = add_locations(ns_template(`<svg><!><path d="M0 4.5A2.5 2.5 0 0 1 2.5 2h11A2.5 2.5 0 0 1 16 4.5v7a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 11.5v-7zM2.5 3A1.5 1.5 0 0 0 1 4.5v7A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5v-7A1.5 1.5 0 0 0 13.5 3h-11zm10.854 4.646a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708l3-3a.5.5 0 0 1 .708 0zm0 2.5a.5.5 0 0 1 0 .708l-.5.5a.5.5 0 0 1-.708-.708l.5-.5a.5.5 0 0 1 .708 0z"></path></svg>`), TextareaResize[FILENAME], [[1, 0, [[1, 176]]]]);
function TextareaResize($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TextareaResize);
  var svg = root1879();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-textarea-resize", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextareaResize = hmr(TextareaResize, () => TextareaResize[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextareaResize[HMR].source;
    set(TextareaResize[HMR].source, module.default[HMR].original);
  });
}
var TextareaResize_default = TextareaResize;
mark_module_end(TextareaResize);

// node_modules/svelte-bootstrap-icons/lib/TextareaT.svelte
mark_module_start();
TextareaT[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TextareaT.svelte";
var root1880 = add_locations(ns_template(`<svg><!><path d="M1.5 2.5A1.5 1.5 0 0 1 3 1h10a1.5 1.5 0 0 1 1.5 1.5v3.563a2 2 0 0 1 0 3.874V13.5A1.5 1.5 0 0 1 13 15H3a1.5 1.5 0 0 1-1.5-1.5V9.937a2 2 0 0 1 0-3.874V2.5zm1 3.563a2 2 0 0 1 0 3.874V13.5a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5V9.937a2 2 0 0 1 0-3.874V2.5A.5.5 0 0 0 13 2H3a.5.5 0 0 0-.5.5v3.563zM2 7a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm12 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"></path><path d="M11.434 4H4.566L4.5 5.994h.386c.21-1.252.612-1.446 2.173-1.495l.343-.011v6.343c0 .537-.116.665-1.049.748V12h3.294v-.421c-.938-.083-1.054-.21-1.054-.748V4.488l.348.01c1.56.05 1.963.244 2.173 1.496h.386L11.434 4z"></path></svg>`), TextareaT[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function TextareaT($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TextareaT);
  var svg = root1880();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-textarea-t", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextareaT = hmr(TextareaT, () => TextareaT[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextareaT[HMR].source;
    set(TextareaT[HMR].source, module.default[HMR].original);
  });
}
var TextareaT_default = TextareaT;
mark_module_end(TextareaT);

// node_modules/svelte-bootstrap-icons/lib/Textarea.svelte
mark_module_start();
Textarea[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Textarea.svelte";
var root1881 = add_locations(ns_template(`<svg><!><path d="M1.5 2.5A1.5 1.5 0 0 1 3 1h10a1.5 1.5 0 0 1 1.5 1.5v3.563a2 2 0 0 1 0 3.874V13.5A1.5 1.5 0 0 1 13 15H3a1.5 1.5 0 0 1-1.5-1.5V9.937a2 2 0 0 1 0-3.874V2.5zm1 3.563a2 2 0 0 1 0 3.874V13.5a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5V9.937a2 2 0 0 1 0-3.874V2.5A.5.5 0 0 0 13 2H3a.5.5 0 0 0-.5.5v3.563zM2 7a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm12 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"></path></svg>`), Textarea[FILENAME], [[1, 0, [[1, 169]]]]);
function Textarea($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Textarea);
  var svg = root1881();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-textarea", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Textarea = hmr(Textarea, () => Textarea[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Textarea[HMR].source;
    set(Textarea[HMR].source, module.default[HMR].original);
  });
}
var Textarea_default = Textarea;
mark_module_end(Textarea);

// node_modules/svelte-bootstrap-icons/lib/ThermometerHalf.svelte
mark_module_start();
ThermometerHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ThermometerHalf.svelte";
var root1882 = add_locations(ns_template(`<svg><!><path d="M9.5 12.5a1.5 1.5 0 1 1-2-1.415V6.5a.5.5 0 0 1 1 0v4.585a1.5 1.5 0 0 1 1 1.415z"></path><path d="M5.5 2.5a2.5 2.5 0 0 1 5 0v7.55a3.5 3.5 0 1 1-5 0V2.5zM8 1a1.5 1.5 0 0 0-1.5 1.5v7.987l-.167.15a2.5 2.5 0 1 0 3.333 0l-.166-.15V2.5A1.5 1.5 0 0 0 8 1z"></path></svg>`), ThermometerHalf[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function ThermometerHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ThermometerHalf);
  var svg = root1882();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-thermometer-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThermometerHalf = hmr(ThermometerHalf, () => ThermometerHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThermometerHalf[HMR].source;
    set(ThermometerHalf[HMR].source, module.default[HMR].original);
  });
}
var ThermometerHalf_default = ThermometerHalf;
mark_module_end(ThermometerHalf);

// node_modules/svelte-bootstrap-icons/lib/ThermometerHigh.svelte
mark_module_start();
ThermometerHigh[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ThermometerHigh.svelte";
var root1883 = add_locations(ns_template(`<svg><!><path d="M9.5 12.5a1.5 1.5 0 1 1-2-1.415V2.5a.5.5 0 0 1 1 0v8.585a1.5 1.5 0 0 1 1 1.415z"></path><path d="M5.5 2.5a2.5 2.5 0 0 1 5 0v7.55a3.5 3.5 0 1 1-5 0V2.5zM8 1a1.5 1.5 0 0 0-1.5 1.5v7.987l-.167.15a2.5 2.5 0 1 0 3.333 0l-.166-.15V2.5A1.5 1.5 0 0 0 8 1z"></path></svg>`), ThermometerHigh[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function ThermometerHigh($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ThermometerHigh);
  var svg = root1883();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-thermometer-high", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThermometerHigh = hmr(ThermometerHigh, () => ThermometerHigh[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThermometerHigh[HMR].source;
    set(ThermometerHigh[HMR].source, module.default[HMR].original);
  });
}
var ThermometerHigh_default = ThermometerHigh;
mark_module_end(ThermometerHigh);

// node_modules/svelte-bootstrap-icons/lib/ThermometerLow.svelte
mark_module_start();
ThermometerLow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ThermometerLow.svelte";
var root1884 = add_locations(ns_template(`<svg><!><path d="M9.5 12.5a1.5 1.5 0 1 1-2-1.415V9.5a.5.5 0 0 1 1 0v1.585a1.5 1.5 0 0 1 1 1.415z"></path><path d="M5.5 2.5a2.5 2.5 0 0 1 5 0v7.55a3.5 3.5 0 1 1-5 0V2.5zM8 1a1.5 1.5 0 0 0-1.5 1.5v7.987l-.167.15a2.5 2.5 0 1 0 3.333 0l-.166-.15V2.5A1.5 1.5 0 0 0 8 1z"></path></svg>`), ThermometerLow[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function ThermometerLow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ThermometerLow);
  var svg = root1884();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-thermometer-low", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThermometerLow = hmr(ThermometerLow, () => ThermometerLow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThermometerLow[HMR].source;
    set(ThermometerLow[HMR].source, module.default[HMR].original);
  });
}
var ThermometerLow_default = ThermometerLow;
mark_module_end(ThermometerLow);

// node_modules/svelte-bootstrap-icons/lib/ThermometerSnow.svelte
mark_module_start();
ThermometerSnow[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ThermometerSnow.svelte";
var root1885 = add_locations(ns_template(`<svg><!><path d="M5 12.5a1.5 1.5 0 1 1-2-1.415V9.5a.5.5 0 0 1 1 0v1.585A1.5 1.5 0 0 1 5 12.5z"></path><path d="M1 2.5a2.5 2.5 0 0 1 5 0v7.55a3.5 3.5 0 1 1-5 0V2.5zM3.5 1A1.5 1.5 0 0 0 2 2.5v7.987l-.167.15a2.5 2.5 0 1 0 3.333 0L5 10.486V2.5A1.5 1.5 0 0 0 3.5 1zm5 1a.5.5 0 0 1 .5.5v1.293l.646-.647a.5.5 0 0 1 .708.708L9 5.207v1.927l1.669-.963.495-1.85a.5.5 0 1 1 .966.26l-.237.882 1.12-.646a.5.5 0 0 1 .5.866l-1.12.646.884.237a.5.5 0 1 1-.26.966l-1.848-.495L9.5 8l1.669.963 1.849-.495a.5.5 0 1 1 .258.966l-.883.237 1.12.646a.5.5 0 0 1-.5.866l-1.12-.646.237.883a.5.5 0 1 1-.966.258L10.67 9.83 9 8.866v1.927l1.354 1.353a.5.5 0 0 1-.708.708L9 12.207V13.5a.5.5 0 0 1-1 0v-11a.5.5 0 0 1 .5-.5z"></path></svg>`), ThermometerSnow[FILENAME], [
  [1, 0, [[1, 177], [2, 2]]]
]);
function ThermometerSnow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ThermometerSnow);
  var svg = root1885();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-thermometer-snow", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThermometerSnow = hmr(ThermometerSnow, () => ThermometerSnow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThermometerSnow[HMR].source;
    set(ThermometerSnow[HMR].source, module.default[HMR].original);
  });
}
var ThermometerSnow_default = ThermometerSnow;
mark_module_end(ThermometerSnow);

// node_modules/svelte-bootstrap-icons/lib/ThermometerSun.svelte
mark_module_start();
ThermometerSun[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ThermometerSun.svelte";
var root1886 = add_locations(ns_template(`<svg><!><path d="M5 12.5a1.5 1.5 0 1 1-2-1.415V2.5a.5.5 0 0 1 1 0v8.585A1.5 1.5 0 0 1 5 12.5z"></path><path d="M1 2.5a2.5 2.5 0 0 1 5 0v7.55a3.5 3.5 0 1 1-5 0V2.5zM3.5 1A1.5 1.5 0 0 0 2 2.5v7.987l-.167.15a2.5 2.5 0 1 0 3.333 0L5 10.486V2.5A1.5 1.5 0 0 0 3.5 1zm5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0v-1a.5.5 0 0 1 .5-.5zm4.243 1.757a.5.5 0 0 1 0 .707l-.707.708a.5.5 0 1 1-.708-.708l.708-.707a.5.5 0 0 1 .707 0zM8 5.5a.5.5 0 0 1 .5-.5 3 3 0 1 1 0 6 .5.5 0 0 1 0-1 2 2 0 0 0 0-4 .5.5 0 0 1-.5-.5zM12.5 8a.5.5 0 0 1 .5-.5h1a.5.5 0 1 1 0 1h-1a.5.5 0 0 1-.5-.5zm-1.172 2.828a.5.5 0 0 1 .708 0l.707.708a.5.5 0 0 1-.707.707l-.708-.707a.5.5 0 0 1 0-.708zM8.5 12a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0v-1a.5.5 0 0 1 .5-.5z"></path></svg>`), ThermometerSun[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function ThermometerSun($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ThermometerSun);
  var svg = root1886();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-thermometer-sun", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThermometerSun = hmr(ThermometerSun, () => ThermometerSun[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThermometerSun[HMR].source;
    set(ThermometerSun[HMR].source, module.default[HMR].original);
  });
}
var ThermometerSun_default = ThermometerSun;
mark_module_end(ThermometerSun);

// node_modules/svelte-bootstrap-icons/lib/Thermometer.svelte
mark_module_start();
Thermometer[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Thermometer.svelte";
var root1887 = add_locations(ns_template(`<svg><!><path d="M8 14a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"></path><path d="M8 0a2.5 2.5 0 0 0-2.5 2.5v7.55a3.5 3.5 0 1 0 5 0V2.5A2.5 2.5 0 0 0 8 0zM6.5 2.5a1.5 1.5 0 1 1 3 0v7.987l.167.15a2.5 2.5 0 1 1-3.333 0l.166-.15V2.5z"></path></svg>`), Thermometer[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Thermometer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Thermometer);
  var svg = root1887();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-thermometer", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thermometer = hmr(Thermometer, () => Thermometer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thermometer[HMR].source;
    set(Thermometer[HMR].source, module.default[HMR].original);
  });
}
var Thermometer_default = Thermometer;
mark_module_end(Thermometer);

// node_modules/svelte-bootstrap-icons/lib/ThreadsFill.svelte
mark_module_start();
ThreadsFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ThreadsFill.svelte";
var root1888 = add_locations(ns_template(`<svg><!><path d="M6.81 9.204c0-.41.197-1.062 1.727-1.062.469 0 .758.034 1.146.121-.124 1.606-.91 1.818-1.674 1.818-.418 0-1.2-.218-1.2-.877Z"></path><path d="M2.59 16h10.82A2.59 2.59 0 0 0 16 13.41V2.59A2.59 2.59 0 0 0 13.41 0H2.59A2.59 2.59 0 0 0 0 2.59v10.82A2.59 2.59 0 0 0 2.59 16ZM5.866 5.91c.567-.81 1.315-1.126 2.35-1.126.73 0 1.351.246 1.795.711.443.466.696 1.132.754 1.983.245.103.472.224.678.363.832.559 1.29 1.395 1.29 2.353 0 2.037-1.67 3.806-4.692 3.806-2.595 0-5.291-1.51-5.291-6.004C2.75 3.526 5.361 2 8.033 2c1.234 0 4.129.182 5.217 3.777l-1.02.264c-.842-2.56-2.607-2.968-4.224-2.968-2.675 0-4.187 1.628-4.187 5.093 0 3.107 1.69 4.757 4.222 4.757 2.083 0 3.636-1.082 3.636-2.667 0-1.079-.906-1.595-.953-1.595-.177.925-.651 2.482-2.733 2.482-1.213 0-2.26-.838-2.26-1.936 0-1.568 1.488-2.136 2.663-2.136.44 0 .97.03 1.247.086 0-.478-.404-1.296-1.426-1.296-.911 0-1.16.288-1.45.624l-.024.027c-.202-.135-.875-.601-.875-.601Z"></path></svg>`), ThreadsFill[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function ThreadsFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ThreadsFill);
  var svg = root1888();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-threads-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThreadsFill = hmr(ThreadsFill, () => ThreadsFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThreadsFill[HMR].source;
    set(ThreadsFill[HMR].source, module.default[HMR].original);
  });
}
var ThreadsFill_default = ThreadsFill;
mark_module_end(ThreadsFill);

// node_modules/svelte-bootstrap-icons/lib/Threads.svelte
mark_module_start();
Threads[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Threads.svelte";
var root1889 = add_locations(ns_template(`<svg><!><path d="M6.321 6.016c-.27-.18-1.166-.802-1.166-.802.756-1.081 1.753-1.502 3.132-1.502.975 0 1.803.327 2.394.948.591.621.928 1.509 1.005 2.644.328.138.63.299.905.484 1.109.745 1.719 1.86 1.719 3.137 0 2.716-2.226 5.075-6.256 5.075C4.594 16 1 13.987 1 7.994 1 2.034 4.482 0 8.044 0 9.69 0 13.55.243 15 5.036l-1.36.353C12.516 1.974 10.163 1.43 8.006 1.43c-3.565 0-5.582 2.171-5.582 6.79 0 4.143 2.254 6.343 5.63 6.343 2.777 0 4.847-1.443 4.847-3.556 0-1.438-1.208-2.127-1.27-2.127-.236 1.234-.868 3.31-3.644 3.31-1.618 0-3.013-1.118-3.013-2.582 0-2.09 1.984-2.847 3.55-2.847.586 0 1.294.04 1.663.114 0-.637-.54-1.728-1.9-1.728-1.25 0-1.566.405-1.967.868ZM8.716 8.19c-2.04 0-2.304.87-2.304 1.416 0 .878 1.043 1.168 1.6 1.168 1.02 0 2.067-.282 2.232-2.423a6.217 6.217 0 0 0-1.528-.161Z"></path></svg>`), Threads[FILENAME], [[1, 0, [[1, 168]]]]);
function Threads($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Threads);
  var svg = root1889();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-threads", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Threads = hmr(Threads, () => Threads[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Threads[HMR].source;
    set(Threads[HMR].source, module.default[HMR].original);
  });
}
var Threads_default = Threads;
mark_module_end(Threads);

// node_modules/svelte-bootstrap-icons/lib/ThreeDotsVertical.svelte
mark_module_start();
ThreeDotsVertical[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ThreeDotsVertical.svelte";
var root1890 = add_locations(ns_template(`<svg><!><path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path></svg>`), ThreeDotsVertical[FILENAME], [[1, 0, [[1, 180]]]]);
function ThreeDotsVertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ThreeDotsVertical);
  var svg = root1890();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-three-dots-vertical", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThreeDotsVertical = hmr(ThreeDotsVertical, () => ThreeDotsVertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThreeDotsVertical[HMR].source;
    set(ThreeDotsVertical[HMR].source, module.default[HMR].original);
  });
}
var ThreeDotsVertical_default = ThreeDotsVertical;
mark_module_end(ThreeDotsVertical);

// node_modules/svelte-bootstrap-icons/lib/ThreeDots.svelte
mark_module_start();
ThreeDots[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ThreeDots.svelte";
var root1891 = add_locations(ns_template(`<svg><!><path d="M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), ThreeDots[FILENAME], [[1, 0, [[1, 171]]]]);
function ThreeDots($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ThreeDots);
  var svg = root1891();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-three-dots", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThreeDots = hmr(ThreeDots, () => ThreeDots[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThreeDots[HMR].source;
    set(ThreeDots[HMR].source, module.default[HMR].original);
  });
}
var ThreeDots_default = ThreeDots;
mark_module_end(ThreeDots);

// node_modules/svelte-bootstrap-icons/lib/ThunderboltFill.svelte
mark_module_start();
ThunderboltFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ThunderboltFill.svelte";
var root1892 = add_locations(ns_template(`<svg><!><path d="M1 3a1 1 0 0 0-1 1v7.293A1 1 0 0 0 .293 12L2 13.707a1 1 0 0 0 .707.293h10.586a1 1 0 0 0 .707-.293L15.707 12a1 1 0 0 0 .293-.707V4a1 1 0 0 0-1-1H1Zm2.5 3h9a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Z"></path></svg>`), ThunderboltFill[FILENAME], [[1, 0, [[1, 177]]]]);
function ThunderboltFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ThunderboltFill);
  var svg = root1892();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-thunderbolt-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThunderboltFill = hmr(ThunderboltFill, () => ThunderboltFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThunderboltFill[HMR].source;
    set(ThunderboltFill[HMR].source, module.default[HMR].original);
  });
}
var ThunderboltFill_default = ThunderboltFill;
mark_module_end(ThunderboltFill);

// node_modules/svelte-bootstrap-icons/lib/Thunderbolt.svelte
mark_module_start();
Thunderbolt[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Thunderbolt.svelte";
var root1893 = add_locations(ns_template(`<svg><!><path d="M3.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-9Z"></path><path d="M1 3a1 1 0 0 0-1 1v7.293A1 1 0 0 0 .293 12L2 13.707a1 1 0 0 0 .707.293h10.586a1 1 0 0 0 .707-.293L15.707 12a1 1 0 0 0 .293-.707V4a1 1 0 0 0-1-1H1Zm0 1h14v7.293L13.293 13H2.707L1 11.293V4Z"></path></svg>`), Thunderbolt[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Thunderbolt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Thunderbolt);
  var svg = root1893();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-thunderbolt", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thunderbolt = hmr(Thunderbolt, () => Thunderbolt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thunderbolt[HMR].source;
    set(Thunderbolt[HMR].source, module.default[HMR].original);
  });
}
var Thunderbolt_default = Thunderbolt;
mark_module_end(Thunderbolt);

// node_modules/svelte-bootstrap-icons/lib/TicketDetailedFill.svelte
mark_module_start();
TicketDetailedFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TicketDetailedFill.svelte";
var root1894 = add_locations(ns_template(`<svg><!><path d="M0 4.5A1.5 1.5 0 0 1 1.5 3h13A1.5 1.5 0 0 1 16 4.5V6a.5.5 0 0 1-.5.5 1.5 1.5 0 0 0 0 3 .5.5 0 0 1 .5.5v1.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5V10a.5.5 0 0 1 .5-.5 1.5 1.5 0 1 0 0-3A.5.5 0 0 1 0 6V4.5Zm4 1a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7a.5.5 0 0 0-.5.5Zm0 5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7a.5.5 0 0 0-.5.5ZM4 8a1 1 0 0 0 1 1h6a1 1 0 1 0 0-2H5a1 1 0 0 0-1 1Z"></path></svg>`), TicketDetailedFill[FILENAME], [[1, 0, [[1, 181]]]]);
function TicketDetailedFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TicketDetailedFill);
  var svg = root1894();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ticket-detailed-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TicketDetailedFill = hmr(TicketDetailedFill, () => TicketDetailedFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TicketDetailedFill[HMR].source;
    set(TicketDetailedFill[HMR].source, module.default[HMR].original);
  });
}
var TicketDetailedFill_default = TicketDetailedFill;
mark_module_end(TicketDetailedFill);

// node_modules/svelte-bootstrap-icons/lib/TicketDetailed.svelte
mark_module_start();
TicketDetailed[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TicketDetailed.svelte";
var root1895 = add_locations(ns_template(`<svg><!><path d="M4 5.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5Zm0 5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5ZM5 7a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2H5Z"></path><path d="M0 4.5A1.5 1.5 0 0 1 1.5 3h13A1.5 1.5 0 0 1 16 4.5V6a.5.5 0 0 1-.5.5 1.5 1.5 0 0 0 0 3 .5.5 0 0 1 .5.5v1.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5V10a.5.5 0 0 1 .5-.5 1.5 1.5 0 1 0 0-3A.5.5 0 0 1 0 6V4.5ZM1.5 4a.5.5 0 0 0-.5.5v1.05a2.5 2.5 0 0 1 0 4.9v1.05a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-1.05a2.5 2.5 0 0 1 0-4.9V4.5a.5.5 0 0 0-.5-.5h-13Z"></path></svg>`), TicketDetailed[FILENAME], [
  [1, 0, [[1, 176], [2, 2]]]
]);
function TicketDetailed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TicketDetailed);
  var svg = root1895();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ticket-detailed", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TicketDetailed = hmr(TicketDetailed, () => TicketDetailed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TicketDetailed[HMR].source;
    set(TicketDetailed[HMR].source, module.default[HMR].original);
  });
}
var TicketDetailed_default = TicketDetailed;
mark_module_end(TicketDetailed);

// node_modules/svelte-bootstrap-icons/lib/TicketFill.svelte
mark_module_start();
TicketFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TicketFill.svelte";
var root1896 = add_locations(ns_template(`<svg><!><path d="M1.5 3A1.5 1.5 0 0 0 0 4.5V6a.5.5 0 0 0 .5.5 1.5 1.5 0 1 1 0 3 .5.5 0 0 0-.5.5v1.5A1.5 1.5 0 0 0 1.5 13h13a1.5 1.5 0 0 0 1.5-1.5V10a.5.5 0 0 0-.5-.5 1.5 1.5 0 0 1 0-3A.5.5 0 0 0 16 6V4.5A1.5 1.5 0 0 0 14.5 3h-13Z"></path></svg>`), TicketFill[FILENAME], [[1, 0, [[1, 172]]]]);
function TicketFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TicketFill);
  var svg = root1896();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ticket-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TicketFill = hmr(TicketFill, () => TicketFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TicketFill[HMR].source;
    set(TicketFill[HMR].source, module.default[HMR].original);
  });
}
var TicketFill_default = TicketFill;
mark_module_end(TicketFill);

// node_modules/svelte-bootstrap-icons/lib/TicketPerforatedFill.svelte
mark_module_start();
TicketPerforatedFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TicketPerforatedFill.svelte";
var root1897 = add_locations(ns_template(`<svg><!><path d="M0 4.5A1.5 1.5 0 0 1 1.5 3h13A1.5 1.5 0 0 1 16 4.5V6a.5.5 0 0 1-.5.5 1.5 1.5 0 0 0 0 3 .5.5 0 0 1 .5.5v1.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5V10a.5.5 0 0 1 .5-.5 1.5 1.5 0 1 0 0-3A.5.5 0 0 1 0 6V4.5Zm4-1v1h1v-1H4Zm1 3v-1H4v1h1Zm7 0v-1h-1v1h1Zm-1-2h1v-1h-1v1Zm-6 3H4v1h1v-1Zm7 1v-1h-1v1h1Zm-7 1H4v1h1v-1Zm7 1v-1h-1v1h1Zm-8 1v1h1v-1H4Zm7 1h1v-1h-1v1Z"></path></svg>`), TicketPerforatedFill[FILENAME], [[1, 0, [[1, 183]]]]);
function TicketPerforatedFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TicketPerforatedFill);
  var svg = root1897();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ticket-perforated-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TicketPerforatedFill = hmr(TicketPerforatedFill, () => TicketPerforatedFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TicketPerforatedFill[HMR].source;
    set(TicketPerforatedFill[HMR].source, module.default[HMR].original);
  });
}
var TicketPerforatedFill_default = TicketPerforatedFill;
mark_module_end(TicketPerforatedFill);

// node_modules/svelte-bootstrap-icons/lib/TicketPerforated.svelte
mark_module_start();
TicketPerforated[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TicketPerforated.svelte";
var root1898 = add_locations(ns_template(`<svg><!><path d="M4 4.85v.9h1v-.9H4Zm7 0v.9h1v-.9h-1Zm-7 1.8v.9h1v-.9H4Zm7 0v.9h1v-.9h-1Zm-7 1.8v.9h1v-.9H4Zm7 0v.9h1v-.9h-1Zm-7 1.8v.9h1v-.9H4Zm7 0v.9h1v-.9h-1Z"></path><path d="M1.5 3A1.5 1.5 0 0 0 0 4.5V6a.5.5 0 0 0 .5.5 1.5 1.5 0 1 1 0 3 .5.5 0 0 0-.5.5v1.5A1.5 1.5 0 0 0 1.5 13h13a1.5 1.5 0 0 0 1.5-1.5V10a.5.5 0 0 0-.5-.5 1.5 1.5 0 0 1 0-3A.5.5 0 0 0 16 6V4.5A1.5 1.5 0 0 0 14.5 3h-13ZM1 4.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 .5.5v1.05a2.5 2.5 0 0 0 0 4.9v1.05a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-1.05a2.5 2.5 0 0 0 0-4.9V4.5Z"></path></svg>`), TicketPerforated[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function TicketPerforated($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TicketPerforated);
  var svg = root1898();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ticket-perforated", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TicketPerforated = hmr(TicketPerforated, () => TicketPerforated[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TicketPerforated[HMR].source;
    set(TicketPerforated[HMR].source, module.default[HMR].original);
  });
}
var TicketPerforated_default = TicketPerforated;
mark_module_end(TicketPerforated);

// node_modules/svelte-bootstrap-icons/lib/Ticket.svelte
mark_module_start();
Ticket[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Ticket.svelte";
var root1899 = add_locations(ns_template(`<svg><!><path d="M0 4.5A1.5 1.5 0 0 1 1.5 3h13A1.5 1.5 0 0 1 16 4.5V6a.5.5 0 0 1-.5.5 1.5 1.5 0 0 0 0 3 .5.5 0 0 1 .5.5v1.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5V10a.5.5 0 0 1 .5-.5 1.5 1.5 0 1 0 0-3A.5.5 0 0 1 0 6V4.5ZM1.5 4a.5.5 0 0 0-.5.5v1.05a2.5 2.5 0 0 1 0 4.9v1.05a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-1.05a2.5 2.5 0 0 1 0-4.9V4.5a.5.5 0 0 0-.5-.5h-13Z"></path></svg>`), Ticket[FILENAME], [[1, 0, [[1, 167]]]]);
function Ticket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Ticket);
  var svg = root1899();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ticket", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ticket = hmr(Ticket, () => Ticket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ticket[HMR].source;
    set(Ticket[HMR].source, module.default[HMR].original);
  });
}
var Ticket_default = Ticket;
mark_module_end(Ticket);

// node_modules/svelte-bootstrap-icons/lib/Tiktok.svelte
mark_module_start();
Tiktok[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Tiktok.svelte";
var root1900 = add_locations(ns_template(`<svg><!><path d="M9 0h1.98c.144.715.54 1.617 1.235 2.512C12.895 3.389 13.797 4 15 4v2c-1.753 0-3.07-.814-4-1.829V11a5 5 0 1 1-5-5v2a3 3 0 1 0 3 3V0Z"></path></svg>`), Tiktok[FILENAME], [[1, 0, [[1, 167]]]]);
function Tiktok($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Tiktok);
  var svg = root1900();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tiktok", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tiktok = hmr(Tiktok, () => Tiktok[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tiktok[HMR].source;
    set(Tiktok[HMR].source, module.default[HMR].original);
  });
}
var Tiktok_default = Tiktok;
mark_module_end(Tiktok);

// node_modules/svelte-bootstrap-icons/lib/ToggleOff.svelte
mark_module_start();
ToggleOff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ToggleOff.svelte";
var root1901 = add_locations(ns_template(`<svg><!><path d="M11 4a4 4 0 0 1 0 8H8a4.992 4.992 0 0 0 2-4 4.992 4.992 0 0 0-2-4h3zm-6 8a4 4 0 1 1 0-8 4 4 0 0 1 0 8zM0 8a5 5 0 0 0 5 5h6a5 5 0 0 0 0-10H5a5 5 0 0 0-5 5z"></path></svg>`), ToggleOff[FILENAME], [[1, 0, [[1, 171]]]]);
function ToggleOff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ToggleOff);
  var svg = root1901();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-toggle-off", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ToggleOff = hmr(ToggleOff, () => ToggleOff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToggleOff[HMR].source;
    set(ToggleOff[HMR].source, module.default[HMR].original);
  });
}
var ToggleOff_default = ToggleOff;
mark_module_end(ToggleOff);

// node_modules/svelte-bootstrap-icons/lib/ToggleOn.svelte
mark_module_start();
ToggleOn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ToggleOn.svelte";
var root1902 = add_locations(ns_template(`<svg><!><path d="M5 3a5 5 0 0 0 0 10h6a5 5 0 0 0 0-10H5zm6 9a4 4 0 1 1 0-8 4 4 0 0 1 0 8z"></path></svg>`), ToggleOn[FILENAME], [[1, 0, [[1, 170]]]]);
function ToggleOn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ToggleOn);
  var svg = root1902();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-toggle-on", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ToggleOn = hmr(ToggleOn, () => ToggleOn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToggleOn[HMR].source;
    set(ToggleOn[HMR].source, module.default[HMR].original);
  });
}
var ToggleOn_default = ToggleOn;
mark_module_end(ToggleOn);

// node_modules/svelte-bootstrap-icons/lib/Toggle2Off.svelte
mark_module_start();
Toggle2Off[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Toggle2Off.svelte";
var root1903 = add_locations(ns_template(`<svg><!><path d="M9 11c.628-.836 1-1.874 1-3a4.978 4.978 0 0 0-1-3h4a3 3 0 1 1 0 6H9z"></path><path d="M5 12a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm0 1A5 5 0 1 0 5 3a5 5 0 0 0 0 10z"></path></svg>`), Toggle2Off[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function Toggle2Off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Toggle2Off);
  var svg = root1903();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-toggle2-off", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toggle2Off = hmr(Toggle2Off, () => Toggle2Off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toggle2Off[HMR].source;
    set(Toggle2Off[HMR].source, module.default[HMR].original);
  });
}
var Toggle2Off_default = Toggle2Off;
mark_module_end(Toggle2Off);

// node_modules/svelte-bootstrap-icons/lib/Toggle2On.svelte
mark_module_start();
Toggle2On[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Toggle2On.svelte";
var root1904 = add_locations(ns_template(`<svg><!><path d="M7 5H3a3 3 0 0 0 0 6h4a4.995 4.995 0 0 1-.584-1H3a2 2 0 1 1 0-4h3.416c.156-.357.352-.692.584-1z"></path><path d="M16 8A5 5 0 1 1 6 8a5 5 0 0 1 10 0z"></path></svg>`), Toggle2On[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Toggle2On($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Toggle2On);
  var svg = root1904();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-toggle2-on", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toggle2On = hmr(Toggle2On, () => Toggle2On[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toggle2On[HMR].source;
    set(Toggle2On[HMR].source, module.default[HMR].original);
  });
}
var Toggle2On_default = Toggle2On;
mark_module_end(Toggle2On);

// node_modules/svelte-bootstrap-icons/lib/Toggles.svelte
mark_module_start();
Toggles[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Toggles.svelte";
var root1905 = add_locations(ns_template(`<svg><!><path d="M4.5 9a3.5 3.5 0 1 0 0 7h7a3.5 3.5 0 1 0 0-7h-7zm7 6a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm-7-14a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zm2.45 0A3.49 3.49 0 0 1 8 3.5 3.49 3.49 0 0 1 6.95 6h4.55a2.5 2.5 0 0 0 0-5H6.95zM4.5 0h7a3.5 3.5 0 1 1 0 7h-7a3.5 3.5 0 1 1 0-7z"></path></svg>`), Toggles[FILENAME], [[1, 0, [[1, 168]]]]);
function Toggles($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Toggles);
  var svg = root1905();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-toggles", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toggles = hmr(Toggles, () => Toggles[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toggles[HMR].source;
    set(Toggles[HMR].source, module.default[HMR].original);
  });
}
var Toggles_default = Toggles;
mark_module_end(Toggles);

// node_modules/svelte-bootstrap-icons/lib/Toggles2.svelte
mark_module_start();
Toggles2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Toggles2.svelte";
var root1906 = add_locations(ns_template(`<svg><!><path d="M9.465 10H12a2 2 0 1 1 0 4H9.465c.34-.588.535-1.271.535-2 0-.729-.195-1.412-.535-2z"></path><path d="M6 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 1a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm.535-10a3.975 3.975 0 0 1-.409-1H4a1 1 0 0 1 0-2h2.126c.091-.355.23-.69.41-1H4a2 2 0 1 0 0 4h2.535z"></path><path d="M14 4a4 4 0 1 1-8 0 4 4 0 0 1 8 0z"></path></svg>`), Toggles2[FILENAME], [
  [
    1,
    0,
    [[1, 169], [2, 2], [3, 2]]
  ]
]);
function Toggles2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Toggles2);
  var svg = root1906();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-toggles2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toggles2 = hmr(Toggles2, () => Toggles2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toggles2[HMR].source;
    set(Toggles2[HMR].source, module.default[HMR].original);
  });
}
var Toggles2_default = Toggles2;
mark_module_end(Toggles2);

// node_modules/svelte-bootstrap-icons/lib/Tools.svelte
mark_module_start();
Tools[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Tools.svelte";
var root1907 = add_locations(ns_template(`<svg><!><path d="M1 0 0 1l2.2 3.081a1 1 0 0 0 .815.419h.07a1 1 0 0 1 .708.293l2.675 2.675-2.617 2.654A3.003 3.003 0 0 0 0 13a3 3 0 1 0 5.878-.851l2.654-2.617.968.968-.305.914a1 1 0 0 0 .242 1.023l3.27 3.27a.997.997 0 0 0 1.414 0l1.586-1.586a.997.997 0 0 0 0-1.414l-3.27-3.27a1 1 0 0 0-1.023-.242L10.5 9.5l-.96-.96 2.68-2.643A3.005 3.005 0 0 0 16 3c0-.269-.035-.53-.102-.777l-2.14 2.141L12 4l-.364-1.757L13.777.102a3 3 0 0 0-3.675 3.68L7.462 6.46 4.793 3.793a1 1 0 0 1-.293-.707v-.071a1 1 0 0 0-.419-.814L1 0Zm9.646 10.646a.5.5 0 0 1 .708 0l2.914 2.915a.5.5 0 0 1-.707.707l-2.915-2.914a.5.5 0 0 1 0-.708ZM3 11l.471.242.529.026.287.445.445.287.026.529L5 13l-.242.471-.026.529-.445.287-.287.445-.529.026L3 15l-.471-.242L2 14.732l-.287-.445L1.268 14l-.026-.529L1 13l.242-.471.026-.529.445-.287.287-.445.529-.026L3 11Z"></path></svg>`), Tools[FILENAME], [[1, 0, [[1, 166]]]]);
function Tools($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Tools);
  var svg = root1907();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tools", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tools = hmr(Tools, () => Tools[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tools[HMR].source;
    set(Tools[HMR].source, module.default[HMR].original);
  });
}
var Tools_default = Tools;
mark_module_end(Tools);

// node_modules/svelte-bootstrap-icons/lib/Tornado.svelte
mark_module_start();
Tornado[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Tornado.svelte";
var root1908 = add_locations(ns_template(`<svg><!><path d="M1.125 2.45A.892.892 0 0 1 1 2c0-.26.116-.474.258-.634a1.9 1.9 0 0 1 .513-.389c.387-.21.913-.385 1.52-.525C4.514.17 6.18 0 8 0c1.821 0 3.486.17 4.709.452.607.14 1.133.314 1.52.525.193.106.374.233.513.389.141.16.258.374.258.634 0 1.011-.35 1.612-.634 2.102-.04.07-.08.137-.116.203a2.55 2.55 0 0 0-.313.809 2.938 2.938 0 0 0-.011.891.5.5 0 0 1 .428.849c-.06.06-.133.126-.215.195.204 1.116.088 1.99-.3 2.711-.453.84-1.231 1.383-2.02 1.856-.204.123-.412.243-.62.364-1.444.832-2.928 1.689-3.735 3.706a.5.5 0 0 1-.748.226l-.001-.001-.002-.001-.004-.003-.01-.008a2.142 2.142 0 0 1-.147-.115 4.095 4.095 0 0 1-1.179-1.656 3.786 3.786 0 0 1-.247-1.296A.498.498 0 0 1 5 12.5v-.018a.62.62 0 0 1 .008-.079.728.728 0 0 1 .188-.386c.09-.489.272-1.014.573-1.574a.5.5 0 0 1 .073-.918 3.29 3.29 0 0 1 .617-.144l.15-.193c.285-.356.404-.639.437-.861a.948.948 0 0 0-.122-.619c-.249-.455-.815-.903-1.613-1.43-.193-.127-.398-.258-.609-.394l-.119-.076a12.307 12.307 0 0 1-1.241-.334.5.5 0 0 1-.285-.707l-.23-.18C2.117 4.01 1.463 3.32 1.125 2.45zm1.973 1.051c.113.104.233.207.358.308.472.381.99.722 1.515 1.06 1.54.317 3.632.5 5.43.14a.5.5 0 0 1 .197.981c-1.216.244-2.537.26-3.759.157.399.326.744.682.963 1.081.203.373.302.79.233 1.247-.05.33-.182.657-.39.985.075.017.148.035.22.053l.006.002c.481.12.863.213 1.47.01a.5.5 0 1 1 .317.95c-.888.295-1.505.141-2.023.012l-.006-.002a3.894 3.894 0 0 0-.644-.123c-.37.55-.598 1.05-.726 1.497.142.045.296.11.465.194a.5.5 0 1 1-.448.894 3.11 3.11 0 0 0-.148-.07c.012.345.084.643.18.895.14.369.342.666.528.886.992-1.903 2.583-2.814 3.885-3.56.203-.116.399-.228.584-.34.775-.464 1.34-.89 1.653-1.472.212-.393.33-.9.26-1.617A6.74 6.74 0 0 1 10 8.5a.5.5 0 0 1 0-1 5.76 5.76 0 0 0 3.017-.872.515.515 0 0 1-.007-.03c-.135-.673-.14-1.207-.056-1.665.084-.46.253-.81.421-1.113l.131-.23c.065-.112.126-.22.182-.327-.29.107-.62.202-.98.285C11.487 3.83 9.822 4 8 4c-1.821 0-3.486-.17-4.709-.452-.065-.015-.13-.03-.193-.047zM13.964 2a1.12 1.12 0 0 0-.214-.145c-.272-.148-.697-.297-1.266-.428C11.354 1.166 9.769 1 8 1c-1.769 0-3.354.166-4.484.427-.569.13-.994.28-1.266.428A1.12 1.12 0 0 0 2.036 2c.04.038.109.087.214.145.272.148.697.297 1.266.428C4.646 2.834 6.231 3 8 3c1.769 0 3.354-.166 4.484-.427.569-.13.994-.28 1.266-.428A1.12 1.12 0 0 0 13.964 2z"></path></svg>`), Tornado[FILENAME], [[1, 0, [[1, 168]]]]);
function Tornado($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Tornado);
  var svg = root1908();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tornado", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tornado = hmr(Tornado, () => Tornado[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tornado[HMR].source;
    set(Tornado[HMR].source, module.default[HMR].original);
  });
}
var Tornado_default = Tornado;
mark_module_end(Tornado);

// node_modules/svelte-bootstrap-icons/lib/TrainFreightFrontFill.svelte
mark_module_start();
TrainFreightFrontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TrainFreightFrontFill.svelte";
var root1909 = add_locations(ns_template(`<svg><!><path d="M5.736 0a1.5 1.5 0 0 0-.67.158L1.828 1.776A1.5 1.5 0 0 0 1 3.118v5.51l2-.6V5a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v3.028l2 .6v-5.51a1.5 1.5 0 0 0-.83-1.342L10.936.158A1.5 1.5 0 0 0 10.264 0H5.736ZM15 9.672l-5.503-1.65A.5.5 0 0 0 9.353 8H8.5v8h4a2.5 2.5 0 0 0 2.5-2.5V9.672ZM7.5 16V8h-.853a.5.5 0 0 0-.144.021L1 9.672V13.5A2.5 2.5 0 0 0 3.5 16h4Zm-1-14h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1ZM12 5v2.728l-2.216-.665A1.5 1.5 0 0 0 9.354 7H8.5V5H12ZM7.5 5v2h-.853a1.5 1.5 0 0 0-.431.063L4 7.728V5h3.5Zm-4 5a.5.5 0 1 1 0 1 .5.5 0 0 1 0-1Zm9 0a.5.5 0 1 1 0 1 .5.5 0 0 1 0-1ZM5 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm7 1a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>`), TrainFreightFrontFill[FILENAME], [[1, 0, [[1, 185]]]]);
function TrainFreightFrontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TrainFreightFrontFill);
  var svg = root1909();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-train-freight-front-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrainFreightFrontFill = hmr(TrainFreightFrontFill, () => TrainFreightFrontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrainFreightFrontFill[HMR].source;
    set(TrainFreightFrontFill[HMR].source, module.default[HMR].original);
  });
}
var TrainFreightFrontFill_default = TrainFreightFrontFill;
mark_module_end(TrainFreightFrontFill);

// node_modules/svelte-bootstrap-icons/lib/TrainFreightFront.svelte
mark_module_start();
TrainFreightFront[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TrainFreightFront.svelte";
var root1910 = add_locations(ns_template(`<svg><!><path d="M5.065.158A1.5 1.5 0 0 1 5.736 0h4.528a1.5 1.5 0 0 1 .67.158l3.237 1.618a1.5 1.5 0 0 1 .83 1.342V13.5a2.5 2.5 0 0 1-2.5 2.5h-9A2.5 2.5 0 0 1 1 13.5V3.118a1.5 1.5 0 0 1 .828-1.342L5.065.158ZM2 9.372V13.5A1.5 1.5 0 0 0 3.5 15h4V8h-.853a.5.5 0 0 0-.144.021L2 9.372ZM8.5 15h4a1.5 1.5 0 0 0 1.5-1.5V9.372l-4.503-1.35A.5.5 0 0 0 9.353 8H8.5v7ZM14 8.328v-5.21a.5.5 0 0 0-.276-.447l-3.236-1.618A.5.5 0 0 0 10.264 1H5.736a.5.5 0 0 0-.223.053L2.277 2.67A.5.5 0 0 0 2 3.118v5.21l1-.3V5a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v3.028l1 .3Zm-2-.6V5H8.5v2h.853a1.5 1.5 0 0 1 .431.063L12 7.728ZM7.5 7V5H4v2.728l2.216-.665A1.5 1.5 0 0 1 6.646 7H7.5Zm-1-5a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3Zm-3 8a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1Zm9 0a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1ZM5 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm7 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"></path></svg>`), TrainFreightFront[FILENAME], [[1, 0, [[1, 180]]]]);
function TrainFreightFront($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TrainFreightFront);
  var svg = root1910();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-train-freight-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrainFreightFront = hmr(TrainFreightFront, () => TrainFreightFront[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrainFreightFront[HMR].source;
    set(TrainFreightFront[HMR].source, module.default[HMR].original);
  });
}
var TrainFreightFront_default = TrainFreightFront;
mark_module_end(TrainFreightFront);

// node_modules/svelte-bootstrap-icons/lib/TrainFrontFill.svelte
mark_module_start();
TrainFrontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TrainFrontFill.svelte";
var root1911 = add_locations(ns_template(`<svg><!><path d="M10.621.515C8.647.02 7.353.02 5.38.515c-.924.23-1.982.766-2.78 1.22C1.566 2.322 1 3.432 1 4.582V13.5A2.5 2.5 0 0 0 3.5 16h9a2.5 2.5 0 0 0 2.5-2.5V4.583c0-1.15-.565-2.26-1.6-2.849-.797-.453-1.855-.988-2.779-1.22ZM6.5 2h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1Zm-2 2h7A1.5 1.5 0 0 1 13 5.5v2A1.5 1.5 0 0 1 11.5 9h-7A1.5 1.5 0 0 1 3 7.5v-2A1.5 1.5 0 0 1 4.5 4Zm.5 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm0 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm8 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-3-1a1 1 0 1 1 0 2 1 1 0 0 1 0-2ZM4 5.5a.5.5 0 0 1 .5-.5h3v3h-3a.5.5 0 0 1-.5-.5v-2ZM8.5 8V5h3a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-3Z"></path></svg>`), TrainFrontFill[FILENAME], [[1, 0, [[1, 177]]]]);
function TrainFrontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TrainFrontFill);
  var svg = root1911();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-train-front-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrainFrontFill = hmr(TrainFrontFill, () => TrainFrontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrainFrontFill[HMR].source;
    set(TrainFrontFill[HMR].source, module.default[HMR].original);
  });
}
var TrainFrontFill_default = TrainFrontFill;
mark_module_end(TrainFrontFill);

// node_modules/svelte-bootstrap-icons/lib/TrainFront.svelte
mark_module_start();
TrainFront[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TrainFront.svelte";
var root1912 = add_locations(ns_template(`<svg><!><path d="M5.621 1.485c1.815-.454 2.943-.454 4.758 0 .784.196 1.743.673 2.527 1.119.688.39 1.094 1.148 1.094 1.979V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V4.583c0-.831.406-1.588 1.094-1.98.784-.445 1.744-.922 2.527-1.118Zm5-.97C8.647.02 7.353.02 5.38.515c-.924.23-1.982.766-2.78 1.22C1.566 2.322 1 3.432 1 4.582V13.5A2.5 2.5 0 0 0 3.5 16h9a2.5 2.5 0 0 0 2.5-2.5V4.583c0-1.15-.565-2.26-1.6-2.849-.797-.453-1.855-.988-2.779-1.22ZM5 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm0 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm7 1a1 1 0 1 0-1-1 1 1 0 1 0-2 0 1 1 0 0 0 2 0 1 1 0 0 0 1 1ZM4.5 5a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h3V5h-3Zm4 0v3h3a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5h-3ZM3 5.5A1.5 1.5 0 0 1 4.5 4h7A1.5 1.5 0 0 1 13 5.5v2A1.5 1.5 0 0 1 11.5 9h-7A1.5 1.5 0 0 1 3 7.5v-2ZM6.5 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3Z"></path></svg>`), TrainFront[FILENAME], [[1, 0, [[1, 172]]]]);
function TrainFront($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TrainFront);
  var svg = root1912();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-train-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrainFront = hmr(TrainFront, () => TrainFront[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrainFront[HMR].source;
    set(TrainFront[HMR].source, module.default[HMR].original);
  });
}
var TrainFront_default = TrainFront;
mark_module_end(TrainFront);

// node_modules/svelte-bootstrap-icons/lib/TrainLightrailFrontFill.svelte
mark_module_start();
TrainLightrailFrontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TrainLightrailFrontFill.svelte";
var root1913 = add_locations(ns_template(`<svg><!><path d="M6.5 0a.5.5 0 0 0 0 1h1v1.011c-1.525.064-3.346.394-4.588.655C1.775 2.904 1 3.915 1 5.055V13.5A2.5 2.5 0 0 0 3.5 16h9a2.5 2.5 0 0 0 2.5-2.5V5.055c0-1.14-.775-2.15-1.912-2.39-1.242-.26-3.063-.59-4.588-.654V1h1a.5.5 0 0 0 0-1h-3ZM8 4c1.136 0 2.645.2 3.604.346.825.126 1.356.9 1.244 1.697-.022.16-.046.335-.07.522C12.643 7.596 12.5 8.949 12.5 10c0 .428.024.933.062 1.464.066.93.174 1.92.266 2.682.042.34.08.634.109.854h-1.01a62.703 62.703 0 0 1-.327-3H9.354c-.36 0-.704-.143-.958-.396a.353.353 0 0 0-.25-.104h-.292a.353.353 0 0 0-.25.104 1.354 1.354 0 0 1-.958.396H4.4a62.692 62.692 0 0 1-.328 3H3.064c.029-.22.067-.514.108-.854.092-.761.2-1.752.266-2.682.038-.531.062-1.036.062-1.464 0-1.051-.143-2.404-.278-3.435a51.762 51.762 0 0 0-.07-.522c-.112-.798.42-1.571 1.244-1.697C5.356 4.199 6.864 4 8 4Zm-1.354 7H4.47c.019-.353.03-.692.03-1 0-.927-.104-2.051-.216-3h7.432c-.112.949-.216 2.073-.216 3 0 .308.011.647.03 1H9.354a.353.353 0 0 1-.25-.104 1.354 1.354 0 0 0-.958-.396h-.292c-.36 0-.704.143-.958.396a.353.353 0 0 1-.25.104Zm5.199-5h-7.69l-.013-.096a.497.497 0 0 1 .405-.57C5.505 5.188 6.947 5 8 5s2.495.188 3.453.334a.497.497 0 0 1 .405.57L11.845 6ZM6 13.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 0a.5.5 0 1 1 1 0 .5.5 0 0 1-1 0Zm4 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 0a.5.5 0 1 1 1 0 .5.5 0 0 1-1 0Z"></path></svg>`), TrainLightrailFrontFill[FILENAME], [[1, 0, [[1, 187]]]]);
function TrainLightrailFrontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TrainLightrailFrontFill);
  var svg = root1913();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-train-lightrail-front-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrainLightrailFrontFill = hmr(TrainLightrailFrontFill, () => TrainLightrailFrontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrainLightrailFrontFill[HMR].source;
    set(TrainLightrailFrontFill[HMR].source, module.default[HMR].original);
  });
}
var TrainLightrailFrontFill_default = TrainLightrailFrontFill;
mark_module_end(TrainLightrailFrontFill);

// node_modules/svelte-bootstrap-icons/lib/TrainLightrailFront.svelte
mark_module_start();
TrainLightrailFront[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TrainLightrailFront.svelte";
var root1914 = add_locations(ns_template(`<svg><!><path d="M6.5 0a.5.5 0 0 0 0 1h1v1.011c-1.525.064-3.346.394-4.588.655C1.775 2.904 1 3.915 1 5.055V13.5A2.5 2.5 0 0 0 3.5 16h9a2.5 2.5 0 0 0 2.5-2.5V5.055c0-1.14-.775-2.15-1.912-2.39-1.242-.26-3.063-.59-4.588-.654V1h1a.5.5 0 0 0 0-1h-3ZM8 3c1.497 0 3.505.356 4.883.644.653.137 1.117.722 1.117 1.411V13.5a1.5 1.5 0 0 1-1.072 1.438 75.999 75.999 0 0 1-.1-.792c-.092-.761-.2-1.752-.266-2.682A21.26 21.26 0 0 1 12.5 10c0-1.051.143-2.404.278-3.435.024-.187.048-.362.07-.522.112-.798-.42-1.571-1.244-1.697C10.644 4.199 9.136 4 8 4c-1.136 0-2.645.2-3.604.346-.825.126-1.356.9-1.244 1.697.022.16.046.335.07.522C3.357 7.596 3.5 8.949 3.5 10c0 .428-.024.933-.062 1.464a57.32 57.32 0 0 1-.266 2.682c-.038.31-.072.58-.1.792A1.5 1.5 0 0 1 2 13.5V5.055c0-.69.464-1.274 1.117-1.41C4.495 3.354 6.503 3 8 3Zm3.835 11.266c.034.28.066.53.093.734H4.072a62.692 62.692 0 0 0 .328-3h2.246c.36 0 .704-.143.958-.396a.353.353 0 0 1 .25-.104h.292a.35.35 0 0 1 .25.104c.254.253.599.396.958.396H11.6c.068.808.158 1.621.236 2.266ZM6 13.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 0a.5.5 0 1 1 1 0 .5.5 0 0 1-1 0Zm3.5.5a.5.5 0 0 0 .5-.5.5.5 0 1 0 1 0 .5.5 0 0 0-1 0 .5.5 0 1 0-.5.5Zm-5.03-3c.019-.353.03-.692.03-1 0-.927-.104-2.051-.216-3h7.432c-.112.949-.216 2.073-.216 3 0 .308.011.647.03 1H9.354a.353.353 0 0 1-.25-.104 1.354 1.354 0 0 0-.958-.396h-.292c-.36 0-.704.143-.958.396a.353.353 0 0 1-.25.104H4.47Zm-.315-5-.013-.096a.497.497 0 0 1 .405-.57C5.505 5.188 6.947 5 8 5s2.495.188 3.453.334a.497.497 0 0 1 .405.57L11.845 6h-7.69Z"></path></svg>`), TrainLightrailFront[FILENAME], [[1, 0, [[1, 182]]]]);
function TrainLightrailFront($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TrainLightrailFront);
  var svg = root1914();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-train-lightrail-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrainLightrailFront = hmr(TrainLightrailFront, () => TrainLightrailFront[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrainLightrailFront[HMR].source;
    set(TrainLightrailFront[HMR].source, module.default[HMR].original);
  });
}
var TrainLightrailFront_default = TrainLightrailFront;
mark_module_end(TrainLightrailFront);

// node_modules/svelte-bootstrap-icons/lib/Translate.svelte
mark_module_start();
Translate[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Translate.svelte";
var root1915 = add_locations(ns_template(`<svg><!><path d="M4.545 6.714 4.11 8H3l1.862-5h1.284L8 8H6.833l-.435-1.286H4.545zm1.634-.736L5.5 3.956h-.049l-.679 2.022H6.18z"></path><path d="M0 2a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2v3h3a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-3H2a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2zm7.138 9.995c.193.301.402.583.63.846-.748.575-1.673 1.001-2.768 1.292.178.217.451.635.555.867 1.125-.359 2.08-.844 2.886-1.494.777.665 1.739 1.165 2.93 1.472.133-.254.414-.673.629-.89-1.125-.253-2.057-.694-2.82-1.284.681-.747 1.222-1.651 1.621-2.757H14V8h-3v1.047h.765c-.318.844-.74 1.546-1.272 2.13a6.066 6.066 0 0 1-.415-.492 1.988 1.988 0 0 1-.94.31z"></path></svg>`), Translate[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Translate($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Translate);
  var svg = root1915();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-translate", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Translate = hmr(Translate, () => Translate[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Translate[HMR].source;
    set(Translate[HMR].source, module.default[HMR].original);
  });
}
var Translate_default = Translate;
mark_module_end(Translate);

// node_modules/svelte-bootstrap-icons/lib/Transparency.svelte
mark_module_start();
Transparency[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Transparency.svelte";
var root1916 = add_locations(ns_template(`<svg><!><path d="M0 6.5a6.5 6.5 0 0 1 12.346-2.846 6.5 6.5 0 1 1-8.691 8.691A6.5 6.5 0 0 1 0 6.5Zm5.144 6.358a5.5 5.5 0 1 0 7.714-7.714 6.5 6.5 0 0 1-7.714 7.714Zm-.733-1.269c.363.15.746.261 1.144.33l-1.474-1.474c.069.398.18.78.33 1.144Zm2.614.386a5.47 5.47 0 0 0 1.173-.242L4.374 7.91a5.958 5.958 0 0 0-.296 1.118l2.947 2.947Zm2.157-.672c.297-.166.577-.36.838-.576L5.418 6.126a6.016 6.016 0 0 0-.587.826l4.35 4.351Zm1.545-1.284c.216-.26.41-.54.576-.837L6.953 4.83a5.97 5.97 0 0 0-.827.587l4.6 4.602Zm1.006-1.822c.121-.374.204-.766.242-1.172L9.028 4.078c-.386.063-.76.163-1.118.296l3.823 3.824Zm.186-2.642a5.463 5.463 0 0 0-.33-1.144 5.46 5.46 0 0 0-1.144-.33l1.474 1.474Z"></path></svg>`), Transparency[FILENAME], [[1, 0, [[1, 173]]]]);
function Transparency($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Transparency);
  var svg = root1916();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-transparency", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Transparency = hmr(Transparency, () => Transparency[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Transparency[HMR].source;
    set(Transparency[HMR].source, module.default[HMR].original);
  });
}
var Transparency_default = Transparency;
mark_module_end(Transparency);

// node_modules/svelte-bootstrap-icons/lib/TrashFill.svelte
mark_module_start();
TrashFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TrashFill.svelte";
var root1917 = add_locations(ns_template(`<svg><!><path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"></path></svg>`), TrashFill[FILENAME], [[1, 0, [[1, 171]]]]);
function TrashFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TrashFill);
  var svg = root1917();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-trash-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrashFill = hmr(TrashFill, () => TrashFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrashFill[HMR].source;
    set(TrashFill[HMR].source, module.default[HMR].original);
  });
}
var TrashFill_default = TrashFill;
mark_module_end(TrashFill);

// node_modules/svelte-bootstrap-icons/lib/Trash.svelte
mark_module_start();
Trash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Trash.svelte";
var root1918 = add_locations(ns_template(`<svg><!><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z"></path><path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z"></path></svg>`), Trash[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Trash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Trash);
  var svg = root1918();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-trash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trash = hmr(Trash, () => Trash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trash[HMR].source;
    set(Trash[HMR].source, module.default[HMR].original);
  });
}
var Trash_default = Trash;
mark_module_end(Trash);

// node_modules/svelte-bootstrap-icons/lib/Trash2Fill.svelte
mark_module_start();
Trash2Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Trash2Fill.svelte";
var root1919 = add_locations(ns_template(`<svg><!><path d="M2.037 3.225A.703.703 0 0 1 2 3c0-1.105 2.686-2 6-2s6 .895 6 2a.702.702 0 0 1-.037.225l-1.684 10.104A2 2 0 0 1 10.305 15H5.694a2 2 0 0 1-1.973-1.671L2.037 3.225zm9.89-.69C10.966 2.214 9.578 2 8 2c-1.58 0-2.968.215-3.926.534-.477.16-.795.327-.975.466.18.14.498.307.975.466C5.032 3.786 6.42 4 8 4s2.967-.215 3.926-.534c.477-.16.795-.327.975-.466-.18-.14-.498-.307-.975-.466z"></path></svg>`), Trash2Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Trash2Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Trash2Fill);
  var svg = root1919();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-trash2-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trash2Fill = hmr(Trash2Fill, () => Trash2Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trash2Fill[HMR].source;
    set(Trash2Fill[HMR].source, module.default[HMR].original);
  });
}
var Trash2Fill_default = Trash2Fill;
mark_module_end(Trash2Fill);

// node_modules/svelte-bootstrap-icons/lib/Trash2.svelte
mark_module_start();
Trash2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Trash2.svelte";
var root1920 = add_locations(ns_template(`<svg><!><path d="M14 3a.702.702 0 0 1-.037.225l-1.684 10.104A2 2 0 0 1 10.305 15H5.694a2 2 0 0 1-1.973-1.671L2.037 3.225A.703.703 0 0 1 2 3c0-1.105 2.686-2 6-2s6 .895 6 2zM3.215 4.207l1.493 8.957a1 1 0 0 0 .986.836h4.612a1 1 0 0 0 .986-.836l1.493-8.957C11.69 4.689 9.954 5 8 5c-1.954 0-3.69-.311-4.785-.793z"></path></svg>`), Trash2[FILENAME], [[1, 0, [[1, 167]]]]);
function Trash2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Trash2);
  var svg = root1920();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-trash2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trash2 = hmr(Trash2, () => Trash2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trash2[HMR].source;
    set(Trash2[HMR].source, module.default[HMR].original);
  });
}
var Trash2_default = Trash2;
mark_module_end(Trash2);

// node_modules/svelte-bootstrap-icons/lib/Trash3Fill.svelte
mark_module_start();
Trash3Fill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Trash3Fill.svelte";
var root1921 = add_locations(ns_template(`<svg><!><path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5Zm-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5ZM4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06Zm6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528ZM8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5Z"></path></svg>`), Trash3Fill[FILENAME], [[1, 0, [[1, 172]]]]);
function Trash3Fill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Trash3Fill);
  var svg = root1921();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-trash3-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trash3Fill = hmr(Trash3Fill, () => Trash3Fill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trash3Fill[HMR].source;
    set(Trash3Fill[HMR].source, module.default[HMR].original);
  });
}
var Trash3Fill_default = Trash3Fill;
mark_module_end(Trash3Fill);

// node_modules/svelte-bootstrap-icons/lib/Trash3.svelte
mark_module_start();
Trash3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Trash3.svelte";
var root1922 = add_locations(ns_template(`<svg><!><path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z"></path></svg>`), Trash3[FILENAME], [[1, 0, [[1, 167]]]]);
function Trash3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Trash3);
  var svg = root1922();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-trash3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trash3 = hmr(Trash3, () => Trash3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trash3[HMR].source;
    set(Trash3[HMR].source, module.default[HMR].original);
  });
}
var Trash3_default = Trash3;
mark_module_end(Trash3);

// node_modules/svelte-bootstrap-icons/lib/TreeFill.svelte
mark_module_start();
TreeFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TreeFill.svelte";
var root1923 = add_locations(ns_template(`<svg><!><path d="M8.416.223a.5.5 0 0 0-.832 0l-3 4.5A.5.5 0 0 0 5 5.5h.098L3.076 8.735A.5.5 0 0 0 3.5 9.5h.191l-1.638 3.276a.5.5 0 0 0 .447.724H7V16h2v-2.5h4.5a.5.5 0 0 0 .447-.724L12.31 9.5h.191a.5.5 0 0 0 .424-.765L10.902 5.5H11a.5.5 0 0 0 .416-.777l-3-4.5z"></path></svg>`), TreeFill[FILENAME], [[1, 0, [[1, 170]]]]);
function TreeFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TreeFill);
  var svg = root1923();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tree-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TreeFill = hmr(TreeFill, () => TreeFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TreeFill[HMR].source;
    set(TreeFill[HMR].source, module.default[HMR].original);
  });
}
var TreeFill_default = TreeFill;
mark_module_end(TreeFill);

// node_modules/svelte-bootstrap-icons/lib/Tree.svelte
mark_module_start();
Tree[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Tree.svelte";
var root1924 = add_locations(ns_template(`<svg><!><path d="M8.416.223a.5.5 0 0 0-.832 0l-3 4.5A.5.5 0 0 0 5 5.5h.098L3.076 8.735A.5.5 0 0 0 3.5 9.5h.191l-1.638 3.276a.5.5 0 0 0 .447.724H7V16h2v-2.5h4.5a.5.5 0 0 0 .447-.724L12.31 9.5h.191a.5.5 0 0 0 .424-.765L10.902 5.5H11a.5.5 0 0 0 .416-.777l-3-4.5zM6.437 4.758A.5.5 0 0 0 6 4.5h-.066L8 1.401 10.066 4.5H10a.5.5 0 0 0-.424.765L11.598 8.5H11.5a.5.5 0 0 0-.447.724L12.69 12.5H3.309l1.638-3.276A.5.5 0 0 0 4.5 8.5h-.098l2.022-3.235a.5.5 0 0 0 .013-.507z"></path></svg>`), Tree[FILENAME], [[1, 0, [[1, 165]]]]);
function Tree($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Tree);
  var svg = root1924();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tree", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tree = hmr(Tree, () => Tree[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tree[HMR].source;
    set(Tree[HMR].source, module.default[HMR].original);
  });
}
var Tree_default = Tree;
mark_module_end(Tree);

// node_modules/svelte-bootstrap-icons/lib/Trello.svelte
mark_module_start();
Trello[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Trello.svelte";
var root1925 = add_locations(ns_template(`<svg><!><path d="M14.1 0H1.903C.852 0 .002.85 0 1.9v12.19A1.902 1.902 0 0 0 1.902 16h12.199A1.902 1.902 0 0 0 16 14.09V1.9A1.902 1.902 0 0 0 14.1 0ZM7 11.367a.636.636 0 0 1-.64.633H3.593a.633.633 0 0 1-.63-.633V3.583c0-.348.281-.631.63-.633h2.765c.35.002.632.284.633.633L7 11.367Zm6.052-3.5a.633.633 0 0 1-.64.633h-2.78A.636.636 0 0 1 9 7.867V3.583a.636.636 0 0 1 .633-.633h2.778c.35.002.631.285.631.633l.01 4.284Z"></path></svg>`), Trello[FILENAME], [[1, 0, [[1, 167]]]]);
function Trello($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Trello);
  var svg = root1925();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-trello", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trello = hmr(Trello, () => Trello[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trello[HMR].source;
    set(Trello[HMR].source, module.default[HMR].original);
  });
}
var Trello_default = Trello;
mark_module_end(Trello);

// node_modules/svelte-bootstrap-icons/lib/TriangleFill.svelte
mark_module_start();
TriangleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TriangleFill.svelte";
var root1926 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M7.022 1.566a1.13 1.13 0 0 1 1.96 0l6.857 11.667c.457.778-.092 1.767-.98 1.767H1.144c-.889 0-1.437-.99-.98-1.767L7.022 1.566z"></path></svg>`), TriangleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function TriangleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TriangleFill);
  var svg = root1926();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-triangle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TriangleFill = hmr(TriangleFill, () => TriangleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TriangleFill[HMR].source;
    set(TriangleFill[HMR].source, module.default[HMR].original);
  });
}
var TriangleFill_default = TriangleFill;
mark_module_end(TriangleFill);

// node_modules/svelte-bootstrap-icons/lib/TriangleHalf.svelte
mark_module_start();
TriangleHalf[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TriangleHalf.svelte";
var root1927 = add_locations(ns_template(`<svg><!><path d="M8.065 2.016A.13.13 0 0 0 8.002 2v11.983l6.856.017a.12.12 0 0 0 .066-.017.162.162 0 0 0 .054-.06.176.176 0 0 0-.002-.183L8.12 2.073a.146.146 0 0 0-.054-.057zm-1.043-.45a1.13 1.13 0 0 1 1.96 0l6.856 11.667c.458.778-.091 1.767-.98 1.767H1.146c-.889 0-1.437-.99-.98-1.767L7.022 1.566z"></path></svg>`), TriangleHalf[FILENAME], [[1, 0, [[1, 174]]]]);
function TriangleHalf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TriangleHalf);
  var svg = root1927();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-triangle-half", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TriangleHalf = hmr(TriangleHalf, () => TriangleHalf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TriangleHalf[HMR].source;
    set(TriangleHalf[HMR].source, module.default[HMR].original);
  });
}
var TriangleHalf_default = TriangleHalf;
mark_module_end(TriangleHalf);

// node_modules/svelte-bootstrap-icons/lib/Triangle.svelte
mark_module_start();
Triangle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Triangle.svelte";
var root1928 = add_locations(ns_template(`<svg><!><path d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.06.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z"></path></svg>`), Triangle[FILENAME], [[1, 0, [[1, 169]]]]);
function Triangle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Triangle);
  var svg = root1928();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-triangle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Triangle = hmr(Triangle, () => Triangle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Triangle[HMR].source;
    set(Triangle[HMR].source, module.default[HMR].original);
  });
}
var Triangle_default = Triangle;
mark_module_end(Triangle);

// node_modules/svelte-bootstrap-icons/lib/TrophyFill.svelte
mark_module_start();
TrophyFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TrophyFill.svelte";
var root1929 = add_locations(ns_template(`<svg><!><path d="M2.5.5A.5.5 0 0 1 3 0h10a.5.5 0 0 1 .5.5c0 .538-.012 1.05-.034 1.536a3 3 0 1 1-1.133 5.89c-.79 1.865-1.878 2.777-2.833 3.011v2.173l1.425.356c.194.048.377.135.537.255L13.3 15.1a.5.5 0 0 1-.3.9H3a.5.5 0 0 1-.3-.9l1.838-1.379c.16-.12.343-.207.537-.255L6.5 13.11v-2.173c-.955-.234-2.043-1.146-2.833-3.012a3 3 0 1 1-1.132-5.89A33.076 33.076 0 0 1 2.5.5zm.099 2.54a2 2 0 0 0 .72 3.935c-.333-1.05-.588-2.346-.72-3.935zm10.083 3.935a2 2 0 0 0 .72-3.935c-.133 1.59-.388 2.885-.72 3.935z"></path></svg>`), TrophyFill[FILENAME], [[1, 0, [[1, 172]]]]);
function TrophyFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TrophyFill);
  var svg = root1929();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-trophy-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrophyFill = hmr(TrophyFill, () => TrophyFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrophyFill[HMR].source;
    set(TrophyFill[HMR].source, module.default[HMR].original);
  });
}
var TrophyFill_default = TrophyFill;
mark_module_end(TrophyFill);

// node_modules/svelte-bootstrap-icons/lib/Trophy.svelte
mark_module_start();
Trophy[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Trophy.svelte";
var root1930 = add_locations(ns_template(`<svg><!><path d="M2.5.5A.5.5 0 0 1 3 0h10a.5.5 0 0 1 .5.5c0 .538-.012 1.05-.034 1.536a3 3 0 1 1-1.133 5.89c-.79 1.865-1.878 2.777-2.833 3.011v2.173l1.425.356c.194.048.377.135.537.255L13.3 15.1a.5.5 0 0 1-.3.9H3a.5.5 0 0 1-.3-.9l1.838-1.379c.16-.12.343-.207.537-.255L6.5 13.11v-2.173c-.955-.234-2.043-1.146-2.833-3.012a3 3 0 1 1-1.132-5.89A33.076 33.076 0 0 1 2.5.5zm.099 2.54a2 2 0 0 0 .72 3.935c-.333-1.05-.588-2.346-.72-3.935zm10.083 3.935a2 2 0 0 0 .72-3.935c-.133 1.59-.388 2.885-.72 3.935zM3.504 1c.007.517.026 1.006.056 1.469.13 2.028.457 3.546.87 4.667C5.294 9.48 6.484 10 7 10a.5.5 0 0 1 .5.5v2.61a1 1 0 0 1-.757.97l-1.426.356a.5.5 0 0 0-.179.085L4.5 15h7l-.638-.479a.501.501 0 0 0-.18-.085l-1.425-.356a1 1 0 0 1-.757-.97V10.5A.5.5 0 0 1 9 10c.516 0 1.706-.52 2.57-2.864.413-1.12.74-2.64.87-4.667.03-.463.049-.952.056-1.469H3.504z"></path></svg>`), Trophy[FILENAME], [[1, 0, [[1, 167]]]]);
function Trophy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Trophy);
  var svg = root1930();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-trophy", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trophy = hmr(Trophy, () => Trophy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trophy[HMR].source;
    set(Trophy[HMR].source, module.default[HMR].original);
  });
}
var Trophy_default = Trophy;
mark_module_end(Trophy);

// node_modules/svelte-bootstrap-icons/lib/TropicalStorm.svelte
mark_module_start();
TropicalStorm[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TropicalStorm.svelte";
var root1931 = add_locations(ns_template(`<svg><!><path d="M8 9.5a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"></path><path d="M9.5 2c-.9 0-1.75.216-2.501.6A5 5 0 0 1 13 7.5a6.5 6.5 0 1 1-13 0 .5.5 0 0 1 1 0 5.5 5.5 0 0 0 8.001 4.9A5 5 0 0 1 3 7.5a6.5 6.5 0 0 1 13 0 .5.5 0 0 1-1 0A5.5 5.5 0 0 0 9.5 2zM8 3.5a4 4 0 1 0 0 8 4 4 0 0 0 0-8z"></path></svg>`), TropicalStorm[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function TropicalStorm($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TropicalStorm);
  var svg = root1931();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tropical-storm", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TropicalStorm = hmr(TropicalStorm, () => TropicalStorm[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TropicalStorm[HMR].source;
    set(TropicalStorm[HMR].source, module.default[HMR].original);
  });
}
var TropicalStorm_default = TropicalStorm;
mark_module_end(TropicalStorm);

// node_modules/svelte-bootstrap-icons/lib/TruckFlatbed.svelte
mark_module_start();
TruckFlatbed[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TruckFlatbed.svelte";
var root1932 = add_locations(ns_template(`<svg><!><path d="M11.5 4a.5.5 0 0 1 .5.5V5h1.02a1.5 1.5 0 0 1 1.17.563l1.481 1.85a1.5 1.5 0 0 1 .329.938V10.5a1.5 1.5 0 0 1-1.5 1.5H14a2 2 0 1 1-4 0H5a2 2 0 1 1-4 0 1 1 0 0 1-1-1v-1h11V4.5a.5.5 0 0 1 .5-.5zM3 11a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm9 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm1.732 0h.768a.5.5 0 0 0 .5-.5V8.35a.5.5 0 0 0-.11-.312l-1.48-1.85A.5.5 0 0 0 13.02 6H12v4a2 2 0 0 1 1.732 1z"></path></svg>`), TruckFlatbed[FILENAME], [[1, 0, [[1, 174]]]]);
function TruckFlatbed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TruckFlatbed);
  var svg = root1932();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-truck-flatbed", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TruckFlatbed = hmr(TruckFlatbed, () => TruckFlatbed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TruckFlatbed[HMR].source;
    set(TruckFlatbed[HMR].source, module.default[HMR].original);
  });
}
var TruckFlatbed_default = TruckFlatbed;
mark_module_end(TruckFlatbed);

// node_modules/svelte-bootstrap-icons/lib/TruckFrontFill.svelte
mark_module_start();
TruckFrontFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TruckFrontFill.svelte";
var root1933 = add_locations(ns_template(`<svg><!><path d="M3.5 0A2.5 2.5 0 0 0 1 2.5v9c0 .818.393 1.544 1 2v2a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5V14h6v1.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-2c.607-.456 1-1.182 1-2v-9A2.5 2.5 0 0 0 12.5 0h-9ZM3 3a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v3.9c0 .625-.562 1.092-1.17.994C10.925 7.747 9.208 7.5 8 7.5c-1.208 0-2.925.247-3.83.394A1.008 1.008 0 0 1 3 6.9V3Zm1 9a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm-5-2h2a1 1 0 1 1 0 2H7a1 1 0 1 1 0-2Z"></path></svg>`), TruckFrontFill[FILENAME], [[1, 0, [[1, 177]]]]);
function TruckFrontFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TruckFrontFill);
  var svg = root1933();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-truck-front-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TruckFrontFill = hmr(TruckFrontFill, () => TruckFrontFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TruckFrontFill[HMR].source;
    set(TruckFrontFill[HMR].source, module.default[HMR].original);
  });
}
var TruckFrontFill_default = TruckFrontFill;
mark_module_end(TruckFrontFill);

// node_modules/svelte-bootstrap-icons/lib/TruckFront.svelte
mark_module_start();
TruckFront[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TruckFront.svelte";
var root1934 = add_locations(ns_template(`<svg><!><path d="M5 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm8 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-6-1a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H7ZM4 2a1 1 0 0 0-1 1v3.9c0 .625.562 1.092 1.17.994C5.075 7.747 6.792 7.5 8 7.5c1.208 0 2.925.247 3.83.394A1.008 1.008 0 0 0 13 6.9V3a1 1 0 0 0-1-1H4Zm0 1h8v3.9c0 .002 0 .001 0 0l-.002.004a.013.013 0 0 1-.005.002h-.004C11.088 6.761 9.299 6.5 8 6.5s-3.088.26-3.99.406h-.003a.013.013 0 0 1-.005-.002L4 6.9c0 .001 0 .002 0 0V3Z"></path><path d="M1 2.5A2.5 2.5 0 0 1 3.5 0h9A2.5 2.5 0 0 1 15 2.5v9c0 .818-.393 1.544-1 2v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5V14H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2a2.496 2.496 0 0 1-1-2v-9ZM3.5 1A1.5 1.5 0 0 0 2 2.5v9A1.5 1.5 0 0 0 3.5 13h9a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 12.5 1h-9Z"></path></svg>`), TruckFront[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function TruckFront($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TruckFront);
  var svg = root1934();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-truck-front", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TruckFront = hmr(TruckFront, () => TruckFront[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TruckFront[HMR].source;
    set(TruckFront[HMR].source, module.default[HMR].original);
  });
}
var TruckFront_default = TruckFront;
mark_module_end(TruckFront);

// node_modules/svelte-bootstrap-icons/lib/Truck.svelte
mark_module_start();
Truck[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Truck.svelte";
var root1935 = add_locations(ns_template(`<svg><!><path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h9A1.5 1.5 0 0 1 12 3.5V5h1.02a1.5 1.5 0 0 1 1.17.563l1.481 1.85a1.5 1.5 0 0 1 .329.938V10.5a1.5 1.5 0 0 1-1.5 1.5H14a2 2 0 1 1-4 0H5a2 2 0 1 1-3.998-.085A1.5 1.5 0 0 1 0 10.5v-7zm1.294 7.456A1.999 1.999 0 0 1 4.732 11h5.536a2.01 2.01 0 0 1 .732-.732V3.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .294.456zM12 10a2 2 0 0 1 1.732 1h.768a.5.5 0 0 0 .5-.5V8.35a.5.5 0 0 0-.11-.312l-1.48-1.85A.5.5 0 0 0 13.02 6H12v4zm-9 1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm9 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"></path></svg>`), Truck[FILENAME], [[1, 0, [[1, 166]]]]);
function Truck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Truck);
  var svg = root1935();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-truck", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Truck = hmr(Truck, () => Truck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Truck[HMR].source;
    set(Truck[HMR].source, module.default[HMR].original);
  });
}
var Truck_default = Truck;
mark_module_end(Truck);

// node_modules/svelte-bootstrap-icons/lib/Tsunami.svelte
mark_module_start();
Tsunami[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Tsunami.svelte";
var root1936 = add_locations(ns_template(`<svg><!><path d="M.036 12.314a.5.5 0 0 1 .65-.278l1.757.703a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.757-.703a.5.5 0 1 1 .372.928l-1.758.703a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0l-1.757-.703a.5.5 0 0 1-.278-.65zm0 2a.5.5 0 0 1 .65-.278l1.757.703a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.757-.703a.5.5 0 1 1 .372.928l-1.758.703a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0l-1.757-.703a.5.5 0 0 1-.278-.65zM2.662 8.08c-.456 1.063-.994 2.098-1.842 2.804a.5.5 0 0 1-.64-.768c.652-.544 1.114-1.384 1.564-2.43.14-.328.281-.68.427-1.044.302-.754.624-1.559 1.01-2.308C3.763 3.2 4.528 2.105 5.7 1.299 6.877.49 8.418 0 10.5 0c1.463 0 2.511.4 3.179 1.058.67.66.893 1.518.819 2.302-.074.771-.441 1.516-1.02 1.965a1.878 1.878 0 0 1-1.904.27c-.65.642-.907 1.679-.71 2.614C11.076 9.215 11.784 10 13 10h2.5a.5.5 0 0 1 0 1H13c-1.784 0-2.826-1.215-3.114-2.585-.232-1.1.005-2.373.758-3.284L10.5 5.06l-.777.388a.5.5 0 0 1-.447 0l-1-.5a.5.5 0 0 1 .447-.894l.777.388.776-.388a.5.5 0 0 1 .447 0l1 .5a.493.493 0 0 1 .034.018c.44.264.81.195 1.108-.036.328-.255.586-.729.637-1.27.05-.529-.1-1.076-.525-1.495-.426-.42-1.19-.77-2.477-.77-1.918 0-3.252.448-4.232 1.123C5.283 2.8 4.61 3.738 4.07 4.79c-.365.71-.655 1.433-.945 2.16-.15.376-.301.753-.463 1.13z"></path></svg>`), Tsunami[FILENAME], [[1, 0, [[1, 168]]]]);
function Tsunami($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Tsunami);
  var svg = root1936();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tsunami", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tsunami = hmr(Tsunami, () => Tsunami[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tsunami[HMR].source;
    set(Tsunami[HMR].source, module.default[HMR].original);
  });
}
var Tsunami_default = Tsunami;
mark_module_end(Tsunami);

// node_modules/svelte-bootstrap-icons/lib/TvFill.svelte
mark_module_start();
TvFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TvFill.svelte";
var root1937 = add_locations(ns_template(`<svg><!><path d="M2.5 13.5A.5.5 0 0 1 3 13h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zM2 2h12s2 0 2 2v6s0 2-2 2H2s-2 0-2-2V4s0-2 2-2z"></path></svg>`), TvFill[FILENAME], [[1, 0, [[1, 168]]]]);
function TvFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TvFill);
  var svg = root1937();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tv-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TvFill = hmr(TvFill, () => TvFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TvFill[HMR].source;
    set(TvFill[HMR].source, module.default[HMR].original);
  });
}
var TvFill_default = TvFill;
mark_module_end(TvFill);

// node_modules/svelte-bootstrap-icons/lib/Tv.svelte
mark_module_start();
Tv[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Tv.svelte";
var root1938 = add_locations(ns_template(`<svg><!><path d="M2.5 13.5A.5.5 0 0 1 3 13h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zM13.991 3l.024.001a1.46 1.46 0 0 1 .538.143.757.757 0 0 1 .302.254c.067.1.145.277.145.602v5.991l-.001.024a1.464 1.464 0 0 1-.143.538.758.758 0 0 1-.254.302c-.1.067-.277.145-.602.145H2.009l-.024-.001a1.464 1.464 0 0 1-.538-.143.758.758 0 0 1-.302-.254C1.078 10.502 1 10.325 1 10V4.009l.001-.024a1.46 1.46 0 0 1 .143-.538.758.758 0 0 1 .254-.302C1.498 3.078 1.675 3 2 3h11.991zM14 2H2C0 2 0 4 0 4v6c0 2 2 2 2 2h12c2 0 2-2 2-2V4c0-2-2-2-2-2z"></path></svg>`), Tv[FILENAME], [[1, 0, [[1, 163]]]]);
function Tv($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Tv);
  var svg = root1938();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-tv", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tv = hmr(Tv, () => Tv[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tv[HMR].source;
    set(Tv[HMR].source, module.default[HMR].original);
  });
}
var Tv_default = Tv;
mark_module_end(Tv);

// node_modules/svelte-bootstrap-icons/lib/Twitch.svelte
mark_module_start();
Twitch[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Twitch.svelte";
var root1939 = add_locations(ns_template(`<svg><!><path d="M3.857 0 1 2.857v10.286h3.429V16l2.857-2.857H9.57L14.714 8V0H3.857zm9.714 7.429-2.285 2.285H9l-2 2v-2H4.429V1.143h9.142v6.286z"></path><path d="M11.857 3.143h-1.143V6.57h1.143V3.143zm-3.143 0H7.571V6.57h1.143V3.143z"></path></svg>`), Twitch[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Twitch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Twitch);
  var svg = root1939();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-twitch", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Twitch = hmr(Twitch, () => Twitch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Twitch[HMR].source;
    set(Twitch[HMR].source, module.default[HMR].original);
  });
}
var Twitch_default = Twitch;
mark_module_end(Twitch);

// node_modules/svelte-bootstrap-icons/lib/TwitterX.svelte
mark_module_start();
TwitterX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TwitterX.svelte";
var root1940 = add_locations(ns_template(`<svg><!><path d="M12.6.75h2.454l-5.36 6.142L16 15.25h-4.937l-3.867-5.07-4.425 5.07H.316l5.733-6.57L0 .75h5.063l3.495 4.633L12.601.75Zm-.86 13.028h1.36L4.323 2.145H2.865l8.875 11.633Z"></path></svg>`), TwitterX[FILENAME], [[1, 0, [[1, 170]]]]);
function TwitterX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TwitterX);
  var svg = root1940();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-twitter-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TwitterX = hmr(TwitterX, () => TwitterX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TwitterX[HMR].source;
    set(TwitterX[HMR].source, module.default[HMR].original);
  });
}
var TwitterX_default = TwitterX;
mark_module_end(TwitterX);

// node_modules/svelte-bootstrap-icons/lib/Twitter.svelte
mark_module_start();
Twitter[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Twitter.svelte";
var root1941 = add_locations(ns_template(`<svg><!><path d="M5.026 15c6.038 0 9.341-5.003 9.341-9.334 0-.14 0-.282-.006-.422A6.685 6.685 0 0 0 16 3.542a6.658 6.658 0 0 1-1.889.518 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.087.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382A3.323 3.323 0 0 1 .64 6.575v.045a3.288 3.288 0 0 0 2.632 3.218 3.203 3.203 0 0 1-.865.115 3.23 3.23 0 0 1-.614-.057 3.283 3.283 0 0 0 3.067 2.277A6.588 6.588 0 0 1 .78 13.58a6.32 6.32 0 0 1-.78-.045A9.344 9.344 0 0 0 5.026 15z"></path></svg>`), Twitter[FILENAME], [[1, 0, [[1, 168]]]]);
function Twitter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Twitter);
  var svg = root1941();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-twitter", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Twitter = hmr(Twitter, () => Twitter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Twitter[HMR].source;
    set(Twitter[HMR].source, module.default[HMR].original);
  });
}
var Twitter_default = Twitter;
mark_module_end(Twitter);

// node_modules/svelte-bootstrap-icons/lib/TypeBold.svelte
mark_module_start();
TypeBold[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeBold.svelte";
var root1942 = add_locations(ns_template(`<svg><!><path d="M8.21 13c2.106 0 3.412-1.087 3.412-2.823 0-1.306-.984-2.283-2.324-2.386v-.055a2.176 2.176 0 0 0 1.852-2.14c0-1.51-1.162-2.46-3.014-2.46H3.843V13H8.21zM5.908 4.674h1.696c.963 0 1.517.451 1.517 1.244 0 .834-.629 1.32-1.73 1.32H5.908V4.673zm0 6.788V8.598h1.73c1.217 0 1.88.492 1.88 1.415 0 .943-.643 1.449-1.832 1.449H5.907z"></path></svg>`), TypeBold[FILENAME], [[1, 0, [[1, 170]]]]);
function TypeBold($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeBold);
  var svg = root1942();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-bold", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeBold = hmr(TypeBold, () => TypeBold[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeBold[HMR].source;
    set(TypeBold[HMR].source, module.default[HMR].original);
  });
}
var TypeBold_default = TypeBold;
mark_module_end(TypeBold);

// node_modules/svelte-bootstrap-icons/lib/TypeH1.svelte
mark_module_start();
TypeH1[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeH1.svelte";
var root1943 = add_locations(ns_template(`<svg><!><path d="M7.648 13V3H6.3v4.234H1.348V3H0v10h1.348V8.421H6.3V13h1.348ZM14 13V3h-1.333l-2.381 1.766V6.12L12.6 4.443h.066V13H14Z"></path></svg>`), TypeH1[FILENAME], [[1, 0, [[1, 168]]]]);
function TypeH1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeH1);
  var svg = root1943();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-h1", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeH1 = hmr(TypeH1, () => TypeH1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeH1[HMR].source;
    set(TypeH1[HMR].source, module.default[HMR].original);
  });
}
var TypeH1_default = TypeH1;
mark_module_end(TypeH1);

// node_modules/svelte-bootstrap-icons/lib/TypeH2.svelte
mark_module_start();
TypeH2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeH2.svelte";
var root1944 = add_locations(ns_template(`<svg><!><path d="M7.495 13V3.201H6.174v4.15H1.32V3.2H0V13h1.32V8.513h4.854V13h1.32Zm3.174-7.071v-.05c0-.934.66-1.752 1.801-1.752 1.005 0 1.76.639 1.76 1.651 0 .898-.582 1.58-1.12 2.19l-3.69 4.2V13h6.331v-1.149h-4.458v-.079L13.9 8.786c.919-1.048 1.666-1.874 1.666-3.101C15.565 4.149 14.35 3 12.499 3 10.46 3 9.384 4.393 9.384 5.879v.05h1.285Z"></path></svg>`), TypeH2[FILENAME], [[1, 0, [[1, 168]]]]);
function TypeH2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeH2);
  var svg = root1944();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-h2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeH2 = hmr(TypeH2, () => TypeH2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeH2[HMR].source;
    set(TypeH2[HMR].source, module.default[HMR].original);
  });
}
var TypeH2_default = TypeH2;
mark_module_end(TypeH2);

// node_modules/svelte-bootstrap-icons/lib/TypeH3.svelte
mark_module_start();
TypeH3[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeH3.svelte";
var root1945 = add_locations(ns_template(`<svg><!><path d="M11.07 8.4h1.049c1.174 0 1.99.69 2.004 1.724.014 1.034-.802 1.786-2.068 1.779-1.11-.007-1.905-.605-1.99-1.357h-1.21C8.926 11.91 10.116 13 12.028 13c1.99 0 3.439-1.188 3.404-2.87-.028-1.553-1.287-2.221-2.096-2.313v-.07c.724-.127 1.814-.935 1.772-2.293-.035-1.392-1.21-2.468-3.038-2.454-1.927.007-2.94 1.196-2.981 2.426h1.23c.064-.71.732-1.336 1.744-1.336 1.027 0 1.744.64 1.744 1.568.007.95-.738 1.639-1.744 1.639h-.991V8.4ZM7.495 13V3.201H6.174v4.15H1.32V3.2H0V13h1.32V8.513h4.854V13h1.32Z"></path></svg>`), TypeH3[FILENAME], [[1, 0, [[1, 168]]]]);
function TypeH3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeH3);
  var svg = root1945();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-h3", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeH3 = hmr(TypeH3, () => TypeH3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeH3[HMR].source;
    set(TypeH3[HMR].source, module.default[HMR].original);
  });
}
var TypeH3_default = TypeH3;
mark_module_end(TypeH3);

// node_modules/svelte-bootstrap-icons/lib/TypeH4.svelte
mark_module_start();
TypeH4[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeH4.svelte";
var root1946 = add_locations(ns_template(`<svg><!><path d="M13.007 3H15v10h-1.29v-2.051H8.854v-1.18C10.1 7.513 11.586 5.256 13.007 3Zm-2.82 6.777h3.524v-5.62h-.074a95.078 95.078 0 0 0-3.45 5.554v.066ZM7.495 13V3.201H6.174v4.15H1.32V3.2H0V13h1.32V8.513h4.854V13h1.32Z"></path></svg>`), TypeH4[FILENAME], [[1, 0, [[1, 168]]]]);
function TypeH4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeH4);
  var svg = root1946();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-h4", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeH4 = hmr(TypeH4, () => TypeH4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeH4[HMR].source;
    set(TypeH4[HMR].source, module.default[HMR].original);
  });
}
var TypeH4_default = TypeH4;
mark_module_end(TypeH4);

// node_modules/svelte-bootstrap-icons/lib/TypeH5.svelte
mark_module_start();
TypeH5[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeH5.svelte";
var root1947 = add_locations(ns_template(`<svg><!><path d="M9 10.516h1.264c.193.976 1.112 1.364 2.01 1.364 1.005 0 2.067-.782 2.067-2.247 0-1.292-.983-2.082-2.089-2.082-1.012 0-1.658.596-1.924 1.077h-1.12L9.646 3h5.535v1.141h-4.415L10.5 7.28h.072c.201-.316.883-.84 1.967-.84 1.709 0 3.13 1.177 3.13 3.158 0 2.025-1.407 3.403-3.475 3.403-1.809 0-3.1-1.048-3.194-2.484ZM7.495 13V3.201H6.174v4.15H1.32V3.2H0V13h1.32V8.512h4.854V13h1.32Z"></path></svg>`), TypeH5[FILENAME], [[1, 0, [[1, 168]]]]);
function TypeH5($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeH5);
  var svg = root1947();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-h5", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeH5 = hmr(TypeH5, () => TypeH5[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeH5[HMR].source;
    set(TypeH5[HMR].source, module.default[HMR].original);
  });
}
var TypeH5_default = TypeH5;
mark_module_end(TypeH5);

// node_modules/svelte-bootstrap-icons/lib/TypeH6.svelte
mark_module_start();
TypeH6[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeH6.svelte";
var root1948 = add_locations(ns_template(`<svg><!><path d="M15.596 5.178H14.3c-.106-.444-.62-1.072-1.706-1.072-1.332 0-2.325 1.269-2.325 3.947h.07c.268-.67 1.043-1.445 2.445-1.445 1.494 0 3.017 1.064 3.017 3.073C15.8 11.795 14.37 13 12.48 13c-1.036 0-2.093-.36-2.77-1.452C9.276 10.836 9 9.808 9 8.37 9 4.656 10.494 3 12.636 3c1.812 0 2.883 1.113 2.96 2.178Zm-5.151 4.566c0 1.367.944 2.15 2.043 2.15 1.128 0 2.037-.684 2.037-2.136 0-1.41-1-2.065-2.03-2.065-1.19 0-2.05.853-2.05 2.051ZM7.495 13V3.201H6.174v4.15H1.32V3.2H0V13h1.32V8.513h4.854V13h1.32Z"></path></svg>`), TypeH6[FILENAME], [[1, 0, [[1, 168]]]]);
function TypeH6($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeH6);
  var svg = root1948();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-h6", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeH6 = hmr(TypeH6, () => TypeH6[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeH6[HMR].source;
    set(TypeH6[HMR].source, module.default[HMR].original);
  });
}
var TypeH6_default = TypeH6;
mark_module_end(TypeH6);

// node_modules/svelte-bootstrap-icons/lib/TypeItalic.svelte
mark_module_start();
TypeItalic[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeItalic.svelte";
var root1949 = add_locations(ns_template(`<svg><!><path d="M7.991 11.674 9.53 4.455c.123-.595.246-.71 1.347-.807l.11-.52H7.211l-.11.52c1.06.096 1.128.212 1.005.807L6.57 11.674c-.123.595-.246.71-1.346.806l-.11.52h3.774l.11-.52c-1.06-.095-1.129-.211-1.006-.806z"></path></svg>`), TypeItalic[FILENAME], [[1, 0, [[1, 172]]]]);
function TypeItalic($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeItalic);
  var svg = root1949();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-italic", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeItalic = hmr(TypeItalic, () => TypeItalic[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeItalic[HMR].source;
    set(TypeItalic[HMR].source, module.default[HMR].original);
  });
}
var TypeItalic_default = TypeItalic;
mark_module_end(TypeItalic);

// node_modules/svelte-bootstrap-icons/lib/TypeStrikethrough.svelte
mark_module_start();
TypeStrikethrough[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeStrikethrough.svelte";
var root1950 = add_locations(ns_template(`<svg><!><path d="M6.333 5.686c0 .31.083.581.27.814H5.166a2.776 2.776 0 0 1-.099-.76c0-1.627 1.436-2.768 3.48-2.768 1.969 0 3.39 1.175 3.445 2.85h-1.23c-.11-1.08-.964-1.743-2.25-1.743-1.23 0-2.18.602-2.18 1.607zm2.194 7.478c-2.153 0-3.589-1.107-3.705-2.81h1.23c.144 1.06 1.129 1.703 2.544 1.703 1.34 0 2.31-.705 2.31-1.675 0-.827-.547-1.374-1.914-1.675L8.046 8.5H1v-1h14v1h-3.504c.468.437.675.994.675 1.697 0 1.826-1.436 2.967-3.644 2.967z"></path></svg>`), TypeStrikethrough[FILENAME], [[1, 0, [[1, 179]]]]);
function TypeStrikethrough($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeStrikethrough);
  var svg = root1950();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-strikethrough", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeStrikethrough = hmr(TypeStrikethrough, () => TypeStrikethrough[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeStrikethrough[HMR].source;
    set(TypeStrikethrough[HMR].source, module.default[HMR].original);
  });
}
var TypeStrikethrough_default = TypeStrikethrough;
mark_module_end(TypeStrikethrough);

// node_modules/svelte-bootstrap-icons/lib/TypeUnderline.svelte
mark_module_start();
TypeUnderline[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/TypeUnderline.svelte";
var root1951 = add_locations(ns_template(`<svg><!><path d="M5.313 3.136h-1.23V9.54c0 2.105 1.47 3.623 3.917 3.623s3.917-1.518 3.917-3.623V3.136h-1.23v6.323c0 1.49-.978 2.57-2.687 2.57-1.709 0-2.687-1.08-2.687-2.57V3.136zM12.5 15h-9v-1h9v1z"></path></svg>`), TypeUnderline[FILENAME], [[1, 0, [[1, 175]]]]);
function TypeUnderline($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TypeUnderline);
  var svg = root1951();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type-underline", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeUnderline = hmr(TypeUnderline, () => TypeUnderline[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeUnderline[HMR].source;
    set(TypeUnderline[HMR].source, module.default[HMR].original);
  });
}
var TypeUnderline_default = TypeUnderline;
mark_module_end(TypeUnderline);

// node_modules/svelte-bootstrap-icons/lib/Type.svelte
mark_module_start();
Type[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Type.svelte";
var root1952 = add_locations(ns_template(`<svg><!><path d="m2.244 13.081.943-2.803H6.66l.944 2.803H8.86L5.54 3.75H4.322L1 13.081h1.244zm2.7-7.923L6.34 9.314H3.51l1.4-4.156h.034zm9.146 7.027h.035v.896h1.128V8.125c0-1.51-1.114-2.345-2.646-2.345-1.736 0-2.59.916-2.666 2.174h1.108c.068-.718.595-1.19 1.517-1.19.971 0 1.518.52 1.518 1.464v.731H12.19c-1.647.007-2.522.8-2.522 2.058 0 1.319.957 2.18 2.345 2.18 1.06 0 1.716-.43 2.078-1.011zm-1.763.035c-.752 0-1.456-.397-1.456-1.244 0-.65.424-1.115 1.408-1.115h1.805v.834c0 .896-.752 1.525-1.757 1.525z"></path></svg>`), Type[FILENAME], [[1, 0, [[1, 165]]]]);
function Type($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Type);
  var svg = root1952();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-type", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Type = hmr(Type, () => Type[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Type[HMR].source;
    set(Type[HMR].source, module.default[HMR].original);
  });
}
var Type_default = Type;
mark_module_end(Type);

// node_modules/svelte-bootstrap-icons/lib/Ubuntu.svelte
mark_module_start();
Ubuntu[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Ubuntu.svelte";
var root1953 = add_locations(ns_template(`<svg><!><path d="M2.273 9.53a2.273 2.273 0 1 0 0-4.546 2.273 2.273 0 0 0 0 4.547Zm9.467-4.984a2.273 2.273 0 1 0 0-4.546 2.273 2.273 0 0 0 0 4.546ZM7.4 13.108a5.535 5.535 0 0 1-3.775-2.88 3.273 3.273 0 0 1-1.944.24 7.4 7.4 0 0 0 5.328 4.465c.53.113 1.072.169 1.614.166a3.253 3.253 0 0 1-.666-1.9 5.639 5.639 0 0 1-.557-.091Zm3.828 2.285a2.273 2.273 0 1 0 0-4.546 2.273 2.273 0 0 0 0 4.546Zm3.163-3.108a7.436 7.436 0 0 0 .373-8.726 3.276 3.276 0 0 1-1.278 1.498 5.573 5.573 0 0 1-.183 5.535 3.26 3.26 0 0 1 1.088 1.693ZM2.098 3.998a3.28 3.28 0 0 1 1.897.486 5.544 5.544 0 0 1 4.464-2.388c.037-.67.277-1.313.69-1.843a7.472 7.472 0 0 0-7.051 3.745Z"></path></svg>`), Ubuntu[FILENAME], [[1, 0, [[1, 167]]]]);
function Ubuntu($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Ubuntu);
  var svg = root1953();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ubuntu", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ubuntu = hmr(Ubuntu, () => Ubuntu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ubuntu[HMR].source;
    set(Ubuntu[HMR].source, module.default[HMR].original);
  });
}
var Ubuntu_default = Ubuntu;
mark_module_end(Ubuntu);

// node_modules/svelte-bootstrap-icons/lib/UiChecksGrid.svelte
mark_module_start();
UiChecksGrid[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UiChecksGrid.svelte";
var root1954 = add_locations(ns_template(`<svg><!><path d="M2 10h3a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1zm9-9h3a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-3a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zm0 9a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-3zm0-10a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2h-3zM2 9a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H2zm7 2a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2h-3a2 2 0 0 1-2-2v-3zM0 2a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm5.354.854a.5.5 0 1 0-.708-.708L3 3.793l-.646-.647a.5.5 0 1 0-.708.708l1 1a.5.5 0 0 0 .708 0l2-2z"></path></svg>`), UiChecksGrid[FILENAME], [[1, 0, [[1, 175]]]]);
function UiChecksGrid($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UiChecksGrid);
  var svg = root1954();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ui-checks-grid", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UiChecksGrid = hmr(UiChecksGrid, () => UiChecksGrid[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UiChecksGrid[HMR].source;
    set(UiChecksGrid[HMR].source, module.default[HMR].original);
  });
}
var UiChecksGrid_default = UiChecksGrid;
mark_module_end(UiChecksGrid);

// node_modules/svelte-bootstrap-icons/lib/UiChecks.svelte
mark_module_start();
UiChecks[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UiChecks.svelte";
var root1955 = add_locations(ns_template(`<svg><!><path d="M7 2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-1zM2 1a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2zm0 8a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2H2zm.854-3.646a.5.5 0 0 1-.708 0l-1-1a.5.5 0 1 1 .708-.708l.646.647 1.646-1.647a.5.5 0 1 1 .708.708l-2 2zm0 8a.5.5 0 0 1-.708 0l-1-1a.5.5 0 0 1 .708-.708l.646.647 1.646-1.647a.5.5 0 0 1 .708.708l-2 2zM7 10.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-1zm0-5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 8a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"></path></svg>`), UiChecks[FILENAME], [[1, 0, [[1, 170]]]]);
function UiChecks($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UiChecks);
  var svg = root1955();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ui-checks", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UiChecks = hmr(UiChecks, () => UiChecks[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UiChecks[HMR].source;
    set(UiChecks[HMR].source, module.default[HMR].original);
  });
}
var UiChecks_default = UiChecks;
mark_module_end(UiChecks);

// node_modules/svelte-bootstrap-icons/lib/UiRadiosGrid.svelte
mark_module_start();
UiRadiosGrid[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UiRadiosGrid.svelte";
var root1956 = add_locations(ns_template(`<svg><!><path d="M3.5 15a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5zm9-9a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5zm0 9a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zM16 3.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0zm-9 9a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0zm5.5 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zm-9-11a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 2a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"></path></svg>`), UiRadiosGrid[FILENAME], [[1, 0, [[1, 175]]]]);
function UiRadiosGrid($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UiRadiosGrid);
  var svg = root1956();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ui-radios-grid", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UiRadiosGrid = hmr(UiRadiosGrid, () => UiRadiosGrid[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UiRadiosGrid[HMR].source;
    set(UiRadiosGrid[HMR].source, module.default[HMR].original);
  });
}
var UiRadiosGrid_default = UiRadiosGrid;
mark_module_end(UiRadiosGrid);

// node_modules/svelte-bootstrap-icons/lib/UiRadios.svelte
mark_module_start();
UiRadios[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UiRadios.svelte";
var root1957 = add_locations(ns_template(`<svg><!><path d="M7 2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-1zM0 12a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm7-1.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-1zm0-5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 8a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zM3 1a3 3 0 1 0 0 6 3 3 0 0 0 0-6zm0 4.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg>`), UiRadios[FILENAME], [[1, 0, [[1, 170]]]]);
function UiRadios($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UiRadios);
  var svg = root1957();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-ui-radios", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UiRadios = hmr(UiRadios, () => UiRadios[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UiRadios[HMR].source;
    set(UiRadios[HMR].source, module.default[HMR].original);
  });
}
var UiRadios_default = UiRadios;
mark_module_end(UiRadios);

// node_modules/svelte-bootstrap-icons/lib/UmbrellaFill.svelte
mark_module_start();
UmbrellaFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UmbrellaFill.svelte";
var root1958 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 0a.5.5 0 0 1 .5.5v.514C12.625 1.238 16 4.22 16 8c0 0 0 .5-.5.5-.149 0-.352-.145-.352-.145l-.004-.004-.025-.023a3.484 3.484 0 0 0-.555-.394A3.166 3.166 0 0 0 13 7.5c-.638 0-1.178.213-1.564.434a3.484 3.484 0 0 0-.555.394l-.025.023-.003.003s-.204.146-.353.146-.352-.145-.352-.145l-.004-.004-.025-.023a3.484 3.484 0 0 0-.555-.394 3.3 3.3 0 0 0-1.064-.39V13.5H8h.5v.039l-.005.083a2.958 2.958 0 0 1-.298 1.102 2.257 2.257 0 0 1-.763.88C7.06 15.851 6.587 16 6 16s-1.061-.148-1.434-.396a2.255 2.255 0 0 1-.763-.88 2.958 2.958 0 0 1-.302-1.185v-.025l-.001-.009v-.003s0-.002.5-.002h-.5V13a.5.5 0 0 1 1 0v.506l.003.044a1.958 1.958 0 0 0 .195.726c.095.191.23.367.423.495.19.127.466.229.879.229s.689-.102.879-.229c.193-.128.328-.304.424-.495a1.958 1.958 0 0 0 .197-.77V7.544a3.3 3.3 0 0 0-1.064.39 3.482 3.482 0 0 0-.58.417l-.004.004S5.65 8.5 5.5 8.5c-.149 0-.352-.145-.352-.145l-.004-.004a3.482 3.482 0 0 0-.58-.417A3.166 3.166 0 0 0 3 7.5c-.638 0-1.177.213-1.564.434a3.482 3.482 0 0 0-.58.417l-.004.004S.65 8.5.5 8.5C0 8.5 0 8 0 8c0-3.78 3.375-6.762 7.5-6.986V.5A.5.5 0 0 1 8 0z"></path></svg>`), UmbrellaFill[FILENAME], [[1, 0, [[1, 174]]]]);
function UmbrellaFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UmbrellaFill);
  var svg = root1958();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-umbrella-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UmbrellaFill = hmr(UmbrellaFill, () => UmbrellaFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UmbrellaFill[HMR].source;
    set(UmbrellaFill[HMR].source, module.default[HMR].original);
  });
}
var UmbrellaFill_default = UmbrellaFill;
mark_module_end(UmbrellaFill);

// node_modules/svelte-bootstrap-icons/lib/Umbrella.svelte
mark_module_start();
Umbrella[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Umbrella.svelte";
var root1959 = add_locations(ns_template(`<svg><!><path d="M8 0a.5.5 0 0 1 .5.5v.514C12.625 1.238 16 4.22 16 8c0 0 0 .5-.5.5-.149 0-.352-.145-.352-.145l-.004-.004-.025-.023a3.484 3.484 0 0 0-.555-.394A3.166 3.166 0 0 0 13 7.5c-.638 0-1.178.213-1.564.434a3.484 3.484 0 0 0-.555.394l-.025.023-.003.003s-.204.146-.353.146-.352-.145-.352-.145l-.004-.004-.025-.023a3.484 3.484 0 0 0-.555-.394 3.3 3.3 0 0 0-1.064-.39V13.5H8h.5v.039l-.005.083a2.958 2.958 0 0 1-.298 1.102 2.257 2.257 0 0 1-.763.88C7.06 15.851 6.587 16 6 16s-1.061-.148-1.434-.396a2.255 2.255 0 0 1-.763-.88 2.958 2.958 0 0 1-.302-1.185v-.025l-.001-.009v-.003s0-.002.5-.002h-.5V13a.5.5 0 0 1 1 0v.506l.003.044a1.958 1.958 0 0 0 .195.726c.095.191.23.367.423.495.19.127.466.229.879.229s.689-.102.879-.229c.193-.128.328-.304.424-.495a1.958 1.958 0 0 0 .197-.77V7.544a3.3 3.3 0 0 0-1.064.39 3.482 3.482 0 0 0-.58.417l-.004.004S5.65 8.5 5.5 8.5c-.149 0-.352-.145-.352-.145l-.004-.004a3.482 3.482 0 0 0-.58-.417A3.166 3.166 0 0 0 3 7.5c-.638 0-1.177.213-1.564.434a3.482 3.482 0 0 0-.58.417l-.004.004S.65 8.5.5 8.5C0 8.5 0 8 0 8c0-3.78 3.375-6.762 7.5-6.986V.5A.5.5 0 0 1 8 0zM6.577 2.123c-2.833.5-4.99 2.458-5.474 4.854A4.124 4.124 0 0 1 3 6.5c.806 0 1.48.25 1.962.511a9.706 9.706 0 0 1 .344-2.358c.242-.868.64-1.765 1.271-2.53zm-.615 4.93A4.16 4.16 0 0 1 8 6.5a4.16 4.16 0 0 1 2.038.553 8.688 8.688 0 0 0-.307-2.13C9.434 3.858 8.898 2.83 8 2.117c-.898.712-1.434 1.74-1.731 2.804a8.687 8.687 0 0 0-.307 2.131zm3.46-4.93c.631.765 1.03 1.662 1.272 2.53.233.833.328 1.66.344 2.358A4.14 4.14 0 0 1 13 6.5c.77 0 1.42.23 1.897.477-.484-2.396-2.641-4.355-5.474-4.854z"></path></svg>`), Umbrella[FILENAME], [[1, 0, [[1, 169]]]]);
function Umbrella($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Umbrella);
  var svg = root1959();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-umbrella", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Umbrella = hmr(Umbrella, () => Umbrella[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Umbrella[HMR].source;
    set(Umbrella[HMR].source, module.default[HMR].original);
  });
}
var Umbrella_default = Umbrella;
mark_module_end(Umbrella);

// node_modules/svelte-bootstrap-icons/lib/Unindent.svelte
mark_module_start();
Unindent[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Unindent.svelte";
var root1960 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M13 8a.5.5 0 0 0-.5-.5H5.707l2.147-2.146a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708-.708L5.707 8.5H12.5A.5.5 0 0 0 13 8Z"></path><path fill-rule="evenodd" d="M3.5 4a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 1 0v-7a.5.5 0 0 0-.5-.5Z"></path></svg>`), Unindent[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Unindent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Unindent);
  var svg = root1960();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-unindent", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Unindent = hmr(Unindent, () => Unindent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Unindent[HMR].source;
    set(Unindent[HMR].source, module.default[HMR].original);
  });
}
var Unindent_default = Unindent;
mark_module_end(Unindent);

// node_modules/svelte-bootstrap-icons/lib/Union.svelte
mark_module_start();
Union[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Union.svelte";
var root1961 = add_locations(ns_template(`<svg><!><path d="M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2z"></path></svg>`), Union[FILENAME], [[1, 0, [[1, 166]]]]);
function Union($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Union);
  var svg = root1961();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-union", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Union = hmr(Union, () => Union[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Union[HMR].source;
    set(Union[HMR].source, module.default[HMR].original);
  });
}
var Union_default = Union;
mark_module_end(Union);

// node_modules/svelte-bootstrap-icons/lib/Unity.svelte
mark_module_start();
Unity[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Unity.svelte";
var root1962 = add_locations(ns_template(`<svg><!><path d="M15 11.2V3.733L8.61 0v2.867l2.503 1.466c.099.067.099.2 0 .234L8.148 6.3c-.099.067-.197.033-.263 0L4.92 4.567c-.099-.034-.099-.2 0-.234l2.504-1.466V0L1 3.733V11.2v-.033.033l2.438-1.433V6.833c0-.1.131-.166.197-.133L6.6 8.433c.099.067.132.134.132.234v3.466c0 .1-.132.167-.198.134L4.031 10.8l-2.438 1.433L7.983 16l6.391-3.733-2.438-1.434L9.434 12.3c-.099.067-.198 0-.198-.133V8.7c0-.1.066-.2.132-.233l2.965-1.734c.099-.066.197 0 .197.134V9.8L15 11.2Z"></path></svg>`), Unity[FILENAME], [[1, 0, [[1, 166]]]]);
function Unity($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Unity);
  var svg = root1962();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-unity", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Unity = hmr(Unity, () => Unity[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Unity[HMR].source;
    set(Unity[HMR].source, module.default[HMR].original);
  });
}
var Unity_default = Unity;
mark_module_end(Unity);

// node_modules/svelte-bootstrap-icons/lib/UniversalAccessCircle.svelte
mark_module_start();
UniversalAccessCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UniversalAccessCircle.svelte";
var root1963 = add_locations(ns_template(`<svg><!><path d="M8 4.143A1.071 1.071 0 1 0 8 2a1.071 1.071 0 0 0 0 2.143Zm-4.668 1.47 3.24.316v2.5l-.323 4.585A.383.383 0 0 0 7 13.14l.826-4.017c.045-.18.301-.18.346 0L9 13.139a.383.383 0 0 0 .752-.125L9.43 8.43v-2.5l3.239-.316a.38.38 0 0 0-.047-.756H3.379a.38.38 0 0 0-.047.756Z"></path><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM1 8a7 7 0 1 1 14 0A7 7 0 0 1 1 8Z"></path></svg>`), UniversalAccessCircle[FILENAME], [
  [1, 0, [[1, 184], [2, 2]]]
]);
function UniversalAccessCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UniversalAccessCircle);
  var svg = root1963();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-universal-access-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UniversalAccessCircle = hmr(UniversalAccessCircle, () => UniversalAccessCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UniversalAccessCircle[HMR].source;
    set(UniversalAccessCircle[HMR].source, module.default[HMR].original);
  });
}
var UniversalAccessCircle_default = UniversalAccessCircle;
mark_module_end(UniversalAccessCircle);

// node_modules/svelte-bootstrap-icons/lib/UniversalAccess.svelte
mark_module_start();
UniversalAccess[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UniversalAccess.svelte";
var root1964 = add_locations(ns_template(`<svg><!><path d="M9.5 1.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM6 5.5l-4.535-.442A.531.531 0 0 1 1.531 4H14.47a.531.531 0 0 1 .066 1.058L10 5.5V9l.452 6.42a.535.535 0 0 1-1.053.174L8.243 9.97c-.064-.252-.422-.252-.486 0l-1.156 5.624a.535.535 0 0 1-1.053-.174L6 9V5.5Z"></path></svg>`), UniversalAccess[FILENAME], [[1, 0, [[1, 177]]]]);
function UniversalAccess($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UniversalAccess);
  var svg = root1964();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-universal-access", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UniversalAccess = hmr(UniversalAccess, () => UniversalAccess[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UniversalAccess[HMR].source;
    set(UniversalAccess[HMR].source, module.default[HMR].original);
  });
}
var UniversalAccess_default = UniversalAccess;
mark_module_end(UniversalAccess);

// node_modules/svelte-bootstrap-icons/lib/UnlockFill.svelte
mark_module_start();
UnlockFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UnlockFill.svelte";
var root1965 = add_locations(ns_template(`<svg><!><path d="M11 1a2 2 0 0 0-2 2v4a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h5V3a3 3 0 0 1 6 0v4a.5.5 0 0 1-1 0V3a2 2 0 0 0-2-2z"></path></svg>`), UnlockFill[FILENAME], [[1, 0, [[1, 172]]]]);
function UnlockFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UnlockFill);
  var svg = root1965();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-unlock-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UnlockFill = hmr(UnlockFill, () => UnlockFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UnlockFill[HMR].source;
    set(UnlockFill[HMR].source, module.default[HMR].original);
  });
}
var UnlockFill_default = UnlockFill;
mark_module_end(UnlockFill);

// node_modules/svelte-bootstrap-icons/lib/Unlock.svelte
mark_module_start();
Unlock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Unlock.svelte";
var root1966 = add_locations(ns_template(`<svg><!><path d="M11 1a2 2 0 0 0-2 2v4a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h5V3a3 3 0 0 1 6 0v4a.5.5 0 0 1-1 0V3a2 2 0 0 0-2-2zM3 8a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1H3z"></path></svg>`), Unlock[FILENAME], [[1, 0, [[1, 167]]]]);
function Unlock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Unlock);
  var svg = root1966();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-unlock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Unlock = hmr(Unlock, () => Unlock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Unlock[HMR].source;
    set(Unlock[HMR].source, module.default[HMR].original);
  });
}
var Unlock_default = Unlock;
mark_module_end(Unlock);

// node_modules/svelte-bootstrap-icons/lib/UpcScan.svelte
mark_module_start();
UpcScan[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UpcScan.svelte";
var root1967 = add_locations(ns_template(`<svg><!><path d="M1.5 1a.5.5 0 0 0-.5.5v3a.5.5 0 0 1-1 0v-3A1.5 1.5 0 0 1 1.5 0h3a.5.5 0 0 1 0 1h-3zM11 .5a.5.5 0 0 1 .5-.5h3A1.5 1.5 0 0 1 16 1.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 1-.5-.5zM.5 11a.5.5 0 0 1 .5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 1 0 1h-3A1.5 1.5 0 0 1 0 14.5v-3a.5.5 0 0 1 .5-.5zm15 0a.5.5 0 0 1 .5.5v3a1.5 1.5 0 0 1-1.5 1.5h-3a.5.5 0 0 1 0-1h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 1 .5-.5zM3 4.5a.5.5 0 0 1 1 0v7a.5.5 0 0 1-1 0v-7zm2 0a.5.5 0 0 1 1 0v7a.5.5 0 0 1-1 0v-7zm2 0a.5.5 0 0 1 1 0v7a.5.5 0 0 1-1 0v-7zm2 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-7zm3 0a.5.5 0 0 1 1 0v7a.5.5 0 0 1-1 0v-7z"></path></svg>`), UpcScan[FILENAME], [[1, 0, [[1, 169]]]]);
function UpcScan($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UpcScan);
  var svg = root1967();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-upc-scan", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UpcScan = hmr(UpcScan, () => UpcScan[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UpcScan[HMR].source;
    set(UpcScan[HMR].source, module.default[HMR].original);
  });
}
var UpcScan_default = UpcScan;
mark_module_end(UpcScan);

// node_modules/svelte-bootstrap-icons/lib/Upc.svelte
mark_module_start();
Upc[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Upc.svelte";
var root1968 = add_locations(ns_template(`<svg><!><path d="M3 4.5a.5.5 0 0 1 1 0v7a.5.5 0 0 1-1 0v-7zm2 0a.5.5 0 0 1 1 0v7a.5.5 0 0 1-1 0v-7zm2 0a.5.5 0 0 1 1 0v7a.5.5 0 0 1-1 0v-7zm2 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-7zm3 0a.5.5 0 0 1 1 0v7a.5.5 0 0 1-1 0v-7z"></path></svg>`), Upc[FILENAME], [[1, 0, [[1, 164]]]]);
function Upc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Upc);
  var svg = root1968();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-upc", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Upc = hmr(Upc, () => Upc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Upc[HMR].source;
    set(Upc[HMR].source, module.default[HMR].original);
  });
}
var Upc_default = Upc;
mark_module_end(Upc);

// node_modules/svelte-bootstrap-icons/lib/Upload.svelte
mark_module_start();
Upload[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Upload.svelte";
var root1969 = add_locations(ns_template(`<svg><!><path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"></path><path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708l3-3z"></path></svg>`), Upload[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Upload($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Upload);
  var svg = root1969();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-upload", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Upload = hmr(Upload, () => Upload[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Upload[HMR].source;
    set(Upload[HMR].source, module.default[HMR].original);
  });
}
var Upload_default = Upload;
mark_module_end(Upload);

// node_modules/svelte-bootstrap-icons/lib/UsbCFill.svelte
mark_module_start();
UsbCFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbCFill.svelte";
var root1970 = add_locations(ns_template(`<svg><!><path d="M3 5a3 3 0 0 0 0 6h10a3 3 0 1 0 0-6H3Zm.5 2.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1 0-1Z"></path></svg>`), UsbCFill[FILENAME], [[1, 0, [[1, 171]]]]);
function UsbCFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbCFill);
  var svg = root1970();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-c-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbCFill = hmr(UsbCFill, () => UsbCFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbCFill[HMR].source;
    set(UsbCFill[HMR].source, module.default[HMR].original);
  });
}
var UsbCFill_default = UsbCFill;
mark_module_end(UsbCFill);

// node_modules/svelte-bootstrap-icons/lib/UsbC.svelte
mark_module_start();
UsbC[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbC.svelte";
var root1971 = add_locations(ns_template(`<svg><!><path d="M3.5 7.5a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9Z"></path><path d="M0 8a3 3 0 0 1 3-3h10a3 3 0 1 1 0 6H3a3 3 0 0 1-3-3Zm3-2a2 2 0 1 0 0 4h10a2 2 0 1 0 0-4H3Z"></path></svg>`), UsbC[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function UsbC($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbC);
  var svg = root1971();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-c", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbC = hmr(UsbC, () => UsbC[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbC[HMR].source;
    set(UsbC[HMR].source, module.default[HMR].original);
  });
}
var UsbC_default = UsbC;
mark_module_end(UsbC);

// node_modules/svelte-bootstrap-icons/lib/UsbDriveFill.svelte
mark_module_start();
UsbDriveFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbDriveFill.svelte";
var root1972 = add_locations(ns_template(`<svg><!><path d="M6 .5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4H6v-4ZM7 1v1h1V1H7Zm2 0v1h1V1H9ZM5.5 5a.5.5 0 0 0-.5.5V15a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1V5.5a.5.5 0 0 0-.5-.5h-6Z"></path></svg>`), UsbDriveFill[FILENAME], [[1, 0, [[1, 175]]]]);
function UsbDriveFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbDriveFill);
  var svg = root1972();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-drive-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbDriveFill = hmr(UsbDriveFill, () => UsbDriveFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbDriveFill[HMR].source;
    set(UsbDriveFill[HMR].source, module.default[HMR].original);
  });
}
var UsbDriveFill_default = UsbDriveFill;
mark_module_end(UsbDriveFill);

// node_modules/svelte-bootstrap-icons/lib/UsbDrive.svelte
mark_module_start();
UsbDrive[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbDrive.svelte";
var root1973 = add_locations(ns_template(`<svg><!><path d="M6 .5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4H6v-4ZM7 1v1h1V1H7Zm2 0v1h1V1H9ZM6 5a1 1 0 0 0-1 1v8.5A1.5 1.5 0 0 0 6.5 16h4a1.5 1.5 0 0 0 1.5-1.5V6a1 1 0 0 0-1-1H6Zm0 1h5v8.5a.5.5 0 0 1-.5.5h-4a.5.5 0 0 1-.5-.5V6Z"></path></svg>`), UsbDrive[FILENAME], [[1, 0, [[1, 170]]]]);
function UsbDrive($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbDrive);
  var svg = root1973();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-drive", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbDrive = hmr(UsbDrive, () => UsbDrive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbDrive[HMR].source;
    set(UsbDrive[HMR].source, module.default[HMR].original);
  });
}
var UsbDrive_default = UsbDrive;
mark_module_end(UsbDrive);

// node_modules/svelte-bootstrap-icons/lib/UsbFill.svelte
mark_module_start();
UsbFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbFill.svelte";
var root1974 = add_locations(ns_template(`<svg><!><path d="M.5 5a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h15a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5H.5Zm1.75 1.5h11.5a.25.25 0 0 1 .25.25v1a.25.25 0 0 1-.25.25H2.25A.25.25 0 0 1 2 7.75v-1a.25.25 0 0 1 .25-.25Z"></path></svg>`), UsbFill[FILENAME], [[1, 0, [[1, 169]]]]);
function UsbFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbFill);
  var svg = root1974();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbFill = hmr(UsbFill, () => UsbFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbFill[HMR].source;
    set(UsbFill[HMR].source, module.default[HMR].original);
  });
}
var UsbFill_default = UsbFill;
mark_module_end(UsbFill);

// node_modules/svelte-bootstrap-icons/lib/UsbMicroFill.svelte
mark_module_start();
UsbMicroFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbMicroFill.svelte";
var root1975 = add_locations(ns_template(`<svg><!><path d="M2.707 4A1 1 0 0 0 2 4.293L.293 6A1 1 0 0 0 0 6.707V11a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V6.707A1 1 0 0 0 15.707 6L14 4.293A1 1 0 0 0 13.293 4H2.707ZM4.5 7h7a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Z"></path></svg>`), UsbMicroFill[FILENAME], [[1, 0, [[1, 175]]]]);
function UsbMicroFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbMicroFill);
  var svg = root1975();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-micro-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbMicroFill = hmr(UsbMicroFill, () => UsbMicroFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbMicroFill[HMR].source;
    set(UsbMicroFill[HMR].source, module.default[HMR].original);
  });
}
var UsbMicroFill_default = UsbMicroFill;
mark_module_end(UsbMicroFill);

// node_modules/svelte-bootstrap-icons/lib/UsbMicro.svelte
mark_module_start();
UsbMicro[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbMicro.svelte";
var root1976 = add_locations(ns_template(`<svg><!><path d="M4.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-7Z"></path><path d="M2.707 4A1 1 0 0 0 2 4.293L.293 6A1 1 0 0 0 0 6.707V11a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V6.707A1 1 0 0 0 15.707 6L14 4.293A1 1 0 0 0 13.293 4H2.707Zm0 1h10.586L15 6.707V11H1V6.707L2.707 5Z"></path></svg>`), UsbMicro[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function UsbMicro($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbMicro);
  var svg = root1976();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-micro", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbMicro = hmr(UsbMicro, () => UsbMicro[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbMicro[HMR].source;
    set(UsbMicro[HMR].source, module.default[HMR].original);
  });
}
var UsbMicro_default = UsbMicro;
mark_module_end(UsbMicro);

// node_modules/svelte-bootstrap-icons/lib/UsbMiniFill.svelte
mark_module_start();
UsbMiniFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbMiniFill.svelte";
var root1977 = add_locations(ns_template(`<svg><!><path d="M3 3a1 1 0 0 0-1 1v1.293L.293 7A1 1 0 0 0 0 7.707V12a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V7.707A1 1 0 0 0 15.707 7L14 5.293V4a1 1 0 0 0-1-1H3Zm.5 5h9a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Z"></path></svg>`), UsbMiniFill[FILENAME], [[1, 0, [[1, 174]]]]);
function UsbMiniFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbMiniFill);
  var svg = root1977();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-mini-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbMiniFill = hmr(UsbMiniFill, () => UsbMiniFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbMiniFill[HMR].source;
    set(UsbMiniFill[HMR].source, module.default[HMR].original);
  });
}
var UsbMiniFill_default = UsbMiniFill;
mark_module_end(UsbMiniFill);

// node_modules/svelte-bootstrap-icons/lib/UsbMini.svelte
mark_module_start();
UsbMini[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbMini.svelte";
var root1978 = add_locations(ns_template(`<svg><!><path d="M3.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-9Z"></path><path d="M3 3a1 1 0 0 0-1 1v1.293L.293 7A1 1 0 0 0 0 7.707V12a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V7.707A1 1 0 0 0 15.707 7L14 5.293V4a1 1 0 0 0-1-1H3Zm0 1h10v1.293a1 1 0 0 0 .293.707L15 7.707V12H1V7.707L2.707 6A1 1 0 0 0 3 5.293V4Z"></path></svg>`), UsbMini[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function UsbMini($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbMini);
  var svg = root1978();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-mini", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbMini = hmr(UsbMini, () => UsbMini[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbMini[HMR].source;
    set(UsbMini[HMR].source, module.default[HMR].original);
  });
}
var UsbMini_default = UsbMini;
mark_module_end(UsbMini);

// node_modules/svelte-bootstrap-icons/lib/UsbPlugFill.svelte
mark_module_start();
UsbPlugFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbPlugFill.svelte";
var root1979 = add_locations(ns_template(`<svg><!><path d="M6 .5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4H6v-4ZM7 1v1h1V1H7Zm2 0v1h1V1H9ZM5.5 5a.5.5 0 0 0-.5.5v4.894a2 2 0 0 0 .336 1.11l.83 1.245c.544.816.834 1.774.834 2.754 0 .275.222.497.497.497h2.006a.497.497 0 0 0 .497-.497c0-.98.29-1.938.834-2.754l.83-1.245a2 2 0 0 0 .336-1.11V5.5a.5.5 0 0 0-.5-.5h-6Z"></path></svg>`), UsbPlugFill[FILENAME], [[1, 0, [[1, 174]]]]);
function UsbPlugFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbPlugFill);
  var svg = root1979();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-plug-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbPlugFill = hmr(UsbPlugFill, () => UsbPlugFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbPlugFill[HMR].source;
    set(UsbPlugFill[HMR].source, module.default[HMR].original);
  });
}
var UsbPlugFill_default = UsbPlugFill;
mark_module_end(UsbPlugFill);

// node_modules/svelte-bootstrap-icons/lib/UsbPlug.svelte
mark_module_start();
UsbPlug[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbPlug.svelte";
var root1980 = add_locations(ns_template(`<svg><!><path d="M6 .5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4H6v-4ZM7 1v1h1V1H7Zm2 0v1h1V1H9ZM6 5a1 1 0 0 0-1 1v4.394c0 .494.146.976.42 1.387l1.038 1.558c.354.53.542 1.152.542 1.789 0 .481.39.872.872.872h1.256c.481 0 .872-.39.872-.872 0-.637.188-1.26.541-1.789l1.04-1.558A2.5 2.5 0 0 0 12 10.394V6a1 1 0 0 0-1-1H6Zm0 1h5v4.394a1.5 1.5 0 0 1-.252.832L9.71 12.784A4.224 4.224 0 0 0 9.002 15H7.998a4.224 4.224 0 0 0-.707-2.216l-1.04-1.558A1.5 1.5 0 0 1 6 10.394V6Z"></path></svg>`), UsbPlug[FILENAME], [[1, 0, [[1, 169]]]]);
function UsbPlug($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbPlug);
  var svg = root1980();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-plug", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbPlug = hmr(UsbPlug, () => UsbPlug[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbPlug[HMR].source;
    set(UsbPlug[HMR].source, module.default[HMR].original);
  });
}
var UsbPlug_default = UsbPlug;
mark_module_end(UsbPlug);

// node_modules/svelte-bootstrap-icons/lib/UsbSymbol.svelte
mark_module_start();
UsbSymbol[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/UsbSymbol.svelte";
var root1981 = add_locations(ns_template(`<svg><!><path d="m7.792.312-1.533 2.3A.25.25 0 0 0 6.467 3H7.5v7.319a2.5 2.5 0 0 0-.515-.298L5.909 9.56A1.5 1.5 0 0 1 5 8.18v-.266a1.5 1.5 0 1 0-1 0v.266a2.5 2.5 0 0 0 1.515 2.298l1.076.461a1.5 1.5 0 0 1 .888 1.129 2.001 2.001 0 1 0 1.021-.006v-.902a1.5 1.5 0 0 1 .756-1.303l1.484-.848A2.5 2.5 0 0 0 11.995 7h.755a.25.25 0 0 0 .25-.25v-2.5a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25v2.5c0 .138.112.25.25.25h.741a1.5 1.5 0 0 1-.747 1.142L8.76 8.99a2.584 2.584 0 0 0-.26.17V3h1.033a.25.25 0 0 0 .208-.389L8.208.312a.25.25 0 0 0-.416 0Z"></path></svg>`), UsbSymbol[FILENAME], [[1, 0, [[1, 171]]]]);
function UsbSymbol($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UsbSymbol);
  var svg = root1981();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb-symbol", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsbSymbol = hmr(UsbSymbol, () => UsbSymbol[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsbSymbol[HMR].source;
    set(UsbSymbol[HMR].source, module.default[HMR].original);
  });
}
var UsbSymbol_default = UsbSymbol;
mark_module_end(UsbSymbol);

// node_modules/svelte-bootstrap-icons/lib/Usb.svelte
mark_module_start();
Usb[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Usb.svelte";
var root1982 = add_locations(ns_template(`<svg><!><path d="M2.25 7a.25.25 0 0 0-.25.25v1c0 .138.112.25.25.25h11.5a.25.25 0 0 0 .25-.25v-1a.25.25 0 0 0-.25-.25H2.25Z"></path><path d="M0 5.5A.5.5 0 0 1 .5 5h15a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5H.5a.5.5 0 0 1-.5-.5v-5ZM1 10h14V6H1v4Z"></path></svg>`), Usb[FILENAME], [
  [1, 0, [[1, 164], [2, 2]]]
]);
function Usb($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Usb);
  var svg = root1982();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-usb", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Usb = hmr(Usb, () => Usb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Usb[HMR].source;
    set(Usb[HMR].source, module.default[HMR].original);
  });
}
var Usb_default = Usb;
mark_module_end(Usb);

// node_modules/svelte-bootstrap-icons/lib/Valentine.svelte
mark_module_start();
Valentine[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Valentine.svelte";
var root1983 = add_locations(ns_template(`<svg><!><path d="M8 5.993c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132ZM2.25 4a.25.25 0 0 0-.25.25v1.5a.25.25 0 0 0 .5 0V4.5h1.25a.25.25 0 0 0 0-.5h-1.5Zm10 0a.25.25 0 1 0 0 .5h1.25v1.25a.25.25 0 1 0 .5 0v-1.5a.25.25 0 0 0-.25-.25h-1.5ZM2.5 10.25a.25.25 0 1 0-.5 0v1.5c0 .138.112.25.25.25h1.5a.25.25 0 1 0 0-.5H2.5v-1.25Zm11.5 0a.25.25 0 1 0-.5 0v1.25h-1.25a.25.25 0 1 0 0 .5h1.5a.25.25 0 0 0 .25-.25v-1.5Z"></path><path fill-rule="evenodd" d="M0 2.994v-.06a1 1 0 0 1 .859-.99l13-1.857a1 1 0 0 1 1.141.99V2a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V2.994ZM1 3v10h14V3H1Z"></path></svg>`), Valentine[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function Valentine($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Valentine);
  var svg = root1983();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-valentine", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Valentine = hmr(Valentine, () => Valentine[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Valentine[HMR].source;
    set(Valentine[HMR].source, module.default[HMR].original);
  });
}
var Valentine_default = Valentine;
mark_module_end(Valentine);

// node_modules/svelte-bootstrap-icons/lib/Valentine2.svelte
mark_module_start();
Valentine2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Valentine2.svelte";
var root1984 = add_locations(ns_template(`<svg><!><path d="M8 6.493c1.664-1.711 5.825 1.283 0 5.132-5.825-3.85-1.664-6.843 0-5.132ZM4.25 3a.25.25 0 0 0-.25.25v1.5a.25.25 0 0 0 .5 0V3.5h1.25a.25.25 0 0 0 0-.5h-1.5Zm6 0a.25.25 0 1 0 0 .5h1.25v1.25a.25.25 0 1 0 .5 0v-1.5a.25.25 0 0 0-.25-.25h-1.5ZM4.5 12.25a.25.25 0 1 0-.5 0v1.5c0 .138.112.25.25.25h1.5a.25.25 0 0 0 0-.5H4.5v-1.25Zm7.5 0a.25.25 0 1 0-.5 0v1.25h-1.25a.25.25 0 1 0 0 .5h1.5a.25.25 0 0 0 .25-.25v-1.5Z"></path><path fill-rule="evenodd" d="M2 1.994v-.042a1 1 0 0 1 .9-.995l9-.9A1 1 0 0 1 13 1a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V1.994ZM3 2v13h10V2H3Z"></path></svg>`), Valentine2[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function Valentine2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Valentine2);
  var svg = root1984();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-valentine2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Valentine2 = hmr(Valentine2, () => Valentine2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Valentine2[HMR].source;
    set(Valentine2[HMR].source, module.default[HMR].original);
  });
}
var Valentine2_default = Valentine2;
mark_module_end(Valentine2);

// node_modules/svelte-bootstrap-icons/lib/VectorPen.svelte
mark_module_start();
VectorPen[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VectorPen.svelte";
var root1985 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M10.646.646a.5.5 0 0 1 .708 0l4 4a.5.5 0 0 1 0 .708l-1.902 1.902-.829 3.313a1.5 1.5 0 0 1-1.024 1.073L1.254 14.746 4.358 4.4A1.5 1.5 0 0 1 5.43 3.377l3.313-.828L10.646.646zm-1.8 2.908-3.173.793a.5.5 0 0 0-.358.342l-2.57 8.565 8.567-2.57a.5.5 0 0 0 .34-.357l.794-3.174-3.6-3.6z"></path><path fill-rule="evenodd" d="M2.832 13.228 8 9a1 1 0 1 0-1-1l-4.228 5.168-.026.086.086-.026z"></path></svg>`), VectorPen[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function VectorPen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VectorPen);
  var svg = root1985();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-vector-pen", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VectorPen = hmr(VectorPen, () => VectorPen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VectorPen[HMR].source;
    set(VectorPen[HMR].source, module.default[HMR].original);
  });
}
var VectorPen_default = VectorPen;
mark_module_end(VectorPen);

// node_modules/svelte-bootstrap-icons/lib/ViewList.svelte
mark_module_start();
ViewList[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ViewList.svelte";
var root1986 = add_locations(ns_template(`<svg><!><path d="M3 4.5h10a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2zm0 1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1H3zM1 2a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 2zm0 12a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 14z"></path></svg>`), ViewList[FILENAME], [[1, 0, [[1, 170]]]]);
function ViewList($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ViewList);
  var svg = root1986();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-view-list", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ViewList = hmr(ViewList, () => ViewList[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ViewList[HMR].source;
    set(ViewList[HMR].source, module.default[HMR].original);
  });
}
var ViewList_default = ViewList;
mark_module_end(ViewList);

// node_modules/svelte-bootstrap-icons/lib/ViewStacked.svelte
mark_module_start();
ViewStacked[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ViewStacked.svelte";
var root1987 = add_locations(ns_template(`<svg><!><path d="M3 0h10a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm0 1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3zm0 8h10a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2zm0 1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1H3z"></path></svg>`), ViewStacked[FILENAME], [[1, 0, [[1, 173]]]]);
function ViewStacked($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ViewStacked);
  var svg = root1987();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-view-stacked", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ViewStacked = hmr(ViewStacked, () => ViewStacked[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ViewStacked[HMR].source;
    set(ViewStacked[HMR].source, module.default[HMR].original);
  });
}
var ViewStacked_default = ViewStacked;
mark_module_end(ViewStacked);

// node_modules/svelte-bootstrap-icons/lib/Vignette.svelte
mark_module_start();
Vignette[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Vignette.svelte";
var root1988 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Z"></path><path d="M8.5 4.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 7a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1.683-6.281a.5.5 0 1 1-.866-.5.5.5 0 0 1 .866.5Zm-3.5 6.062a.5.5 0 1 1-.866-.5.5.5 0 0 1 .866.5Zm4.598-4.598a.5.5 0 1 1-.5-.866.5.5 0 0 1 .5.866Zm-6.062 3.5a.5.5 0 1 1-.5-.866.5.5 0 0 1 .5.866ZM11.5 8.5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm-7 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm6.281 1.683a.5.5 0 1 1 .5-.866.5.5 0 0 1-.5.866Zm-6.062-3.5a.5.5 0 1 1 .5-.866.5.5 0 0 1-.5.866Zm4.598 4.598a.5.5 0 1 1 .866-.5.5.5 0 0 1-.866.5Zm-3.5-6.062a.5.5 0 1 1 .866-.5.5.5 0 0 1-.866.5Z"></path></svg>`), Vignette[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function Vignette($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Vignette);
  var svg = root1988();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-vignette", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vignette = hmr(Vignette, () => Vignette[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vignette[HMR].source;
    set(Vignette[HMR].source, module.default[HMR].original);
  });
}
var Vignette_default = Vignette;
mark_module_end(Vignette);

// node_modules/svelte-bootstrap-icons/lib/Vimeo.svelte
mark_module_start();
Vimeo[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Vimeo.svelte";
var root1989 = add_locations(ns_template(`<svg><!><path d="M15.992 4.204c-.071 1.556-1.158 3.687-3.262 6.393-2.175 2.829-4.016 4.243-5.522 4.243-.933 0-1.722-.861-2.367-2.583L3.55 7.523C3.07 5.8 2.556 4.94 2.007 4.94c-.118 0-.537.253-1.254.754L0 4.724a209.56 209.56 0 0 0 2.334-2.081c1.054-.91 1.845-1.388 2.373-1.437 1.243-.123 2.01.728 2.298 2.553.31 1.968.526 3.19.646 3.666.36 1.631.756 2.446 1.186 2.445.334 0 .836-.53 1.508-1.587.671-1.058 1.03-1.863 1.077-2.415.096-.913-.263-1.37-1.077-1.37a3.022 3.022 0 0 0-1.185.261c.789-2.573 2.291-3.825 4.508-3.756 1.644.05 2.419 1.117 2.324 3.2z"></path></svg>`), Vimeo[FILENAME], [[1, 0, [[1, 166]]]]);
function Vimeo($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Vimeo);
  var svg = root1989();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-vimeo", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vimeo = hmr(Vimeo, () => Vimeo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vimeo[HMR].source;
    set(Vimeo[HMR].source, module.default[HMR].original);
  });
}
var Vimeo_default = Vimeo;
mark_module_end(Vimeo);

// node_modules/svelte-bootstrap-icons/lib/VinylFill.svelte
mark_module_start();
VinylFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VinylFill.svelte";
var root1990 = add_locations(ns_template(`<svg><!><path d="M8 6a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0 3a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"></path><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM4 8a4 4 0 1 0 8 0 4 4 0 0 0-8 0z"></path></svg>`), VinylFill[FILENAME], [
  [1, 0, [[1, 171], [2, 2]]]
]);
function VinylFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VinylFill);
  var svg = root1990();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-vinyl-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VinylFill = hmr(VinylFill, () => VinylFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VinylFill[HMR].source;
    set(VinylFill[HMR].source, module.default[HMR].original);
  });
}
var VinylFill_default = VinylFill;
mark_module_end(VinylFill);

// node_modules/svelte-bootstrap-icons/lib/Vinyl.svelte
mark_module_start();
Vinyl[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Vinyl.svelte";
var root1991 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M8 6a2 2 0 1 0 0 4 2 2 0 0 0 0-4zM4 8a4 4 0 1 1 8 0 4 4 0 0 1-8 0z"></path><path d="M9 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>`), Vinyl[FILENAME], [
  [
    1,
    0,
    [[1, 166], [2, 2], [3, 2]]
  ]
]);
function Vinyl($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Vinyl);
  var svg = root1991();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-vinyl", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vinyl = hmr(Vinyl, () => Vinyl[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vinyl[HMR].source;
    set(Vinyl[HMR].source, module.default[HMR].original);
  });
}
var Vinyl_default = Vinyl;
mark_module_end(Vinyl);

// node_modules/svelte-bootstrap-icons/lib/Virus.svelte
mark_module_start();
Virus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Virus.svelte";
var root1992 = add_locations(ns_template(`<svg><!><path d="M8 0a1 1 0 0 1 1 1v1.402c0 .511.677.693.933.25l.7-1.214a1 1 0 0 1 1.733 1l-.701 1.214c-.256.443.24.939.683.683l1.214-.701a1 1 0 0 1 1 1.732l-1.214.701c-.443.256-.262.933.25.933H15a1 1 0 1 1 0 2h-1.402c-.512 0-.693.677-.25.933l1.214.701a1 1 0 1 1-1 1.732l-1.214-.7c-.443-.257-.939.24-.683.682l.701 1.214a1 1 0 1 1-1.732 1l-.701-1.214c-.256-.443-.933-.262-.933.25V15a1 1 0 1 1-2 0v-1.402c0-.512-.677-.693-.933-.25l-.701 1.214a1 1 0 0 1-1.732-1l.7-1.214c.257-.443-.24-.939-.682-.683l-1.214.701a1 1 0 1 1-1-1.732l1.214-.701c.443-.256.261-.933-.25-.933H1a1 1 0 1 1 0-2h1.402c.511 0 .693-.677.25-.933l-1.214-.701a1 1 0 1 1 1-1.732l1.214.701c.443.256.939-.24.683-.683l-.701-1.214a1 1 0 0 1 1.732-1l.701 1.214c.256.443.933.261.933-.25V1a1 1 0 0 1 1-1Zm2 5a1 1 0 1 0-2 0 1 1 0 0 0 2 0ZM6 7a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm1 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm5-3a1 1 0 1 0-2 0 1 1 0 0 0 2 0Z"></path></svg>`), Virus[FILENAME], [[1, 0, [[1, 166]]]]);
function Virus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Virus);
  var svg = root1992();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-virus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Virus = hmr(Virus, () => Virus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Virus[HMR].source;
    set(Virus[HMR].source, module.default[HMR].original);
  });
}
var Virus_default = Virus;
mark_module_end(Virus);

// node_modules/svelte-bootstrap-icons/lib/Virus2.svelte
mark_module_start();
Virus2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Virus2.svelte";
var root1993 = add_locations(ns_template(`<svg><!><path d="M8 0a1 1 0 0 0-1 1v1.143c0 .557-.407 1.025-.921 1.24-.514.214-1.12.162-1.513-.231l-.809-.809a1 1 0 1 0-1.414 1.414l.809.809c.394.394.445.999.23 1.513C3.169 6.593 2.7 7 2.144 7H1a1 1 0 0 0 0 2h1.143c.557 0 1.025.407 1.24.921.214.514.163 1.12-.231 1.513l-.809.809a1 1 0 0 0 1.414 1.414l.809-.809c.394-.394.999-.445 1.513-.23.514.214.921.682.921 1.24V15a1 1 0 1 0 2 0v-1.143c0-.557.407-1.025.921-1.24.514-.214 1.12-.162 1.513.231l.809.809a1 1 0 0 0 1.414-1.414l-.809-.809c-.393-.394-.445-.999-.23-1.513.214-.514.682-.921 1.24-.921H15a1 1 0 1 0 0-2h-1.143c-.557 0-1.025-.407-1.24-.921-.214-.514-.162-1.12.231-1.513l.809-.809a1 1 0 0 0-1.414-1.414l-.809.809c-.394.393-.999.445-1.513.23-.514-.214-.92-.682-.92-1.24V1a1 1 0 0 0-1-1Zm2 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM7 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm1 5a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm4-4a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></svg>`), Virus2[FILENAME], [[1, 0, [[1, 167]]]]);
function Virus2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Virus2);
  var svg = root1993();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-virus2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Virus2 = hmr(Virus2, () => Virus2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Virus2[HMR].source;
    set(Virus2[HMR].source, module.default[HMR].original);
  });
}
var Virus2_default = Virus2;
mark_module_end(Virus2);

// node_modules/svelte-bootstrap-icons/lib/Voicemail.svelte
mark_module_start();
Voicemail[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Voicemail.svelte";
var root1994 = add_locations(ns_template(`<svg><!><path d="M7 8.5A3.49 3.49 0 0 1 5.95 11h4.1a3.5 3.5 0 1 1 2.45 1h-9A3.5 3.5 0 1 1 7 8.5zm-6 0a2.5 2.5 0 1 0 5 0 2.5 2.5 0 0 0-5 0zm14 0a2.5 2.5 0 1 0-5 0 2.5 2.5 0 0 0 5 0z"></path></svg>`), Voicemail[FILENAME], [[1, 0, [[1, 170]]]]);
function Voicemail($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Voicemail);
  var svg = root1994();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-voicemail", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Voicemail = hmr(Voicemail, () => Voicemail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Voicemail[HMR].source;
    set(Voicemail[HMR].source, module.default[HMR].original);
  });
}
var Voicemail_default = Voicemail;
mark_module_end(Voicemail);

// node_modules/svelte-bootstrap-icons/lib/VolumeDownFill.svelte
mark_module_start();
VolumeDownFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VolumeDownFill.svelte";
var root1995 = add_locations(ns_template(`<svg><!><path d="M9 4a.5.5 0 0 0-.812-.39L5.825 5.5H3.5A.5.5 0 0 0 3 6v4a.5.5 0 0 0 .5.5h2.325l2.363 1.89A.5.5 0 0 0 9 12V4zm3.025 4a4.486 4.486 0 0 1-1.318 3.182L10 10.475A3.489 3.489 0 0 0 11.025 8 3.49 3.49 0 0 0 10 5.525l.707-.707A4.486 4.486 0 0 1 12.025 8z"></path></svg>`), VolumeDownFill[FILENAME], [[1, 0, [[1, 177]]]]);
function VolumeDownFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VolumeDownFill);
  var svg = root1995();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-volume-down-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeDownFill = hmr(VolumeDownFill, () => VolumeDownFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeDownFill[HMR].source;
    set(VolumeDownFill[HMR].source, module.default[HMR].original);
  });
}
var VolumeDownFill_default = VolumeDownFill;
mark_module_end(VolumeDownFill);

// node_modules/svelte-bootstrap-icons/lib/VolumeDown.svelte
mark_module_start();
VolumeDown[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VolumeDown.svelte";
var root1996 = add_locations(ns_template(`<svg><!><path d="M9 4a.5.5 0 0 0-.812-.39L5.825 5.5H3.5A.5.5 0 0 0 3 6v4a.5.5 0 0 0 .5.5h2.325l2.363 1.89A.5.5 0 0 0 9 12V4zM6.312 6.39 8 5.04v5.92L6.312 9.61A.5.5 0 0 0 6 9.5H4v-3h2a.5.5 0 0 0 .312-.11zM12.025 8a4.486 4.486 0 0 1-1.318 3.182L10 10.475A3.489 3.489 0 0 0 11.025 8 3.49 3.49 0 0 0 10 5.525l.707-.707A4.486 4.486 0 0 1 12.025 8z"></path></svg>`), VolumeDown[FILENAME], [[1, 0, [[1, 172]]]]);
function VolumeDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VolumeDown);
  var svg = root1996();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-volume-down", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeDown = hmr(VolumeDown, () => VolumeDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeDown[HMR].source;
    set(VolumeDown[HMR].source, module.default[HMR].original);
  });
}
var VolumeDown_default = VolumeDown;
mark_module_end(VolumeDown);

// node_modules/svelte-bootstrap-icons/lib/VolumeMuteFill.svelte
mark_module_start();
VolumeMuteFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VolumeMuteFill.svelte";
var root1997 = add_locations(ns_template(`<svg><!><path d="M6.717 3.55A.5.5 0 0 1 7 4v8a.5.5 0 0 1-.812.39L3.825 10.5H1.5A.5.5 0 0 1 1 10V6a.5.5 0 0 1 .5-.5h2.325l2.363-1.89a.5.5 0 0 1 .529-.06zm7.137 2.096a.5.5 0 0 1 0 .708L12.207 8l1.647 1.646a.5.5 0 0 1-.708.708L11.5 8.707l-1.646 1.647a.5.5 0 0 1-.708-.708L10.793 8 9.146 6.354a.5.5 0 1 1 .708-.708L11.5 7.293l1.646-1.647a.5.5 0 0 1 .708 0z"></path></svg>`), VolumeMuteFill[FILENAME], [[1, 0, [[1, 177]]]]);
function VolumeMuteFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VolumeMuteFill);
  var svg = root1997();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-volume-mute-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeMuteFill = hmr(VolumeMuteFill, () => VolumeMuteFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeMuteFill[HMR].source;
    set(VolumeMuteFill[HMR].source, module.default[HMR].original);
  });
}
var VolumeMuteFill_default = VolumeMuteFill;
mark_module_end(VolumeMuteFill);

// node_modules/svelte-bootstrap-icons/lib/VolumeMute.svelte
mark_module_start();
VolumeMute[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VolumeMute.svelte";
var root1998 = add_locations(ns_template(`<svg><!><path d="M6.717 3.55A.5.5 0 0 1 7 4v8a.5.5 0 0 1-.812.39L3.825 10.5H1.5A.5.5 0 0 1 1 10V6a.5.5 0 0 1 .5-.5h2.325l2.363-1.89a.5.5 0 0 1 .529-.06zM6 5.04 4.312 6.39A.5.5 0 0 1 4 6.5H2v3h2a.5.5 0 0 1 .312.11L6 10.96V5.04zm7.854.606a.5.5 0 0 1 0 .708L12.207 8l1.647 1.646a.5.5 0 0 1-.708.708L11.5 8.707l-1.646 1.647a.5.5 0 0 1-.708-.708L10.793 8 9.146 6.354a.5.5 0 1 1 .708-.708L11.5 7.293l1.646-1.647a.5.5 0 0 1 .708 0z"></path></svg>`), VolumeMute[FILENAME], [[1, 0, [[1, 172]]]]);
function VolumeMute($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VolumeMute);
  var svg = root1998();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-volume-mute", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeMute = hmr(VolumeMute, () => VolumeMute[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeMute[HMR].source;
    set(VolumeMute[HMR].source, module.default[HMR].original);
  });
}
var VolumeMute_default = VolumeMute;
mark_module_end(VolumeMute);

// node_modules/svelte-bootstrap-icons/lib/VolumeOffFill.svelte
mark_module_start();
VolumeOffFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VolumeOffFill.svelte";
var root1999 = add_locations(ns_template(`<svg><!><path d="M10.717 3.55A.5.5 0 0 1 11 4v8a.5.5 0 0 1-.812.39L7.825 10.5H5.5A.5.5 0 0 1 5 10V6a.5.5 0 0 1 .5-.5h2.325l2.363-1.89a.5.5 0 0 1 .529-.06z"></path></svg>`), VolumeOffFill[FILENAME], [[1, 0, [[1, 176]]]]);
function VolumeOffFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VolumeOffFill);
  var svg = root1999();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-volume-off-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeOffFill = hmr(VolumeOffFill, () => VolumeOffFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeOffFill[HMR].source;
    set(VolumeOffFill[HMR].source, module.default[HMR].original);
  });
}
var VolumeOffFill_default = VolumeOffFill;
mark_module_end(VolumeOffFill);

// node_modules/svelte-bootstrap-icons/lib/VolumeOff.svelte
mark_module_start();
VolumeOff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VolumeOff.svelte";
var root2000 = add_locations(ns_template(`<svg><!><path d="M10.717 3.55A.5.5 0 0 1 11 4v8a.5.5 0 0 1-.812.39L7.825 10.5H5.5A.5.5 0 0 1 5 10V6a.5.5 0 0 1 .5-.5h2.325l2.363-1.89a.5.5 0 0 1 .529-.06zM10 5.04 8.312 6.39A.5.5 0 0 1 8 6.5H6v3h2a.5.5 0 0 1 .312.11L10 10.96V5.04z"></path></svg>`), VolumeOff[FILENAME], [[1, 0, [[1, 171]]]]);
function VolumeOff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VolumeOff);
  var svg = root2000();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-volume-off", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeOff = hmr(VolumeOff, () => VolumeOff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeOff[HMR].source;
    set(VolumeOff[HMR].source, module.default[HMR].original);
  });
}
var VolumeOff_default = VolumeOff;
mark_module_end(VolumeOff);

// node_modules/svelte-bootstrap-icons/lib/VolumeUpFill.svelte
mark_module_start();
VolumeUpFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VolumeUpFill.svelte";
var root2001 = add_locations(ns_template(`<svg><!><path d="M11.536 14.01A8.473 8.473 0 0 0 14.026 8a8.473 8.473 0 0 0-2.49-6.01l-.708.707A7.476 7.476 0 0 1 13.025 8c0 2.071-.84 3.946-2.197 5.303l.708.707z"></path><path d="M10.121 12.596A6.48 6.48 0 0 0 12.025 8a6.48 6.48 0 0 0-1.904-4.596l-.707.707A5.483 5.483 0 0 1 11.025 8a5.483 5.483 0 0 1-1.61 3.89l.706.706z"></path><path d="M8.707 11.182A4.486 4.486 0 0 0 10.025 8a4.486 4.486 0 0 0-1.318-3.182L8 5.525A3.489 3.489 0 0 1 9.025 8 3.49 3.49 0 0 1 8 10.475l.707.707zM6.717 3.55A.5.5 0 0 1 7 4v8a.5.5 0 0 1-.812.39L3.825 10.5H1.5A.5.5 0 0 1 1 10V6a.5.5 0 0 1 .5-.5h2.325l2.363-1.89a.5.5 0 0 1 .529-.06z"></path></svg>`), VolumeUpFill[FILENAME], [
  [
    1,
    0,
    [[1, 175], [2, 2], [3, 2]]
  ]
]);
function VolumeUpFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VolumeUpFill);
  var svg = root2001();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-volume-up-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeUpFill = hmr(VolumeUpFill, () => VolumeUpFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeUpFill[HMR].source;
    set(VolumeUpFill[HMR].source, module.default[HMR].original);
  });
}
var VolumeUpFill_default = VolumeUpFill;
mark_module_end(VolumeUpFill);

// node_modules/svelte-bootstrap-icons/lib/VolumeUp.svelte
mark_module_start();
VolumeUp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/VolumeUp.svelte";
var root2002 = add_locations(ns_template(`<svg><!><path d="M11.536 14.01A8.473 8.473 0 0 0 14.026 8a8.473 8.473 0 0 0-2.49-6.01l-.708.707A7.476 7.476 0 0 1 13.025 8c0 2.071-.84 3.946-2.197 5.303l.708.707z"></path><path d="M10.121 12.596A6.48 6.48 0 0 0 12.025 8a6.48 6.48 0 0 0-1.904-4.596l-.707.707A5.483 5.483 0 0 1 11.025 8a5.483 5.483 0 0 1-1.61 3.89l.706.706z"></path><path d="M10.025 8a4.486 4.486 0 0 1-1.318 3.182L8 10.475A3.489 3.489 0 0 0 9.025 8c0-.966-.392-1.841-1.025-2.475l.707-.707A4.486 4.486 0 0 1 10.025 8zM7 4a.5.5 0 0 0-.812-.39L3.825 5.5H1.5A.5.5 0 0 0 1 6v4a.5.5 0 0 0 .5.5h2.325l2.363 1.89A.5.5 0 0 0 7 12V4zM4.312 6.39 6 5.04v5.92L4.312 9.61A.5.5 0 0 0 4 9.5H2v-3h2a.5.5 0 0 0 .312-.11z"></path></svg>`), VolumeUp[FILENAME], [
  [
    1,
    0,
    [[1, 170], [2, 2], [3, 2]]
  ]
]);
function VolumeUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, VolumeUp);
  var svg = root2002();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-volume-up", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeUp = hmr(VolumeUp, () => VolumeUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeUp[HMR].source;
    set(VolumeUp[HMR].source, module.default[HMR].original);
  });
}
var VolumeUp_default = VolumeUp;
mark_module_end(VolumeUp);

// node_modules/svelte-bootstrap-icons/lib/Vr.svelte
mark_module_start();
Vr[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Vr.svelte";
var root2003 = add_locations(ns_template(`<svg><!><path d="M3 12V4a1 1 0 0 1 1-1h2.5V2H4a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5v-1H4a1 1 0 0 1-1-1zm6.5 1v1H12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H9.5v1H12a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H9.5zM8 16a.5.5 0 0 1-.5-.5V.5a.5.5 0 0 1 1 0v15a.5.5 0 0 1-.5.5z"></path></svg>`), Vr[FILENAME], [[1, 0, [[1, 163]]]]);
function Vr($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Vr);
  var svg = root2003();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-vr", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vr = hmr(Vr, () => Vr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vr[HMR].source;
    set(Vr[HMR].source, module.default[HMR].original);
  });
}
var Vr_default = Vr;
mark_module_end(Vr);

// node_modules/svelte-bootstrap-icons/lib/WalletFill.svelte
mark_module_start();
WalletFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WalletFill.svelte";
var root2004 = add_locations(ns_template(`<svg><!><path d="M1.5 2A1.5 1.5 0 0 0 0 3.5v2h6a.5.5 0 0 1 .5.5c0 .253.08.644.306.958.207.288.557.542 1.194.542.637 0 .987-.254 1.194-.542.226-.314.306-.705.306-.958a.5.5 0 0 1 .5-.5h6v-2A1.5 1.5 0 0 0 14.5 2h-13z"></path><path d="M16 6.5h-5.551a2.678 2.678 0 0 1-.443 1.042C9.613 8.088 8.963 8.5 8 8.5c-.963 0-1.613-.412-2.006-.958A2.679 2.679 0 0 1 5.551 6.5H0v6A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-6z"></path></svg>`), WalletFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function WalletFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WalletFill);
  var svg = root2004();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wallet-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WalletFill = hmr(WalletFill, () => WalletFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WalletFill[HMR].source;
    set(WalletFill[HMR].source, module.default[HMR].original);
  });
}
var WalletFill_default = WalletFill;
mark_module_end(WalletFill);

// node_modules/svelte-bootstrap-icons/lib/Wallet.svelte
mark_module_start();
Wallet[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wallet.svelte";
var root2005 = add_locations(ns_template(`<svg><!><path d="M0 3a2 2 0 0 1 2-2h13.5a.5.5 0 0 1 0 1H15v2a1 1 0 0 1 1 1v8.5a1.5 1.5 0 0 1-1.5 1.5h-12A2.5 2.5 0 0 1 0 12.5V3zm1 1.732V12.5A1.5 1.5 0 0 0 2.5 14h12a.5.5 0 0 0 .5-.5V5H2a1.99 1.99 0 0 1-1-.268zM1 3a1 1 0 0 0 1 1h12V2H2a1 1 0 0 0-1 1z"></path></svg>`), Wallet[FILENAME], [[1, 0, [[1, 167]]]]);
function Wallet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wallet);
  var svg = root2005();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wallet", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wallet = hmr(Wallet, () => Wallet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wallet[HMR].source;
    set(Wallet[HMR].source, module.default[HMR].original);
  });
}
var Wallet_default = Wallet;
mark_module_end(Wallet);

// node_modules/svelte-bootstrap-icons/lib/Wallet2.svelte
mark_module_start();
Wallet2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wallet2.svelte";
var root2006 = add_locations(ns_template(`<svg><!><path d="M12.136.326A1.5 1.5 0 0 1 14 1.78V3h.5A1.5 1.5 0 0 1 16 4.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 13.5v-9a1.5 1.5 0 0 1 1.432-1.499L12.136.326zM5.562 3H13V1.78a.5.5 0 0 0-.621-.484L5.562 3zM1.5 4a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-13z"></path></svg>`), Wallet2[FILENAME], [[1, 0, [[1, 168]]]]);
function Wallet2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wallet2);
  var svg = root2006();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wallet2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wallet2 = hmr(Wallet2, () => Wallet2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wallet2[HMR].source;
    set(Wallet2[HMR].source, module.default[HMR].original);
  });
}
var Wallet2_default = Wallet2;
mark_module_end(Wallet2);

// node_modules/svelte-bootstrap-icons/lib/Watch.svelte
mark_module_start();
Watch[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Watch.svelte";
var root2007 = add_locations(ns_template(`<svg><!><path d="M8.5 5a.5.5 0 0 0-1 0v2.5H6a.5.5 0 0 0 0 1h2a.5.5 0 0 0 .5-.5V5z"></path><path d="M5.667 16C4.747 16 4 15.254 4 14.333v-1.86A5.985 5.985 0 0 1 2 8c0-1.777.772-3.374 2-4.472V1.667C4 .747 4.746 0 5.667 0h4.666C11.253 0 12 .746 12 1.667v1.86a5.99 5.99 0 0 1 1.918 3.48.502.502 0 0 1 .582.493v1a.5.5 0 0 1-.582.493A5.99 5.99 0 0 1 12 12.473v1.86c0 .92-.746 1.667-1.667 1.667H5.667zM13 8A5 5 0 1 0 3 8a5 5 0 0 0 10 0z"></path></svg>`), Watch[FILENAME], [
  [1, 0, [[1, 166], [2, 2]]]
]);
function Watch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Watch);
  var svg = root2007();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-watch", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Watch = hmr(Watch, () => Watch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Watch[HMR].source;
    set(Watch[HMR].source, module.default[HMR].original);
  });
}
var Watch_default = Watch;
mark_module_end(Watch);

// node_modules/svelte-bootstrap-icons/lib/Water.svelte
mark_module_start();
Water[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Water.svelte";
var root2008 = add_locations(ns_template(`<svg><!><path d="M.036 3.314a.5.5 0 0 1 .65-.278l1.757.703a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.757-.703a.5.5 0 1 1 .372.928l-1.758.703a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0L.314 3.964a.5.5 0 0 1-.278-.65zm0 3a.5.5 0 0 1 .65-.278l1.757.703a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.757-.703a.5.5 0 1 1 .372.928l-1.758.703a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0L.314 6.964a.5.5 0 0 1-.278-.65zm0 3a.5.5 0 0 1 .65-.278l1.757.703a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.757-.703a.5.5 0 1 1 .372.928l-1.758.703a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0L.314 9.964a.5.5 0 0 1-.278-.65zm0 3a.5.5 0 0 1 .65-.278l1.757.703a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.014-.406a2.5 2.5 0 0 1 1.857 0l1.015.406a1.5 1.5 0 0 0 1.114 0l1.757-.703a.5.5 0 1 1 .372.928l-1.758.703a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0l-1.014-.406a1.5 1.5 0 0 0-1.114 0l-1.015.406a2.5 2.5 0 0 1-1.857 0l-1.757-.703a.5.5 0 0 1-.278-.65z"></path></svg>`), Water[FILENAME], [[1, 0, [[1, 166]]]]);
function Water($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Water);
  var svg = root2008();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-water", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Water = hmr(Water, () => Water[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Water[HMR].source;
    set(Water[HMR].source, module.default[HMR].original);
  });
}
var Water_default = Water;
mark_module_end(Water);

// node_modules/svelte-bootstrap-icons/lib/WebcamFill.svelte
mark_module_start();
WebcamFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WebcamFill.svelte";
var root2009 = add_locations(ns_template(`<svg><!><path d="M6.644 11.094a.5.5 0 0 1 .356-.15h2a.5.5 0 0 1 .356.15c.175.177.39.347.603.496a7.166 7.166 0 0 0 .752.456l.01.006h.003A.5.5 0 0 1 10.5 13h-5a.5.5 0 0 1-.224-.947l.002-.001.01-.006a3.517 3.517 0 0 0 .214-.116 7.5 7.5 0 0 0 .539-.34c.214-.15.428-.319.603-.496ZM7 6.5a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z"></path><path d="M2 3a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H2Zm6 1.5a2 2 0 1 1 0 4 2 2 0 0 1 0-4ZM12.5 7a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Z"></path></svg>`), WebcamFill[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function WebcamFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WebcamFill);
  var svg = root2009();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-webcam-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WebcamFill = hmr(WebcamFill, () => WebcamFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WebcamFill[HMR].source;
    set(WebcamFill[HMR].source, module.default[HMR].original);
  });
}
var WebcamFill_default = WebcamFill;
mark_module_end(WebcamFill);

// node_modules/svelte-bootstrap-icons/lib/Webcam.svelte
mark_module_start();
Webcam[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Webcam.svelte";
var root2010 = add_locations(ns_template(`<svg><!><path d="M0 6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H9.269c.144.162.33.324.531.475a6.785 6.785 0 0 0 .907.57l.014.006.003.002A.5.5 0 0 1 10.5 13h-5a.5.5 0 0 1-.224-.947l.003-.002.014-.007a4.473 4.473 0 0 0 .268-.148 6.75 6.75 0 0 0 .639-.421c.2-.15.387-.313.531-.475H2a2 2 0 0 1-2-2V6Zm2-1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H2Z"></path><path d="M8 6.5a1 1 0 1 0 0 2 1 1 0 0 0 0-2Zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm7 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`), Webcam[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Webcam($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Webcam);
  var svg = root2010();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-webcam", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Webcam = hmr(Webcam, () => Webcam[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Webcam[HMR].source;
    set(Webcam[HMR].source, module.default[HMR].original);
  });
}
var Webcam_default = Webcam;
mark_module_end(Webcam);

// node_modules/svelte-bootstrap-icons/lib/Wechat.svelte
mark_module_start();
Wechat[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wechat.svelte";
var root2011 = add_locations(ns_template(`<svg><!><path d="M11.176 14.429c-2.665 0-4.826-1.8-4.826-4.018 0-2.22 2.159-4.02 4.824-4.02S16 8.191 16 10.411c0 1.21-.65 2.301-1.666 3.036a.324.324 0 0 0-.12.366l.218.81a.616.616 0 0 1 .029.117.166.166 0 0 1-.162.162.177.177 0 0 1-.092-.03l-1.057-.61a.519.519 0 0 0-.256-.074.509.509 0 0 0-.142.021 5.668 5.668 0 0 1-1.576.22ZM9.064 9.542a.647.647 0 1 0 .557-1 .645.645 0 0 0-.646.647.615.615 0 0 0 .09.353Zm3.232.001a.646.646 0 1 0 .546-1 .645.645 0 0 0-.644.644.627.627 0 0 0 .098.356Z"></path><path d="M0 6.826c0 1.455.781 2.765 2.001 3.656a.385.385 0 0 1 .143.439l-.161.6-.1.373a.499.499 0 0 0-.032.14.192.192 0 0 0 .193.193c.039 0 .077-.01.111-.029l1.268-.733a.622.622 0 0 1 .308-.088c.058 0 .116.009.171.025a6.83 6.83 0 0 0 1.625.26 4.45 4.45 0 0 1-.177-1.251c0-2.936 2.785-5.02 5.824-5.02.05 0 .1 0 .15.002C10.587 3.429 8.392 2 5.796 2 2.596 2 0 4.16 0 6.826Zm4.632-1.555a.77.77 0 1 1-1.54 0 .77.77 0 0 1 1.54 0Zm3.875 0a.77.77 0 1 1-1.54 0 .77.77 0 0 1 1.54 0Z"></path></svg>`), Wechat[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Wechat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wechat);
  var svg = root2011();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wechat", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wechat = hmr(Wechat, () => Wechat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wechat[HMR].source;
    set(Wechat[HMR].source, module.default[HMR].original);
  });
}
var Wechat_default = Wechat;
mark_module_end(Wechat);

// node_modules/svelte-bootstrap-icons/lib/Whatsapp.svelte
mark_module_start();
Whatsapp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Whatsapp.svelte";
var root2012 = add_locations(ns_template(`<svg><!><path d="M13.601 2.326A7.854 7.854 0 0 0 7.994 0C3.627 0 .068 3.558.064 7.926c0 1.399.366 2.76 1.057 3.965L0 16l4.204-1.102a7.933 7.933 0 0 0 3.79.965h.004c4.368 0 7.926-3.558 7.93-7.93A7.898 7.898 0 0 0 13.6 2.326zM7.994 14.521a6.573 6.573 0 0 1-3.356-.92l-.24-.144-2.494.654.666-2.433-.156-.251a6.56 6.56 0 0 1-1.007-3.505c0-3.626 2.957-6.584 6.591-6.584a6.56 6.56 0 0 1 4.66 1.931 6.557 6.557 0 0 1 1.928 4.66c-.004 3.639-2.961 6.592-6.592 6.592zm3.615-4.934c-.197-.099-1.17-.578-1.353-.646-.182-.065-.315-.099-.445.099-.133.197-.513.646-.627.775-.114.133-.232.148-.43.05-.197-.1-.836-.308-1.592-.985-.59-.525-.985-1.175-1.103-1.372-.114-.198-.011-.304.088-.403.087-.088.197-.232.296-.346.1-.114.133-.198.198-.33.065-.134.034-.248-.015-.347-.05-.099-.445-1.076-.612-1.47-.16-.389-.323-.335-.445-.34-.114-.007-.247-.007-.38-.007a.729.729 0 0 0-.529.247c-.182.198-.691.677-.691 1.654 0 .977.71 1.916.81 2.049.098.133 1.394 2.132 3.383 2.992.47.205.84.326 1.129.418.475.152.904.129 1.246.08.38-.058 1.171-.48 1.338-.943.164-.464.164-.86.114-.943-.049-.084-.182-.133-.38-.232z"></path></svg>`), Whatsapp[FILENAME], [[1, 0, [[1, 169]]]]);
function Whatsapp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Whatsapp);
  var svg = root2012();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-whatsapp", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Whatsapp = hmr(Whatsapp, () => Whatsapp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Whatsapp[HMR].source;
    set(Whatsapp[HMR].source, module.default[HMR].original);
  });
}
var Whatsapp_default = Whatsapp;
mark_module_end(Whatsapp);

// node_modules/svelte-bootstrap-icons/lib/Wifi1.svelte
mark_module_start();
Wifi1[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wifi1.svelte";
var root2013 = add_locations(ns_template(`<svg><!><path d="M11.046 10.454c.226-.226.185-.605-.1-.75A6.473 6.473 0 0 0 8 9c-1.06 0-2.062.254-2.946.704-.285.145-.326.524-.1.75l.015.015c.16.16.407.19.611.09A5.478 5.478 0 0 1 8 10c.868 0 1.69.201 2.42.56.203.1.45.07.611-.091l.015-.015zM9.06 12.44c.196-.196.198-.52-.04-.66A1.99 1.99 0 0 0 8 11.5a1.99 1.99 0 0 0-1.02.28c-.238.14-.236.464-.04.66l.706.706a.5.5 0 0 0 .707 0l.708-.707z"></path></svg>`), Wifi1[FILENAME], [[1, 0, [[1, 167]]]]);
function Wifi1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wifi1);
  var svg = root2013();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wifi-1", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi1 = hmr(Wifi1, () => Wifi1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi1[HMR].source;
    set(Wifi1[HMR].source, module.default[HMR].original);
  });
}
var Wifi1_default = Wifi1;
mark_module_end(Wifi1);

// node_modules/svelte-bootstrap-icons/lib/Wifi2.svelte
mark_module_start();
Wifi2[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wifi2.svelte";
var root2014 = add_locations(ns_template(`<svg><!><path d="M13.229 8.271c.216-.216.194-.578-.063-.745A9.456 9.456 0 0 0 8 6c-1.905 0-3.68.56-5.166 1.526a.48.48 0 0 0-.063.745.525.525 0 0 0 .652.065A8.46 8.46 0 0 1 8 7a8.46 8.46 0 0 1 4.577 1.336c.205.132.48.108.652-.065zm-2.183 2.183c.226-.226.185-.605-.1-.75A6.473 6.473 0 0 0 8 9c-1.06 0-2.062.254-2.946.704-.285.145-.326.524-.1.75l.015.015c.16.16.408.19.611.09A5.478 5.478 0 0 1 8 10c.868 0 1.69.201 2.42.56.203.1.45.07.611-.091l.015-.015zM9.06 12.44c.196-.196.198-.52-.04-.66A1.99 1.99 0 0 0 8 11.5a1.99 1.99 0 0 0-1.02.28c-.238.14-.236.464-.04.66l.706.706a.5.5 0 0 0 .708 0l.707-.707z"></path></svg>`), Wifi2[FILENAME], [[1, 0, [[1, 167]]]]);
function Wifi2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wifi2);
  var svg = root2014();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wifi-2", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi2 = hmr(Wifi2, () => Wifi2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi2[HMR].source;
    set(Wifi2[HMR].source, module.default[HMR].original);
  });
}
var Wifi2_default = Wifi2;
mark_module_end(Wifi2);

// node_modules/svelte-bootstrap-icons/lib/WifiOff.svelte
mark_module_start();
WifiOff[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WifiOff.svelte";
var root2015 = add_locations(ns_template(`<svg><!><path d="M10.706 3.294A12.545 12.545 0 0 0 8 3C5.259 3 2.723 3.882.663 5.379a.485.485 0 0 0-.048.736.518.518 0 0 0 .668.05A11.448 11.448 0 0 1 8 4c.63 0 1.249.05 1.852.148l.854-.854zM8 6c-1.905 0-3.68.56-5.166 1.526a.48.48 0 0 0-.063.745.525.525 0 0 0 .652.065 8.448 8.448 0 0 1 3.51-1.27L8 6zm2.596 1.404.785-.785c.63.24 1.227.545 1.785.907a.482.482 0 0 1 .063.745.525.525 0 0 1-.652.065 8.462 8.462 0 0 0-1.98-.932zM8 10l.933-.933a6.455 6.455 0 0 1 2.013.637c.285.145.326.524.1.75l-.015.015a.532.532 0 0 1-.611.09A5.478 5.478 0 0 0 8 10zm4.905-4.905.747-.747c.59.3 1.153.645 1.685 1.03a.485.485 0 0 1 .047.737.518.518 0 0 1-.668.05 11.493 11.493 0 0 0-1.811-1.07zM9.02 11.78c.238.14.236.464.04.66l-.707.706a.5.5 0 0 1-.707 0l-.707-.707c-.195-.195-.197-.518.04-.66A1.99 1.99 0 0 1 8 11.5c.374 0 .723.102 1.021.28zm4.355-9.905a.53.53 0 0 1 .75.75l-10.75 10.75a.53.53 0 0 1-.75-.75l10.75-10.75z"></path></svg>`), WifiOff[FILENAME], [[1, 0, [[1, 169]]]]);
function WifiOff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WifiOff);
  var svg = root2015();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wifi-off", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WifiOff = hmr(WifiOff, () => WifiOff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WifiOff[HMR].source;
    set(WifiOff[HMR].source, module.default[HMR].original);
  });
}
var WifiOff_default = WifiOff;
mark_module_end(WifiOff);

// node_modules/svelte-bootstrap-icons/lib/Wifi.svelte
mark_module_start();
Wifi[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wifi.svelte";
var root2016 = add_locations(ns_template(`<svg><!><path d="M15.384 6.115a.485.485 0 0 0-.047-.736A12.444 12.444 0 0 0 8 3C5.259 3 2.723 3.882.663 5.379a.485.485 0 0 0-.048.736.518.518 0 0 0 .668.05A11.448 11.448 0 0 1 8 4c2.507 0 4.827.802 6.716 2.164.205.148.49.13.668-.049z"></path><path d="M13.229 8.271a.482.482 0 0 0-.063-.745A9.455 9.455 0 0 0 8 6c-1.905 0-3.68.56-5.166 1.526a.48.48 0 0 0-.063.745.525.525 0 0 0 .652.065A8.46 8.46 0 0 1 8 7a8.46 8.46 0 0 1 4.576 1.336c.206.132.48.108.653-.065zm-2.183 2.183c.226-.226.185-.605-.1-.75A6.473 6.473 0 0 0 8 9c-1.06 0-2.062.254-2.946.704-.285.145-.326.524-.1.75l.015.015c.16.16.407.19.611.09A5.478 5.478 0 0 1 8 10c.868 0 1.69.201 2.42.56.203.1.45.07.61-.091l.016-.015zM9.06 12.44c.196-.196.198-.52-.04-.66A1.99 1.99 0 0 0 8 11.5a1.99 1.99 0 0 0-1.02.28c-.238.14-.236.464-.04.66l.706.706a.5.5 0 0 0 .707 0l.707-.707z"></path></svg>`), Wifi[FILENAME], [
  [1, 0, [[1, 165], [2, 2]]]
]);
function Wifi($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wifi);
  var svg = root2016();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wifi", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi = hmr(Wifi, () => Wifi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi[HMR].source;
    set(Wifi[HMR].source, module.default[HMR].original);
  });
}
var Wifi_default = Wifi;
mark_module_end(Wifi);

// node_modules/svelte-bootstrap-icons/lib/Wikipedia.svelte
mark_module_start();
Wikipedia[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wikipedia.svelte";
var root2017 = add_locations(ns_template(`<svg><!><path d="M8.835 3.003c.828-.006 2.688 0 2.688 0l.033.03v.288c0 .08-.045.12-.133.12-.433.02-.522.063-.68.29-.087.126-.258.393-.435.694l-1.52 2.843-.043.089 1.858 3.801.113.031 2.926-6.946c.102-.28.086-.478-.044-.595-.132-.114-.224-.18-.563-.195l-.275-.014a.161.161 0 0 1-.096-.035.1.1 0 0 1-.046-.084v-.289l.042-.03h3.306l.034.03v.29c0 .078-.045.117-.133.117-.433.02-.754.113-.962.281a1.64 1.64 0 0 0-.488.704s-2.691 6.16-3.612 8.208c-.353.672-.7.61-1.004-.019A224.05 224.05 0 0 1 8.044 8.81c-.623 1.285-1.475 3.026-1.898 3.81-.411.715-.75.622-1.02.019-.45-1.065-1.131-2.519-1.817-3.982-.735-1.569-1.475-3.149-1.943-4.272-.167-.4-.293-.657-.412-.759-.12-.1-.368-.16-.746-.18C.069 3.429 0 3.395 0 3.341v-.303l.034-.03c.615-.003 3.594 0 3.594 0l.034.03v.288c0 .08-.05.118-.15.118l-.375.016c-.322.013-.483.11-.483.288 0 .083.034.217.109.4.72 1.753 3.207 6.998 3.207 6.998l.091.023 1.603-3.197-.32-.71L6.24 5.095s-.213-.433-.286-.577l-.098-.196c-.387-.77-.411-.82-.865-.88-.137-.017-.208-.035-.208-.102v-.304l.041-.03h2.853l.075.024v.303c0 .069-.05.104-.15.104l-.206.03c-.523.04-.438.254-.09.946l1.057 2.163 1.17-2.332c.195-.427.155-.534.074-.633-.046-.055-.202-.144-.54-.158l-.133-.015a.159.159 0 0 1-.096-.034.099.099 0 0 1-.045-.085v-.288l.041-.03Z"></path></svg>`), Wikipedia[FILENAME], [[1, 0, [[1, 170]]]]);
function Wikipedia($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wikipedia);
  var svg = root2017();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wikipedia", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wikipedia = hmr(Wikipedia, () => Wikipedia[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wikipedia[HMR].source;
    set(Wikipedia[HMR].source, module.default[HMR].original);
  });
}
var Wikipedia_default = Wikipedia;
mark_module_end(Wikipedia);

// node_modules/svelte-bootstrap-icons/lib/Wind.svelte
mark_module_start();
Wind[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wind.svelte";
var root2018 = add_locations(ns_template(`<svg><!><path d="M12.5 2A2.5 2.5 0 0 0 10 4.5a.5.5 0 0 1-1 0A3.5 3.5 0 1 1 12.5 8H.5a.5.5 0 0 1 0-1h12a2.5 2.5 0 0 0 0-5zm-7 1a1 1 0 0 0-1 1 .5.5 0 0 1-1 0 2 2 0 1 1 2 2h-5a.5.5 0 0 1 0-1h5a1 1 0 0 0 0-2zM0 9.5A.5.5 0 0 1 .5 9h10.042a3 3 0 1 1-3 3 .5.5 0 0 1 1 0 2 2 0 1 0 2-2H.5a.5.5 0 0 1-.5-.5z"></path></svg>`), Wind[FILENAME], [[1, 0, [[1, 165]]]]);
function Wind($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wind);
  var svg = root2018();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wind", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wind = hmr(Wind, () => Wind[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wind[HMR].source;
    set(Wind[HMR].source, module.default[HMR].original);
  });
}
var Wind_default = Wind;
mark_module_end(Wind);

// node_modules/svelte-bootstrap-icons/lib/WindowDash.svelte
mark_module_start();
WindowDash[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WindowDash.svelte";
var root2019 = add_locations(ns_template(`<svg><!><path d="M2.5 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1ZM4 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm2-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path><path d="M0 4a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v4a.5.5 0 0 1-1 0V7H1v5a1 1 0 0 0 1 1h5.5a.5.5 0 0 1 0 1H2a2 2 0 0 1-2-2V4Zm1 2h13V4a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-5.5 0a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 0-1h-3a.5.5 0 0 0-.5.5Z"></path></svg>`), WindowDash[FILENAME], [
  [
    1,
    0,
    [[1, 172], [2, 2], [3, 2]]
  ]
]);
function WindowDash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WindowDash);
  var svg = root2019();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window-dash", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindowDash = hmr(WindowDash, () => WindowDash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindowDash[HMR].source;
    set(WindowDash[HMR].source, module.default[HMR].original);
  });
}
var WindowDash_default = WindowDash;
mark_module_end(WindowDash);

// node_modules/svelte-bootstrap-icons/lib/WindowDesktop.svelte
mark_module_start();
WindowDesktop[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WindowDesktop.svelte";
var root2020 = add_locations(ns_template(`<svg><!><path d="M3.5 11a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-9Z"></path><path d="M2.375 1A2.366 2.366 0 0 0 0 3.357v9.286A2.366 2.366 0 0 0 2.375 15h11.25A2.366 2.366 0 0 0 16 12.643V3.357A2.366 2.366 0 0 0 13.625 1H2.375ZM1 3.357C1 2.612 1.611 2 2.375 2h11.25C14.389 2 15 2.612 15 3.357V4H1v-.643ZM1 5h14v7.643c0 .745-.611 1.357-1.375 1.357H2.375A1.366 1.366 0 0 1 1 12.643V5Z"></path></svg>`), WindowDesktop[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function WindowDesktop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WindowDesktop);
  var svg = root2020();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window-desktop", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindowDesktop = hmr(WindowDesktop, () => WindowDesktop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindowDesktop[HMR].source;
    set(WindowDesktop[HMR].source, module.default[HMR].original);
  });
}
var WindowDesktop_default = WindowDesktop;
mark_module_end(WindowDesktop);

// node_modules/svelte-bootstrap-icons/lib/WindowDock.svelte
mark_module_start();
WindowDock[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WindowDock.svelte";
var root2021 = add_locations(ns_template(`<svg><!><path d="M3.5 11a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm3.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm4.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z"></path><path d="M14 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h12ZM2 14h12a1 1 0 0 0 1-1V5H1v8a1 1 0 0 0 1 1ZM2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1H2Z"></path></svg>`), WindowDock[FILENAME], [
  [1, 0, [[1, 172], [2, 2]]]
]);
function WindowDock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WindowDock);
  var svg = root2021();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window-dock", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindowDock = hmr(WindowDock, () => WindowDock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindowDock[HMR].source;
    set(WindowDock[HMR].source, module.default[HMR].original);
  });
}
var WindowDock_default = WindowDock;
mark_module_end(WindowDock);

// node_modules/svelte-bootstrap-icons/lib/WindowFullscreen.svelte
mark_module_start();
WindowFullscreen[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WindowFullscreen.svelte";
var root2022 = add_locations(ns_template(`<svg><!><path d="M3 3.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1.5 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1 .5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path><path d="M.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5h15a.5.5 0 0 0 .5-.5v-13a.5.5 0 0 0-.5-.5H.5ZM1 5V2h14v3H1Zm0 1h14v8H1V6Z"></path></svg>`), WindowFullscreen[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function WindowFullscreen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WindowFullscreen);
  var svg = root2022();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window-fullscreen", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindowFullscreen = hmr(WindowFullscreen, () => WindowFullscreen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindowFullscreen[HMR].source;
    set(WindowFullscreen[HMR].source, module.default[HMR].original);
  });
}
var WindowFullscreen_default = WindowFullscreen;
mark_module_end(WindowFullscreen);

// node_modules/svelte-bootstrap-icons/lib/WindowPlus.svelte
mark_module_start();
WindowPlus[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WindowPlus.svelte";
var root2023 = add_locations(ns_template(`<svg><!><path d="M2.5 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1ZM4 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm2-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path><path d="M0 4a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v4a.5.5 0 0 1-1 0V7H1v5a1 1 0 0 0 1 1h5.5a.5.5 0 0 1 0 1H2a2 2 0 0 1-2-2V4Zm1 2h13V4a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5Z"></path></svg>`), WindowPlus[FILENAME], [
  [
    1,
    0,
    [[1, 172], [2, 2], [3, 2]]
  ]
]);
function WindowPlus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WindowPlus);
  var svg = root2023();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window-plus", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindowPlus = hmr(WindowPlus, () => WindowPlus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindowPlus[HMR].source;
    set(WindowPlus[HMR].source, module.default[HMR].original);
  });
}
var WindowPlus_default = WindowPlus;
mark_module_end(WindowPlus);

// node_modules/svelte-bootstrap-icons/lib/WindowSidebar.svelte
mark_module_start();
WindowSidebar[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WindowSidebar.svelte";
var root2024 = add_locations(ns_template(`<svg><!><path d="M2.5 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm2-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm1 .5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1z"></path><path d="M2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2zm12 1a1 1 0 0 1 1 1v2H1V3a1 1 0 0 1 1-1h12zM1 13V6h4v8H2a1 1 0 0 1-1-1zm5 1V6h9v7a1 1 0 0 1-1 1H6z"></path></svg>`), WindowSidebar[FILENAME], [
  [1, 0, [[1, 175], [2, 2]]]
]);
function WindowSidebar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WindowSidebar);
  var svg = root2024();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window-sidebar", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindowSidebar = hmr(WindowSidebar, () => WindowSidebar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindowSidebar[HMR].source;
    set(WindowSidebar[HMR].source, module.default[HMR].original);
  });
}
var WindowSidebar_default = WindowSidebar;
mark_module_end(WindowSidebar);

// node_modules/svelte-bootstrap-icons/lib/WindowSplit.svelte
mark_module_start();
WindowSplit[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WindowSplit.svelte";
var root2025 = add_locations(ns_template(`<svg><!><path d="M2.5 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm2-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1 .5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path><path d="M2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2Zm12 1a1 1 0 0 1 1 1v2H1V3a1 1 0 0 1 1-1h12ZM1 13V6h6.5v8H2a1 1 0 0 1-1-1Zm7.5 1V6H15v7a1 1 0 0 1-1 1H8.5Z"></path></svg>`), WindowSplit[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function WindowSplit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WindowSplit);
  var svg = root2025();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window-split", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindowSplit = hmr(WindowSplit, () => WindowSplit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindowSplit[HMR].source;
    set(WindowSplit[HMR].source, module.default[HMR].original);
  });
}
var WindowSplit_default = WindowSplit;
mark_module_end(WindowSplit);

// node_modules/svelte-bootstrap-icons/lib/WindowStack.svelte
mark_module_start();
WindowStack[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WindowStack.svelte";
var root2026 = add_locations(ns_template(`<svg><!><path d="M4.5 6a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1ZM6 6a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm2-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path><path d="M12 1a2 2 0 0 1 2 2 2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2 2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h10ZM2 12V5a2 2 0 0 1 2-2h9a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1Zm1-4v5a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V8H3Zm12-1V5a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v2h12Z"></path></svg>`), WindowStack[FILENAME], [
  [1, 0, [[1, 173], [2, 2]]]
]);
function WindowStack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WindowStack);
  var svg = root2026();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window-stack", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindowStack = hmr(WindowStack, () => WindowStack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindowStack[HMR].source;
    set(WindowStack[HMR].source, module.default[HMR].original);
  });
}
var WindowStack_default = WindowStack;
mark_module_end(WindowStack);

// node_modules/svelte-bootstrap-icons/lib/WindowX.svelte
mark_module_start();
WindowX[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WindowX.svelte";
var root2027 = add_locations(ns_template(`<svg><!><path d="M2.5 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1ZM4 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm2-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path><path d="M0 4a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v4a.5.5 0 0 1-1 0V7H1v5a1 1 0 0 0 1 1h5.5a.5.5 0 0 1 0 1H2a2 2 0 0 1-2-2V4Zm1 2h13V4a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2Z"></path><path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-4.854-1.354a.5.5 0 0 0 0 .708l.647.646-.647.646a.5.5 0 0 0 .708.708l.646-.647.646.647a.5.5 0 0 0 .708-.708l-.647-.646.647-.646a.5.5 0 0 0-.708-.708l-.646.647-.646-.647a.5.5 0 0 0-.708 0Z"></path></svg>`), WindowX[FILENAME], [
  [
    1,
    0,
    [[1, 169], [2, 2], [3, 2]]
  ]
]);
function WindowX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WindowX);
  var svg = root2027();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindowX = hmr(WindowX, () => WindowX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindowX[HMR].source;
    set(WindowX[HMR].source, module.default[HMR].original);
  });
}
var WindowX_default = WindowX;
mark_module_end(WindowX);

// node_modules/svelte-bootstrap-icons/lib/Window.svelte
mark_module_start();
Window[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Window.svelte";
var root2028 = add_locations(ns_template(`<svg><!><path d="M2.5 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm2-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm1 .5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1z"></path><path d="M2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2zm13 2v2H1V3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1zM2 14a1 1 0 0 1-1-1V6h14v7a1 1 0 0 1-1 1H2z"></path></svg>`), Window[FILENAME], [
  [1, 0, [[1, 167], [2, 2]]]
]);
function Window($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Window);
  var svg = root2028();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-window", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Window = hmr(Window, () => Window[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Window[HMR].source;
    set(Window[HMR].source, module.default[HMR].original);
  });
}
var Window_default = Window;
mark_module_end(Window);

// node_modules/svelte-bootstrap-icons/lib/Windows.svelte
mark_module_start();
Windows[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Windows.svelte";
var root2029 = add_locations(ns_template(`<svg><!><path d="M6.555 1.375 0 2.237v5.45h6.555V1.375zM0 13.795l6.555.933V8.313H0v5.482zm7.278-5.4.026 6.378L16 16V8.395H7.278zM16 0 7.33 1.244v6.414H16V0z"></path></svg>`), Windows[FILENAME], [[1, 0, [[1, 168]]]]);
function Windows($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Windows);
  var svg = root2029();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-windows", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Windows = hmr(Windows, () => Windows[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Windows[HMR].source;
    set(Windows[HMR].source, module.default[HMR].original);
  });
}
var Windows_default = Windows;
mark_module_end(Windows);

// node_modules/svelte-bootstrap-icons/lib/Wordpress.svelte
mark_module_start();
Wordpress[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wordpress.svelte";
var root2030 = add_locations(ns_template(`<svg><!><path d="M12.633 7.653c0-.848-.305-1.435-.566-1.892l-.08-.13c-.317-.51-.594-.958-.594-1.48 0-.63.478-1.218 1.152-1.218.02 0 .039.002.058.003l.031.003A6.838 6.838 0 0 0 8 1.137 6.855 6.855 0 0 0 2.266 4.23c.16.005.313.009.442.009.717 0 1.828-.087 1.828-.087.37-.022.414.521.044.565 0 0-.371.044-.785.065l2.5 7.434 1.5-4.506-1.07-2.929c-.369-.022-.719-.065-.719-.065-.37-.022-.326-.588.043-.566 0 0 1.134.087 1.808.087.718 0 1.83-.087 1.83-.087.37-.022.413.522.043.566 0 0-.372.043-.785.065l2.48 7.377.684-2.287.054-.173c.27-.86.469-1.495.469-2.046zM1.137 8a6.864 6.864 0 0 0 3.868 6.176L1.73 5.206A6.837 6.837 0 0 0 1.137 8z"></path><path d="M6.061 14.583 8.121 8.6l2.109 5.78c.014.033.03.064.049.094a6.854 6.854 0 0 1-4.218.109zm7.96-9.876c.03.219.047.453.047.706 0 .696-.13 1.479-.522 2.458l-2.096 6.06a6.86 6.86 0 0 0 2.572-9.224z"></path><path fill-rule="evenodd" d="M0 8c0-4.411 3.589-8 8-8 4.41 0 8 3.589 8 8s-3.59 8-8 8c-4.411 0-8-3.589-8-8zm.367 0c0 4.209 3.424 7.633 7.633 7.633 4.208 0 7.632-3.424 7.632-7.633C15.632 3.79 12.208.367 8 .367 3.79.367.367 3.79.367 8z"></path></svg>`), Wordpress[FILENAME], [
  [
    1,
    0,
    [[1, 170], [2, 2], [3, 2]]
  ]
]);
function Wordpress($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wordpress);
  var svg = root2030();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wordpress", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wordpress = hmr(Wordpress, () => Wordpress[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wordpress[HMR].source;
    set(Wordpress[HMR].source, module.default[HMR].original);
  });
}
var Wordpress_default = Wordpress;
mark_module_end(Wordpress);

// node_modules/svelte-bootstrap-icons/lib/WrenchAdjustableCircleFill.svelte
mark_module_start();
WrenchAdjustableCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WrenchAdjustableCircleFill.svelte";
var root2031 = add_locations(ns_template(`<svg><!><path d="M6.705 8.139a.25.25 0 0 0-.288-.376l-1.5.5.159.474.808-.27-.595.894a.25.25 0 0 0 .287.376l.808-.27-.595.894a.25.25 0 0 0 .287.376l1.5-.5-.159-.474-.808.27.596-.894a.25.25 0 0 0-.288-.376l-.808.27.596-.894Z"></path><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm-6.202-4.751 1.988-1.657a4.5 4.5 0 0 1 7.537-4.623L7.497 6.5l1 2.5 1.333 3.11c-.56.251-1.18.39-1.833.39a4.49 4.49 0 0 1-1.592-.29L4.747 14.2a7.031 7.031 0 0 1-2.949-2.951ZM12.496 8a4.491 4.491 0 0 1-1.703 3.526L9.497 8.5l2.959-1.11c.027.2.04.403.04.61Z"></path></svg>`), WrenchAdjustableCircleFill[FILENAME], [
  [1, 0, [[1, 190], [2, 2]]]
]);
function WrenchAdjustableCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WrenchAdjustableCircleFill);
  var svg = root2031();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wrench-adjustable-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WrenchAdjustableCircleFill = hmr(WrenchAdjustableCircleFill, () => WrenchAdjustableCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WrenchAdjustableCircleFill[HMR].source;
    set(WrenchAdjustableCircleFill[HMR].source, module.default[HMR].original);
  });
}
var WrenchAdjustableCircleFill_default = WrenchAdjustableCircleFill;
mark_module_end(WrenchAdjustableCircleFill);

// node_modules/svelte-bootstrap-icons/lib/WrenchAdjustableCircle.svelte
mark_module_start();
WrenchAdjustableCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WrenchAdjustableCircle.svelte";
var root2032 = add_locations(ns_template(`<svg><!><path d="M12.496 8a4.491 4.491 0 0 1-1.703 3.526L9.497 8.5l2.959-1.11c.027.2.04.403.04.61Z"></path><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-1 0a7 7 0 1 0-13.202 3.249l1.988-1.657a4.5 4.5 0 0 1 7.537-4.623L7.497 6.5l1 2.5 1.333 3.11c-.56.251-1.18.39-1.833.39a4.49 4.49 0 0 1-1.592-.29L4.747 14.2A7 7 0 0 0 15 8Zm-8.295.139a.25.25 0 0 0-.288-.376l-1.5.5.159.474.808-.27-.595.894a.25.25 0 0 0 .287.376l.808-.27-.595.894a.25.25 0 0 0 .287.376l1.5-.5-.159-.474-.808.27.596-.894a.25.25 0 0 0-.288-.376l-.808.27.596-.894Z"></path></svg>`), WrenchAdjustableCircle[FILENAME], [
  [1, 0, [[1, 185], [2, 2]]]
]);
function WrenchAdjustableCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WrenchAdjustableCircle);
  var svg = root2032();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wrench-adjustable-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WrenchAdjustableCircle = hmr(WrenchAdjustableCircle, () => WrenchAdjustableCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WrenchAdjustableCircle[HMR].source;
    set(WrenchAdjustableCircle[HMR].source, module.default[HMR].original);
  });
}
var WrenchAdjustableCircle_default = WrenchAdjustableCircle;
mark_module_end(WrenchAdjustableCircle);

// node_modules/svelte-bootstrap-icons/lib/WrenchAdjustable.svelte
mark_module_start();
WrenchAdjustable[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/WrenchAdjustable.svelte";
var root2033 = add_locations(ns_template(`<svg><!><path d="M16 4.5a4.492 4.492 0 0 1-1.703 3.526L13 5l2.959-1.11c.027.2.041.403.041.61Z"></path><path d="M11.5 9c.653 0 1.273-.139 1.833-.39L12 5.5 11 3l3.826-1.53A4.5 4.5 0 0 0 7.29 6.092l-6.116 5.096a2.583 2.583 0 1 0 3.638 3.638L9.908 8.71A4.49 4.49 0 0 0 11.5 9Zm-1.292-4.361-.596.893.809-.27a.25.25 0 0 1 .287.377l-.596.893.809-.27.158.475-1.5.5a.25.25 0 0 1-.287-.376l.596-.893-.809.27a.25.25 0 0 1-.287-.377l.596-.893-.809.27-.158-.475 1.5-.5a.25.25 0 0 1 .287.376ZM3 14a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>`), WrenchAdjustable[FILENAME], [
  [1, 0, [[1, 178], [2, 2]]]
]);
function WrenchAdjustable($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, WrenchAdjustable);
  var svg = root2033();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wrench-adjustable", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WrenchAdjustable = hmr(WrenchAdjustable, () => WrenchAdjustable[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WrenchAdjustable[HMR].source;
    set(WrenchAdjustable[HMR].source, module.default[HMR].original);
  });
}
var WrenchAdjustable_default = WrenchAdjustable;
mark_module_end(WrenchAdjustable);

// node_modules/svelte-bootstrap-icons/lib/Wrench.svelte
mark_module_start();
Wrench[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Wrench.svelte";
var root2034 = add_locations(ns_template(`<svg><!><path d="M.102 2.223A3.004 3.004 0 0 0 3.78 5.897l6.341 6.252A3.003 3.003 0 0 0 13 16a3 3 0 1 0-.851-5.878L5.897 3.781A3.004 3.004 0 0 0 2.223.1l2.141 2.142L4 4l-1.757.364L.102 2.223zm13.37 9.019.528.026.287.445.445.287.026.529L15 13l-.242.471-.026.529-.445.287-.287.445-.529.026L13 15l-.471-.242-.529-.026-.287-.445-.445-.287-.026-.529L11 13l.242-.471.026-.529.445-.287.287-.445.529-.026L13 11l.471.242z"></path></svg>`), Wrench[FILENAME], [[1, 0, [[1, 167]]]]);
function Wrench($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Wrench);
  var svg = root2034();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-wrench", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wrench = hmr(Wrench, () => Wrench[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wrench[HMR].source;
    set(Wrench[HMR].source, module.default[HMR].original);
  });
}
var Wrench_default = Wrench;
mark_module_end(Wrench);

// node_modules/svelte-bootstrap-icons/lib/XCircleFill.svelte
mark_module_start();
XCircleFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/XCircleFill.svelte";
var root2035 = add_locations(ns_template(`<svg><!><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"></path></svg>`), XCircleFill[FILENAME], [[1, 0, [[1, 174]]]]);
function XCircleFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, XCircleFill);
  var svg = root2035();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x-circle-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XCircleFill = hmr(XCircleFill, () => XCircleFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XCircleFill[HMR].source;
    set(XCircleFill[HMR].source, module.default[HMR].original);
  });
}
var XCircleFill_default = XCircleFill;
mark_module_end(XCircleFill);

// node_modules/svelte-bootstrap-icons/lib/XCircle.svelte
mark_module_start();
XCircle[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/XCircle.svelte";
var root2036 = add_locations(ns_template(`<svg><!><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"></path></svg>`), XCircle[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function XCircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, XCircle);
  var svg = root2036();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x-circle", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XCircle = hmr(XCircle, () => XCircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XCircle[HMR].source;
    set(XCircle[HMR].source, module.default[HMR].original);
  });
}
var XCircle_default = XCircle;
mark_module_end(XCircle);

// node_modules/svelte-bootstrap-icons/lib/XDiamondFill.svelte
mark_module_start();
XDiamondFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/XDiamondFill.svelte";
var root2037 = add_locations(ns_template(`<svg><!><path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L4.047 3.339 8 7.293l3.954-3.954L9.049.435zm3.61 3.611L8.708 8l3.954 3.954 2.904-2.905c.58-.58.58-1.519 0-2.098l-2.904-2.905zm-.706 8.614L8 8.708l-3.954 3.954 2.905 2.904c.58.58 1.519.58 2.098 0l2.905-2.904zm-8.614-.706L7.292 8 3.339 4.046.435 6.951c-.58.58-.58 1.519 0 2.098l2.904 2.905z"></path></svg>`), XDiamondFill[FILENAME], [[1, 0, [[1, 175]]]]);
function XDiamondFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, XDiamondFill);
  var svg = root2037();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x-diamond-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XDiamondFill = hmr(XDiamondFill, () => XDiamondFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XDiamondFill[HMR].source;
    set(XDiamondFill[HMR].source, module.default[HMR].original);
  });
}
var XDiamondFill_default = XDiamondFill;
mark_module_end(XDiamondFill);

// node_modules/svelte-bootstrap-icons/lib/XDiamond.svelte
mark_module_start();
XDiamond[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/XDiamond.svelte";
var root2038 = add_locations(ns_template(`<svg><!><path d="M7.987 16a1.526 1.526 0 0 1-1.07-.448L.45 9.082a1.531 1.531 0 0 1 0-2.165L6.917.45a1.531 1.531 0 0 1 2.166 0l6.469 6.468A1.526 1.526 0 0 1 16 8.013a1.526 1.526 0 0 1-.448 1.07l-6.47 6.469A1.526 1.526 0 0 1 7.988 16zM7.639 1.17 4.766 4.044 8 7.278l3.234-3.234L8.361 1.17a.51.51 0 0 0-.722 0zM8.722 8l3.234 3.234 2.873-2.873c.2-.2.2-.523 0-.722l-2.873-2.873L8.722 8zM8 8.722l-3.234 3.234 2.873 2.873c.2.2.523.2.722 0l2.873-2.873L8 8.722zM7.278 8 4.044 4.766 1.17 7.639a.511.511 0 0 0 0 .722l2.874 2.873L7.278 8z"></path></svg>`), XDiamond[FILENAME], [[1, 0, [[1, 170]]]]);
function XDiamond($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, XDiamond);
  var svg = root2038();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x-diamond", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XDiamond = hmr(XDiamond, () => XDiamond[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XDiamond[HMR].source;
    set(XDiamond[HMR].source, module.default[HMR].original);
  });
}
var XDiamond_default = XDiamond;
mark_module_end(XDiamond);

// node_modules/svelte-bootstrap-icons/lib/XLg.svelte
mark_module_start();
XLg[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/XLg.svelte";
var root2039 = add_locations(ns_template(`<svg><!><path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"></path></svg>`), XLg[FILENAME], [[1, 0, [[1, 165]]]]);
function XLg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, XLg);
  var svg = root2039();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x-lg", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XLg = hmr(XLg, () => XLg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XLg[HMR].source;
    set(XLg[HMR].source, module.default[HMR].original);
  });
}
var XLg_default = XLg;
mark_module_end(XLg);

// node_modules/svelte-bootstrap-icons/lib/XOctagonFill.svelte
mark_module_start();
XOctagonFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/XOctagonFill.svelte";
var root2040 = add_locations(ns_template(`<svg><!><path d="M11.46.146A.5.5 0 0 0 11.107 0H4.893a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146zm-6.106 4.5L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 1 1 .708-.708z"></path></svg>`), XOctagonFill[FILENAME], [[1, 0, [[1, 175]]]]);
function XOctagonFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, XOctagonFill);
  var svg = root2040();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x-octagon-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XOctagonFill = hmr(XOctagonFill, () => XOctagonFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XOctagonFill[HMR].source;
    set(XOctagonFill[HMR].source, module.default[HMR].original);
  });
}
var XOctagonFill_default = XOctagonFill;
mark_module_end(XOctagonFill);

// node_modules/svelte-bootstrap-icons/lib/XOctagon.svelte
mark_module_start();
XOctagon[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/XOctagon.svelte";
var root2041 = add_locations(ns_template(`<svg><!><path d="M4.54.146A.5.5 0 0 1 4.893 0h6.214a.5.5 0 0 1 .353.146l4.394 4.394a.5.5 0 0 1 .146.353v6.214a.5.5 0 0 1-.146.353l-4.394 4.394a.5.5 0 0 1-.353.146H4.893a.5.5 0 0 1-.353-.146L.146 11.46A.5.5 0 0 1 0 11.107V4.893a.5.5 0 0 1 .146-.353L4.54.146zM5.1 1 1 5.1v5.8L5.1 15h5.8l4.1-4.1V5.1L10.9 1H5.1z"></path><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"></path></svg>`), XOctagon[FILENAME], [
  [1, 0, [[1, 170], [2, 2]]]
]);
function XOctagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, XOctagon);
  var svg = root2041();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x-octagon", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XOctagon = hmr(XOctagon, () => XOctagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XOctagon[HMR].source;
    set(XOctagon[HMR].source, module.default[HMR].original);
  });
}
var XOctagon_default = XOctagon;
mark_module_end(XOctagon);

// node_modules/svelte-bootstrap-icons/lib/XSquareFill.svelte
mark_module_start();
XSquareFill[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/XSquareFill.svelte";
var root2042 = add_locations(ns_template(`<svg><!><path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm3.354 4.646L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 1 1 .708-.708z"></path></svg>`), XSquareFill[FILENAME], [[1, 0, [[1, 174]]]]);
function XSquareFill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, XSquareFill);
  var svg = root2042();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x-square-fill", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XSquareFill = hmr(XSquareFill, () => XSquareFill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XSquareFill[HMR].source;
    set(XSquareFill[HMR].source, module.default[HMR].original);
  });
}
var XSquareFill_default = XSquareFill;
mark_module_end(XSquareFill);

// node_modules/svelte-bootstrap-icons/lib/XSquare.svelte
mark_module_start();
XSquare[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/XSquare.svelte";
var root2043 = add_locations(ns_template(`<svg><!><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"></path></svg>`), XSquare[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function XSquare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, XSquare);
  var svg = root2043();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x-square", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XSquare = hmr(XSquare, () => XSquare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XSquare[HMR].source;
    set(XSquare[HMR].source, module.default[HMR].original);
  });
}
var XSquare_default = XSquare;
mark_module_end(XSquare);

// node_modules/svelte-bootstrap-icons/lib/X.svelte
mark_module_start();
X[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/X.svelte";
var root2044 = add_locations(ns_template(`<svg><!><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"></path></svg>`), X[FILENAME], [[1, 0, [[1, 162]]]]);
function X($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, X);
  var svg = root2044();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-x", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  X = hmr(X, () => X[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = X[HMR].source;
    set(X[HMR].source, module.default[HMR].original);
  });
}
var X_default = X;
mark_module_end(X);

// node_modules/svelte-bootstrap-icons/lib/Xbox.svelte
mark_module_start();
Xbox[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Xbox.svelte";
var root2045 = add_locations(ns_template(`<svg><!><path d="M7.202 15.967a7.987 7.987 0 0 1-3.552-1.26c-.898-.585-1.101-.826-1.101-1.306 0-.965 1.062-2.656 2.879-4.583C6.459 7.723 7.897 6.44 8.052 6.475c.302.068 2.718 2.423 3.622 3.531 1.43 1.753 2.088 3.189 1.754 3.829-.254.486-1.83 1.437-2.987 1.802-.954.301-2.207.429-3.239.33Zm-5.866-3.57C.589 11.253.212 10.127.03 8.497c-.06-.539-.038-.846.137-1.95.218-1.377 1.002-2.97 1.945-3.95.401-.417.437-.427.926-.263.595.2 1.23.638 2.213 1.528l.574.519-.313.385C4.056 6.553 2.52 9.086 1.94 10.653c-.315.852-.442 1.707-.306 2.063.091.24.007.15-.3-.319Zm13.101.195c.074-.36-.019-1.02-.238-1.687-.473-1.443-2.055-4.128-3.508-5.953l-.457-.575.494-.454c.646-.593 1.095-.948 1.58-1.25.381-.237.927-.448 1.161-.448.145 0 .654.528 1.065 1.104a8.372 8.372 0 0 1 1.343 3.102c.153.728.166 2.286.024 3.012a9.495 9.495 0 0 1-.6 1.893c-.179.393-.624 1.156-.82 1.404-.1.128-.1.127-.043-.148ZM7.335 1.952c-.67-.34-1.704-.705-2.276-.803a4.171 4.171 0 0 0-.759-.043c-.471.024-.45 0 .306-.358A7.778 7.778 0 0 1 6.47.128c.8-.169 2.306-.17 3.094-.005.85.18 1.853.552 2.418.9l.168.103-.385-.02c-.766-.038-1.88.27-3.078.853-.361.176-.676.316-.699.312a12.246 12.246 0 0 1-.654-.319Z"></path></svg>`), Xbox[FILENAME], [[1, 0, [[1, 165]]]]);
function Xbox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Xbox);
  var svg = root2045();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-xbox", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Xbox = hmr(Xbox, () => Xbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Xbox[HMR].source;
    set(Xbox[HMR].source, module.default[HMR].original);
  });
}
var Xbox_default = Xbox;
mark_module_end(Xbox);

// node_modules/svelte-bootstrap-icons/lib/Yelp.svelte
mark_module_start();
Yelp[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Yelp.svelte";
var root2046 = add_locations(ns_template(`<svg><!><path d="m4.188 10.095.736-.17a.824.824 0 0 0 .073-.02.813.813 0 0 0 .453-1.255 1.025 1.025 0 0 0-.3-.258 2.782 2.782 0 0 0-.428-.198l-.808-.295a76.035 76.035 0 0 0-1.364-.493C2.253 7.3 2 7.208 1.783 7.14c-.041-.013-.087-.025-.124-.038a2.143 2.143 0 0 0-.606-.116.723.723 0 0 0-.572.245 1.625 1.625 0 0 0-.105.132 1.555 1.555 0 0 0-.155.309c-.15.443-.225.908-.22 1.376.002.423.013.966.246 1.334a.785.785 0 0 0 .22.24c.166.114.333.129.507.141.26.019.513-.045.764-.103l2.447-.566.003.001Zm8.219-3.911a4.185 4.185 0 0 0-.8-1.14 1.602 1.602 0 0 0-.275-.21 1.591 1.591 0 0 0-.15-.073.723.723 0 0 0-.621.031c-.142.07-.294.182-.496.37-.028.028-.063.06-.094.089-.167.156-.353.35-.574.575-.34.345-.677.691-1.01 1.042l-.598.62a2.79 2.79 0 0 0-.298.365 1 1 0 0 0-.157.364.813.813 0 0 0 .007.301c0 .005.002.009.003.013a.812.812 0 0 0 .945.616.774.774 0 0 0 .074-.014l3.185-.736c.251-.058.506-.112.732-.242.151-.088.295-.175.394-.35a.787.787 0 0 0 .093-.313c.05-.434-.178-.927-.36-1.308ZM6.706 7.523c.23-.29.23-.722.25-1.075.07-1.181.143-2.362.201-3.543.022-.448.07-.89.044-1.34-.022-.372-.025-.799-.26-1.104C6.528-.077 5.644-.033 5.04.05c-.185.025-.37.06-.553.104a7.589 7.589 0 0 0-.543.149c-.58.19-1.393.537-1.53 1.204-.078.377.106.763.249 1.107.173.417.41.792.625 1.185.57 1.036 1.15 2.066 1.728 3.097.172.308.36.697.695.857.022.01.045.018.068.025.15.057.313.068.469.032l.028-.007a.809.809 0 0 0 .377-.226.732.732 0 0 0 .053-.055Zm-.276 3.161a.737.737 0 0 0-.923-.234.976.976 0 0 0-.145.09 1.909 1.909 0 0 0-.346.354c-.026.033-.05.077-.08.104l-.512.705c-.29.395-.577.791-.861 1.193-.185.26-.346.479-.472.673l-.072.11c-.152.235-.238.406-.282.559a.73.73 0 0 0-.03.314c.013.11.05.217.108.312.031.047.064.093.1.138a1.548 1.548 0 0 0 .257.237 4.482 4.482 0 0 0 2.196.76 1.593 1.593 0 0 0 .349-.027 1.57 1.57 0 0 0 .163-.048.797.797 0 0 0 .278-.178.731.731 0 0 0 .17-.266c.059-.147.098-.335.123-.613l.012-.13c.02-.231.03-.502.045-.821.025-.49.044-.98.06-1.469l.033-.87a2.09 2.09 0 0 0-.055-.623.93.93 0 0 0-.117-.27Zm5.783 1.362a2.199 2.199 0 0 0-.498-.378l-.112-.067c-.199-.12-.438-.246-.719-.398-.43-.236-.86-.466-1.295-.695l-.767-.407c-.04-.012-.08-.04-.118-.059a1.908 1.908 0 0 0-.466-.166.993.993 0 0 0-.17-.018.738.738 0 0 0-.725.616.946.946 0 0 0 .01.293c.038.204.13.406.224.583l.41.768c.228.434.459.864.696 1.294.152.28.28.52.398.719.023.037.048.077.068.112.145.239.261.39.379.497a.73.73 0 0 0 .596.201 1.55 1.55 0 0 0 .168-.029 1.584 1.584 0 0 0 .325-.129 4.06 4.06 0 0 0 .855-.64c.306-.3.577-.63.788-1.006.03-.053.055-.109.076-.165a1.58 1.58 0 0 0 .051-.161c.013-.056.022-.111.029-.168a.792.792 0 0 0-.038-.327.73.73 0 0 0-.165-.27Z"></path></svg>`), Yelp[FILENAME], [[1, 0, [[1, 165]]]]);
function Yelp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Yelp);
  var svg = root2046();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-yelp", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Yelp = hmr(Yelp, () => Yelp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Yelp[HMR].source;
    set(Yelp[HMR].source, module.default[HMR].original);
  });
}
var Yelp_default = Yelp;
mark_module_end(Yelp);

// node_modules/svelte-bootstrap-icons/lib/YinYang.svelte
mark_module_start();
YinYang[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/YinYang.svelte";
var root2047 = add_locations(ns_template(`<svg><!><path d="M9.167 4.5a1.167 1.167 0 1 1-2.334 0 1.167 1.167 0 0 1 2.334 0Z"></path><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM1 8a7 7 0 0 1 7-7 3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 0 0 7 7 7 0 0 1-7-7Zm7 4.667a1.167 1.167 0 1 1 0-2.334 1.167 1.167 0 0 1 0 2.334Z"></path></svg>`), YinYang[FILENAME], [
  [1, 0, [[1, 169], [2, 2]]]
]);
function YinYang($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, YinYang);
  var svg = root2047();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(2);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-yin-yang", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  YinYang = hmr(YinYang, () => YinYang[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = YinYang[HMR].source;
    set(YinYang[HMR].source, module.default[HMR].original);
  });
}
var YinYang_default = YinYang;
mark_module_end(YinYang);

// node_modules/svelte-bootstrap-icons/lib/Youtube.svelte
mark_module_start();
Youtube[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/Youtube.svelte";
var root2048 = add_locations(ns_template(`<svg><!><path d="M8.051 1.999h.089c.822.003 4.987.033 6.11.335a2.01 2.01 0 0 1 1.415 1.42c.101.38.172.883.22 1.402l.01.104.022.26.008.104c.065.914.073 1.77.074 1.957v.075c-.001.194-.01 1.108-.082 2.06l-.008.105-.009.104c-.05.572-.124 1.14-.235 1.558a2.007 2.007 0 0 1-1.415 1.42c-1.16.312-5.569.334-6.18.335h-.142c-.309 0-1.587-.006-2.927-.052l-.17-.006-.087-.004-.171-.007-.171-.007c-1.11-.049-2.167-.128-2.654-.26a2.007 2.007 0 0 1-1.415-1.419c-.111-.417-.185-.986-.235-1.558L.09 9.82l-.008-.104A31.4 31.4 0 0 1 0 7.68v-.123c.002-.215.01-.958.064-1.778l.007-.103.003-.052.008-.104.022-.26.01-.104c.048-.519.119-1.023.22-1.402a2.007 2.007 0 0 1 1.415-1.42c.487-.13 1.544-.21 2.654-.26l.17-.007.172-.006.086-.003.171-.007A99.788 99.788 0 0 1 7.858 2h.193zM6.4 5.209v4.818l4.157-2.408L6.4 5.209z"></path></svg>`), Youtube[FILENAME], [[1, 0, [[1, 168]]]]);
function Youtube($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Youtube);
  var svg = root2048();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next();
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-youtube", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Youtube = hmr(Youtube, () => Youtube[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Youtube[HMR].source;
    set(Youtube[HMR].source, module.default[HMR].original);
  });
}
var Youtube_default = Youtube;
mark_module_end(Youtube);

// node_modules/svelte-bootstrap-icons/lib/ZoomIn.svelte
mark_module_start();
ZoomIn[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ZoomIn.svelte";
var root2049 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z"></path><path d="M10.344 11.742c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1 6.538 6.538 0 0 1-1.398 1.4z"></path><path fill-rule="evenodd" d="M6.5 3a.5.5 0 0 1 .5.5V6h2.5a.5.5 0 0 1 0 1H7v2.5a.5.5 0 0 1-1 0V7H3.5a.5.5 0 0 1 0-1H6V3.5a.5.5 0 0 1 .5-.5z"></path></svg>`), ZoomIn[FILENAME], [
  [
    1,
    0,
    [[1, 168], [2, 2], [3, 2]]
  ]
]);
function ZoomIn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ZoomIn);
  var svg = root2049();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-zoom-in", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ZoomIn = hmr(ZoomIn, () => ZoomIn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ZoomIn[HMR].source;
    set(ZoomIn[HMR].source, module.default[HMR].original);
  });
}
var ZoomIn_default = ZoomIn;
mark_module_end(ZoomIn);

// node_modules/svelte-bootstrap-icons/lib/ZoomOut.svelte
mark_module_start();
ZoomOut[FILENAME] = "node_modules/svelte-bootstrap-icons/lib/ZoomOut.svelte";
var root2050 = add_locations(ns_template(`<svg><!><path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z"></path><path d="M10.344 11.742c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1 6.538 6.538 0 0 1-1.398 1.4z"></path><path fill-rule="evenodd" d="M3 6.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"></path></svg>`), ZoomOut[FILENAME], [
  [
    1,
    0,
    [[1, 169], [2, 2], [3, 2]]
  ]
]);
function ZoomOut($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ZoomOut);
  var svg = root2050();
  let attributes;
  var node = child(svg);
  slot(node, $$props, "default", {}, null);
  next(3);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "16",
        height: "16",
        fill: "currentColor",
        viewBox: "0 0 16 16",
        ...$$restProps
      },
      void 0,
      true
    );
    toggle_class(svg, "bi", true);
    toggle_class(svg, "bi-zoom-out", true);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ZoomOut = hmr(ZoomOut, () => ZoomOut[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ZoomOut[HMR].source;
    set(ZoomOut[HMR].source, module.default[HMR].original);
  });
}
var ZoomOut_default = ZoomOut;
mark_module_end(ZoomOut);
export {
  Activity_default as Activity,
  Airplane_default as Airplane,
  AirplaneEngines_default as AirplaneEngines,
  AirplaneEnginesFill_default as AirplaneEnginesFill,
  AirplaneFill_default as AirplaneFill,
  Alarm_default as Alarm,
  AlarmFill_default as AlarmFill,
  Alexa_default as Alexa,
  AlignBottom_default as AlignBottom,
  AlignCenter_default as AlignCenter,
  AlignEnd_default as AlignEnd,
  AlignMiddle_default as AlignMiddle,
  AlignStart_default as AlignStart,
  AlignTop_default as AlignTop,
  Alipay_default as Alipay,
  Alphabet_default as Alphabet,
  AlphabetUppercase_default as AlphabetUppercase,
  Alt_default as Alt,
  Amazon_default as Amazon,
  Amd_default as Amd,
  Android_default as Android,
  Android2_default as Android2,
  App_default as App,
  AppIndicator_default as AppIndicator,
  Apple_default as Apple,
  Archive_default as Archive,
  ArchiveFill_default as ArchiveFill,
  Arrow90degDown_default as Arrow90degDown,
  Arrow90degLeft_default as Arrow90degLeft,
  Arrow90degRight_default as Arrow90degRight,
  Arrow90degUp_default as Arrow90degUp,
  ArrowBarDown_default as ArrowBarDown,
  ArrowBarLeft_default as ArrowBarLeft,
  ArrowBarRight_default as ArrowBarRight,
  ArrowBarUp_default as ArrowBarUp,
  ArrowClockwise_default as ArrowClockwise,
  ArrowCounterclockwise_default as ArrowCounterclockwise,
  ArrowDown_default as ArrowDown,
  ArrowDownCircle_default as ArrowDownCircle,
  ArrowDownCircleFill_default as ArrowDownCircleFill,
  ArrowDownLeft_default as ArrowDownLeft,
  ArrowDownLeftCircle_default as ArrowDownLeftCircle,
  ArrowDownLeftCircleFill_default as ArrowDownLeftCircleFill,
  ArrowDownLeftSquare_default as ArrowDownLeftSquare,
  ArrowDownLeftSquareFill_default as ArrowDownLeftSquareFill,
  ArrowDownRight_default as ArrowDownRight,
  ArrowDownRightCircle_default as ArrowDownRightCircle,
  ArrowDownRightCircleFill_default as ArrowDownRightCircleFill,
  ArrowDownRightSquare_default as ArrowDownRightSquare,
  ArrowDownRightSquareFill_default as ArrowDownRightSquareFill,
  ArrowDownShort_default as ArrowDownShort,
  ArrowDownSquare_default as ArrowDownSquare,
  ArrowDownSquareFill_default as ArrowDownSquareFill,
  ArrowDownUp_default as ArrowDownUp,
  ArrowLeft_default as ArrowLeft,
  ArrowLeftCircle_default as ArrowLeftCircle,
  ArrowLeftCircleFill_default as ArrowLeftCircleFill,
  ArrowLeftRight_default as ArrowLeftRight,
  ArrowLeftShort_default as ArrowLeftShort,
  ArrowLeftSquare_default as ArrowLeftSquare,
  ArrowLeftSquareFill_default as ArrowLeftSquareFill,
  ArrowRepeat_default as ArrowRepeat,
  ArrowReturnLeft_default as ArrowReturnLeft,
  ArrowReturnRight_default as ArrowReturnRight,
  ArrowRight_default as ArrowRight,
  ArrowRightCircle_default as ArrowRightCircle,
  ArrowRightCircleFill_default as ArrowRightCircleFill,
  ArrowRightShort_default as ArrowRightShort,
  ArrowRightSquare_default as ArrowRightSquare,
  ArrowRightSquareFill_default as ArrowRightSquareFill,
  ArrowThroughHeart_default as ArrowThroughHeart,
  ArrowThroughHeartFill_default as ArrowThroughHeartFill,
  ArrowUp_default as ArrowUp,
  ArrowUpCircle_default as ArrowUpCircle,
  ArrowUpCircleFill_default as ArrowUpCircleFill,
  ArrowUpLeft_default as ArrowUpLeft,
  ArrowUpLeftCircle_default as ArrowUpLeftCircle,
  ArrowUpLeftCircleFill_default as ArrowUpLeftCircleFill,
  ArrowUpLeftSquare_default as ArrowUpLeftSquare,
  ArrowUpLeftSquareFill_default as ArrowUpLeftSquareFill,
  ArrowUpRight_default as ArrowUpRight,
  ArrowUpRightCircle_default as ArrowUpRightCircle,
  ArrowUpRightCircleFill_default as ArrowUpRightCircleFill,
  ArrowUpRightSquare_default as ArrowUpRightSquare,
  ArrowUpRightSquareFill_default as ArrowUpRightSquareFill,
  ArrowUpShort_default as ArrowUpShort,
  ArrowUpSquare_default as ArrowUpSquare,
  ArrowUpSquareFill_default as ArrowUpSquareFill,
  Arrows_default as Arrows,
  ArrowsAngleContract_default as ArrowsAngleContract,
  ArrowsAngleExpand_default as ArrowsAngleExpand,
  ArrowsCollapse_default as ArrowsCollapse,
  ArrowsCollapseVertical_default as ArrowsCollapseVertical,
  ArrowsExpand_default as ArrowsExpand,
  ArrowsExpandVertical_default as ArrowsExpandVertical,
  ArrowsFullscreen_default as ArrowsFullscreen,
  ArrowsMove_default as ArrowsMove,
  ArrowsVertical_default as ArrowsVertical,
  AspectRatio_default as AspectRatio,
  AspectRatioFill_default as AspectRatioFill,
  Asterisk_default as Asterisk,
  At_default as At,
  Award_default as Award,
  AwardFill_default as AwardFill,
  Back_default as Back,
  Backpack_default as Backpack,
  Backpack2_default as Backpack2,
  Backpack2Fill_default as Backpack2Fill,
  Backpack3_default as Backpack3,
  Backpack3Fill_default as Backpack3Fill,
  Backpack4_default as Backpack4,
  Backpack4Fill_default as Backpack4Fill,
  BackpackFill_default as BackpackFill,
  Backspace_default as Backspace,
  BackspaceFill_default as BackspaceFill,
  BackspaceReverse_default as BackspaceReverse,
  BackspaceReverseFill_default as BackspaceReverseFill,
  Badge3d_default as Badge3d,
  Badge3dFill_default as Badge3dFill,
  Badge4k_default as Badge4k,
  Badge4kFill_default as Badge4kFill,
  Badge8k_default as Badge8k,
  Badge8kFill_default as Badge8kFill,
  BadgeAd_default as BadgeAd,
  BadgeAdFill_default as BadgeAdFill,
  BadgeAr_default as BadgeAr,
  BadgeArFill_default as BadgeArFill,
  BadgeCc_default as BadgeCc,
  BadgeCcFill_default as BadgeCcFill,
  BadgeHd_default as BadgeHd,
  BadgeHdFill_default as BadgeHdFill,
  BadgeSd_default as BadgeSd,
  BadgeSdFill_default as BadgeSdFill,
  BadgeTm_default as BadgeTm,
  BadgeTmFill_default as BadgeTmFill,
  BadgeVo_default as BadgeVo,
  BadgeVoFill_default as BadgeVoFill,
  BadgeVr_default as BadgeVr,
  BadgeVrFill_default as BadgeVrFill,
  BadgeWc_default as BadgeWc,
  BadgeWcFill_default as BadgeWcFill,
  Bag_default as Bag,
  BagCheck_default as BagCheck,
  BagCheckFill_default as BagCheckFill,
  BagDash_default as BagDash,
  BagDashFill_default as BagDashFill,
  BagFill_default as BagFill,
  BagHeart_default as BagHeart,
  BagHeartFill_default as BagHeartFill,
  BagPlus_default as BagPlus,
  BagPlusFill_default as BagPlusFill,
  BagX_default as BagX,
  BagXFill_default as BagXFill,
  Balloon_default as Balloon,
  BalloonFill_default as BalloonFill,
  BalloonHeart_default as BalloonHeart,
  BalloonHeartFill_default as BalloonHeartFill,
  Ban_default as Ban,
  BanFill_default as BanFill,
  Bandaid_default as Bandaid,
  BandaidFill_default as BandaidFill,
  Bank_default as Bank,
  Bank2_default as Bank2,
  BarChart_default as BarChart,
  BarChartFill_default as BarChartFill,
  BarChartLine_default as BarChartLine,
  BarChartLineFill_default as BarChartLineFill,
  BarChartSteps_default as BarChartSteps,
  Basket_default as Basket,
  Basket2_default as Basket2,
  Basket2Fill_default as Basket2Fill,
  Basket3_default as Basket3,
  Basket3Fill_default as Basket3Fill,
  BasketFill_default as BasketFill,
  Battery_default as Battery,
  BatteryCharging_default as BatteryCharging,
  BatteryFull_default as BatteryFull,
  BatteryHalf_default as BatteryHalf,
  Behance_default as Behance,
  Bell_default as Bell,
  BellFill_default as BellFill,
  BellSlash_default as BellSlash,
  BellSlashFill_default as BellSlashFill,
  Bezier_default as Bezier,
  Bezier2_default as Bezier2,
  Bicycle_default as Bicycle,
  Bing_default as Bing,
  Binoculars_default as Binoculars,
  BinocularsFill_default as BinocularsFill,
  BlockquoteLeft_default as BlockquoteLeft,
  BlockquoteRight_default as BlockquoteRight,
  Bluetooth_default as Bluetooth,
  BodyText_default as BodyText,
  Book_default as Book,
  BookFill_default as BookFill,
  BookHalf_default as BookHalf,
  Bookmark_default as Bookmark,
  BookmarkCheck_default as BookmarkCheck,
  BookmarkCheckFill_default as BookmarkCheckFill,
  BookmarkDash_default as BookmarkDash,
  BookmarkDashFill_default as BookmarkDashFill,
  BookmarkFill_default as BookmarkFill,
  BookmarkHeart_default as BookmarkHeart,
  BookmarkHeartFill_default as BookmarkHeartFill,
  BookmarkPlus_default as BookmarkPlus,
  BookmarkPlusFill_default as BookmarkPlusFill,
  BookmarkStar_default as BookmarkStar,
  BookmarkStarFill_default as BookmarkStarFill,
  BookmarkX_default as BookmarkX,
  BookmarkXFill_default as BookmarkXFill,
  Bookmarks_default as Bookmarks,
  BookmarksFill_default as BookmarksFill,
  Bookshelf_default as Bookshelf,
  Boombox_default as Boombox,
  BoomboxFill_default as BoomboxFill,
  Bootstrap_default as Bootstrap,
  BootstrapFill_default as BootstrapFill,
  BootstrapReboot_default as BootstrapReboot,
  Border_default as Border,
  BorderAll_default as BorderAll,
  BorderBottom_default as BorderBottom,
  BorderCenter_default as BorderCenter,
  BorderInner_default as BorderInner,
  BorderLeft_default as BorderLeft,
  BorderMiddle_default as BorderMiddle,
  BorderOuter_default as BorderOuter,
  BorderRight_default as BorderRight,
  BorderStyle_default as BorderStyle,
  BorderTop_default as BorderTop,
  BorderWidth_default as BorderWidth,
  BoundingBox_default as BoundingBox,
  BoundingBoxCircles_default as BoundingBoxCircles,
  Box_default as Box,
  Box2_default as Box2,
  Box2Fill_default as Box2Fill,
  Box2Heart_default as Box2Heart,
  Box2HeartFill_default as Box2HeartFill,
  BoxArrowDown_default as BoxArrowDown,
  BoxArrowDownLeft_default as BoxArrowDownLeft,
  BoxArrowDownRight_default as BoxArrowDownRight,
  BoxArrowInDown_default as BoxArrowInDown,
  BoxArrowInDownLeft_default as BoxArrowInDownLeft,
  BoxArrowInDownRight_default as BoxArrowInDownRight,
  BoxArrowInLeft_default as BoxArrowInLeft,
  BoxArrowInRight_default as BoxArrowInRight,
  BoxArrowInUp_default as BoxArrowInUp,
  BoxArrowInUpLeft_default as BoxArrowInUpLeft,
  BoxArrowInUpRight_default as BoxArrowInUpRight,
  BoxArrowLeft_default as BoxArrowLeft,
  BoxArrowRight_default as BoxArrowRight,
  BoxArrowUp_default as BoxArrowUp,
  BoxArrowUpLeft_default as BoxArrowUpLeft,
  BoxArrowUpRight_default as BoxArrowUpRight,
  BoxFill_default as BoxFill,
  BoxSeam_default as BoxSeam,
  BoxSeamFill_default as BoxSeamFill,
  Boxes_default as Boxes,
  Braces_default as Braces,
  BracesAsterisk_default as BracesAsterisk,
  Bricks_default as Bricks,
  Briefcase_default as Briefcase,
  BriefcaseFill_default as BriefcaseFill,
  BrightnessAltHigh_default as BrightnessAltHigh,
  BrightnessAltHighFill_default as BrightnessAltHighFill,
  BrightnessAltLow_default as BrightnessAltLow,
  BrightnessAltLowFill_default as BrightnessAltLowFill,
  BrightnessHigh_default as BrightnessHigh,
  BrightnessHighFill_default as BrightnessHighFill,
  BrightnessLow_default as BrightnessLow,
  BrightnessLowFill_default as BrightnessLowFill,
  Brilliance_default as Brilliance,
  Broadcast_default as Broadcast,
  BroadcastPin_default as BroadcastPin,
  BrowserChrome_default as BrowserChrome,
  BrowserEdge_default as BrowserEdge,
  BrowserFirefox_default as BrowserFirefox,
  BrowserSafari_default as BrowserSafari,
  Brush_default as Brush,
  BrushFill_default as BrushFill,
  Bucket_default as Bucket,
  BucketFill_default as BucketFill,
  Bug_default as Bug,
  BugFill_default as BugFill,
  Building_default as Building,
  BuildingAdd_default as BuildingAdd,
  BuildingCheck_default as BuildingCheck,
  BuildingDash_default as BuildingDash,
  BuildingDown_default as BuildingDown,
  BuildingExclamation_default as BuildingExclamation,
  BuildingFill_default as BuildingFill,
  BuildingFillAdd_default as BuildingFillAdd,
  BuildingFillCheck_default as BuildingFillCheck,
  BuildingFillDash_default as BuildingFillDash,
  BuildingFillDown_default as BuildingFillDown,
  BuildingFillExclamation_default as BuildingFillExclamation,
  BuildingFillGear_default as BuildingFillGear,
  BuildingFillLock_default as BuildingFillLock,
  BuildingFillSlash_default as BuildingFillSlash,
  BuildingFillUp_default as BuildingFillUp,
  BuildingFillX_default as BuildingFillX,
  BuildingGear_default as BuildingGear,
  BuildingLock_default as BuildingLock,
  BuildingSlash_default as BuildingSlash,
  BuildingUp_default as BuildingUp,
  BuildingX_default as BuildingX,
  Buildings_default as Buildings,
  BuildingsFill_default as BuildingsFill,
  Bullseye_default as Bullseye,
  BusFront_default as BusFront,
  BusFrontFill_default as BusFrontFill,
  CCircle_default as CCircle,
  CCircleFill_default as CCircleFill,
  CSquare_default as CSquare,
  CSquareFill_default as CSquareFill,
  Cake_default as Cake,
  Cake2_default as Cake2,
  Cake2Fill_default as Cake2Fill,
  CakeFill_default as CakeFill,
  Calculator_default as Calculator,
  CalculatorFill_default as CalculatorFill,
  Calendar_default as Calendar,
  Calendar2_default as Calendar2,
  Calendar2Check_default as Calendar2Check,
  Calendar2CheckFill_default as Calendar2CheckFill,
  Calendar2Date_default as Calendar2Date,
  Calendar2DateFill_default as Calendar2DateFill,
  Calendar2Day_default as Calendar2Day,
  Calendar2DayFill_default as Calendar2DayFill,
  Calendar2Event_default as Calendar2Event,
  Calendar2EventFill_default as Calendar2EventFill,
  Calendar2Fill_default as Calendar2Fill,
  Calendar2Heart_default as Calendar2Heart,
  Calendar2HeartFill_default as Calendar2HeartFill,
  Calendar2Minus_default as Calendar2Minus,
  Calendar2MinusFill_default as Calendar2MinusFill,
  Calendar2Month_default as Calendar2Month,
  Calendar2MonthFill_default as Calendar2MonthFill,
  Calendar2Plus_default as Calendar2Plus,
  Calendar2PlusFill_default as Calendar2PlusFill,
  Calendar2Range_default as Calendar2Range,
  Calendar2RangeFill_default as Calendar2RangeFill,
  Calendar2Week_default as Calendar2Week,
  Calendar2WeekFill_default as Calendar2WeekFill,
  Calendar2X_default as Calendar2X,
  Calendar2XFill_default as Calendar2XFill,
  Calendar3_default as Calendar3,
  Calendar3Event_default as Calendar3Event,
  Calendar3EventFill_default as Calendar3EventFill,
  Calendar3Fill_default as Calendar3Fill,
  Calendar3Range_default as Calendar3Range,
  Calendar3RangeFill_default as Calendar3RangeFill,
  Calendar3Week_default as Calendar3Week,
  Calendar3WeekFill_default as Calendar3WeekFill,
  Calendar4_default as Calendar4,
  Calendar4Event_default as Calendar4Event,
  Calendar4Range_default as Calendar4Range,
  Calendar4Week_default as Calendar4Week,
  CalendarCheck_default as CalendarCheck,
  CalendarCheckFill_default as CalendarCheckFill,
  CalendarDate_default as CalendarDate,
  CalendarDateFill_default as CalendarDateFill,
  CalendarDay_default as CalendarDay,
  CalendarDayFill_default as CalendarDayFill,
  CalendarEvent_default as CalendarEvent,
  CalendarEventFill_default as CalendarEventFill,
  CalendarFill_default as CalendarFill,
  CalendarHeart_default as CalendarHeart,
  CalendarHeartFill_default as CalendarHeartFill,
  CalendarMinus_default as CalendarMinus,
  CalendarMinusFill_default as CalendarMinusFill,
  CalendarMonth_default as CalendarMonth,
  CalendarMonthFill_default as CalendarMonthFill,
  CalendarPlus_default as CalendarPlus,
  CalendarPlusFill_default as CalendarPlusFill,
  CalendarRange_default as CalendarRange,
  CalendarRangeFill_default as CalendarRangeFill,
  CalendarWeek_default as CalendarWeek,
  CalendarWeekFill_default as CalendarWeekFill,
  CalendarX_default as CalendarX,
  CalendarXFill_default as CalendarXFill,
  Camera_default as Camera,
  Camera2_default as Camera2,
  CameraFill_default as CameraFill,
  CameraReels_default as CameraReels,
  CameraReelsFill_default as CameraReelsFill,
  CameraVideo_default as CameraVideo,
  CameraVideoFill_default as CameraVideoFill,
  CameraVideoOff_default as CameraVideoOff,
  CameraVideoOffFill_default as CameraVideoOffFill,
  Capslock_default as Capslock,
  CapslockFill_default as CapslockFill,
  Capsule_default as Capsule,
  CapsulePill_default as CapsulePill,
  CarFront_default as CarFront,
  CarFrontFill_default as CarFrontFill,
  CardChecklist_default as CardChecklist,
  CardHeading_default as CardHeading,
  CardImage_default as CardImage,
  CardList_default as CardList,
  CardText_default as CardText,
  CaretDown_default as CaretDown,
  CaretDownFill_default as CaretDownFill,
  CaretDownSquare_default as CaretDownSquare,
  CaretDownSquareFill_default as CaretDownSquareFill,
  CaretLeft_default as CaretLeft,
  CaretLeftFill_default as CaretLeftFill,
  CaretLeftSquare_default as CaretLeftSquare,
  CaretLeftSquareFill_default as CaretLeftSquareFill,
  CaretRight_default as CaretRight,
  CaretRightFill_default as CaretRightFill,
  CaretRightSquare_default as CaretRightSquare,
  CaretRightSquareFill_default as CaretRightSquareFill,
  CaretUp_default as CaretUp,
  CaretUpFill_default as CaretUpFill,
  CaretUpSquare_default as CaretUpSquare,
  CaretUpSquareFill_default as CaretUpSquareFill,
  Cart_default as Cart,
  Cart2_default as Cart2,
  Cart3_default as Cart3,
  Cart4_default as Cart4,
  CartCheck_default as CartCheck,
  CartCheckFill_default as CartCheckFill,
  CartDash_default as CartDash,
  CartDashFill_default as CartDashFill,
  CartFill_default as CartFill,
  CartPlus_default as CartPlus,
  CartPlusFill_default as CartPlusFill,
  CartX_default as CartX,
  CartXFill_default as CartXFill,
  Cash_default as Cash,
  CashCoin_default as CashCoin,
  CashStack_default as CashStack,
  Cassette_default as Cassette,
  CassetteFill_default as CassetteFill,
  Cast_default as Cast,
  CcCircle_default as CcCircle,
  CcCircleFill_default as CcCircleFill,
  CcSquare_default as CcSquare,
  CcSquareFill_default as CcSquareFill,
  Chat_default as Chat,
  ChatDots_default as ChatDots,
  ChatDotsFill_default as ChatDotsFill,
  ChatFill_default as ChatFill,
  ChatHeart_default as ChatHeart,
  ChatHeartFill_default as ChatHeartFill,
  ChatLeft_default as ChatLeft,
  ChatLeftDots_default as ChatLeftDots,
  ChatLeftDotsFill_default as ChatLeftDotsFill,
  ChatLeftFill_default as ChatLeftFill,
  ChatLeftHeart_default as ChatLeftHeart,
  ChatLeftHeartFill_default as ChatLeftHeartFill,
  ChatLeftQuote_default as ChatLeftQuote,
  ChatLeftQuoteFill_default as ChatLeftQuoteFill,
  ChatLeftText_default as ChatLeftText,
  ChatLeftTextFill_default as ChatLeftTextFill,
  ChatQuote_default as ChatQuote,
  ChatQuoteFill_default as ChatQuoteFill,
  ChatRight_default as ChatRight,
  ChatRightDots_default as ChatRightDots,
  ChatRightDotsFill_default as ChatRightDotsFill,
  ChatRightFill_default as ChatRightFill,
  ChatRightHeart_default as ChatRightHeart,
  ChatRightHeartFill_default as ChatRightHeartFill,
  ChatRightQuote_default as ChatRightQuote,
  ChatRightQuoteFill_default as ChatRightQuoteFill,
  ChatRightText_default as ChatRightText,
  ChatRightTextFill_default as ChatRightTextFill,
  ChatSquare_default as ChatSquare,
  ChatSquareDots_default as ChatSquareDots,
  ChatSquareDotsFill_default as ChatSquareDotsFill,
  ChatSquareFill_default as ChatSquareFill,
  ChatSquareHeart_default as ChatSquareHeart,
  ChatSquareHeartFill_default as ChatSquareHeartFill,
  ChatSquareQuote_default as ChatSquareQuote,
  ChatSquareQuoteFill_default as ChatSquareQuoteFill,
  ChatSquareText_default as ChatSquareText,
  ChatSquareTextFill_default as ChatSquareTextFill,
  ChatText_default as ChatText,
  ChatTextFill_default as ChatTextFill,
  Check_default as Check,
  Check2_default as Check2,
  Check2All_default as Check2All,
  Check2Circle_default as Check2Circle,
  Check2Square_default as Check2Square,
  CheckAll_default as CheckAll,
  CheckCircle_default as CheckCircle,
  CheckCircleFill_default as CheckCircleFill,
  CheckLg_default as CheckLg,
  CheckSquare_default as CheckSquare,
  CheckSquareFill_default as CheckSquareFill,
  ChevronBarContract_default as ChevronBarContract,
  ChevronBarDown_default as ChevronBarDown,
  ChevronBarExpand_default as ChevronBarExpand,
  ChevronBarLeft_default as ChevronBarLeft,
  ChevronBarRight_default as ChevronBarRight,
  ChevronBarUp_default as ChevronBarUp,
  ChevronCompactDown_default as ChevronCompactDown,
  ChevronCompactLeft_default as ChevronCompactLeft,
  ChevronCompactRight_default as ChevronCompactRight,
  ChevronCompactUp_default as ChevronCompactUp,
  ChevronContract_default as ChevronContract,
  ChevronDoubleDown_default as ChevronDoubleDown,
  ChevronDoubleLeft_default as ChevronDoubleLeft,
  ChevronDoubleRight_default as ChevronDoubleRight,
  ChevronDoubleUp_default as ChevronDoubleUp,
  ChevronDown_default as ChevronDown,
  ChevronExpand_default as ChevronExpand,
  ChevronLeft_default as ChevronLeft,
  ChevronRight_default as ChevronRight,
  ChevronUp_default as ChevronUp,
  Circle_default11 as Circle,
  CircleFill_default11 as CircleFill,
  CircleHalf_default as CircleHalf,
  CircleSquare_default as CircleSquare,
  Clipboard_default as Clipboard,
  Clipboard2_default as Clipboard2,
  Clipboard2Check_default as Clipboard2Check,
  Clipboard2CheckFill_default as Clipboard2CheckFill,
  Clipboard2Data_default as Clipboard2Data,
  Clipboard2DataFill_default as Clipboard2DataFill,
  Clipboard2Fill_default as Clipboard2Fill,
  Clipboard2Heart_default as Clipboard2Heart,
  Clipboard2HeartFill_default as Clipboard2HeartFill,
  Clipboard2Minus_default as Clipboard2Minus,
  Clipboard2MinusFill_default as Clipboard2MinusFill,
  Clipboard2Plus_default as Clipboard2Plus,
  Clipboard2PlusFill_default as Clipboard2PlusFill,
  Clipboard2Pulse_default as Clipboard2Pulse,
  Clipboard2PulseFill_default as Clipboard2PulseFill,
  Clipboard2X_default as Clipboard2X,
  Clipboard2XFill_default as Clipboard2XFill,
  ClipboardCheck_default as ClipboardCheck,
  ClipboardCheckFill_default as ClipboardCheckFill,
  ClipboardData_default as ClipboardData,
  ClipboardDataFill_default as ClipboardDataFill,
  ClipboardFill_default as ClipboardFill,
  ClipboardHeart_default as ClipboardHeart,
  ClipboardHeartFill_default as ClipboardHeartFill,
  ClipboardMinus_default as ClipboardMinus,
  ClipboardMinusFill_default as ClipboardMinusFill,
  ClipboardPlus_default as ClipboardPlus,
  ClipboardPlusFill_default as ClipboardPlusFill,
  ClipboardPulse_default as ClipboardPulse,
  ClipboardX_default as ClipboardX,
  ClipboardXFill_default as ClipboardXFill,
  Clock_default as Clock,
  ClockFill_default as ClockFill,
  ClockHistory_default as ClockHistory,
  Cloud_default as Cloud,
  CloudArrowDown_default as CloudArrowDown,
  CloudArrowDownFill_default as CloudArrowDownFill,
  CloudArrowUp_default as CloudArrowUp,
  CloudArrowUpFill_default as CloudArrowUpFill,
  CloudCheck_default as CloudCheck,
  CloudCheckFill_default as CloudCheckFill,
  CloudDownload_default as CloudDownload,
  CloudDownloadFill_default as CloudDownloadFill,
  CloudDrizzle_default as CloudDrizzle,
  CloudDrizzleFill_default as CloudDrizzleFill,
  CloudFill_default as CloudFill,
  CloudFog_default as CloudFog,
  CloudFog2_default as CloudFog2,
  CloudFog2Fill_default as CloudFog2Fill,
  CloudFogFill_default as CloudFogFill,
  CloudHail_default as CloudHail,
  CloudHailFill_default as CloudHailFill,
  CloudHaze_default as CloudHaze,
  CloudHaze2_default as CloudHaze2,
  CloudHaze2Fill_default as CloudHaze2Fill,
  CloudHazeFill_default as CloudHazeFill,
  CloudLightning_default as CloudLightning,
  CloudLightningFill_default as CloudLightningFill,
  CloudLightningRain_default as CloudLightningRain,
  CloudLightningRainFill_default as CloudLightningRainFill,
  CloudMinus_default as CloudMinus,
  CloudMinusFill_default as CloudMinusFill,
  CloudMoon_default as CloudMoon,
  CloudMoonFill_default as CloudMoonFill,
  CloudPlus_default as CloudPlus,
  CloudPlusFill_default as CloudPlusFill,
  CloudRain_default as CloudRain,
  CloudRainFill_default as CloudRainFill,
  CloudRainHeavy_default as CloudRainHeavy,
  CloudRainHeavyFill_default as CloudRainHeavyFill,
  CloudSlash_default as CloudSlash,
  CloudSlashFill_default as CloudSlashFill,
  CloudSleet_default as CloudSleet,
  CloudSleetFill_default as CloudSleetFill,
  CloudSnow_default as CloudSnow,
  CloudSnowFill_default as CloudSnowFill,
  CloudSun_default as CloudSun,
  CloudSunFill_default as CloudSunFill,
  CloudUpload_default as CloudUpload,
  CloudUploadFill_default as CloudUploadFill,
  Clouds_default as Clouds,
  CloudsFill_default as CloudsFill,
  Cloudy_default as Cloudy,
  CloudyFill_default as CloudyFill,
  Code_default as Code,
  CodeSlash_default as CodeSlash,
  CodeSquare_default as CodeSquare,
  Coin_default as Coin,
  Collection_default as Collection,
  CollectionFill_default as CollectionFill,
  CollectionPlay_default as CollectionPlay,
  CollectionPlayFill_default as CollectionPlayFill,
  Columns_default as Columns,
  ColumnsGap_default as ColumnsGap,
  Command_default as Command,
  Compass_default as Compass,
  CompassFill_default as CompassFill,
  Cone_default as Cone,
  ConeStriped_default as ConeStriped,
  Controller_default as Controller,
  Cookie_default as Cookie,
  Copy_default as Copy,
  Cpu_default as Cpu,
  CpuFill_default as CpuFill,
  CreditCard_default as CreditCard,
  CreditCard2Back_default as CreditCard2Back,
  CreditCard2BackFill_default as CreditCard2BackFill,
  CreditCard2Front_default as CreditCard2Front,
  CreditCard2FrontFill_default as CreditCard2FrontFill,
  CreditCardFill_default as CreditCardFill,
  Crop_default as Crop,
  Crosshair_default as Crosshair,
  Crosshair2_default as Crosshair2,
  Cup_default as Cup,
  CupFill_default as CupFill,
  CupHot_default as CupHot,
  CupHotFill_default as CupHotFill,
  CupStraw_default as CupStraw,
  CurrencyBitcoin_default as CurrencyBitcoin,
  CurrencyDollar_default as CurrencyDollar,
  CurrencyEuro_default as CurrencyEuro,
  CurrencyExchange_default as CurrencyExchange,
  CurrencyPound_default as CurrencyPound,
  CurrencyRupee_default as CurrencyRupee,
  CurrencyYen_default as CurrencyYen,
  Cursor_default as Cursor,
  CursorFill_default as CursorFill,
  CursorText_default as CursorText,
  Dash_default as Dash,
  DashCircle_default as DashCircle,
  DashCircleDotted_default as DashCircleDotted,
  DashCircleFill_default as DashCircleFill,
  DashLg_default as DashLg,
  DashSquare_default as DashSquare,
  DashSquareDotted_default as DashSquareDotted,
  DashSquareFill_default as DashSquareFill,
  Database_default as Database,
  DatabaseAdd_default as DatabaseAdd,
  DatabaseCheck_default as DatabaseCheck,
  DatabaseDash_default as DatabaseDash,
  DatabaseDown_default as DatabaseDown,
  DatabaseExclamation_default as DatabaseExclamation,
  DatabaseFill_default as DatabaseFill,
  DatabaseFillAdd_default as DatabaseFillAdd,
  DatabaseFillCheck_default as DatabaseFillCheck,
  DatabaseFillDash_default as DatabaseFillDash,
  DatabaseFillDown_default as DatabaseFillDown,
  DatabaseFillExclamation_default as DatabaseFillExclamation,
  DatabaseFillGear_default as DatabaseFillGear,
  DatabaseFillLock_default as DatabaseFillLock,
  DatabaseFillSlash_default as DatabaseFillSlash,
  DatabaseFillUp_default as DatabaseFillUp,
  DatabaseFillX_default as DatabaseFillX,
  DatabaseGear_default as DatabaseGear,
  DatabaseLock_default as DatabaseLock,
  DatabaseSlash_default as DatabaseSlash,
  DatabaseUp_default as DatabaseUp,
  DatabaseX_default as DatabaseX,
  DeviceHdd_default as DeviceHdd,
  DeviceHddFill_default as DeviceHddFill,
  DeviceSsd_default as DeviceSsd,
  DeviceSsdFill_default as DeviceSsdFill,
  Diagram2_default as Diagram2,
  Diagram2Fill_default as Diagram2Fill,
  Diagram3_default as Diagram3,
  Diagram3Fill_default as Diagram3Fill,
  Diamond_default as Diamond,
  DiamondFill_default as DiamondFill,
  DiamondHalf_default as DiamondHalf,
  Dice1_default as Dice1,
  Dice1Fill_default as Dice1Fill,
  Dice2_default as Dice2,
  Dice2Fill_default as Dice2Fill,
  Dice3_default as Dice3,
  Dice3Fill_default as Dice3Fill,
  Dice4_default as Dice4,
  Dice4Fill_default as Dice4Fill,
  Dice5_default as Dice5,
  Dice5Fill_default as Dice5Fill,
  Dice6_default as Dice6,
  Dice6Fill_default as Dice6Fill,
  Disc_default as Disc,
  DiscFill_default as DiscFill,
  Discord_default as Discord,
  Display_default as Display,
  DisplayFill_default as DisplayFill,
  Displayport_default as Displayport,
  DisplayportFill_default as DisplayportFill,
  DistributeHorizontal_default as DistributeHorizontal,
  DistributeVertical_default as DistributeVertical,
  DoorClosed_default as DoorClosed,
  DoorClosedFill_default as DoorClosedFill,
  DoorOpen_default as DoorOpen,
  DoorOpenFill_default as DoorOpenFill,
  Dot_default as Dot,
  Download_default as Download,
  Dpad_default as Dpad,
  DpadFill_default as DpadFill,
  Dribbble_default as Dribbble,
  Dropbox_default as Dropbox,
  Droplet_default as Droplet,
  DropletFill_default as DropletFill,
  DropletHalf_default as DropletHalf,
  Duffle_default as Duffle,
  DuffleFill_default as DuffleFill,
  Ear_default as Ear,
  EarFill_default as EarFill,
  Earbuds_default as Earbuds,
  Easel_default as Easel,
  Easel2_default as Easel2,
  Easel2Fill_default as Easel2Fill,
  Easel3_default as Easel3,
  Easel3Fill_default as Easel3Fill,
  EaselFill_default as EaselFill,
  Egg_default as Egg,
  EggFill_default as EggFill,
  EggFried_default as EggFried,
  Eject_default as Eject,
  EjectFill_default as EjectFill,
  EmojiAngry_default as EmojiAngry,
  EmojiAngryFill_default as EmojiAngryFill,
  EmojiAstonished_default as EmojiAstonished,
  EmojiAstonishedFill_default as EmojiAstonishedFill,
  EmojiDizzy_default as EmojiDizzy,
  EmojiDizzyFill_default as EmojiDizzyFill,
  EmojiExpressionless_default as EmojiExpressionless,
  EmojiExpressionlessFill_default as EmojiExpressionlessFill,
  EmojiFrown_default as EmojiFrown,
  EmojiFrownFill_default as EmojiFrownFill,
  EmojiGrimace_default as EmojiGrimace,
  EmojiGrimaceFill_default as EmojiGrimaceFill,
  EmojiGrin_default as EmojiGrin,
  EmojiGrinFill_default as EmojiGrinFill,
  EmojiHeartEyes_default as EmojiHeartEyes,
  EmojiHeartEyesFill_default as EmojiHeartEyesFill,
  EmojiKiss_default as EmojiKiss,
  EmojiKissFill_default as EmojiKissFill,
  EmojiLaughing_default as EmojiLaughing,
  EmojiLaughingFill_default as EmojiLaughingFill,
  EmojiNeutral_default as EmojiNeutral,
  EmojiNeutralFill_default as EmojiNeutralFill,
  EmojiSmile_default as EmojiSmile,
  EmojiSmileFill_default as EmojiSmileFill,
  EmojiSmileUpsideDown_default as EmojiSmileUpsideDown,
  EmojiSmileUpsideDownFill_default as EmojiSmileUpsideDownFill,
  EmojiSunglasses_default as EmojiSunglasses,
  EmojiSunglassesFill_default as EmojiSunglassesFill,
  EmojiSurprise_default as EmojiSurprise,
  EmojiSurpriseFill_default as EmojiSurpriseFill,
  EmojiTear_default as EmojiTear,
  EmojiTearFill_default as EmojiTearFill,
  EmojiWink_default as EmojiWink,
  EmojiWinkFill_default as EmojiWinkFill,
  Envelope_default as Envelope,
  EnvelopeArrowDown_default as EnvelopeArrowDown,
  EnvelopeArrowDownFill_default as EnvelopeArrowDownFill,
  EnvelopeArrowUp_default as EnvelopeArrowUp,
  EnvelopeArrowUpFill_default as EnvelopeArrowUpFill,
  EnvelopeAt_default as EnvelopeAt,
  EnvelopeAtFill_default as EnvelopeAtFill,
  EnvelopeCheck_default as EnvelopeCheck,
  EnvelopeCheckFill_default as EnvelopeCheckFill,
  EnvelopeDash_default as EnvelopeDash,
  EnvelopeDashFill_default as EnvelopeDashFill,
  EnvelopeExclamation_default as EnvelopeExclamation,
  EnvelopeExclamationFill_default as EnvelopeExclamationFill,
  EnvelopeFill_default as EnvelopeFill,
  EnvelopeHeart_default as EnvelopeHeart,
  EnvelopeHeartFill_default as EnvelopeHeartFill,
  EnvelopeOpen_default as EnvelopeOpen,
  EnvelopeOpenFill_default as EnvelopeOpenFill,
  EnvelopeOpenHeart_default as EnvelopeOpenHeart,
  EnvelopeOpenHeartFill_default as EnvelopeOpenHeartFill,
  EnvelopePaper_default as EnvelopePaper,
  EnvelopePaperFill_default as EnvelopePaperFill,
  EnvelopePaperHeart_default as EnvelopePaperHeart,
  EnvelopePaperHeartFill_default as EnvelopePaperHeartFill,
  EnvelopePlus_default as EnvelopePlus,
  EnvelopePlusFill_default as EnvelopePlusFill,
  EnvelopeSlash_default as EnvelopeSlash,
  EnvelopeSlashFill_default as EnvelopeSlashFill,
  EnvelopeX_default as EnvelopeX,
  EnvelopeXFill_default as EnvelopeXFill,
  Eraser_default as Eraser,
  EraserFill_default as EraserFill,
  Escape_default as Escape,
  Ethernet_default as Ethernet,
  EvFront_default as EvFront,
  EvFrontFill_default as EvFrontFill,
  EvStation_default as EvStation,
  EvStationFill_default as EvStationFill,
  Exclamation_default as Exclamation,
  ExclamationCircle_default as ExclamationCircle,
  ExclamationCircleFill_default as ExclamationCircleFill,
  ExclamationDiamond_default as ExclamationDiamond,
  ExclamationDiamondFill_default as ExclamationDiamondFill,
  ExclamationLg_default as ExclamationLg,
  ExclamationOctagon_default as ExclamationOctagon,
  ExclamationOctagonFill_default as ExclamationOctagonFill,
  ExclamationSquare_default as ExclamationSquare,
  ExclamationSquareFill_default as ExclamationSquareFill,
  ExclamationTriangle_default as ExclamationTriangle,
  ExclamationTriangleFill_default as ExclamationTriangleFill,
  Exclude_default as Exclude,
  Explicit_default as Explicit,
  ExplicitFill_default as ExplicitFill,
  Exposure_default as Exposure,
  Eye_default as Eye,
  EyeFill_default as EyeFill,
  EyeSlash_default as EyeSlash,
  EyeSlashFill_default as EyeSlashFill,
  Eyedropper_default as Eyedropper,
  Eyeglasses_default as Eyeglasses,
  Facebook_default as Facebook,
  Fan_default as Fan,
  FastForward_default as FastForward,
  FastForwardBtn_default as FastForwardBtn,
  FastForwardBtnFill_default as FastForwardBtnFill,
  FastForwardCircle_default as FastForwardCircle,
  FastForwardCircleFill_default as FastForwardCircleFill,
  FastForwardFill_default as FastForwardFill,
  Feather_default as Feather,
  Feather2_default as Feather2,
  File_default as File,
  FileArrowDown_default as FileArrowDown,
  FileArrowDownFill_default as FileArrowDownFill,
  FileArrowUp_default as FileArrowUp,
  FileArrowUpFill_default as FileArrowUpFill,
  FileBarGraph_default as FileBarGraph,
  FileBarGraphFill_default as FileBarGraphFill,
  FileBinary_default as FileBinary,
  FileBinaryFill_default as FileBinaryFill,
  FileBreak_default as FileBreak,
  FileBreakFill_default as FileBreakFill,
  FileCheck_default as FileCheck,
  FileCheckFill_default as FileCheckFill,
  FileCode_default as FileCode,
  FileCodeFill_default as FileCodeFill,
  FileDiff_default as FileDiff,
  FileDiffFill_default as FileDiffFill,
  FileEarmark_default as FileEarmark,
  FileEarmarkArrowDown_default as FileEarmarkArrowDown,
  FileEarmarkArrowDownFill_default as FileEarmarkArrowDownFill,
  FileEarmarkArrowUp_default as FileEarmarkArrowUp,
  FileEarmarkArrowUpFill_default as FileEarmarkArrowUpFill,
  FileEarmarkBarGraph_default as FileEarmarkBarGraph,
  FileEarmarkBarGraphFill_default as FileEarmarkBarGraphFill,
  FileEarmarkBinary_default as FileEarmarkBinary,
  FileEarmarkBinaryFill_default as FileEarmarkBinaryFill,
  FileEarmarkBreak_default as FileEarmarkBreak,
  FileEarmarkBreakFill_default as FileEarmarkBreakFill,
  FileEarmarkCheck_default as FileEarmarkCheck,
  FileEarmarkCheckFill_default as FileEarmarkCheckFill,
  FileEarmarkCode_default as FileEarmarkCode,
  FileEarmarkCodeFill_default as FileEarmarkCodeFill,
  FileEarmarkDiff_default as FileEarmarkDiff,
  FileEarmarkDiffFill_default as FileEarmarkDiffFill,
  FileEarmarkEasel_default as FileEarmarkEasel,
  FileEarmarkEaselFill_default as FileEarmarkEaselFill,
  FileEarmarkExcel_default as FileEarmarkExcel,
  FileEarmarkExcelFill_default as FileEarmarkExcelFill,
  FileEarmarkFill_default as FileEarmarkFill,
  FileEarmarkFont_default as FileEarmarkFont,
  FileEarmarkFontFill_default as FileEarmarkFontFill,
  FileEarmarkImage_default as FileEarmarkImage,
  FileEarmarkImageFill_default as FileEarmarkImageFill,
  FileEarmarkLock_default as FileEarmarkLock,
  FileEarmarkLock2_default as FileEarmarkLock2,
  FileEarmarkLock2Fill_default as FileEarmarkLock2Fill,
  FileEarmarkLockFill_default as FileEarmarkLockFill,
  FileEarmarkMedical_default as FileEarmarkMedical,
  FileEarmarkMedicalFill_default as FileEarmarkMedicalFill,
  FileEarmarkMinus_default as FileEarmarkMinus,
  FileEarmarkMinusFill_default as FileEarmarkMinusFill,
  FileEarmarkMusic_default as FileEarmarkMusic,
  FileEarmarkMusicFill_default as FileEarmarkMusicFill,
  FileEarmarkPdf_default as FileEarmarkPdf,
  FileEarmarkPdfFill_default as FileEarmarkPdfFill,
  FileEarmarkPerson_default as FileEarmarkPerson,
  FileEarmarkPersonFill_default as FileEarmarkPersonFill,
  FileEarmarkPlay_default as FileEarmarkPlay,
  FileEarmarkPlayFill_default as FileEarmarkPlayFill,
  FileEarmarkPlus_default as FileEarmarkPlus,
  FileEarmarkPlusFill_default as FileEarmarkPlusFill,
  FileEarmarkPost_default as FileEarmarkPost,
  FileEarmarkPostFill_default as FileEarmarkPostFill,
  FileEarmarkPpt_default as FileEarmarkPpt,
  FileEarmarkPptFill_default as FileEarmarkPptFill,
  FileEarmarkRichtext_default as FileEarmarkRichtext,
  FileEarmarkRichtextFill_default as FileEarmarkRichtextFill,
  FileEarmarkRuled_default as FileEarmarkRuled,
  FileEarmarkRuledFill_default as FileEarmarkRuledFill,
  FileEarmarkSlides_default as FileEarmarkSlides,
  FileEarmarkSlidesFill_default as FileEarmarkSlidesFill,
  FileEarmarkSpreadsheet_default as FileEarmarkSpreadsheet,
  FileEarmarkSpreadsheetFill_default as FileEarmarkSpreadsheetFill,
  FileEarmarkText_default as FileEarmarkText,
  FileEarmarkTextFill_default as FileEarmarkTextFill,
  FileEarmarkWord_default as FileEarmarkWord,
  FileEarmarkWordFill_default as FileEarmarkWordFill,
  FileEarmarkX_default as FileEarmarkX,
  FileEarmarkXFill_default as FileEarmarkXFill,
  FileEarmarkZip_default as FileEarmarkZip,
  FileEarmarkZipFill_default as FileEarmarkZipFill,
  FileEasel_default as FileEasel,
  FileEaselFill_default as FileEaselFill,
  FileExcel_default as FileExcel,
  FileExcelFill_default as FileExcelFill,
  FileFill_default as FileFill,
  FileFont_default as FileFont,
  FileFontFill_default as FileFontFill,
  FileImage_default as FileImage,
  FileImageFill_default as FileImageFill,
  FileLock_default as FileLock,
  FileLock2_default as FileLock2,
  FileLock2Fill_default as FileLock2Fill,
  FileLockFill_default as FileLockFill,
  FileMedical_default as FileMedical,
  FileMedicalFill_default as FileMedicalFill,
  FileMinus_default as FileMinus,
  FileMinusFill_default as FileMinusFill,
  FileMusic_default as FileMusic,
  FileMusicFill_default as FileMusicFill,
  FilePdf_default as FilePdf,
  FilePdfFill_default as FilePdfFill,
  FilePerson_default as FilePerson,
  FilePersonFill_default as FilePersonFill,
  FilePlay_default as FilePlay,
  FilePlayFill_default as FilePlayFill,
  FilePlus_default as FilePlus,
  FilePlusFill_default as FilePlusFill,
  FilePost_default as FilePost,
  FilePostFill_default as FilePostFill,
  FilePpt_default as FilePpt,
  FilePptFill_default as FilePptFill,
  FileRichtext_default as FileRichtext,
  FileRichtextFill_default as FileRichtextFill,
  FileRuled_default as FileRuled,
  FileRuledFill_default as FileRuledFill,
  FileSlides_default as FileSlides,
  FileSlidesFill_default as FileSlidesFill,
  FileSpreadsheet_default as FileSpreadsheet,
  FileSpreadsheetFill_default as FileSpreadsheetFill,
  FileText_default as FileText,
  FileTextFill_default as FileTextFill,
  FileWord_default as FileWord,
  FileWordFill_default as FileWordFill,
  FileX_default as FileX,
  FileXFill_default as FileXFill,
  FileZip_default as FileZip,
  FileZipFill_default as FileZipFill,
  Files_default as Files,
  FilesAlt_default as FilesAlt,
  FiletypeAac_default as FiletypeAac,
  FiletypeAi_default as FiletypeAi,
  FiletypeBmp_default as FiletypeBmp,
  FiletypeCs_default as FiletypeCs,
  FiletypeCss_default as FiletypeCss,
  FiletypeCsv_default as FiletypeCsv,
  FiletypeDoc_default as FiletypeDoc,
  FiletypeDocx_default as FiletypeDocx,
  FiletypeExe_default as FiletypeExe,
  FiletypeGif_default as FiletypeGif,
  FiletypeHeic_default as FiletypeHeic,
  FiletypeHtml_default as FiletypeHtml,
  FiletypeJava_default as FiletypeJava,
  FiletypeJpg_default as FiletypeJpg,
  FiletypeJs_default as FiletypeJs,
  FiletypeJson_default as FiletypeJson,
  FiletypeJsx_default as FiletypeJsx,
  FiletypeKey_default as FiletypeKey,
  FiletypeM4p_default as FiletypeM4p,
  FiletypeMd_default as FiletypeMd,
  FiletypeMdx_default as FiletypeMdx,
  FiletypeMov_default as FiletypeMov,
  FiletypeMp3_default as FiletypeMp3,
  FiletypeMp4_default as FiletypeMp4,
  FiletypeOtf_default as FiletypeOtf,
  FiletypePdf_default as FiletypePdf,
  FiletypePhp_default as FiletypePhp,
  FiletypePng_default as FiletypePng,
  FiletypePpt_default as FiletypePpt,
  FiletypePptx_default as FiletypePptx,
  FiletypePsd_default as FiletypePsd,
  FiletypePy_default as FiletypePy,
  FiletypeRaw_default as FiletypeRaw,
  FiletypeRb_default as FiletypeRb,
  FiletypeSass_default as FiletypeSass,
  FiletypeScss_default as FiletypeScss,
  FiletypeSh_default as FiletypeSh,
  FiletypeSql_default as FiletypeSql,
  FiletypeSvg_default as FiletypeSvg,
  FiletypeTiff_default as FiletypeTiff,
  FiletypeTsx_default as FiletypeTsx,
  FiletypeTtf_default as FiletypeTtf,
  FiletypeTxt_default as FiletypeTxt,
  FiletypeWav_default as FiletypeWav,
  FiletypeWoff_default as FiletypeWoff,
  FiletypeXls_default as FiletypeXls,
  FiletypeXlsx_default as FiletypeXlsx,
  FiletypeXml_default as FiletypeXml,
  FiletypeYml_default as FiletypeYml,
  Film_default as Film,
  Filter_default as Filter,
  FilterCircle_default as FilterCircle,
  FilterCircleFill_default as FilterCircleFill,
  FilterLeft_default as FilterLeft,
  FilterRight_default as FilterRight,
  FilterSquare_default as FilterSquare,
  FilterSquareFill_default as FilterSquareFill,
  Fingerprint_default as Fingerprint,
  Fire_default as Fire,
  Flag_default as Flag,
  FlagFill_default as FlagFill,
  Floppy_default as Floppy,
  Floppy2_default as Floppy2,
  Floppy2Fill_default as Floppy2Fill,
  FloppyFill_default as FloppyFill,
  Flower1_default as Flower1,
  Flower2_default as Flower2,
  Flower3_default as Flower3,
  Folder_default as Folder,
  Folder2_default as Folder2,
  Folder2Open_default as Folder2Open,
  FolderCheck_default as FolderCheck,
  FolderFill_default as FolderFill,
  FolderMinus_default as FolderMinus,
  FolderPlus_default as FolderPlus,
  FolderSymlink_default as FolderSymlink,
  FolderSymlinkFill_default as FolderSymlinkFill,
  FolderX_default as FolderX,
  Fonts_default as Fonts,
  Forward_default as Forward,
  ForwardFill_default as ForwardFill,
  Front_default as Front,
  FuelPump_default as FuelPump,
  FuelPumpDiesel_default as FuelPumpDiesel,
  FuelPumpDieselFill_default as FuelPumpDieselFill,
  FuelPumpFill_default as FuelPumpFill,
  Fullscreen_default as Fullscreen,
  FullscreenExit_default as FullscreenExit,
  Funnel_default as Funnel,
  FunnelFill_default as FunnelFill,
  Gear_default as Gear,
  GearFill_default as GearFill,
  GearWide_default as GearWide,
  GearWideConnected_default as GearWideConnected,
  Gem_default as Gem,
  GenderAmbiguous_default as GenderAmbiguous,
  GenderFemale_default as GenderFemale,
  GenderMale_default as GenderMale,
  GenderNeuter_default as GenderNeuter,
  GenderTrans_default as GenderTrans,
  Geo_default as Geo,
  GeoAlt_default as GeoAlt,
  GeoAltFill_default as GeoAltFill,
  GeoFill_default as GeoFill,
  Gift_default as Gift,
  GiftFill_default as GiftFill,
  Git_default as Git,
  Github_default as Github,
  Gitlab_default as Gitlab,
  Globe_default as Globe,
  Globe2_default as Globe2,
  GlobeAmericas_default as GlobeAmericas,
  GlobeAsiaAustralia_default as GlobeAsiaAustralia,
  GlobeCentralSouthAsia_default as GlobeCentralSouthAsia,
  GlobeEuropeAfrica_default as GlobeEuropeAfrica,
  Google_default as Google,
  GooglePlay_default as GooglePlay,
  GpuCard_default as GpuCard,
  GraphDown_default as GraphDown,
  GraphDownArrow_default as GraphDownArrow,
  GraphUp_default as GraphUp,
  GraphUpArrow_default as GraphUpArrow,
  Grid_default as Grid,
  Grid1x2_default as Grid1x2,
  Grid1x2Fill_default as Grid1x2Fill,
  Grid3x2_default as Grid3x2,
  Grid3x2Gap_default as Grid3x2Gap,
  Grid3x2GapFill_default as Grid3x2GapFill,
  Grid3x3_default as Grid3x3,
  Grid3x3Gap_default as Grid3x3Gap,
  Grid3x3GapFill_default as Grid3x3GapFill,
  GridFill_default as GridFill,
  GripHorizontal_default as GripHorizontal,
  GripVertical_default as GripVertical,
  HCircle_default as HCircle,
  HCircleFill_default as HCircleFill,
  HSquare_default as HSquare,
  HSquareFill_default as HSquareFill,
  Hammer_default as Hammer,
  HandIndex_default as HandIndex,
  HandIndexFill_default as HandIndexFill,
  HandIndexThumb_default as HandIndexThumb,
  HandIndexThumbFill_default as HandIndexThumbFill,
  HandThumbsDown_default as HandThumbsDown,
  HandThumbsDownFill_default as HandThumbsDownFill,
  HandThumbsUp_default as HandThumbsUp,
  HandThumbsUpFill_default as HandThumbsUpFill,
  Handbag_default as Handbag,
  HandbagFill_default as HandbagFill,
  Hash_default as Hash,
  Hdd_default as Hdd,
  HddFill_default as HddFill,
  HddNetwork_default as HddNetwork,
  HddNetworkFill_default as HddNetworkFill,
  HddRack_default as HddRack,
  HddRackFill_default as HddRackFill,
  HddStack_default as HddStack,
  HddStackFill_default as HddStackFill,
  Hdmi_default as Hdmi,
  HdmiFill_default as HdmiFill,
  Headphones_default as Headphones,
  Headset_default as Headset,
  HeadsetVr_default as HeadsetVr,
  Heart_default as Heart,
  HeartArrow_default as HeartArrow,
  HeartFill_default as HeartFill,
  HeartHalf_default as HeartHalf,
  HeartPulse_default as HeartPulse,
  HeartPulseFill_default as HeartPulseFill,
  Heartbreak_default as Heartbreak,
  HeartbreakFill_default as HeartbreakFill,
  Hearts_default as Hearts,
  Heptagon_default as Heptagon,
  HeptagonFill_default as HeptagonFill,
  HeptagonHalf_default as HeptagonHalf,
  Hexagon_default as Hexagon,
  HexagonFill_default as HexagonFill,
  HexagonHalf_default as HexagonHalf,
  Highlighter_default as Highlighter,
  Highlights_default as Highlights,
  Hospital_default as Hospital,
  HospitalFill_default as HospitalFill,
  Hourglass_default as Hourglass,
  HourglassBottom_default as HourglassBottom,
  HourglassSplit_default as HourglassSplit,
  HourglassTop_default as HourglassTop,
  House_default as House,
  HouseAdd_default as HouseAdd,
  HouseAddFill_default as HouseAddFill,
  HouseCheck_default as HouseCheck,
  HouseCheckFill_default as HouseCheckFill,
  HouseDash_default as HouseDash,
  HouseDashFill_default as HouseDashFill,
  HouseDoor_default as HouseDoor,
  HouseDoorFill_default as HouseDoorFill,
  HouseDown_default as HouseDown,
  HouseDownFill_default as HouseDownFill,
  HouseExclamation_default as HouseExclamation,
  HouseExclamationFill_default as HouseExclamationFill,
  HouseFill_default as HouseFill,
  HouseGear_default as HouseGear,
  HouseGearFill_default as HouseGearFill,
  HouseHeart_default as HouseHeart,
  HouseHeartFill_default as HouseHeartFill,
  HouseLock_default as HouseLock,
  HouseLockFill_default as HouseLockFill,
  HouseSlash_default as HouseSlash,
  HouseSlashFill_default as HouseSlashFill,
  HouseUp_default as HouseUp,
  HouseUpFill_default as HouseUpFill,
  HouseX_default as HouseX,
  HouseXFill_default as HouseXFill,
  Houses_default as Houses,
  HousesFill_default as HousesFill,
  Hr_default as Hr,
  Hurricane_default as Hurricane,
  Hypnotize_default as Hypnotize,
  Image_default as Image,
  ImageAlt_default as ImageAlt,
  ImageFill_default as ImageFill,
  Images_default as Images,
  Inbox_default as Inbox,
  InboxFill_default as InboxFill,
  Inboxes_default as Inboxes,
  InboxesFill_default as InboxesFill,
  Incognito_default as Incognito,
  Indent_default as Indent,
  Infinity_default as Infinity,
  Info_default as Info,
  InfoCircle_default as InfoCircle,
  InfoCircleFill_default as InfoCircleFill,
  InfoLg_default as InfoLg,
  InfoSquare_default as InfoSquare,
  InfoSquareFill_default as InfoSquareFill,
  InputCursor_default as InputCursor,
  InputCursorText_default as InputCursorText,
  Instagram_default as Instagram,
  Intersect_default as Intersect,
  Journal_default as Journal,
  JournalAlbum_default as JournalAlbum,
  JournalArrowDown_default as JournalArrowDown,
  JournalArrowUp_default as JournalArrowUp,
  JournalBookmark_default as JournalBookmark,
  JournalBookmarkFill_default as JournalBookmarkFill,
  JournalCheck_default as JournalCheck,
  JournalCode_default as JournalCode,
  JournalMedical_default as JournalMedical,
  JournalMinus_default as JournalMinus,
  JournalPlus_default as JournalPlus,
  JournalRichtext_default as JournalRichtext,
  JournalText_default as JournalText,
  JournalX_default as JournalX,
  Journals_default as Journals,
  Joystick_default as Joystick,
  Justify_default as Justify,
  JustifyLeft_default as JustifyLeft,
  JustifyRight_default as JustifyRight,
  Kanban_default as Kanban,
  KanbanFill_default as KanbanFill,
  Key_default as Key,
  KeyFill_default as KeyFill,
  Keyboard_default as Keyboard,
  KeyboardFill_default as KeyboardFill,
  Ladder_default as Ladder,
  Lamp_default as Lamp,
  LampFill_default as LampFill,
  Laptop_default as Laptop,
  LaptopFill_default as LaptopFill,
  LayerBackward_default as LayerBackward,
  LayerForward_default as LayerForward,
  Layers_default as Layers,
  LayersFill_default as LayersFill,
  LayersHalf_default as LayersHalf,
  LayoutSidebar_default as LayoutSidebar,
  LayoutSidebarInset_default as LayoutSidebarInset,
  LayoutSidebarInsetReverse_default as LayoutSidebarInsetReverse,
  LayoutSidebarReverse_default as LayoutSidebarReverse,
  LayoutSplit_default as LayoutSplit,
  LayoutTextSidebar_default as LayoutTextSidebar,
  LayoutTextSidebarReverse_default as LayoutTextSidebarReverse,
  LayoutTextWindow_default as LayoutTextWindow,
  LayoutTextWindowReverse_default as LayoutTextWindowReverse,
  LayoutThreeColumns_default as LayoutThreeColumns,
  LayoutWtf_default as LayoutWtf,
  LifePreserver_default as LifePreserver,
  Lightbulb_default as Lightbulb,
  LightbulbFill_default as LightbulbFill,
  LightbulbOff_default as LightbulbOff,
  LightbulbOffFill_default as LightbulbOffFill,
  Lightning_default as Lightning,
  LightningCharge_default as LightningCharge,
  LightningChargeFill_default as LightningChargeFill,
  LightningFill_default as LightningFill,
  Line_default as Line,
  Link_default as Link,
  Link45deg_default as Link45deg,
  Linkedin_default as Linkedin,
  List_default as List,
  ListCheck_default as ListCheck,
  ListColumns_default as ListColumns,
  ListColumnsReverse_default as ListColumnsReverse,
  ListNested_default as ListNested,
  ListOl_default as ListOl,
  ListStars_default as ListStars,
  ListTask_default as ListTask,
  ListUl_default as ListUl,
  Lock_default as Lock,
  LockFill_default as LockFill,
  Luggage_default as Luggage,
  LuggageFill_default as LuggageFill,
  Lungs_default as Lungs,
  LungsFill_default as LungsFill,
  Magic_default as Magic,
  Magnet_default as Magnet,
  MagnetFill_default as MagnetFill,
  Mailbox_default as Mailbox,
  Mailbox2_default as Mailbox2,
  Mailbox2Flag_default as Mailbox2Flag,
  MailboxFlag_default as MailboxFlag,
  Map_default as Map,
  MapFill_default as MapFill,
  Markdown_default as Markdown,
  MarkdownFill_default as MarkdownFill,
  MarkerTip_default as MarkerTip,
  Mask_default as Mask,
  Mastodon_default as Mastodon,
  Medium_default as Medium,
  Megaphone_default as Megaphone,
  MegaphoneFill_default as MegaphoneFill,
  Memory_default as Memory,
  MenuApp_default as MenuApp,
  MenuAppFill_default as MenuAppFill,
  MenuButton_default as MenuButton,
  MenuButtonFill_default as MenuButtonFill,
  MenuButtonWide_default as MenuButtonWide,
  MenuButtonWideFill_default as MenuButtonWideFill,
  MenuDown_default as MenuDown,
  MenuUp_default as MenuUp,
  Messenger_default as Messenger,
  Meta_default as Meta,
  Mic_default as Mic,
  MicFill_default as MicFill,
  MicMute_default as MicMute,
  MicMuteFill_default as MicMuteFill,
  Microsoft_default as Microsoft,
  MicrosoftTeams_default as MicrosoftTeams,
  Minecart_default as Minecart,
  MinecartLoaded_default as MinecartLoaded,
  Modem_default as Modem,
  ModemFill_default as ModemFill,
  Moisture_default as Moisture,
  Moon_default as Moon,
  MoonFill_default as MoonFill,
  MoonStars_default as MoonStars,
  MoonStarsFill_default as MoonStarsFill,
  Mortarboard_default as Mortarboard,
  MortarboardFill_default as MortarboardFill,
  Motherboard_default as Motherboard,
  MotherboardFill_default as MotherboardFill,
  Mouse_default as Mouse,
  Mouse2_default as Mouse2,
  Mouse2Fill_default as Mouse2Fill,
  Mouse3_default as Mouse3,
  Mouse3Fill_default as Mouse3Fill,
  MouseFill_default as MouseFill,
  MusicNote_default as MusicNote,
  MusicNoteBeamed_default as MusicNoteBeamed,
  MusicNoteList_default as MusicNoteList,
  MusicPlayer_default as MusicPlayer,
  MusicPlayerFill_default as MusicPlayerFill,
  Newspaper_default as Newspaper,
  NintendoSwitch_default as NintendoSwitch,
  NodeMinus_default as NodeMinus,
  NodeMinusFill_default as NodeMinusFill,
  NodePlus_default as NodePlus,
  NodePlusFill_default as NodePlusFill,
  NoiseReduction_default as NoiseReduction,
  Nut_default as Nut,
  NutFill_default as NutFill,
  Nvidia_default as Nvidia,
  Nvme_default as Nvme,
  NvmeFill_default as NvmeFill,
  Octagon_default as Octagon,
  OctagonFill_default as OctagonFill,
  OctagonHalf_default as OctagonHalf,
  Opencollective_default as Opencollective,
  OpticalAudio_default as OpticalAudio,
  OpticalAudioFill_default as OpticalAudioFill,
  Option_default as Option,
  Outlet_default as Outlet,
  PCircle_default as PCircle,
  PCircleFill_default as PCircleFill,
  PSquare_default as PSquare,
  PSquareFill_default as PSquareFill,
  PaintBucket_default as PaintBucket,
  Palette_default as Palette,
  Palette2_default as Palette2,
  PaletteFill_default as PaletteFill,
  Paperclip_default as Paperclip,
  Paragraph_default as Paragraph,
  Pass_default as Pass,
  PassFill_default as PassFill,
  Passport_default as Passport,
  PassportFill_default as PassportFill,
  PatchCheck_default as PatchCheck,
  PatchCheckFill_default as PatchCheckFill,
  PatchExclamation_default as PatchExclamation,
  PatchExclamationFill_default as PatchExclamationFill,
  PatchMinus_default as PatchMinus,
  PatchMinusFill_default as PatchMinusFill,
  PatchPlus_default as PatchPlus,
  PatchPlusFill_default as PatchPlusFill,
  PatchQuestion_default as PatchQuestion,
  PatchQuestionFill_default as PatchQuestionFill,
  Pause_default as Pause,
  PauseBtn_default as PauseBtn,
  PauseBtnFill_default as PauseBtnFill,
  PauseCircle_default as PauseCircle,
  PauseCircleFill_default as PauseCircleFill,
  PauseFill_default as PauseFill,
  Paypal_default as Paypal,
  Pc_default as Pc,
  PcDisplay_default as PcDisplay,
  PcDisplayHorizontal_default as PcDisplayHorizontal,
  PcHorizontal_default as PcHorizontal,
  PciCard_default as PciCard,
  PciCardNetwork_default as PciCardNetwork,
  PciCardSound_default as PciCardSound,
  Peace_default as Peace,
  PeaceFill_default as PeaceFill,
  Pen_default as Pen,
  PenFill_default as PenFill,
  Pencil_default as Pencil,
  PencilFill_default as PencilFill,
  PencilSquare_default as PencilSquare,
  Pentagon_default as Pentagon,
  PentagonFill_default as PentagonFill,
  PentagonHalf_default as PentagonHalf,
  People_default as People,
  PeopleFill_default as PeopleFill,
  Percent_default as Percent,
  Person_default as Person,
  PersonAdd_default as PersonAdd,
  PersonArmsUp_default as PersonArmsUp,
  PersonBadge_default as PersonBadge,
  PersonBadgeFill_default as PersonBadgeFill,
  PersonBoundingBox_default as PersonBoundingBox,
  PersonCheck_default as PersonCheck,
  PersonCheckFill_default as PersonCheckFill,
  PersonCircle_default as PersonCircle,
  PersonDash_default as PersonDash,
  PersonDashFill_default as PersonDashFill,
  PersonDown_default as PersonDown,
  PersonExclamation_default as PersonExclamation,
  PersonFill_default as PersonFill,
  PersonFillAdd_default as PersonFillAdd,
  PersonFillCheck_default as PersonFillCheck,
  PersonFillDash_default as PersonFillDash,
  PersonFillDown_default as PersonFillDown,
  PersonFillExclamation_default as PersonFillExclamation,
  PersonFillGear_default as PersonFillGear,
  PersonFillLock_default as PersonFillLock,
  PersonFillSlash_default as PersonFillSlash,
  PersonFillUp_default as PersonFillUp,
  PersonFillX_default as PersonFillX,
  PersonGear_default as PersonGear,
  PersonHeart_default as PersonHeart,
  PersonHearts_default as PersonHearts,
  PersonLinesFill_default as PersonLinesFill,
  PersonLock_default as PersonLock,
  PersonPlus_default as PersonPlus,
  PersonPlusFill_default as PersonPlusFill,
  PersonRaisedHand_default as PersonRaisedHand,
  PersonRolodex_default as PersonRolodex,
  PersonSlash_default as PersonSlash,
  PersonSquare_default as PersonSquare,
  PersonStanding_default as PersonStanding,
  PersonStandingDress_default as PersonStandingDress,
  PersonUp_default as PersonUp,
  PersonVcard_default as PersonVcard,
  PersonVcardFill_default as PersonVcardFill,
  PersonVideo_default as PersonVideo,
  PersonVideo2_default as PersonVideo2,
  PersonVideo3_default as PersonVideo3,
  PersonWalking_default as PersonWalking,
  PersonWheelchair_default as PersonWheelchair,
  PersonWorkspace_default as PersonWorkspace,
  PersonX_default as PersonX,
  PersonXFill_default as PersonXFill,
  Phone_default as Phone,
  PhoneFill_default as PhoneFill,
  PhoneFlip_default as PhoneFlip,
  PhoneLandscape_default as PhoneLandscape,
  PhoneLandscapeFill_default as PhoneLandscapeFill,
  PhoneVibrate_default as PhoneVibrate,
  PhoneVibrateFill_default as PhoneVibrateFill,
  PieChart_default as PieChart,
  PieChartFill_default as PieChartFill,
  PiggyBank_default as PiggyBank,
  PiggyBankFill_default as PiggyBankFill,
  Pin_default as Pin,
  PinAngle_default as PinAngle,
  PinAngleFill_default as PinAngleFill,
  PinFill_default as PinFill,
  PinMap_default as PinMap,
  PinMapFill_default as PinMapFill,
  Pinterest_default as Pinterest,
  Pip_default as Pip,
  PipFill_default as PipFill,
  Play_default as Play,
  PlayBtn_default as PlayBtn,
  PlayBtnFill_default as PlayBtnFill,
  PlayCircle_default as PlayCircle,
  PlayCircleFill_default as PlayCircleFill,
  PlayFill_default as PlayFill,
  Playstation_default as Playstation,
  Plug_default as Plug,
  PlugFill_default as PlugFill,
  Plugin_default as Plugin,
  Plus_default as Plus,
  PlusCircle_default as PlusCircle,
  PlusCircleDotted_default as PlusCircleDotted,
  PlusCircleFill_default as PlusCircleFill,
  PlusLg_default as PlusLg,
  PlusSlashMinus_default as PlusSlashMinus,
  PlusSquare_default as PlusSquare,
  PlusSquareDotted_default as PlusSquareDotted,
  PlusSquareFill_default as PlusSquareFill,
  Postage_default as Postage,
  PostageFill_default as PostageFill,
  PostageHeart_default as PostageHeart,
  PostageHeartFill_default as PostageHeartFill,
  Postcard_default as Postcard,
  PostcardFill_default as PostcardFill,
  PostcardHeart_default as PostcardHeart,
  PostcardHeartFill_default as PostcardHeartFill,
  Power_default as Power,
  Prescription_default as Prescription,
  Prescription2_default as Prescription2,
  Printer_default as Printer,
  PrinterFill_default as PrinterFill,
  Projector_default as Projector,
  ProjectorFill_default as ProjectorFill,
  Puzzle_default as Puzzle,
  PuzzleFill_default as PuzzleFill,
  QrCode_default as QrCode,
  QrCodeScan_default as QrCodeScan,
  Question_default as Question,
  QuestionCircle_default as QuestionCircle,
  QuestionCircleFill_default as QuestionCircleFill,
  QuestionDiamond_default as QuestionDiamond,
  QuestionDiamondFill_default as QuestionDiamondFill,
  QuestionLg_default as QuestionLg,
  QuestionOctagon_default as QuestionOctagon,
  QuestionOctagonFill_default as QuestionOctagonFill,
  QuestionSquare_default as QuestionSquare,
  QuestionSquareFill_default as QuestionSquareFill,
  Quora_default as Quora,
  Quote_default as Quote,
  RCircle_default as RCircle,
  RCircleFill_default as RCircleFill,
  RSquare_default as RSquare,
  RSquareFill_default as RSquareFill,
  Radar_default as Radar,
  Radioactive_default as Radioactive,
  Rainbow_default as Rainbow,
  Receipt_default as Receipt,
  ReceiptCutoff_default as ReceiptCutoff,
  Reception0_default as Reception0,
  Reception1_default as Reception1,
  Reception2_default as Reception2,
  Reception3_default as Reception3,
  Reception4_default as Reception4,
  Record_default as Record,
  Record2_default as Record2,
  Record2Fill_default as Record2Fill,
  RecordBtn_default as RecordBtn,
  RecordBtnFill_default as RecordBtnFill,
  RecordCircle_default as RecordCircle,
  RecordCircleFill_default as RecordCircleFill,
  RecordFill_default as RecordFill,
  Recycle_default as Recycle,
  Reddit_default as Reddit,
  Regex_default as Regex,
  Repeat_default as Repeat,
  Repeat1_default as Repeat1,
  Reply_default as Reply,
  ReplyAll_default as ReplyAll,
  ReplyAllFill_default as ReplyAllFill,
  ReplyFill_default as ReplyFill,
  Rewind_default as Rewind,
  RewindBtn_default as RewindBtn,
  RewindBtnFill_default as RewindBtnFill,
  RewindCircle_default as RewindCircle,
  RewindCircleFill_default as RewindCircleFill,
  RewindFill_default as RewindFill,
  Robot_default as Robot,
  Rocket_default as Rocket,
  RocketFill_default as RocketFill,
  RocketTakeoff_default as RocketTakeoff,
  RocketTakeoffFill_default as RocketTakeoffFill,
  Router_default as Router,
  RouterFill_default as RouterFill,
  Rss_default as Rss,
  RssFill_default as RssFill,
  Rulers_default as Rulers,
  Safe_default as Safe,
  Safe2_default as Safe2,
  Safe2Fill_default as Safe2Fill,
  SafeFill_default as SafeFill,
  Save_default as Save,
  Save2_default as Save2,
  Save2Fill_default as Save2Fill,
  SaveFill_default as SaveFill,
  Scissors_default as Scissors,
  Scooter_default as Scooter,
  Screwdriver_default as Screwdriver,
  SdCard_default as SdCard,
  SdCardFill_default as SdCardFill,
  Search_default as Search,
  SearchHeart_default as SearchHeart,
  SearchHeartFill_default as SearchHeartFill,
  SegmentedNav_default as SegmentedNav,
  Send_default as Send,
  SendArrowDown_default as SendArrowDown,
  SendArrowDownFill_default as SendArrowDownFill,
  SendArrowUp_default as SendArrowUp,
  SendArrowUpFill_default as SendArrowUpFill,
  SendCheck_default as SendCheck,
  SendCheckFill_default as SendCheckFill,
  SendDash_default as SendDash,
  SendDashFill_default as SendDashFill,
  SendExclamation_default as SendExclamation,
  SendExclamationFill_default as SendExclamationFill,
  SendFill_default as SendFill,
  SendPlus_default as SendPlus,
  SendPlusFill_default as SendPlusFill,
  SendSlash_default as SendSlash,
  SendSlashFill_default as SendSlashFill,
  SendX_default as SendX,
  SendXFill_default as SendXFill,
  Server_default as Server,
  Shadows_default as Shadows,
  Share_default as Share,
  ShareFill_default as ShareFill,
  Shield_default as Shield,
  ShieldCheck_default as ShieldCheck,
  ShieldExclamation_default as ShieldExclamation,
  ShieldFill_default as ShieldFill,
  ShieldFillCheck_default as ShieldFillCheck,
  ShieldFillExclamation_default as ShieldFillExclamation,
  ShieldFillMinus_default as ShieldFillMinus,
  ShieldFillPlus_default as ShieldFillPlus,
  ShieldFillX_default as ShieldFillX,
  ShieldLock_default as ShieldLock,
  ShieldLockFill_default as ShieldLockFill,
  ShieldMinus_default as ShieldMinus,
  ShieldPlus_default as ShieldPlus,
  ShieldShaded_default as ShieldShaded,
  ShieldSlash_default as ShieldSlash,
  ShieldSlashFill_default as ShieldSlashFill,
  ShieldX_default as ShieldX,
  Shift_default as Shift,
  ShiftFill_default as ShiftFill,
  Shop_default as Shop,
  ShopWindow_default as ShopWindow,
  Shuffle_default as Shuffle,
  SignDeadEnd_default as SignDeadEnd,
  SignDeadEndFill_default as SignDeadEndFill,
  SignDoNotEnter_default as SignDoNotEnter,
  SignDoNotEnterFill_default as SignDoNotEnterFill,
  SignIntersection_default as SignIntersection,
  SignIntersectionFill_default as SignIntersectionFill,
  SignIntersectionSide_default as SignIntersectionSide,
  SignIntersectionSideFill_default as SignIntersectionSideFill,
  SignIntersectionT_default as SignIntersectionT,
  SignIntersectionTFill_default as SignIntersectionTFill,
  SignIntersectionY_default as SignIntersectionY,
  SignIntersectionYFill_default as SignIntersectionYFill,
  SignMergeLeft_default as SignMergeLeft,
  SignMergeLeftFill_default as SignMergeLeftFill,
  SignMergeRight_default as SignMergeRight,
  SignMergeRightFill_default as SignMergeRightFill,
  SignNoLeftTurn_default as SignNoLeftTurn,
  SignNoLeftTurnFill_default as SignNoLeftTurnFill,
  SignNoParking_default as SignNoParking,
  SignNoParkingFill_default as SignNoParkingFill,
  SignNoRightTurn_default as SignNoRightTurn,
  SignNoRightTurnFill_default as SignNoRightTurnFill,
  SignRailroad_default as SignRailroad,
  SignRailroadFill_default as SignRailroadFill,
  SignStop_default as SignStop,
  SignStopFill_default as SignStopFill,
  SignStopLights_default as SignStopLights,
  SignStopLightsFill_default as SignStopLightsFill,
  SignTurnLeft_default as SignTurnLeft,
  SignTurnLeftFill_default as SignTurnLeftFill,
  SignTurnRight_default as SignTurnRight,
  SignTurnRightFill_default as SignTurnRightFill,
  SignTurnSlightLeft_default as SignTurnSlightLeft,
  SignTurnSlightLeftFill_default as SignTurnSlightLeftFill,
  SignTurnSlightRight_default as SignTurnSlightRight,
  SignTurnSlightRightFill_default as SignTurnSlightRightFill,
  SignYield_default as SignYield,
  SignYieldFill_default as SignYieldFill,
  Signal_default as Signal,
  Signpost_default as Signpost,
  Signpost2_default as Signpost2,
  Signpost2Fill_default as Signpost2Fill,
  SignpostFill_default as SignpostFill,
  SignpostSplit_default as SignpostSplit,
  SignpostSplitFill_default as SignpostSplitFill,
  Sim_default as Sim,
  SimFill_default as SimFill,
  SimSlash_default as SimSlash,
  SimSlashFill_default as SimSlashFill,
  SinaWeibo_default as SinaWeibo,
  SkipBackward_default as SkipBackward,
  SkipBackwardBtn_default as SkipBackwardBtn,
  SkipBackwardBtnFill_default as SkipBackwardBtnFill,
  SkipBackwardCircle_default as SkipBackwardCircle,
  SkipBackwardCircleFill_default as SkipBackwardCircleFill,
  SkipBackwardFill_default as SkipBackwardFill,
  SkipEnd_default as SkipEnd,
  SkipEndBtn_default as SkipEndBtn,
  SkipEndBtnFill_default as SkipEndBtnFill,
  SkipEndCircle_default as SkipEndCircle,
  SkipEndCircleFill_default as SkipEndCircleFill,
  SkipEndFill_default as SkipEndFill,
  SkipForward_default as SkipForward,
  SkipForwardBtn_default as SkipForwardBtn,
  SkipForwardBtnFill_default as SkipForwardBtnFill,
  SkipForwardCircle_default as SkipForwardCircle,
  SkipForwardCircleFill_default as SkipForwardCircleFill,
  SkipForwardFill_default as SkipForwardFill,
  SkipStart_default as SkipStart,
  SkipStartBtn_default as SkipStartBtn,
  SkipStartBtnFill_default as SkipStartBtnFill,
  SkipStartCircle_default as SkipStartCircle,
  SkipStartCircleFill_default as SkipStartCircleFill,
  SkipStartFill_default as SkipStartFill,
  Skype_default as Skype,
  Slack_default as Slack,
  Slash_default as Slash,
  SlashCircle_default as SlashCircle,
  SlashCircleFill_default as SlashCircleFill,
  SlashLg_default as SlashLg,
  SlashSquare_default as SlashSquare,
  SlashSquareFill_default as SlashSquareFill,
  Sliders_default as Sliders,
  Sliders2_default as Sliders2,
  Sliders2Vertical_default as Sliders2Vertical,
  Smartwatch_default as Smartwatch,
  Snapchat_default as Snapchat,
  Snow_default as Snow,
  Snow2_default as Snow2,
  Snow3_default as Snow3,
  SortAlphaDown_default as SortAlphaDown,
  SortAlphaDownAlt_default as SortAlphaDownAlt,
  SortAlphaUp_default as SortAlphaUp,
  SortAlphaUpAlt_default as SortAlphaUpAlt,
  SortDown_default as SortDown,
  SortDownAlt_default as SortDownAlt,
  SortNumericDown_default as SortNumericDown,
  SortNumericDownAlt_default as SortNumericDownAlt,
  SortNumericUp_default as SortNumericUp,
  SortNumericUpAlt_default as SortNumericUpAlt,
  SortUp_default as SortUp,
  SortUpAlt_default as SortUpAlt,
  Soundwave_default as Soundwave,
  Sourceforge_default as Sourceforge,
  Speaker_default as Speaker,
  SpeakerFill_default as SpeakerFill,
  Speedometer_default as Speedometer,
  Speedometer2_default as Speedometer2,
  Spellcheck_default as Spellcheck,
  Spotify_default as Spotify,
  Square_default11 as Square,
  SquareFill_default11 as SquareFill,
  SquareHalf_default as SquareHalf,
  Stack_default as Stack,
  StackOverflow_default as StackOverflow,
  Star_default as Star,
  StarFill_default as StarFill,
  StarHalf_default as StarHalf,
  Stars_default as Stars,
  Steam_default as Steam,
  Stickies_default as Stickies,
  StickiesFill_default as StickiesFill,
  Sticky_default as Sticky,
  StickyFill_default as StickyFill,
  Stop_default as Stop,
  StopBtn_default as StopBtn,
  StopBtnFill_default as StopBtnFill,
  StopCircle_default as StopCircle,
  StopCircleFill_default as StopCircleFill,
  StopFill_default as StopFill,
  Stoplights_default as Stoplights,
  StoplightsFill_default as StoplightsFill,
  Stopwatch_default as Stopwatch,
  StopwatchFill_default as StopwatchFill,
  Strava_default as Strava,
  Stripe_default as Stripe,
  Subscript_default as Subscript,
  Substack_default as Substack,
  Subtract_default as Subtract,
  SuitClub_default as SuitClub,
  SuitClubFill_default as SuitClubFill,
  SuitDiamond_default as SuitDiamond,
  SuitDiamondFill_default as SuitDiamondFill,
  SuitHeart_default as SuitHeart,
  SuitHeartFill_default as SuitHeartFill,
  SuitSpade_default as SuitSpade,
  SuitSpadeFill_default as SuitSpadeFill,
  Suitcase_default as Suitcase,
  Suitcase2_default as Suitcase2,
  Suitcase2Fill_default as Suitcase2Fill,
  SuitcaseFill_default as SuitcaseFill,
  SuitcaseLg_default as SuitcaseLg,
  SuitcaseLgFill_default as SuitcaseLgFill,
  Sun_default as Sun,
  SunFill_default as SunFill,
  Sunglasses_default as Sunglasses,
  Sunrise_default as Sunrise,
  SunriseFill_default as SunriseFill,
  Sunset_default as Sunset,
  SunsetFill_default as SunsetFill,
  Superscript_default as Superscript,
  SymmetryHorizontal_default as SymmetryHorizontal,
  SymmetryVertical_default as SymmetryVertical,
  Table_default as Table,
  Tablet_default as Tablet,
  TabletFill_default as TabletFill,
  TabletLandscape_default as TabletLandscape,
  TabletLandscapeFill_default as TabletLandscapeFill,
  Tag_default as Tag,
  TagFill_default as TagFill,
  Tags_default as Tags,
  TagsFill_default as TagsFill,
  TaxiFront_default as TaxiFront,
  TaxiFrontFill_default as TaxiFrontFill,
  Telegram_default as Telegram,
  Telephone_default as Telephone,
  TelephoneFill_default as TelephoneFill,
  TelephoneForward_default as TelephoneForward,
  TelephoneForwardFill_default as TelephoneForwardFill,
  TelephoneInbound_default as TelephoneInbound,
  TelephoneInboundFill_default as TelephoneInboundFill,
  TelephoneMinus_default as TelephoneMinus,
  TelephoneMinusFill_default as TelephoneMinusFill,
  TelephoneOutbound_default as TelephoneOutbound,
  TelephoneOutboundFill_default as TelephoneOutboundFill,
  TelephonePlus_default as TelephonePlus,
  TelephonePlusFill_default as TelephonePlusFill,
  TelephoneX_default as TelephoneX,
  TelephoneXFill_default as TelephoneXFill,
  TencentQq_default as TencentQq,
  Terminal_default as Terminal,
  TerminalDash_default as TerminalDash,
  TerminalFill_default as TerminalFill,
  TerminalPlus_default as TerminalPlus,
  TerminalSplit_default as TerminalSplit,
  TerminalX_default as TerminalX,
  TextCenter_default as TextCenter,
  TextIndentLeft_default as TextIndentLeft,
  TextIndentRight_default as TextIndentRight,
  TextLeft_default as TextLeft,
  TextParagraph_default as TextParagraph,
  TextRight_default as TextRight,
  TextWrap_default as TextWrap,
  Textarea_default as Textarea,
  TextareaResize_default as TextareaResize,
  TextareaT_default as TextareaT,
  Thermometer_default as Thermometer,
  ThermometerHalf_default as ThermometerHalf,
  ThermometerHigh_default as ThermometerHigh,
  ThermometerLow_default as ThermometerLow,
  ThermometerSnow_default as ThermometerSnow,
  ThermometerSun_default as ThermometerSun,
  Threads_default as Threads,
  ThreadsFill_default as ThreadsFill,
  ThreeDots_default as ThreeDots,
  ThreeDotsVertical_default as ThreeDotsVertical,
  Thunderbolt_default as Thunderbolt,
  ThunderboltFill_default as ThunderboltFill,
  Ticket_default as Ticket,
  TicketDetailed_default as TicketDetailed,
  TicketDetailedFill_default as TicketDetailedFill,
  TicketFill_default as TicketFill,
  TicketPerforated_default as TicketPerforated,
  TicketPerforatedFill_default as TicketPerforatedFill,
  Tiktok_default as Tiktok,
  Toggle2Off_default as Toggle2Off,
  Toggle2On_default as Toggle2On,
  ToggleOff_default as ToggleOff,
  ToggleOn_default as ToggleOn,
  Toggles_default as Toggles,
  Toggles2_default as Toggles2,
  Tools_default as Tools,
  Tornado_default as Tornado,
  TrainFreightFront_default as TrainFreightFront,
  TrainFreightFrontFill_default as TrainFreightFrontFill,
  TrainFront_default as TrainFront,
  TrainFrontFill_default as TrainFrontFill,
  TrainLightrailFront_default as TrainLightrailFront,
  TrainLightrailFrontFill_default as TrainLightrailFrontFill,
  Translate_default as Translate,
  Transparency_default as Transparency,
  Trash_default as Trash,
  Trash2_default as Trash2,
  Trash2Fill_default as Trash2Fill,
  Trash3_default as Trash3,
  Trash3Fill_default as Trash3Fill,
  TrashFill_default as TrashFill,
  Tree_default as Tree,
  TreeFill_default as TreeFill,
  Trello_default as Trello,
  Triangle_default as Triangle,
  TriangleFill_default as TriangleFill,
  TriangleHalf_default as TriangleHalf,
  Trophy_default as Trophy,
  TrophyFill_default as TrophyFill,
  TropicalStorm_default as TropicalStorm,
  Truck_default as Truck,
  TruckFlatbed_default as TruckFlatbed,
  TruckFront_default as TruckFront,
  TruckFrontFill_default as TruckFrontFill,
  Tsunami_default as Tsunami,
  Tv_default as Tv,
  TvFill_default as TvFill,
  Twitch_default as Twitch,
  Twitter_default as Twitter,
  TwitterX_default as TwitterX,
  Type_default as Type,
  TypeBold_default as TypeBold,
  TypeH1_default as TypeH1,
  TypeH2_default as TypeH2,
  TypeH3_default as TypeH3,
  TypeH4_default as TypeH4,
  TypeH5_default as TypeH5,
  TypeH6_default as TypeH6,
  TypeItalic_default as TypeItalic,
  TypeStrikethrough_default as TypeStrikethrough,
  TypeUnderline_default as TypeUnderline,
  Ubuntu_default as Ubuntu,
  UiChecks_default as UiChecks,
  UiChecksGrid_default as UiChecksGrid,
  UiRadios_default as UiRadios,
  UiRadiosGrid_default as UiRadiosGrid,
  Umbrella_default as Umbrella,
  UmbrellaFill_default as UmbrellaFill,
  Unindent_default as Unindent,
  Union_default as Union,
  Unity_default as Unity,
  UniversalAccess_default as UniversalAccess,
  UniversalAccessCircle_default as UniversalAccessCircle,
  Unlock_default as Unlock,
  UnlockFill_default as UnlockFill,
  Upc_default as Upc,
  UpcScan_default as UpcScan,
  Upload_default as Upload,
  Usb_default as Usb,
  UsbC_default as UsbC,
  UsbCFill_default as UsbCFill,
  UsbDrive_default as UsbDrive,
  UsbDriveFill_default as UsbDriveFill,
  UsbFill_default as UsbFill,
  UsbMicro_default as UsbMicro,
  UsbMicroFill_default as UsbMicroFill,
  UsbMini_default as UsbMini,
  UsbMiniFill_default as UsbMiniFill,
  UsbPlug_default as UsbPlug,
  UsbPlugFill_default as UsbPlugFill,
  UsbSymbol_default as UsbSymbol,
  Valentine_default as Valentine,
  Valentine2_default as Valentine2,
  VectorPen_default as VectorPen,
  ViewList_default as ViewList,
  ViewStacked_default as ViewStacked,
  Vignette_default as Vignette,
  Vimeo_default as Vimeo,
  Vinyl_default as Vinyl,
  VinylFill_default as VinylFill,
  Virus_default as Virus,
  Virus2_default as Virus2,
  Voicemail_default as Voicemail,
  VolumeDown_default as VolumeDown,
  VolumeDownFill_default as VolumeDownFill,
  VolumeMute_default as VolumeMute,
  VolumeMuteFill_default as VolumeMuteFill,
  VolumeOff_default as VolumeOff,
  VolumeOffFill_default as VolumeOffFill,
  VolumeUp_default as VolumeUp,
  VolumeUpFill_default as VolumeUpFill,
  Vr_default as Vr,
  Wallet_default as Wallet,
  Wallet2_default as Wallet2,
  WalletFill_default as WalletFill,
  Watch_default as Watch,
  Water_default as Water,
  Webcam_default as Webcam,
  WebcamFill_default as WebcamFill,
  Wechat_default as Wechat,
  Whatsapp_default as Whatsapp,
  Wifi_default as Wifi,
  Wifi1_default as Wifi1,
  Wifi2_default as Wifi2,
  WifiOff_default as WifiOff,
  Wikipedia_default as Wikipedia,
  Wind_default as Wind,
  Window_default as Window,
  WindowDash_default as WindowDash,
  WindowDesktop_default as WindowDesktop,
  WindowDock_default as WindowDock,
  WindowFullscreen_default as WindowFullscreen,
  WindowPlus_default as WindowPlus,
  WindowSidebar_default as WindowSidebar,
  WindowSplit_default as WindowSplit,
  WindowStack_default as WindowStack,
  WindowX_default as WindowX,
  Windows_default as Windows,
  Wordpress_default as Wordpress,
  Wrench_default as Wrench,
  WrenchAdjustable_default as WrenchAdjustable,
  WrenchAdjustableCircle_default as WrenchAdjustableCircle,
  WrenchAdjustableCircleFill_default as WrenchAdjustableCircleFill,
  X_default as X,
  XCircle_default as XCircle,
  XCircleFill_default as XCircleFill,
  XDiamond_default as XDiamond,
  XDiamondFill_default as XDiamondFill,
  XLg_default as XLg,
  XOctagon_default as XOctagon,
  XOctagonFill_default as XOctagonFill,
  XSquare_default as XSquare,
  XSquareFill_default as XSquareFill,
  Xbox_default as Xbox,
  Yelp_default as Yelp,
  YinYang_default as YinYang,
  Youtube_default as Youtube,
  ZoomIn_default as ZoomIn,
  ZoomOut_default as ZoomOut,
  Circle_default as _0Circle,
  CircleFill_default as _0CircleFill,
  Square_default as _0Square,
  SquareFill_default as _0SquareFill,
  __default as _123,
  Circle_default2 as _1Circle,
  CircleFill_default2 as _1CircleFill,
  Square_default2 as _1Square,
  SquareFill_default2 as _1SquareFill,
  Circle_default3 as _2Circle,
  CircleFill_default3 as _2CircleFill,
  Square_default3 as _2Square,
  SquareFill_default3 as _2SquareFill,
  Circle_default4 as _3Circle,
  CircleFill_default4 as _3CircleFill,
  Square_default4 as _3Square,
  SquareFill_default4 as _3SquareFill,
  Circle_default5 as _4Circle,
  CircleFill_default5 as _4CircleFill,
  Square_default5 as _4Square,
  SquareFill_default5 as _4SquareFill,
  Circle_default6 as _5Circle,
  CircleFill_default6 as _5CircleFill,
  Square_default6 as _5Square,
  SquareFill_default6 as _5SquareFill,
  Circle_default7 as _6Circle,
  CircleFill_default7 as _6CircleFill,
  Square_default7 as _6Square,
  SquareFill_default7 as _6SquareFill,
  Circle_default8 as _7Circle,
  CircleFill_default8 as _7CircleFill,
  Square_default8 as _7Square,
  SquareFill_default8 as _7SquareFill,
  Circle_default9 as _8Circle,
  CircleFill_default9 as _8CircleFill,
  Square_default9 as _8Square,
  SquareFill_default9 as _8SquareFill,
  Circle_default10 as _9Circle,
  CircleFill_default10 as _9CircleFill,
  Square_default10 as _9Square,
  SquareFill_default10 as _9SquareFill
};
//# sourceMappingURL=svelte-bootstrap-icons.js.map
